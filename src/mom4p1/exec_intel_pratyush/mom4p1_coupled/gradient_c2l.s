	.section .text
.LNDBG_TX:
# mark_description "Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 16.0.3.210 Build 20160415";
# mark_description "-I/home/CMIP/prajeesh/IITM-ESMv2/src/mom4p1/src/shared/mosaic -I/opt/cray/pe/libsci/17.09.1/INTEL/16.0/x86_6";
# mark_description "4/include -I/opt/cray/pe/netcdf/4.4.1.1.3/INTEL/16.0/include -I/opt/cray/pe/mpt/7.6.3/gni/mpich-intel/16.0/i";
# mark_description "nclude -I/opt/cray/pe/hdf5/1.10.0.3/INTEL/16.0/include -I/opt/cray/rca/2.2.11-6.0.4.0_13.2__g84de67a.ari/inc";
# mark_description "lude -I/opt/cray/alps/6.4.3-6.0.4.1_2.1__g92a2fc0.ari/include -I/opt/cray/xpmem/2.2.2-6.0.4.1_18.1__g43b0535";
# mark_description ".ari/include -I/opt/cray/gni-headers/5.0.11-6.0.4.0_7.2__g7136988.ari/include -I/opt/cray/pe/pmi/5.0.12/incl";
# mark_description "ude -I/opt/cray/ugni/6.0.14-6.0.4.0_14.1__ge7db4a2.ari/include -I/opt/cray/udreg/2.3.2-6.0.4.0_12.2__g2f9c3e";
# mark_description "e.ari/include -I/opt/cray/wlm_detect/1.2.1-6.0.4.0_22.1__gd26a3dc.ari/include -I/opt/cray/krca/2.2.2-6.0.4.1";
# mark_description "_18.3__g4614cf3.ari/include -I/opt/cray-hss-devel/8.0.0/include -xCORE-AVX2 -D__CRAYXC -D__CRAY_BROADWELL -D";
# mark_description "__CRAYXT_COMPUTE_LINUX_TARGET -Duse_netCDF4 -Duse_libMPI -DENABLE_ODA -DUSE_OCEAN_BGC -g -O3 -save-temps -c";
	.file "gradient_c2l.c"
	.text
..TXTST0:
.L_2__routine_start_grad_c2l__0:
# -- Begin  grad_c2l_
	.text
# mark_begin;
       .align    16,0x90
	.globl grad_c2l_
# --- grad_c2l_(const int *, const int *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, double *, double *, const int *, const int *, const int *, const int *)
grad_c2l_:
# parameter 1(nlon): %rdi
# parameter 2(nlat): %rsi
# parameter 3(pin): %rdx
# parameter 4(dx): %rcx
# parameter 5(dy): %r8
# parameter 6(area): %r9
# parameter 7(edge_w): 16 + %rbp
# parameter 8(edge_e): 24 + %rbp
# parameter 9(edge_s): 32 + %rbp
# parameter 10(edge_n): 40 + %rbp
# parameter 11(en_n): 48 + %rbp
# parameter 12(en_e): 56 + %rbp
# parameter 13(vlon): 64 + %rbp
# parameter 14(vlat): 72 + %rbp
# parameter 15(grad_x): 80 + %rbp
# parameter 16(grad_y): 88 + %rbp
# parameter 17(on_west_edge): 96 + %rbp
# parameter 18(on_east_edge): 104 + %rbp
# parameter 19(on_south_edge): 112 + %rbp
# parameter 20(on_north_edge): 120 + %rbp
..B1.1:                         # Preds ..B1.0
	.cfi_startproc
..___tag_value_grad_c2l_.2:
..L3:
                                                          #62.1
..LN0:
	.file   1 "/home/CMIP/prajeesh/IITM-ESMv2/src/mom4p1/src/shared/mosaic/gradient_c2l.c"
	.loc    1  62  is_stmt 1
        pushq     %rbp                                          #62.1
	.cfi_def_cfa_offset 16
..LN1:
        movq      %rsp, %rbp                                    #62.1
	.cfi_def_cfa 6, 16
	.cfi_offset 6, -16
..LN2:
        andq      $-32, %rsp                                    #62.1
..LN3:
        pushq     %r12                                          #62.1
..LN4:
        pushq     %r13                                          #62.1
..LN5:
        pushq     %r14                                          #62.1
..LN6:
        pushq     %r15                                          #62.1
..LN7:
        pushq     %rbx                                          #62.1
..LN8:
        subq      $280, %rsp                                    #62.1
	.cfi_escape 0x10, 0x03, 0x0e, 0x38, 0x1c, 0x0d, 0xe0, 0xff, 0xff, 0xff, 0x1a, 0x0d, 0xd8, 0xff, 0xff, 0xff, 0x22
	.cfi_escape 0x10, 0x0c, 0x0e, 0x38, 0x1c, 0x0d, 0xe0, 0xff, 0xff, 0xff, 0x1a, 0x0d, 0xf8, 0xff, 0xff, 0xff, 0x22
	.cfi_escape 0x10, 0x0d, 0x0e, 0x38, 0x1c, 0x0d, 0xe0, 0xff, 0xff, 0xff, 0x1a, 0x0d, 0xf0, 0xff, 0xff, 0xff, 0x22
	.cfi_escape 0x10, 0x0e, 0x0e, 0x38, 0x1c, 0x0d, 0xe0, 0xff, 0xff, 0xff, 0x1a, 0x0d, 0xe8, 0xff, 0xff, 0xff, 0x22
	.cfi_escape 0x10, 0x0f, 0x0e, 0x38, 0x1c, 0x0d, 0xe0, 0xff, 0xff, 0xff, 0x1a, 0x0d, 0xe0, 0xff, 0xff, 0xff, 0x22
..LN9:
        movq      %rdx, %r12                                    #62.1
..LN10:
	.loc    1  78  prologue_end  is_stmt 1
        movl      (%rsi), %eax                                  #78.12
..LN11:
	.loc    1  77  is_stmt 1
        movl      (%rdi), %r15d                                 #77.12
..LN12:
	.loc    1  111  is_stmt 1
        movslq    %r15d, %r15                                   #111.27
..LN13:
	.loc    1  62  is_stmt 1
        movq      %r9, 152(%rsp)                                #62.1
..LN14:
	.loc    1  79  is_stmt 1
        lea       1(%r15), %edi                                 #79.14
..LN15:
        movl      %edi, 208(%rsp)                               #79.14
..LN16:
	.loc    1  80  is_stmt 1
        lea       1(%rax), %r10d                                #80.14
..LN17:
	.loc    1  95  is_stmt 1
        movslq    %edi, %rdi                                    #95.27
..LN18:
        movq      %rdi, 200(%rsp)                               #95.27
..LN19:
	.loc    1  81  is_stmt 1
        imull     %r10d, %edi                                   #81.21
..LN20:
        movslq    %edi, %rdi                                    #81.21
..LN21:
        shlq      $3, %rdi                                      #81.21
..LN22:
	.loc    1  62  is_stmt 1
        movq      %r8, 136(%rsp)                                #62.1
..LN23:
        movq      %rcx, 216(%rsp)                               #62.1
..LN24:
	.loc    1  111  is_stmt 1
        movq      %r15, 144(%rsp)                               #111.27
..LN25:
	.loc    1  78  is_stmt 1
        movl      %eax, 184(%rsp)                               #78.12
..LN26:
	.loc    1  80  is_stmt 1
        movl      %r10d, 224(%rsp)                              #80.14
..LN27:
	.loc    1  81  is_stmt 1
#       malloc(size_t)
        call      malloc                                        #81.21
..LN28:
                                # LOE rax r12 r15 r15d r15b
..B1.349:                       # Preds ..B1.1
..LN29:
        movq      %rax, 192(%rsp)                               #81.21
..LN30:
                                # LOE r12 r15 r15d r15b
..B1.2:                         # Preds ..B1.349
..LN31:
	.loc    1  82  is_stmt 1
        movl      224(%rsp), %edi                               #82.21
..LN32:
        lea       (%r15,%r15,2), %eax                           #82.30
..LN33:
        imull     %eax, %edi                                    #82.21
..LN34:
        movslq    %edi, %rdi                                    #82.21
..LN35:
        shlq      $3, %rdi                                      #82.21
..LN36:
        movl      %eax, 176(%rsp)                               #82.30
..LN37:
#       malloc(size_t)
        call      malloc                                        #82.21
..LN38:
                                # LOE rax r12 r15 r15d r15b
..B1.350:                       # Preds ..B1.2
..LN39:
        movq      %rax, 128(%rsp)                               #82.21
..LN40:
                                # LOE r12 r15 r15d r15b
..B1.3:                         # Preds ..B1.350
..LN41:
	.loc    1  83  is_stmt 1
        movl      176(%rsp), %eax                               #83.34
..LN42:
        lea       3(%rax), %edi                                 #83.34
..LN43:
        imull     184(%rsp), %edi                               #83.21
..LN44:
        movslq    %edi, %rdi                                    #83.21
..LN45:
        shlq      $3, %rdi                                      #83.21
..LN46:
#       malloc(size_t)
        call      malloc                                        #83.21
..LN47:
                                # LOE rax r12 r15 r15d r15b
..B1.351:                       # Preds ..B1.3
..LN48:
        movq      %rax, 120(%rsp)                               #83.21
..LN49:
                                # LOE r12 r15 r15d r15b
..B1.4:                         # Preds ..B1.351
..LN50:
	.loc    1  84  is_stmt 1
        movl      184(%rsp), %edi                               #84.21
..LN51:
        imull     176(%rsp), %edi                               #84.21
..LN52:
        movslq    %edi, %rdi                                    #84.21
..LN53:
        shlq      $3, %rdi                                      #84.21
..LN54:
#       malloc(size_t)
        call      malloc                                        #84.21
..LN55:
                                # LOE rax r12 r15 r15d r15b
..B1.352:                       # Preds ..B1.4
..LN56:
        movq      %rax, 160(%rsp)                               #84.21
..LN57:
                                # LOE r12 r15 r15d r15b
..B1.5:                         # Preds ..B1.352
..LN58:
	.loc    1  62  is_stmt 1
        movq      112(%rbp), %rax                               #62.1
..LN59:
        movq      120(%rbp), %rcx                               #62.1
..LN60:
	.loc    1  144  is_stmt 1
        movq      %r15, %r9                                     #144.32
..LN61:
	.loc    1  62  is_stmt 1
        movq      96(%rbp), %rbx                                #62.1
..LN62:
        movq      104(%rbp), %r13                               #62.1
..LN63:
	.loc    1  85  is_stmt 1
        movl      (%rax), %edx                                  #85.91
..LN64:
	.loc    1  144  is_stmt 1
        lea       16(,%r9,8), %rdi                              #144.18
..LN65:
	.loc    1  85  is_stmt 1
        movl      (%rcx), %esi                                  #85.107
..LN66:
	.loc    1  144  is_stmt 1
        lea       (,%r9,8), %r8                                 #144.32
..LN67:
	.loc    1  85  is_stmt 1
        movl      (%rbx), %ebx                                  #85.62
..LN68:
        movl      (%r13), %r13d                                 #85.77
..LN69:
        movl      %edx, 112(%rsp)                               #85.91
..LN70:
        movl      %esi, 104(%rsp)                               #85.107
..LN71:
	.loc    1  144  is_stmt 1
        movq      %r8, 8(%rsp)                                  #144.32
..LN72:
#       malloc(size_t)
        call      malloc                                        #144.18
..LN73:
                                # LOE rax r12 r15 ebx r13d r15d r15b
..B1.353:                       # Preds ..B1.5
..LN74:
        movq      %rax, %r14                                    #144.18
..LN75:
                                # LOE r12 r14 r15 ebx r13d r15d r15b
..B1.6:                         # Preds ..B1.353
..LN76:
	.loc    1  145  is_stmt 1
        movslq    184(%rsp), %rax                               #145.18
..LN77:
        lea       16(,%rax,8), %rdi                             #145.18
..LN78:
#       malloc(size_t)
        call      malloc                                        #145.18
..LN79:
                                # LOE rax r12 r14 r15 ebx r13d r15d r15b
..B1.354:                       # Preds ..B1.6
..LN80:
        movq      %rax, %rcx                                    #145.18
..LN81:
                                # LOE rcx r12 r14 r15 ebx r13d r15d r15b
..B1.7:                         # Preds ..B1.354
..LN82:
	.loc    1  151  is_stmt 1
        movl      $1, %eax                                      #151.5
..LN83:
        testl     %ebx, %ebx                                    #151.5
..LN84:
	.loc    1  159  is_stmt 1
        movl      112(%rsp), %esi                               #159.5
..LN85:
	.loc    1  151  is_stmt 1
        cmove     %ebx, %eax                                    #151.5
..LN86:
        movl      $1, %edx                                      #151.5
..LN87:
	.loc    1  155  is_stmt 1
        testl     %r13d, %r13d                                  #155.5
..LN88:
	.loc    1  151  is_stmt 1
        movl      %eax, 240(%rsp)                               #151.5
..LN89:
	.loc    1  155  is_stmt 1
        movl      208(%rsp), %eax                               #155.5
..LN90:
        cmovne    %r15d, %eax                                   #155.5
..LN91:
        xorl      %edi, %edi                                    #155.5
..LN92:
	.loc    1  159  is_stmt 1
        testl     %esi, %esi                                    #159.5
..LN93:
	.loc    1  166  is_stmt 1
        movl      %edi, 24(%rsp)                                #166.3
..LN94:
	.loc    1  159  is_stmt 1
        cmove     %esi, %edx                                    #159.5
..LN95:
	.loc    1  163  is_stmt 1
        cmpl      $0, 104(%rsp)                                 #163.5
..LN96:
        movl      224(%rsp), %esi                               #163.5
..LN97:
        cmovne    184(%rsp), %esi                               #163.5
..LN98:
	.loc    1  166  is_stmt 1
        movl      %edi, 16(%rsp)                                #166.34
..LN99:
        cmpl      %esi, %edx                                    #166.19
..LN100:
        jge       ..B1.33       # Prob 9%                       #166.19
..LN101:
                                # LOE rcx r12 r14 r15 eax edx ebx esi r13d r15d r15b
..B1.8:                         # Preds ..B1.7
..LN102:
        movl      %esi, %r9d                                    #166.7
..LN103:
	.loc    1  167  is_stmt 1
        lea       2(%r15), %edi                                 #167.37
..LN104:
	.loc    1  166  is_stmt 1
        subl      %edx, %r9d                                    #166.7
..LN105:
        movl      %eax, %r8d                                    #166.30
..LN106:
        movl      %r9d, 48(%rsp)                                #166.7
..LN107:
        lea       -1(%rdx), %r9d                                #
..LN108:
	.loc    1  167  is_stmt 1
        movl      208(%rsp), %r11d                              #167.5
..LN109:
        imull     %r9d, %r11d                                   #167.5
..LN110:
        imull     %edi, %r9d                                    #167.5
..LN111:
        imull     %edx, %edi                                    #167.5
..LN112:
        vmovsd    .L_2il0floatpacket.1(%rip), %xmm0             #167.21
..LN113:
        vmovupd   .L_2il0floatpacket.0(%rip), %ymm1             #167.21
..LN114:
	.loc    1  166  is_stmt 1
        movl      240(%rsp), %r10d                              #166.30
..LN115:
        subl      %r10d, %r8d                                   #166.30
..LN116:
        movslq    %r8d, %r8                                     #166.30
..LN117:
        movl      %esi, 88(%rsp)                                #166.34
..LN118:
	.loc    1  167  is_stmt 1
        addl      %r15d, %r10d                                  #167.27
..LN119:
        addl      %r10d, %r11d                                  #167.5
..LN120:
        addl      %r10d, %r9d                                   #167.45
..LN121:
	.loc    1  168  is_stmt 1
        addl      %edi, %r10d                                   #168.28
..LN122:
	.loc    1  166  is_stmt 1
        xorl      %edi, %edi                                    #166.34
..LN123:
        movq      %rcx, 72(%rsp)                                #166.34
..LN124:
        movl      %ebx, (%rsp)                                  #166.34
..LN125:
	.loc    1  167  is_stmt 1
        movl      %r11d, 32(%rsp)                               #167.5
..LN126:
	.loc    1  166  is_stmt 1
        movq      %r8, 40(%rsp)                                 #166.30
..LN127:
        movl      %eax, 248(%rsp)                               #166.34
..LN128:
        movl      %edx, 64(%rsp)                                #166.34
..LN129:
        movq      %r14, 80(%rsp)                                #166.34
..LN130:
        movl      %r13d, 96(%rsp)                               #166.34
..LN131:
        movl      %r15d, 232(%rsp)                              #166.34
..LN132:
        movl      %r10d, %ecx                                   #166.34
..LN133:
        movl      16(%rsp), %r10d                               #166.34
..LN134:
        movl      24(%rsp), %esi                                #166.34
..LN135:
        movq      192(%rsp), %rbx                               #166.34
..LN136:
                                # LOE rbx r12 ecx esi edi r8d r9d r10d xmm0 ymm1
..B1.9:                         # Preds ..B1.31 ..B1.8
..L13:          # optimization report
                # %s was not vectorized: inner loop was already vectorized
..LN137:
        movl      240(%rsp), %eax                               #166.46
..LN138:
        cmpl      248(%rsp), %eax                               #166.46
..LN139:
        jge       ..B1.31       # Prob 50%                      #166.46
..LN140:
                                # LOE rbx r12 ecx esi edi r8d r9d r10d xmm0 ymm1
..B1.10:                        # Preds ..B1.9
..LN141:
        cmpl      $16, %r8d                                     #166.30
..LN142:
        jl        ..B1.344      # Prob 10%                      #166.30
..LN143:
                                # LOE rbx r12 ecx esi edi r8d r9d r10d xmm0 ymm1
..B1.11:                        # Preds ..B1.10
..LN144:
	.loc    1  142  is_stmt 1
        movl      32(%rsp), %r13d                               #142.12
..LN145:
        lea       (%r13,%r10), %eax                             #142.12
..LN146:
	.loc    1  167  is_stmt 1
        movslq    %eax, %rax                                    #167.5
..LN147:
        lea       (%rbx,%rax,8), %r13                           #167.5
..LN148:
        lea       8(%r13), %r14                                 #167.5
..LN149:
	.loc    1  166  is_stmt 1
        andq      $31, %r14                                     #166.30
..LN150:
        movl      %r14d, %r14d                                  #166.30
..LN151:
        testl     %r14d, %r14d                                  #166.30
..LN152:
        je        ..B1.14       # Prob 50%                      #166.30
..LN153:
                                # LOE rbx r12 r13 r14 ecx esi edi r8d r9d r10d xmm0 ymm1
..B1.12:                        # Preds ..B1.11
..LN154:
        testl     $7, %r14d                                     #166.30
..LN155:
        jne       ..B1.344      # Prob 10%                      #166.30
..LN156:
                                # LOE rbx r12 r13 r14 ecx esi edi r8d r9d r10d xmm0 ymm1
..B1.13:                        # Preds ..B1.12
..LN157:
        negl      %r14d                                         #166.30
..LN158:
        addl      $32, %r14d                                    #166.30
..LN159:
        shrl      $3, %r14d                                     #166.30
..LN160:
                                # LOE rbx r12 r13 r14 ecx esi edi r8d r9d r10d xmm0 ymm1
..B1.14:                        # Preds ..B1.13 ..B1.11
..LN161:
        lea       16(%r14), %eax                                #166.30
..LN162:
        cmpl      %eax, %r8d                                    #166.30
..LN163:
        jl        ..B1.344      # Prob 10%                      #166.30
..LN164:
                                # LOE rbx r12 r13 r14 ecx esi edi r8d r9d r10d xmm0 ymm1
..B1.15:                        # Preds ..B1.14
..LN165:
        movl      %r8d, %eax                                    #166.30
..LN166:
	.loc    1  167  is_stmt 1
        lea       (%r9,%rdi), %r15d                             #167.27
..LN167:
        movslq    %r15d, %r15                                   #167.45
..LN168:
	.loc    1  168  is_stmt 1
        lea       (%rcx,%rdi), %r11d                            #168.6
..LN169:
        movslq    %r11d, %r11                                   #168.28
..LN170:
	.loc    1  166  is_stmt 1
        subl      %r14d, %eax                                   #166.30
..LN171:
        andl      $15, %eax                                     #166.30
..LN172:
        xorl      %edx, %edx                                    #166.30
..LN173:
        negl      %eax                                          #166.30
..LN174:
        addl      %r8d, %eax                                    #166.30
..LN175:
	.loc    1  167  is_stmt 1
        lea       (%r12,%r15,8), %r15                           #167.45
..LN176:
	.loc    1  168  is_stmt 1
        lea       (%r12,%r11,8), %r11                           #168.28
..LN177:
	.loc    1  166  is_stmt 1
        testq     %r14, %r14                                    #166.30
..LN178:
        jbe       ..B1.19       # Prob 10%                      #166.30
..LN179:
                                # LOE rdx rbx r11 r12 r13 r14 r15 eax ecx esi edi r8d r9d r10d xmm0 ymm1
..B1.17:                        # Preds ..B1.15 ..B1.17
..L14:          # optimization report
                # LOOP WAS UNROLLED BY 4
                # PEELED LOOP FOR VECTORIZATION
                # VECTORIZATION SPEEDUP COEFFECIENT 7.718750
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 0.375000
..LN180:
	.loc    1  167  is_stmt 1
        vmovsd    16(%r15,%rdx,8), %xmm2                        #167.27
..LN181:
        vaddsd    24(%r15,%rdx,8), %xmm2, %xmm3                 #167.45
..LN182:
	.loc    1  168  is_stmt 1
        vaddsd    16(%r11,%rdx,8), %xmm3, %xmm4                 #168.6
..LN183:
        vaddsd    24(%r11,%rdx,8), %xmm4, %xmm5                 #168.28
..LN184:
        vmulsd    %xmm5, %xmm0, %xmm6                           #168.28
..LN185:
	.loc    1  167  is_stmt 1
        vmovsd    %xmm6, 8(%r13,%rdx,8)                         #167.5
..LN186:
	.loc    1  166  is_stmt 1
        incq      %rdx                                          #166.30
..LN187:
        cmpq      %r14, %rdx                                    #166.30
..LN188:
        jb        ..B1.17       # Prob 82%                      #166.30
..LN189:
                                # LOE rdx rbx r11 r12 r13 r14 r15 eax ecx esi edi r8d r9d r10d xmm0 ymm1
..B1.19:                        # Preds ..B1.17 ..B1.15
..LN190:
        movslq    %eax, %rdx                                    #166.30
..LN191:
                                # LOE rdx rbx r11 r12 r13 r14 r15 eax ecx esi edi r8d r9d r10d xmm0 ymm1
..B1.20:                        # Preds ..B1.20 ..B1.19
..L15:          # optimization report
                # LOOP WAS UNROLLED BY 4
                # LOOP WAS VECTORIZED
                # VECTORIZATION HAS UNALIGNED MEMORY REFERENCES
                # VECTORIZATION SPEEDUP COEFFECIENT 7.718750
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 0.375000
                # MAIN VECTOR TYPE: 64-bits floating point
..LN192:
	.loc    1  167  is_stmt 1
        vmovupd   16(%r15,%r14,8), %ymm2                        #167.27
..LN193:
        vmovupd   48(%r15,%r14,8), %ymm7                        #167.27
..LN194:
        vmovupd   80(%r15,%r14,8), %ymm12                       #167.27
..LN195:
        vaddpd    24(%r15,%r14,8), %ymm2, %ymm3                 #167.45
..LN196:
        vaddpd    56(%r15,%r14,8), %ymm7, %ymm8                 #167.45
..LN197:
        vaddpd    88(%r15,%r14,8), %ymm12, %ymm13               #167.45
..LN198:
	.loc    1  168  is_stmt 1
        vaddpd    16(%r11,%r14,8), %ymm3, %ymm4                 #168.6
..LN199:
        vaddpd    48(%r11,%r14,8), %ymm8, %ymm9                 #168.6
..LN200:
        vaddpd    80(%r11,%r14,8), %ymm13, %ymm14               #168.6
..LN201:
        vaddpd    24(%r11,%r14,8), %ymm4, %ymm5                 #168.28
..LN202:
        vaddpd    56(%r11,%r14,8), %ymm9, %ymm10                #168.28
..LN203:
        vaddpd    88(%r11,%r14,8), %ymm14, %ymm15               #168.28
..LN204:
	.loc    1  167  is_stmt 1
        vmovupd   112(%r15,%r14,8), %ymm3                       #167.27
..LN205:
	.loc    1  168  is_stmt 1
        vmulpd    %ymm5, %ymm1, %ymm6                           #168.28
..LN206:
        vmulpd    %ymm10, %ymm1, %ymm11                         #168.28
..LN207:
        vmulpd    %ymm15, %ymm1, %ymm2                          #168.28
..LN208:
	.loc    1  167  is_stmt 1
        vaddpd    120(%r15,%r14,8), %ymm3, %ymm4                #167.45
..LN209:
        vmovupd   %ymm6, 8(%r13,%r14,8)                         #167.5
..LN210:
        vmovupd   %ymm11, 40(%r13,%r14,8)                       #167.5
..LN211:
        vmovupd   %ymm2, 72(%r13,%r14,8)                        #167.5
..LN212:
	.loc    1  168  is_stmt 1
        vaddpd    112(%r11,%r14,8), %ymm4, %ymm5                #168.6
..LN213:
        vaddpd    120(%r11,%r14,8), %ymm5, %ymm6                #168.28
..LN214:
        vmulpd    %ymm6, %ymm1, %ymm7                           #168.28
..LN215:
	.loc    1  167  is_stmt 1
        vmovupd   %ymm7, 104(%r13,%r14,8)                       #167.5
..LN216:
	.loc    1  166  is_stmt 1
        addq      $16, %r14                                     #166.30
..LN217:
        cmpq      %rdx, %r14                                    #166.30
..LN218:
        jb        ..B1.20       # Prob 82%                      #166.30
..LN219:
                                # LOE rdx rbx r11 r12 r13 r14 r15 eax ecx esi edi r8d r9d r10d xmm0 ymm1
..B1.22:                        # Preds ..B1.20 ..B1.344
..LN220:
        lea       1(%rax), %edx                                 #166.30
..LN221:
        cmpl      %edx, %r8d                                    #166.30
..LN222:
        jb        ..B1.31       # Prob 50%                      #166.30
..LN223:
                                # LOE rbx r12 eax ecx esi edi r8d r9d r10d xmm0 ymm1
..B1.23:                        # Preds ..B1.22
..LN224:
        movslq    %eax, %rdx                                    #166.30
..LN225:
        negq      %rdx                                          #166.30
..LN226:
        addq      40(%rsp), %rdx                                #166.30
..LN227:
        cmpq      $4, %rdx                                      #166.30
..LN228:
        jl        ..B1.343      # Prob 10%                      #166.30
..LN229:
                                # LOE rdx rbx r12 eax ecx esi edi r8d r9d r10d xmm0 ymm1
..B1.24:                        # Preds ..B1.23
..LN230:
	.loc    1  167  is_stmt 1
        movl      32(%rsp), %r14d                               #167.5
..LN231:
	.loc    1  166  is_stmt 1
        movl      %edx, %r11d                                   #166.30
..LN232:
	.loc    1  167  is_stmt 1
        movslq    %eax, %rax                                    #167.27
..LN233:
	.loc    1  166  is_stmt 1
        andl      $-4, %r11d                                    #166.30
..LN234:
        movq      $0, 16(%rsp)                                  #166.30
..LN235:
	.loc    1  167  is_stmt 1
        movq      %r12, 168(%rsp)                               #167.27
..LN236:
        lea       (%r14,%r10), %r13d                            #167.5
..LN237:
        movslq    %r13d, %r13                                   #167.5
..LN238:
	.loc    1  166  is_stmt 1
        movslq    %r11d, %r11                                   #166.30
..LN239:
	.loc    1  167  is_stmt 1
        lea       (%rbx,%r13,8), %r15                           #167.5
..LN240:
	.loc    1  168  is_stmt 1
        lea       (%rcx,%rdi), %r13d                            #168.6
..LN241:
        movslq    %r13d, %r13                                   #168.6
..LN242:
	.loc    1  167  is_stmt 1
        lea       (%r15,%rax,8), %r14                           #167.5
..LN243:
	.loc    1  168  is_stmt 1
        lea       (%r12,%r13,8), %r15                           #168.6
..LN244:
        lea       (%r15,%rax,8), %r13                           #168.6
..LN245:
        movq      %r13, 24(%rsp)                                #168.6
..LN246:
	.loc    1  167  is_stmt 1
        lea       (%r9,%rdi), %r15d                             #167.27
..LN247:
        movslq    %r15d, %r15                                   #167.27
..LN248:
        lea       (%r12,%r15,8), %r13                           #167.27
..LN249:
        movq      24(%rsp), %r12                                #167.27
..LN250:
        movq      16(%rsp), %r15                                #167.27
..LN251:
        lea       (%r13,%rax,8), %r13                           #167.27
..LN252:
                                # LOE rdx rbx r11 r12 r13 r14 r15 eax ecx esi edi r8d r9d r10d xmm0 ymm1
..B1.25:                        # Preds ..B1.25 ..B1.24
..L16:          # optimization report
                # LOOP WAS VECTORIZED
                # REMAINDER LOOP FOR VECTORIZATION
                # VECTORIZATION HAS UNALIGNED MEMORY REFERENCES
                # VECTORIZATION SPEEDUP COEFFECIENT 3.091797
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 1.500000
                # MAIN VECTOR TYPE: 64-bits floating point
..LN253:
        vmovupd   16(%r13,%r15,8), %ymm2                        #167.27
..LN254:
        vaddpd    24(%r13,%r15,8), %ymm2, %ymm3                 #167.45
..LN255:
	.loc    1  168  is_stmt 1
        vaddpd    16(%r12,%r15,8), %ymm3, %ymm4                 #168.6
..LN256:
        vaddpd    24(%r12,%r15,8), %ymm4, %ymm5                 #168.28
..LN257:
        vmulpd    %ymm5, %ymm1, %ymm6                           #168.28
..LN258:
	.loc    1  167  is_stmt 1
        vmovupd   %ymm6, 8(%r14,%r15,8)                         #167.5
..LN259:
	.loc    1  166  is_stmt 1
        addq      $4, %r15                                      #166.30
..LN260:
        cmpq      %r11, %r15                                    #166.30
..LN261:
        jb        ..B1.25       # Prob 82%                      #166.30
..LN262:
                                # LOE rdx rbx r11 r12 r13 r14 r15 eax ecx esi edi r8d r9d r10d xmm0 ymm1
..B1.26:                        # Preds ..B1.25
..LN263:
        movq      168(%rsp), %r12                               #
..LN264:
                                # LOE rdx rbx r11 r12 eax ecx esi edi r8d r9d r10d xmm0 ymm1
..B1.27:                        # Preds ..B1.26 ..B1.343
..LN265:
        cmpq      %rdx, %r11                                    #166.30
..LN266:
        jae       ..B1.31       # Prob 10%                      #166.30
..LN267:
                                # LOE rdx rbx r11 r12 eax ecx esi edi r8d r9d r10d xmm0 ymm1
..B1.28:                        # Preds ..B1.27
..LN268:
	.loc    1  167  is_stmt 1
        movl      32(%rsp), %r14d                               #167.5
..LN269:
        movslq    %eax, %rax                                    #167.27
..LN270:
        lea       (%r14,%r10), %r13d                            #167.5
..LN271:
        movslq    %r13d, %r13                                   #167.5
..LN272:
        lea       (%rbx,%r13,8), %r15                           #167.5
..LN273:
	.loc    1  168  is_stmt 1
        lea       (%rcx,%rdi), %r13d                            #168.6
..LN274:
        movslq    %r13d, %r13                                   #168.28
..LN275:
	.loc    1  167  is_stmt 1
        lea       (%r15,%rax,8), %r14                           #167.5
..LN276:
	.loc    1  168  is_stmt 1
        lea       (%r12,%r13,8), %r15                           #168.28
..LN277:
        lea       (%r15,%rax,8), %r13                           #168.6
..LN278:
	.loc    1  167  is_stmt 1
        lea       (%r9,%rdi), %r15d                             #167.27
..LN279:
        movslq    %r15d, %r15                                   #167.45
..LN280:
        lea       (%r12,%r15,8), %r15                           #167.45
..LN281:
        lea       (%r15,%rax,8), %rax                           #167.27
..LN282:
                                # LOE rax rdx rbx r11 r12 r13 r14 ecx esi edi r8d r9d r10d xmm0 ymm1
..B1.29:                        # Preds ..B1.29 ..B1.28
..L17:          # optimization report
                # REMAINDER LOOP FOR VECTORIZATION
                # VECTORIZATION SPEEDUP COEFFECIENT 3.091797
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 1.500000
..LN283:
        vmovsd    16(%rax,%r11,8), %xmm2                        #167.27
..LN284:
        vaddsd    24(%rax,%r11,8), %xmm2, %xmm3                 #167.45
..LN285:
	.loc    1  168  is_stmt 1
        vaddsd    16(%r13,%r11,8), %xmm3, %xmm4                 #168.6
..LN286:
        vaddsd    24(%r13,%r11,8), %xmm4, %xmm5                 #168.28
..LN287:
        vmulsd    %xmm5, %xmm0, %xmm6                           #168.28
..LN288:
	.loc    1  167  is_stmt 1
        vmovsd    %xmm6, 8(%r14,%r11,8)                         #167.5
..LN289:
	.loc    1  166  is_stmt 1
        incq      %r11                                          #166.30
..LN290:
        cmpq      %rdx, %r11                                    #166.30
..LN291:
        jb        ..B1.29       # Prob 82%                      #166.30
..LN292:
                                # LOE rax rdx rbx r11 r12 r13 r14 ecx esi edi r8d r9d r10d xmm0 ymm1
..B1.31:                        # Preds ..B1.29 ..B1.9 ..B1.22 ..B1.27
..LN293:
        movl      232(%rsp), %eax                               #166.3
..LN294:
        incl      %esi                                          #166.3
..LN295:
        lea       2(%rdi,%rax), %edi                            #166.3
..LN296:
        lea       1(%r10,%rax), %r10d                           #166.3
..LN297:
        cmpl      48(%rsp), %esi                                #166.3
..LN298:
        jb        ..B1.9        # Prob 82%                      #166.3
..LN299:
                                # LOE rbx r12 ecx esi edi r8d r9d r10d xmm0 ymm1
..B1.32:                        # Preds ..B1.31
..LN300:
        movl      248(%rsp), %eax                               #
..LN301:
        movl      88(%rsp), %esi                                #
..LN302:
        movl      64(%rsp), %edx                                #
..LN303:
        movq      72(%rsp), %rcx                                #
..LN304:
        movq      80(%rsp), %r14                                #
..LN305:
        movl      96(%rsp), %r13d                               #
..LN306:
        movl      (%rsp), %ebx                                  #
..LN307:
        movl      232(%rsp), %r15d                              #
..LN308:
                                # LOE rcx r12 r14 eax edx ebx esi r13d r15d
..B1.33:                        # Preds ..B1.7 ..B1.32
..LN309:
	.loc    1  172  is_stmt 1
        testl     %ebx, %ebx                                    #172.6
..LN310:
        je        ..B1.36       # Prob 50%                      #172.6
..LN311:
                                # LOE rcx r12 r14 eax edx ebx esi r13d r15d
..B1.34:                        # Preds ..B1.33
..LN312:
        cmpl      $0, 112(%rsp)                                 #172.22
..LN313:
        je        ..B1.36       # Prob 50%                      #172.22
..LN314:
                                # LOE rcx r12 r14 eax edx ebx esi r13d r15d
..B1.35:                        # Preds ..B1.34
..LN315:
        movq      8(%rsp), %rdi                                 #172.76
..LN316:
        vmovsd    8(%r12), %xmm0                                #172.95
..LN317:
        movq      192(%rsp), %r8                                #172.36
..LN318:
        vaddsd    24(%r12,%rdi), %xmm0, %xmm1                   #172.76
..LN319:
        vaddsd    16(%r12,%rdi), %xmm1, %xmm2                   #172.95
..LN320:
        vmulsd    .L_2il0floatpacket.2(%rip), %xmm2, %xmm3      #172.95
..LN321:
        vmovsd    %xmm3, (%r8)                                  #172.36
..LN322:
                                # LOE rcx r12 r14 eax edx ebx esi r13d r15d
..B1.36:                        # Preds ..B1.33 ..B1.34 ..B1.35
..LN323:
	.loc    1  173  is_stmt 1
        testl     %r13d, %r13d                                  #173.6
..LN324:
        je        ..B1.41       # Prob 50%                      #173.6
..LN325:
                                # LOE rcx r12 r14 eax edx ebx esi r13d r15d
..B1.37:                        # Preds ..B1.36
..LN326:
        cmpl      $0, 112(%rsp)                                 #173.22
..LN327:
        je        ..B1.39       # Prob 50%                      #173.22
..LN328:
                                # LOE rcx r12 r14 eax edx ebx esi r13d r15d
..B1.38:                        # Preds ..B1.37
..LN329:
        movq      144(%rsp), %rdi                               #173.58
..LN330:
        shlq      $4, %rdi                                      #173.58
..LN331:
        movq      8(%rsp), %r9                                  #173.76
..LN332:
        movq      192(%rsp), %r8                                #173.36
..LN333:
        vmovsd    16(%rdi,%r12), %xmm0                          #173.58
..LN334:
        vaddsd    (%r12,%r9), %xmm0, %xmm1                      #173.76
..LN335:
        vaddsd    24(%rdi,%r12), %xmm1, %xmm2                   #173.95
..LN336:
        vmulsd    .L_2il0floatpacket.2(%rip), %xmm2, %xmm3      #173.95
..LN337:
        vmovsd    %xmm3, (%r8,%r9)                              #173.36
..LN338:
                                # LOE rcx r12 r14 eax edx ebx esi r13d r15d
..B1.39:                        # Preds ..B1.37 ..B1.38
..LN339:
	.loc    1  174  is_stmt 1
        cmpl      $0, 104(%rsp)                                 #174.22
..LN340:
        je        ..B1.41       # Prob 50%                      #174.22
..LN341:
                                # LOE rcx r12 r14 eax edx ebx esi r13d r15d
..B1.40:                        # Preds ..B1.39
..LN342:
        movl      184(%rsp), %r8d                               #174.87
..LN343:
        lea       2(%r15), %r10d                                #174.69
..LN344:
        movl      %r8d, %r9d                                    #174.87
..LN345:
        imull     %r10d, %r9d                                   #174.87
..LN346:
        imull     224(%rsp), %r10d                              #174.107
..LN347:
        imull     208(%rsp), %r8d                               #174.44
..LN348:
        movslq    %r9d, %r9                                     #174.58
..LN349:
        movq      144(%rsp), %rdi                               #174.90
..LN350:
        addq      %rdi, %r9                                     #174.90
..LN351:
        movslq    %r10d, %r10                                   #174.95
..LN352:
        movslq    %r8d, %r8                                     #174.36
..LN353:
        addq      %rdi, %r10                                    #174.110
..LN354:
        addq      %rdi, %r8                                     #174.48
..LN355:
        vmovsd    (%r12,%r9,8), %xmm0                           #174.58
..LN356:
        movq      192(%rsp), %r11                               #174.36
..LN357:
        vaddsd    8(%r12,%r9,8), %xmm0, %xmm1                   #174.76
..LN358:
        vaddsd    (%r12,%r10,8), %xmm1, %xmm2                   #174.95
..LN359:
        vmulsd    .L_2il0floatpacket.2(%rip), %xmm2, %xmm3      #174.95
..LN360:
        vmovsd    %xmm3, (%r11,%r8,8)                           #174.36
..LN361:
                                # LOE rcx r12 r14 eax edx ebx esi r13d r15d
..B1.41:                        # Preds ..B1.36 ..B1.39 ..B1.40
..LN362:
	.loc    1  175  is_stmt 1
        testl     %ebx, %ebx                                    #175.6
..LN363:
        je        ..B1.89       # Prob 50%                      #175.6
..LN364:
                                # LOE rcx r12 r14 eax edx esi r13d r15d
..B1.42:                        # Preds ..B1.41
..LN365:
        cmpl      $0, 104(%rsp)                                 #175.22
..LN366:
        je        ..B1.44       # Prob 50%                      #175.22
..LN367:
                                # LOE rcx r12 r14 eax edx esi r13d r15d
..B1.43:                        # Preds ..B1.42
..LN368:
        movl      184(%rsp), %r8d                               #175.87
..LN369:
        lea       2(%r15), %edi                                 #175.69
..LN370:
        movl      %r8d, %ebx                                    #175.87
..LN371:
        imull     %edi, %ebx                                    #175.87
..LN372:
        imull     224(%rsp), %edi                               #175.107
..LN373:
        imull     208(%rsp), %r8d                               #175.44
..LN374:
        movslq    %ebx, %rbx                                    #175.58
..LN375:
        movslq    %edi, %rdi                                    #175.95
..LN376:
        movslq    %r8d, %r8                                     #175.36
..LN377:
        movq      192(%rsp), %r9                                #175.36
..LN378:
        vmovsd    8(%r12,%rbx,8), %xmm0                         #175.58
..LN379:
        vaddsd    (%r12,%rbx,8), %xmm0, %xmm1                   #175.76
..LN380:
        vaddsd    8(%r12,%rdi,8), %xmm1, %xmm2                  #175.95
..LN381:
        vmulsd    .L_2il0floatpacket.2(%rip), %xmm2, %xmm3      #175.95
..LN382:
        vmovsd    %xmm3, (%r9,%r8,8)                            #175.36
..LN383:
                                # LOE rcx r12 r14 eax edx esi r13d r15d
..B1.44:                        # Preds ..B1.42 ..B1.43
..LN384:
	.loc    1  179  is_stmt 1
        cmpl      %esi, %edx                                    #179.22
..LN385:
        jg        ..B1.365      # Prob 50%                      #179.22
..LN386:
                                # LOE rcx r12 r14 eax edx esi r13d r15d
..B1.45:                        # Preds ..B1.44
..LN387:
        movl      %esi, %edi                                    #179.5
..LN388:
        subl      %edx, %edi                                    #179.5
..LN389:
        incl      %edi                                          #179.5
..LN390:
        cmpl      $8, %edi                                      #179.5
..LN391:
        jl        ..B1.342      # Prob 10%                      #179.5
..LN392:
                                # LOE rcx r12 r14 eax edx esi edi r13d r15d
..B1.46:                        # Preds ..B1.45
..LN393:
        movl      %edx, %r10d                                   #179.33
..LN394:
        lea       (%rcx,%r10,8), %r9                            #179.33
..LN395:
        movq      %r9, (%rsp)                                   #179.33
..LN396:
        andq      $15, %r9                                      #179.5
..LN397:
        movl      %r9d, %r9d                                    #179.5
..LN398:
        testl     %r9d, %r9d                                    #179.5
..LN399:
        je        ..B1.49       # Prob 50%                      #179.5
..LN400:
                                # LOE rcx r9 r10 r12 r14 eax edx esi edi r13d r15d
..B1.47:                        # Preds ..B1.46
..LN401:
        testl     $7, %r9d                                      #179.5
..LN402:
        jne       ..B1.340      # Prob 10%                      #179.5
..LN403:
                                # LOE rcx r10 r12 r14 eax edx esi edi r13d r15d
..B1.48:                        # Preds ..B1.47
..LN404:
        movl      $1, %r9d                                      #179.5
..LN405:
                                # LOE rcx r9 r10 r12 r14 eax edx esi edi r13d r15d
..B1.49:                        # Preds ..B1.48 ..B1.46
..LN406:
        lea       8(%r9), %ebx                                  #179.5
..LN407:
        cmpl      %ebx, %edi                                    #179.5
..LN408:
        jl        ..B1.340      # Prob 10%                      #179.5
..LN409:
                                # LOE rcx r9 r10 r12 r14 eax edx esi edi r13d r15d
..B1.50:                        # Preds ..B1.49
..LN410:
        movl      %edi, %ebx                                    #179.5
..LN411:
	.loc    1  167  is_stmt 1
        lea       2(%r15), %r11d                                #167.37
..LN412:
	.loc    1  179  is_stmt 1
        subl      %r9d, %ebx                                    #179.5
..LN413:
        lea       -1(%rdx), %r8d                                #179.33
..LN414:
        imull     %r11d, %r8d                                   #179.33
..LN415:
        andl      $7, %ebx                                      #179.5
..LN416:
        negl      %ebx                                          #179.5
..LN417:
        addl      %edi, %ebx                                    #179.5
..LN418:
	.loc    1  167  is_stmt 1
        movl      %r11d, 56(%rsp)                               #167.37
..LN419:
	.loc    1  179  is_stmt 1
        lea       (%r15,%r8), %r11d                             #179.46
..LN420:
        movl      $0, 32(%rsp)                                  #179.5
..LN421:
        movq      $0, 24(%rsp)                                  #179.33
..LN422:
        movl      %r11d, 40(%rsp)                               #179.46
..LN423:
        testl     %r9d, %r9d                                    #179.5
..LN424:
        jbe       ..B1.54       # Prob 15%                      #179.5
..LN425:
                                # LOE rcx r9 r10 r11 r12 r14 eax edx ebx esi edi r8d r11d r13d r15d r11b
..B1.51:                        # Preds ..B1.50
..LN426:
        movl      $0, 16(%rsp)                                  #179.33
..LN427:
        movl      %r8d, 8(%rsp)                                 #179.33
..LN428:
        movl      %edx, 64(%rsp)                                #179.33
..LN429:
        movq      %rcx, 72(%rsp)                                #179.33
..LN430:
        movl      %r13d, 96(%rsp)                               #179.33
..LN431:
        vmovsd    .L_2il0floatpacket.3(%rip), %xmm0             #179.41
..LN432:
        movq      %r14, 80(%rsp)                                #179.33
..LN433:
        movl      16(%rsp), %r13d                               #179.33
..LN434:
        movl      %r11d, %r8d                                   #179.33
..LN435:
        movq      24(%rsp), %r11                                #179.33
..LN436:
        movl      32(%rsp), %ecx                                #179.33
..LN437:
        movq      (%rsp), %rdx                                  #179.33
..LN438:
                                # LOE rdx r9 r10 r11 r12 eax ecx ebx esi edi r8d r13d r15d xmm0
..B1.52:                        # Preds ..B1.52 ..B1.51
..L18:          # optimization report
                # LOOP WAS UNROLLED BY 4
                # PEELED LOOP FOR VECTORIZATION
                # VECTORIZATION SPEEDUP COEFFECIENT 3.158203
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 2
                # NORMALIZED VECTORIZATION OVERHEAD 0.234375
..LN439:
	.loc    1  167  is_stmt 1
        lea       (%r8,%r13), %r14d                             #167.37
..LN440:
	.loc    1  179  is_stmt 1
        movslq    %r14d, %r14                                   #179.46
..LN441:
        incl      %ecx                                          #179.5
..LN442:
        lea       2(%r13,%r15), %r13d                           #179.5
..LN443:
        vmovsd    16(%r12,%r14,8), %xmm1                        #179.46
..LN444:
        vaddsd    24(%r12,%r14,8), %xmm1, %xmm2                 #179.62
..LN445:
        vmulsd    %xmm2, %xmm0, %xmm3                           #179.62
..LN446:
        vmovsd    %xmm3, (%rdx,%r11,8)                          #179.33
..LN447:
        incq      %r11                                          #179.5
..LN448:
        cmpl      %r9d, %ecx                                    #179.5
..LN449:
        jb        ..B1.52       # Prob 82%                      #179.5
..LN450:
                                # LOE rdx r9 r10 r11 r12 eax ecx ebx esi edi r8d r13d r15d xmm0
..B1.53:                        # Preds ..B1.52
..LN451:
        movl      8(%rsp), %r8d                                 #
..LN452:
        movl      64(%rsp), %edx                                #
..LN453:
        movq      72(%rsp), %rcx                                #
..LN454:
        movq      80(%rsp), %r14                                #
..LN455:
        movl      96(%rsp), %r13d                               #
..LN456:
                                # LOE rcx r9 r10 r12 r14 eax edx ebx esi edi r8d r13d r15d
..B1.54:                        # Preds ..B1.50 ..B1.53
..LN457:
        movl      56(%rsp), %r11d                               #179.5
..LN458:
        imull     %r9d, %r11d                                   #179.5
..LN459:
        vmovupd   .L_2il0floatpacket.6(%rip), %xmm0             #179.41
..LN460:
        movl      %r11d, 56(%rsp)                               #179.5
..LN461:
        lea       16(,%r15,8), %r11d                            #179.5
..LN462:
        movl      %r11d, 16(%rsp)                               #179.5
..LN463:
        movl      176(%rsp), %r11d                              #179.46
..LN464:
        movl      %eax, 248(%rsp)                               #179.46
..LN465:
        addl      %r8d, %r11d                                   #179.46
..LN466:
        movl      %r11d, 8(%rsp)                                #179.46
..LN467:
        lea       (%r15,%r15,4), %r11d                          #179.46
..LN468:
        addl      %r8d, %r11d                                   #179.46
..LN469:
        movl      %r11d, 24(%rsp)                               #179.46
..LN470:
        lea       (,%r15,8), %r11d                              #179.46
..LN471:
        subl      %r15d, %r11d                                  #179.46
..LN472:
        movl      %esi, 88(%rsp)                                #179.46
..LN473:
        addl      %r11d, %r8d                                   #179.46
..LN474:
        movq      %r10, 48(%rsp)                                #179.46
..LN475:
        movl      %edi, 32(%rsp)                                #179.46
..LN476:
        movl      %edx, 64(%rsp)                                #179.46
..LN477:
        movq      %rcx, 72(%rsp)                                #179.46
..LN478:
        movl      %r13d, 96(%rsp)                               #179.46
..LN479:
        movq      %r14, 80(%rsp)                                #179.46
..LN480:
        movl      %r15d, 232(%rsp)                              #179.46
..LN481:
        movl      24(%rsp), %r10d                               #179.46
..LN482:
        movl      8(%rsp), %r13d                                #179.46
..LN483:
        movl      56(%rsp), %edi                                #179.46
..LN484:
        movq      %r9, %r11                                     #179.46
..LN485:
        movl      16(%rsp), %esi                                #179.46
..LN486:
        movl      40(%rsp), %eax                                #179.46
..LN487:
        movq      (%rsp), %rdx                                  #179.46
..LN488:
        movq      144(%rsp), %rcx                               #179.46
..LN489:
                                # LOE rdx rcx r11 r12 eax ebx esi edi r8d r9d r10d r13d xmm0
..B1.55:                        # Preds ..B1.55 ..B1.54
..L19:          # optimization report
                # LOOP WAS UNROLLED BY 4
                # LOOP WAS VECTORIZED
                # VECTORIZATION SPEEDUP COEFFECIENT 3.158203
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 2
                # NORMALIZED VECTORIZATION OVERHEAD 0.234375
                # MAIN VECTOR TYPE: 64-bits floating point
..LN490:
	.loc    1  167  is_stmt 1
        lea       (%rax,%rdi), %r14d                            #167.37
..LN491:
	.loc    1  179  is_stmt 1
        movslq    %r14d, %r14                                   #179.46
..LN492:
        addl      $8, %r9d                                      #179.5
..LN493:
        lea       16(%r12,%r14,8), %r15                         #179.46
..LN494:
        vmovsd    (%r15), %xmm1                                 #179.46
..LN495:
        vmovhpd   16(%r15,%rcx,8), %xmm1, %xmm3                 #179.46
..LN496:
        lea       24(%r12,%r14,8), %r15                         #179.62
..LN497:
        vmovsd    (%r15), %xmm2                                 #179.62
..LN498:
        lea       (%r13,%rdi), %r14d                            #179.46
..LN499:
        movslq    %r14d, %r14                                   #179.46
..LN500:
        vmovhpd   16(%r15,%rcx,8), %xmm2, %xmm4                 #179.62
..LN501:
        vaddpd    %xmm4, %xmm3, %xmm5                           #179.62
..LN502:
        vmulpd    %xmm5, %xmm0, %xmm6                           #179.62
..LN503:
        vmovupd   %xmm6, (%rdx,%r11,8)                          #179.33
..LN504:
        lea       48(%r12,%r14,8), %r15                         #179.46
..LN505:
        vmovsd    (%r15), %xmm7                                 #179.46
..LN506:
        vmovhpd   16(%r15,%rcx,8), %xmm7, %xmm9                 #179.46
..LN507:
        lea       56(%r12,%r14,8), %r15                         #179.62
..LN508:
        vmovsd    (%r15), %xmm8                                 #179.62
..LN509:
        lea       (%r10,%rdi), %r14d                            #179.46
..LN510:
        movslq    %r14d, %r14                                   #179.46
..LN511:
        vmovhpd   16(%r15,%rcx,8), %xmm8, %xmm10                #179.62
..LN512:
        vaddpd    %xmm10, %xmm9, %xmm11                         #179.62
..LN513:
        vmulpd    %xmm11, %xmm0, %xmm12                         #179.62
..LN514:
        vmovupd   %xmm12, 16(%rdx,%r11,8)                       #179.33
..LN515:
        lea       80(%r12,%r14,8), %r15                         #179.46
..LN516:
        vmovsd    (%r15), %xmm13                                #179.46
..LN517:
        vmovhpd   16(%r15,%rcx,8), %xmm13, %xmm15               #179.46
..LN518:
        lea       88(%r12,%r14,8), %r15                         #179.62
..LN519:
        vmovsd    (%r15), %xmm14                                #179.62
..LN520:
        lea       (%r8,%rdi), %r14d                             #179.46
..LN521:
        movslq    %r14d, %r14                                   #179.46
..LN522:
        addl      %esi, %edi                                    #179.5
..LN523:
        vmovhpd   16(%r15,%rcx,8), %xmm14, %xmm1                #179.62
..LN524:
        vaddpd    %xmm1, %xmm15, %xmm2                          #179.62
..LN525:
        vmulpd    %xmm2, %xmm0, %xmm3                           #179.62
..LN526:
        vmovupd   %xmm3, 32(%rdx,%r11,8)                        #179.33
..LN527:
        lea       112(%r12,%r14,8), %r15                        #179.46
..LN528:
        vmovsd    (%r15), %xmm4                                 #179.46
..LN529:
        vmovhpd   16(%r15,%rcx,8), %xmm4, %xmm6                 #179.46
..LN530:
        lea       120(%r12,%r14,8), %r15                        #179.62
..LN531:
        vmovsd    (%r15), %xmm5                                 #179.62
..LN532:
        vmovhpd   16(%r15,%rcx,8), %xmm5, %xmm7                 #179.62
..LN533:
        vaddpd    %xmm7, %xmm6, %xmm8                           #179.62
..LN534:
        vmulpd    %xmm8, %xmm0, %xmm9                           #179.62
..LN535:
        vmovupd   %xmm9, 48(%rdx,%r11,8)                        #179.33
..LN536:
        addq      $8, %r11                                      #179.5
..LN537:
        cmpl      %ebx, %r9d                                    #179.5
..LN538:
        jb        ..B1.55       # Prob 82%                      #179.5
..LN539:
                                # LOE rdx rcx r11 r12 eax ebx esi edi r8d r9d r10d r13d xmm0
..B1.56:                        # Preds ..B1.55
..LN540:
        movl      248(%rsp), %eax                               #
..LN541:
        movl      88(%rsp), %esi                                #
..LN542:
        movq      48(%rsp), %r10                                #
..LN543:
        movl      32(%rsp), %edi                                #
..LN544:
        movl      64(%rsp), %edx                                #
..LN545:
        movq      72(%rsp), %rcx                                #
..LN546:
        movq      80(%rsp), %r14                                #
..LN547:
        movl      96(%rsp), %r13d                               #
..LN548:
        movl      232(%rsp), %r15d                              #
..LN549:
                                # LOE rcx r10 r12 r14 eax edx ebx esi edi r13d r15d
..B1.57:                        # Preds ..B1.56 ..B1.340 ..B1.342
..LN550:
        lea       1(%rbx), %r8d                                 #179.5
..LN551:
        cmpl      %r8d, %edi                                    #179.5
..LN552:
        jb        ..B1.357      # Prob 50%                      #179.5
..LN553:
                                # LOE rcx r10 r12 r14 eax edx ebx esi edi r13d r15d
..B1.58:                        # Preds ..B1.57
..LN554:
        subl      %ebx, %edi                                    #179.5
..LN555:
        cmpl      $2, %edi                                      #179.5
..LN556:
        jl        ..B1.339      # Prob 10%                      #179.5
..LN557:
                                # LOE rcx r10 r12 r14 eax edx ebx esi edi r13d r15d
..B1.59:                        # Preds ..B1.58
..LN558:
        movl      %edi, %r11d                                   #179.5
..LN559:
        lea       4(%r15,%r15), %r9d                            #179.5
..LN560:
        movl      %r9d, 8(%rsp)                                 #179.5
..LN561:
	.loc    1  167  is_stmt 1
        lea       2(%r15), %r8d                                 #167.37
..LN562:
	.loc    1  179  is_stmt 1
        andl      $-2, %r11d                                    #179.5
..LN563:
	.loc    1  167  is_stmt 1
        lea       -1(%rbx,%rdx), %r9d                           #167.37
..LN564:
        imull     %r8d, %r9d                                    #167.37
..LN565:
	.loc    1  179  is_stmt 1
        vmovupd   .L_2il0floatpacket.5(%rip), %xmm0             #179.41
..LN566:
        movslq    %ebx, %r8                                     #179.33
..LN567:
	.loc    1  167  is_stmt 1
        addl      %r15d, %r9d                                   #167.37
..LN568:
	.loc    1  179  is_stmt 1
        addq      %r10, %r8                                     #179.33
..LN569:
        movl      %r11d, 40(%rsp)                               #179.5
..LN570:
        xorl      %r11d, %r11d                                  #179.5
..LN571:
	.loc    1  167  is_stmt 1
        movl      %r9d, 16(%rsp)                                #167.37
..LN572:
	.loc    1  179  is_stmt 1
        xorl      %r9d, %r9d                                    #179.5
..LN573:
        movq      $0, 24(%rsp)                                  #179.5
..LN574:
        movl      %ebx, (%rsp)                                  #179.5
..LN575:
        lea       (%rcx,%r8,8), %r8                             #179.33
..LN576:
        movq      %r8, 32(%rsp)                                 #179.33
..LN577:
        movl      %edx, 64(%rsp)                                #179.5
..LN578:
        movq      %rcx, 72(%rsp)                                #179.5
..LN579:
        movq      %r14, 80(%rsp)                                #179.5
..LN580:
        movl      %r13d, 96(%rsp)                               #179.5
..LN581:
        movl      40(%rsp), %r8d                                #179.5
..LN582:
        movq      24(%rsp), %r13                                #179.5
..LN583:
        movq      32(%rsp), %rbx                                #179.5
..LN584:
        movl      16(%rsp), %r14d                               #179.5
..LN585:
        movl      8(%rsp), %edx                                 #179.5
..LN586:
        movq      144(%rsp), %rcx                               #179.5
..LN587:
        movl      %r15d, 232(%rsp)                              #179.5
..LN588:
        .align    16,0x90
..LN589:
                                # LOE rcx rbx r10 r12 r13 eax edx esi edi r8d r9d r11d r14d xmm0
..B1.60:                        # Preds ..B1.60 ..B1.59
..L20:          # optimization report
                # LOOP WAS VECTORIZED
                # REMAINDER LOOP FOR VECTORIZATION
                # VECTORIZATION HAS UNALIGNED MEMORY REFERENCES
                # VECTORIZATION SPEEDUP COEFFECIENT 1.726562
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 2
                # NORMALIZED VECTORIZATION OVERHEAD 0.937500
                # MAIN VECTOR TYPE: 64-bits floating point
..LN590:
        lea       (%r14,%r9), %r15d                             #179.46
..LN591:
        movslq    %r15d, %r15                                   #179.46
..LN592:
        addl      $2, %r11d                                     #179.5
..LN593:
        addl      %edx, %r9d                                    #179.5
..LN594:
        lea       (%r12,%r15,8), %r15                           #179.46
..LN595:
        vmovsd    16(%r15), %xmm1                               #179.46
..LN596:
        vmovsd    24(%r15), %xmm2                               #179.62
..LN597:
        vmovhpd   32(%r15,%rcx,8), %xmm1, %xmm3                 #179.46
..LN598:
        vmovhpd   40(%r15,%rcx,8), %xmm2, %xmm4                 #179.62
..LN599:
        vaddpd    %xmm4, %xmm3, %xmm5                           #179.62
..LN600:
        vmulpd    %xmm5, %xmm0, %xmm6                           #179.62
..LN601:
        vmovupd   %xmm6, (%rbx,%r13,8)                          #179.33
..LN602:
        addq      $2, %r13                                      #179.5
..LN603:
        cmpl      %r8d, %r11d                                   #179.5
..LN604:
        jb        ..B1.60       # Prob 82%                      #179.5
..LN605:
                                # LOE rcx rbx r10 r12 r13 eax edx esi edi r8d r9d r11d r14d xmm0
..B1.61:                        # Preds ..B1.60
..LN606:
        movl      (%rsp), %ebx                                  #
..LN607:
        movl      64(%rsp), %edx                                #
..LN608:
        movq      72(%rsp), %rcx                                #
..LN609:
        movq      80(%rsp), %r14                                #
..LN610:
        movl      96(%rsp), %r13d                               #
..LN611:
        movl      232(%rsp), %r15d                              #
..LN612:
                                # LOE rcx r10 r12 r14 eax edx ebx esi edi r8d r13d r15d
..B1.62:                        # Preds ..B1.61 ..B1.339
..LN613:
        cmpl      %edi, %r8d                                    #179.5
..LN614:
        movslq    %r8d, %r8                                     #179.5
..LN615:
        jae       ..B1.357      # Prob 15%                      #179.5
..LN616:
                                # LOE rcx r8 r10 r12 r14 eax edx ebx esi edi r8d r13d r15d r8b
..B1.63:                        # Preds ..B1.62
..LN617:
        movl      %r8d, %r11d                                   #179.5
..LN618:
	.loc    1  167  is_stmt 1
        lea       2(%r15), %r9d                                 #167.37
..LN619:
	.loc    1  179  is_stmt 1
        imull     %r9d, %r11d                                   #179.5
..LN620:
        vmovsd    .L_2il0floatpacket.3(%rip), %xmm0             #179.41
..LN621:
        movl      %r11d, (%rsp)                                 #179.5
..LN622:
	.loc    1  167  is_stmt 1
        lea       -1(%rbx,%rdx), %r11d                          #167.37
..LN623:
        imull     %r9d, %r11d                                   #167.37
..LN624:
	.loc    1  179  is_stmt 1
        movslq    %ebx, %rbx                                    #179.33
..LN625:
	.loc    1  167  is_stmt 1
        addl      %r15d, %r11d                                  #167.37
..LN626:
	.loc    1  179  is_stmt 1
        addq      %r10, %rbx                                    #179.33
..LN627:
        movl      %r13d, 96(%rsp)                               #179.33
..LN628:
        movq      %r14, 80(%rsp)                                #179.33
..LN629:
        lea       (%rcx,%rbx,8), %rbx                           #179.33
..LN630:
        movl      (%rsp), %r13d                                 #179.33
..LN631:
        movq      %r8, %r9                                      #179.33
..LN632:
                                # LOE rcx rbx r9 r10 r12 eax edx esi edi r8d r11d r13d r15d xmm0
..B1.64:                        # Preds ..B1.64 ..B1.63
..L21:          # optimization report
                # REMAINDER LOOP FOR VECTORIZATION
                # VECTORIZATION SPEEDUP COEFFECIENT 1.726562
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 2
                # NORMALIZED VECTORIZATION OVERHEAD 0.937500
..LN633:
        lea       (%r11,%r13), %r14d                            #179.46
..LN634:
        movslq    %r14d, %r14                                   #179.62
..LN635:
        incl      %r8d                                          #179.5
..LN636:
        lea       2(%r13,%r15), %r13d                           #179.5
..LN637:
        vmovsd    16(%r12,%r14,8), %xmm1                        #179.46
..LN638:
        vaddsd    24(%r12,%r14,8), %xmm1, %xmm2                 #179.62
..LN639:
        vmulsd    %xmm2, %xmm0, %xmm3                           #179.62
..LN640:
        vmovsd    %xmm3, (%rbx,%r9,8)                           #179.33
..LN641:
        incq      %r9                                           #179.5
..LN642:
        cmpl      %edi, %r8d                                    #179.5
..LN643:
        jb        ..B1.64       # Prob 82%                      #179.5
..LN644:
                                # LOE rcx rbx r9 r10 r12 eax edx esi edi r8d r11d r13d r15d xmm0
..B1.65:                        # Preds ..B1.64
..LN645:
        movq      80(%rsp), %r14                                #
..LN646:
	.loc    1  166  is_stmt 1
        cmpl      %esi, %edx                                    #166.19
..LN647:
        movl      96(%rsp), %r13d                               #
..LN648:
                                # LOE rcx r10 r12 r14 eax edx esi r13d r15d
..B1.66:                        # Preds ..B1.65
..LN649:
	.loc    1  180  is_stmt 1
        jge       ..B1.89       # Prob 50%                      #180.21
..LN650:
                                # LOE rcx r10 r12 r14 eax edx esi r13d r15d
..B1.67:                        # Preds ..B1.357 ..B1.365 ..B1.66
..LN651:
        movl      %esi, %r8d                                    #180.5
..LN652:
        subl      %edx, %r8d                                    #180.5
..LN653:
        cmpl      $16, %r8d                                     #180.5
..LN654:
        jl        ..B1.335      # Prob 10%                      #180.5
..LN655:
                                # LOE rcx r10 r12 r14 eax edx esi r8d r13d r15d
..B1.68:                        # Preds ..B1.67
..LN656:
        movq      16(%rbp), %rbx                                #180.46
..LN657:
        lea       (%rbx,%r10,8), %rdi                           #180.46
..LN658:
        movq      %rdi, (%rsp)                                  #180.46
..LN659:
        cmpl      $29, %r8d                                     #180.5
..LN660:
        jl        ..B1.337      # Prob 10%                      #180.5
..LN661:
                                # LOE rcx rdi r10 r12 r14 eax edx esi edi r8d r13d r15d dil
..B1.69:                        # Preds ..B1.68
..LN662:
        movq      %rdi, %r9                                     #180.5
..LN663:
        andq      $31, %r9                                      #180.5
..LN664:
        movl      %r9d, %r9d                                    #180.5
..LN665:
        testl     %r9d, %r9d                                    #180.5
..LN666:
        je        ..B1.72       # Prob 50%                      #180.5
..LN667:
                                # LOE rcx r9 r10 r12 r14 eax edx esi r8d r13d r15d
..B1.70:                        # Preds ..B1.69
..LN668:
        testl     $7, %r9d                                      #180.5
..LN669:
        jne       ..B1.335      # Prob 10%                      #180.5
..LN670:
                                # LOE rcx r9 r10 r12 r14 eax edx esi r8d r13d r15d
..B1.71:                        # Preds ..B1.70
..LN671:
        negl      %r9d                                          #180.5
..LN672:
        addl      $32, %r9d                                     #180.5
..LN673:
        shrl      $3, %r9d                                      #180.5
..LN674:
                                # LOE rcx r9 r10 r12 r14 eax edx esi r8d r13d r15d
..B1.72:                        # Preds ..B1.71 ..B1.69
..LN675:
        lea       16(%r9), %ebx                                 #180.5
..LN676:
        cmpl      %ebx, %r8d                                    #180.5
..LN677:
        jl        ..B1.335      # Prob 10%                      #180.5
..LN678:
                                # LOE rcx r9 r10 r12 r14 eax edx esi r8d r13d r15d
..B1.73:                        # Preds ..B1.72
..LN679:
        movl      %r8d, %ebx                                    #180.5
..LN680:
        lea       -1(%rdx), %edi                                #180.32
..LN681:
        imull     208(%rsp), %edi                               #180.32
..LN682:
        subl      %r9d, %ebx                                    #180.5
..LN683:
        andl      $15, %ebx                                     #180.5
..LN684:
        lea       (%r15,%rdi), %r11d                            #180.32
..LN685:
        negl      %ebx                                          #180.5
..LN686:
        addl      %r8d, %ebx                                    #180.5
..LN687:
        movq      %r9, 56(%rsp)                                 #180.5
..LN688:
        movq      $0, 8(%rsp)                                   #180.5
..LN689:
        movl      %r11d, 40(%rsp)                               #180.32
..LN690:
        testq     %r9, %r9                                      #180.5
..LN691:
        lea       (%rcx,%r10,8), %r9                            #180.78
..LN692:
        movq      %r9, 32(%rsp)                                 #180.78
..LN693:
        jbe       ..B1.77       # Prob 9%                       #180.5
..LN694:
                                # LOE rcx r9 r10 r11 r12 r14 eax edx ebx esi edi r8d r9d r11d r13d r15d r9b r11b
..B1.74:                        # Preds ..B1.73
..LN695:
        movl      %edx, 64(%rsp)                                #
..LN696:
        movq      %rcx, 72(%rsp)                                #
..LN697:
        movq      %r14, 80(%rsp)                                #
..LN698:
        movl      %r13d, 96(%rsp)                               #
..LN699:
        movq      %r12, 168(%rsp)                               #
..LN700:
        movl      %r15d, 232(%rsp)                              #
..LN701:
        movq      %r9, %r12                                     #
..LN702:
        movq      56(%rsp), %r9                                 #
..LN703:
        movq      8(%rsp), %r13                                 #
..LN704:
        movq      (%rsp), %r14                                  #
..LN705:
        movq      192(%rsp), %rdx                               #
..LN706:
        movl      208(%rsp), %ecx                               #
..LN707:
                                # LOE rdx r9 r10 r12 r13 r14 eax ecx ebx esi edi r8d r11d
..B1.75:                        # Preds ..B1.75 ..B1.74
..L22:          # optimization report
                # LOOP WAS UNROLLED BY 2
                # PEELED LOOP FOR VECTORIZATION
                # VECTORIZATION SPEEDUP COEFFECIENT 3.888672
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 8
                # NORMALIZED VECTORIZATION OVERHEAD 0.187500
..LN708:
        movl      %r13d, %r15d                                  #180.32
..LN709:
        vmovsd    8(%r12,%r13,8), %xmm0                         #180.78
..LN710:
        imull     %ecx, %r15d                                   #180.32
..LN711:
        vsubsd    (%r12,%r13,8), %xmm0, %xmm1                   #180.32
..LN712:
	.loc    1  142  is_stmt 1
        addl      %r11d, %r15d                                  #142.12
..LN713:
	.loc    1  180  is_stmt 1
        vfnmadd132sd (%r14,%r13,8), %xmm0, %xmm1                #180.32
..LN714:
        incq      %r13                                          #180.5
..LN715:
        movslq    %r15d, %r15                                   #180.32
..LN716:
        vmovsd    %xmm1, 8(%rdx,%r15,8)                         #180.32
..LN717:
        cmpq      %r9, %r13                                     #180.5
..LN718:
        jb        ..B1.75       # Prob 81%                      #180.5
..LN719:
                                # LOE rdx r9 r10 r12 r13 r14 eax ecx ebx esi edi r8d r11d
..B1.76:                        # Preds ..B1.75
..LN720:
        movq      %r9, 56(%rsp)                                 #
..LN721:
        movl      64(%rsp), %edx                                #
..LN722:
        movq      72(%rsp), %rcx                                #
..LN723:
        movq      80(%rsp), %r14                                #
..LN724:
        movl      96(%rsp), %r13d                               #
..LN725:
        movl      232(%rsp), %r15d                              #
..LN726:
        movq      168(%rsp), %r12                               #
..LN727:
                                # LOE rcx r10 r12 r14 eax edx ebx esi edi r8d r13d r15d
..B1.77:                        # Preds ..B1.73 ..B1.76 ..B1.337
..LN728:
        movq      144(%rsp), %r9                                #180.32
..LN729:
        lea       (%r15,%r15,8), %r11d                          #180.32
..LN730:
        movslq    %ebx, %rbx                                    #180.5
..LN731:
        addl      %edi, %r11d                                   #180.32
..LN732:
        movl      %r11d, 24(%rsp)                               #180.32
..LN733:
        lea       8(,%r9,8), %r9                                #180.32
..LN734:
        movl      %ebx, 8(%rsp)                                 #180.32
..LN735:
        lea       (%r9,%r9,2), %rdi                             #180.32
..LN736:
        movl      %r8d, 16(%rsp)                                #180.32
..LN737:
        movq      %r10, 48(%rsp)                                #180.32
..LN738:
        movl      %edx, 64(%rsp)                                #180.32
..LN739:
        movq      %rcx, 72(%rsp)                                #180.32
..LN740:
        movq      %r14, 80(%rsp)                                #180.32
..LN741:
        movq      %r12, 168(%rsp)                               #180.32
..LN742:
        vmovupd   .L_2il0floatpacket.7(%rip), %ymm0             #180.65
..LN743:
        movl      %r13d, 96(%rsp)                               #180.32
..LN744:
        movl      %r15d, 232(%rsp)                              #180.32
..LN745:
        movq      32(%rsp), %r12                                #180.32
..LN746:
        movl      40(%rsp), %r11d                               #180.32
..LN747:
        movq      %rbx, %r14                                    #180.32
..LN748:
        movl      24(%rsp), %edx                                #180.32
..LN749:
        movq      56(%rsp), %rcx                                #180.32
..LN750:
        movq      (%rsp), %rbx                                  #180.32
..LN751:
        movq      192(%rsp), %r8                                #180.32
..LN752:
        movl      208(%rsp), %r10d                              #180.32
..LN753:
                                # LOE rcx rbx rdi r8 r9 r12 r14 eax edx esi r10d r11d ymm0
..B1.78:                        # Preds ..B1.78 ..B1.77
..L23:          # optimization report
                # LOOP WAS UNROLLED BY 2
                # LOOP WAS VECTORIZED
                # VECTORIZATION HAS UNALIGNED MEMORY REFERENCES
                # VECTORIZATION SPEEDUP COEFFECIENT 3.888672
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 8
                # NORMALIZED VECTORIZATION OVERHEAD 0.187500
                # MAIN VECTOR TYPE: 64-bits floating point
..LN754:
        movl      %ecx, %r13d                                   #180.32
..LN755:
        vmovupd   (%rbx,%rcx,8), %ymm5                          #180.46
..LN756:
        vmovupd   32(%rbx,%rcx,8), %ymm6                        #180.46
..LN757:
        vmovupd   64(%rbx,%rcx,8), %ymm11                       #180.46
..LN758:
        vmovupd   96(%rbx,%rcx,8), %ymm12                       #180.46
..LN759:
        imull     %r10d, %r13d                                  #180.32
..LN760:
        vsubpd    %ymm5, %ymm0, %ymm1                           #180.67
..LN761:
        vsubpd    %ymm6, %ymm0, %ymm2                           #180.67
..LN762:
        vsubpd    %ymm11, %ymm0, %ymm7                          #180.67
..LN763:
        vsubpd    %ymm12, %ymm0, %ymm8                          #180.67
..LN764:
        vmulpd    8(%r12,%rcx,8), %ymm1, %ymm3                  #180.78
..LN765:
        vmulpd    40(%r12,%rcx,8), %ymm2, %ymm4                 #180.78
..LN766:
        vmulpd    72(%r12,%rcx,8), %ymm7, %ymm9                 #180.78
..LN767:
        vmulpd    104(%r12,%rcx,8), %ymm8, %ymm10               #180.78
..LN768:
        vfmadd132pd (%r12,%rcx,8), %ymm3, %ymm5                 #180.78
..LN769:
        vfmadd132pd 32(%r12,%rcx,8), %ymm4, %ymm6               #180.78
..LN770:
        vfmadd132pd 64(%r12,%rcx,8), %ymm9, %ymm11              #180.78
..LN771:
        vfmadd132pd 96(%r12,%rcx,8), %ymm10, %ymm12             #180.78
..LN772:
        addq      $16, %rcx                                     #180.5
..LN773:
	.loc    1  142  is_stmt 1
        lea       (%r11,%r13), %r15d                            #142.12
..LN774:
	.loc    1  180  is_stmt 1
        movslq    %r15d, %r15                                   #180.32
..LN775:
        addl      %edx, %r13d                                   #180.32
..LN776:
        movslq    %r13d, %r13                                   #180.32
..LN777:
        vextractf128 $1, %ymm5, %xmm13                          #180.32
..LN778:
        lea       (%r8,%r15,8), %r15                            #180.32
..LN779:
        vmovsd    %xmm5, 8(%r15)                                #180.32
..LN780:
        vmovhpd   %xmm5, 8(%r9,%r15)                            #180.32
..LN781:
        vmovsd    %xmm13, 8(%r15,%r9,2)                         #180.32
..LN782:
        lea       (%r8,%r13,8), %r13                            #180.32
..LN783:
        vmovhpd   %xmm13, 8(%rdi,%r15)                          #180.32
..LN784:
        lea       8(%r15,%r9,4), %r15                           #180.32
..LN785:
        vextractf128 $1, %ymm6, %xmm14                          #180.32
..LN786:
        vmovsd    %xmm6, (%r15)                                 #180.32
..LN787:
        vmovhpd   %xmm6, (%r9,%r15)                             #180.32
..LN788:
        vmovsd    %xmm14, (%r15,%r9,2)                          #180.32
..LN789:
        vmovhpd   %xmm14, (%rdi,%r15)                           #180.32
..LN790:
        lea       72(%r13,%r9,4), %r15                          #180.32
..LN791:
        vextractf128 $1, %ymm11, %xmm15                         #180.32
..LN792:
        vmovsd    %xmm11, 72(%r13)                              #180.32
..LN793:
        vmovhpd   %xmm11, 72(%r9,%r13)                          #180.32
..LN794:
        vmovsd    %xmm15, 72(%r13,%r9,2)                        #180.32
..LN795:
        vmovhpd   %xmm15, 72(%rdi,%r13)                         #180.32
..LN796:
        vextractf128 $1, %ymm12, %xmm1                          #180.32
..LN797:
        vmovsd    %xmm12, (%r15)                                #180.32
..LN798:
        vmovhpd   %xmm12, (%r9,%r15)                            #180.32
..LN799:
        vmovsd    %xmm1, (%r15,%r9,2)                           #180.32
..LN800:
        vmovhpd   %xmm1, (%rdi,%r15)                            #180.32
..LN801:
        cmpq      %r14, %rcx                                    #180.5
..LN802:
        jb        ..B1.78       # Prob 81%                      #180.5
..LN803:
                                # LOE rcx rbx rdi r8 r9 r12 r14 eax edx esi r10d r11d ymm0
..B1.79:                        # Preds ..B1.78
..LN804:
        movl      8(%rsp), %ebx                                 #
..LN805:
        movl      16(%rsp), %r8d                                #
..LN806:
        movq      48(%rsp), %r10                                #
..LN807:
        movl      64(%rsp), %edx                                #
..LN808:
        movq      72(%rsp), %rcx                                #
..LN809:
        movq      80(%rsp), %r14                                #
..LN810:
        movl      96(%rsp), %r13d                               #
..LN811:
        movl      232(%rsp), %r15d                              #
..LN812:
        movq      168(%rsp), %r12                               #
..LN813:
                                # LOE rcx r10 r12 r14 eax edx ebx esi r8d r13d r15d
..B1.80:                        # Preds ..B1.79 ..B1.335
..LN814:
        lea       1(%rbx), %edi                                 #180.5
..LN815:
        cmpl      %edi, %r8d                                    #180.5
..LN816:
        jb        ..B1.89       # Prob 50%                      #180.5
..LN817:
                                # LOE rcx r10 r12 r14 eax edx ebx esi r8d r13d r15d
..B1.81:                        # Preds ..B1.80
..LN818:
        movslq    %r8d, %r8                                     #180.5
..LN819:
        movslq    %ebx, %rbx                                    #180.5
..LN820:
        subq      %rbx, %r8                                     #180.5
..LN821:
        cmpq      $4, %r8                                       #180.5
..LN822:
        jl        ..B1.334      # Prob 10%                      #180.5
..LN823:
                                # LOE rcx r8 r10 r12 r14 eax edx ebx esi r13d r15d
..B1.82:                        # Preds ..B1.81
..LN824:
        movq      144(%rsp), %rdi                               #180.32
..LN825:
	.loc    1  142  is_stmt 1
        lea       -1(%rbx,%rdx), %r11d                          #142.12
..LN826:
        imull     208(%rsp), %r11d                              #142.12
..LN827:
	.loc    1  180  is_stmt 1
        movl      %r8d, %r9d                                    #180.5
..LN828:
        vmovupd   .L_2il0floatpacket.8(%rip), %ymm0             #180.65
..LN829:
        movslq    %ebx, %rbx                                    #180.46
..LN830:
	.loc    1  142  is_stmt 1
        addl      %r15d, %r11d                                  #142.12
..LN831:
        movl      %r11d, 8(%rsp)                                #142.12
..LN832:
	.loc    1  180  is_stmt 1
        lea       (%rcx,%r10,8), %r11                           #180.56
..LN833:
        movq      $0, (%rsp)                                    #180.5
..LN834:
        lea       8(,%rdi,8), %rdi                              #180.32
..LN835:
        andl      $-4, %r9d                                     #180.5
..LN836:
        movq      %r10, 48(%rsp)                                #180.32
..LN837:
        lea       (%r11,%rbx,8), %r11                           #180.56
..LN838:
        movq      %r11, 16(%rsp)                                #180.56
..LN839:
        movq      16(%rbp), %r11                                #180.46
..LN840:
        movl      %edx, 64(%rsp)                                #180.32
..LN841:
        movq      %rcx, 72(%rsp)                                #180.32
..LN842:
        movq      %r14, 80(%rsp)                                #180.32
..LN843:
        lea       (%r11,%r10,8), %r11                           #180.46
..LN844:
        movl      %r13d, 96(%rsp)                               #180.32
..LN845:
        lea       (%r11,%rbx,8), %r11                           #180.46
..LN846:
        movq      %r11, 24(%rsp)                                #180.46
..LN847:
        lea       (%rdi,%rdi,2), %r11                           #180.32
..LN848:
        movq      %r12, 168(%rsp)                               #180.32
..LN849:
        movslq    %r9d, %r9                                     #180.5
..LN850:
        movl      %r15d, 232(%rsp)                              #180.32
..LN851:
        movq      %r11, %r12                                    #180.32
..LN852:
        movq      24(%rsp), %r11                                #180.32
..LN853:
        movq      16(%rsp), %r14                                #180.32
..LN854:
        movl      8(%rsp), %edx                                 #180.32
..LN855:
        movq      (%rsp), %r13                                  #180.32
..LN856:
        movq      192(%rsp), %rcx                               #180.32
..LN857:
        movl      208(%rsp), %r10d                              #180.32
..LN858:
        .align    16,0x90
..LN859:
                                # LOE rcx rdi r8 r9 r11 r12 r13 r14 eax edx ebx esi r10d ymm0
..B1.83:                        # Preds ..B1.83 ..B1.82
..L24:          # optimization report
                # LOOP WAS VECTORIZED
                # REMAINDER LOOP FOR VECTORIZATION
                # VECTORIZATION HAS UNALIGNED MEMORY REFERENCES
                # VECTORIZATION SPEEDUP COEFFECIENT 2.250000
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 0.812500
                # MAIN VECTOR TYPE: 64-bits floating point
..LN860:
        movl      %r13d, %r15d                                  #180.32
..LN861:
        vmovupd   (%r11,%r13,8), %ymm3                          #180.46
..LN862:
        imull     %r10d, %r15d                                  #180.32
..LN863:
        vsubpd    %ymm3, %ymm0, %ymm1                           #180.67
..LN864:
        vmulpd    8(%r14,%r13,8), %ymm1, %ymm2                  #180.78
..LN865:
        addl      %edx, %r15d                                   #180.32
..LN866:
        vfmadd132pd (%r14,%r13,8), %ymm2, %ymm3                 #180.78
..LN867:
        addq      $4, %r13                                      #180.5
..LN868:
        movslq    %r15d, %r15                                   #180.32
..LN869:
        vextractf128 $1, %ymm3, %xmm4                           #180.32
..LN870:
        lea       8(%rcx,%r15,8), %r15                          #180.32
..LN871:
        vmovsd    %xmm3, (%r15)                                 #180.32
..LN872:
        vmovhpd   %xmm3, (%rdi,%r15)                            #180.32
..LN873:
        vmovsd    %xmm4, (%r15,%rdi,2)                          #180.32
..LN874:
        vmovhpd   %xmm4, (%r12,%r15)                            #180.32
..LN875:
        cmpq      %r9, %r13                                     #180.5
..LN876:
        jb        ..B1.83       # Prob 81%                      #180.5
..LN877:
                                # LOE rcx rdi r8 r9 r11 r12 r13 r14 eax edx ebx esi r10d ymm0
..B1.84:                        # Preds ..B1.83
..LN878:
        movq      48(%rsp), %r10                                #
..LN879:
        movl      64(%rsp), %edx                                #
..LN880:
        movq      72(%rsp), %rcx                                #
..LN881:
        movq      80(%rsp), %r14                                #
..LN882:
        movl      96(%rsp), %r13d                               #
..LN883:
        movl      232(%rsp), %r15d                              #
..LN884:
        movq      168(%rsp), %r12                               #
..LN885:
                                # LOE rcx r8 r9 r10 r12 r14 eax edx ebx esi r13d r15d
..B1.85:                        # Preds ..B1.84 ..B1.334
..LN886:
        cmpq      %r8, %r9                                      #180.5
..LN887:
        jae       ..B1.89       # Prob 9%                       #180.5
..LN888:
                                # LOE rcx r8 r9 r10 r12 r14 eax edx ebx esi r13d r15d
..B1.86:                        # Preds ..B1.85
..LN889:
        movq      16(%rbp), %r11                                #180.67
..LN890:
        movq      %r12, 168(%rsp)                               #180.46
..LN891:
        movl      %r15d, 232(%rsp)                              #180.46
..LN892:
        movl      208(%rsp), %r12d                              #180.46
..LN893:
        lea       (%r11,%r10,8), %rdi                           #180.67
..LN894:
	.loc    1  142  is_stmt 1
        lea       -1(%rbx,%rdx), %r11d                          #142.12
..LN895:
	.loc    1  180  is_stmt 1
        movslq    %ebx, %rbx                                    #180.46
..LN896:
	.loc    1  142  is_stmt 1
        imull     208(%rsp), %r11d                              #142.12
..LN897:
	.loc    1  180  is_stmt 1
        lea       (%rcx,%r10,8), %r10                           #180.78
..LN898:
	.loc    1  142  is_stmt 1
        addl      %r15d, %r11d                                  #142.12
..LN899:
	.loc    1  180  is_stmt 1
        lea       (%r10,%rbx,8), %r10                           #180.56
..LN900:
        lea       (%rdi,%rbx,8), %rbx                           #180.46
..LN901:
        movq      192(%rsp), %rdi                               #180.46
..LN902:
                                # LOE rcx rbx rdi r8 r9 r10 r14 eax edx esi r11d r12d r13d
..B1.87:                        # Preds ..B1.87 ..B1.86
..L25:          # optimization report
                # REMAINDER LOOP FOR VECTORIZATION
                # VECTORIZATION SPEEDUP COEFFECIENT 2.250000
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 0.812500
..LN903:
        movl      %r9d, %r15d                                   #180.32
..LN904:
        vmovsd    8(%r10,%r9,8), %xmm0                          #180.78
..LN905:
        imull     %r12d, %r15d                                  #180.32
..LN906:
        vsubsd    (%r10,%r9,8), %xmm0, %xmm1                    #180.32
..LN907:
        addl      %r11d, %r15d                                  #180.32
..LN908:
        vfnmadd132sd (%rbx,%r9,8), %xmm0, %xmm1                 #180.32
..LN909:
        incq      %r9                                           #180.5
..LN910:
        movslq    %r15d, %r15                                   #180.32
..LN911:
        vmovsd    %xmm1, 8(%rdi,%r15,8)                         #180.32
..LN912:
        cmpq      %r8, %r9                                      #180.5
..LN913:
        jb        ..B1.87       # Prob 81%                      #180.5
..LN914:
                                # LOE rcx rbx rdi r8 r9 r10 r14 eax edx esi r11d r12d r13d
..B1.88:                        # Preds ..B1.87
..LN915:
        movl      232(%rsp), %r15d                              #
..LN916:
        movq      168(%rsp), %r12                               #
..LN917:
                                # LOE rcx r12 r14 eax edx esi r13d r15d
..B1.89:                        # Preds ..B1.357 ..B1.365 ..B1.41 ..B1.66 ..B1.80
                                #       ..B1.85 ..B1.88
..LN918:
	.loc    1  184  is_stmt 1
        testl     %r13d, %r13d                                  #184.6
..LN919:
        je        ..B1.135      # Prob 50%                      #184.6
..LN920:
                                # LOE rcx r12 r14 eax edx esi r15d
..B1.90:                        # Preds ..B1.89
..LN921:
	.loc    1  185  is_stmt 1
        cmpl      %esi, %edx                                    #185.22
..LN922:
        jg        ..B1.364      # Prob 50%                      #185.22
..LN923:
                                # LOE rcx r12 r14 eax edx esi r15d
..B1.91:                        # Preds ..B1.90
..LN924:
        movl      %esi, %edi                                    #185.5
..LN925:
        subl      %edx, %edi                                    #185.5
..LN926:
        incl      %edi                                          #185.5
..LN927:
        cmpl      $8, %edi                                      #185.5
..LN928:
        jl        ..B1.333      # Prob 10%                      #185.5
..LN929:
                                # LOE rcx r12 r14 eax edx esi edi r15d
..B1.92:                        # Preds ..B1.91
..LN930:
        movl      %edx, %r9d                                    #185.32
..LN931:
        lea       (%rcx,%r9,8), %r13                            #185.32
..LN932:
        movq      %r13, (%rsp)                                  #185.32
..LN933:
        andq      $15, %r13                                     #185.5
..LN934:
        movl      %r13d, %r13d                                  #185.5
..LN935:
        testl     %r13d, %r13d                                  #185.5
..LN936:
        je        ..B1.95       # Prob 50%                      #185.5
..LN937:
                                # LOE rcx r9 r12 r13 r14 eax edx esi edi r15d
..B1.93:                        # Preds ..B1.92
..LN938:
        testl     $7, %r13d                                     #185.5
..LN939:
        jne       ..B1.331      # Prob 10%                      #185.5
..LN940:
                                # LOE rcx r9 r12 r14 eax edx esi edi r15d
..B1.94:                        # Preds ..B1.93
..LN941:
        movl      $1, %r13d                                     #185.5
..LN942:
                                # LOE rcx r9 r12 r13 r14 eax edx esi edi r15d
..B1.95:                        # Preds ..B1.94 ..B1.92
..LN943:
        lea       8(%r13), %ebx                                 #185.5
..LN944:
        cmpl      %ebx, %edi                                    #185.5
..LN945:
        jl        ..B1.331      # Prob 10%                      #185.5
..LN946:
                                # LOE rcx r9 r12 r13 r14 eax edx esi edi r15d
..B1.96:                        # Preds ..B1.95
..LN947:
        movl      %edi, %ebx                                    #185.5
..LN948:
	.loc    1  167  is_stmt 1
        lea       2(%r15), %r8d                                 #167.37
..LN949:
	.loc    1  185  is_stmt 1
        subl      %r13d, %ebx                                   #185.5
..LN950:
        lea       -1(%rdx), %r11d                               #185.32
..LN951:
        imull     %r8d, %r11d                                   #185.32
..LN952:
        andl      $7, %ebx                                      #185.5
..LN953:
        negl      %ebx                                          #185.5
..LN954:
        lea       (%r11,%r15,2), %r10d                          #185.45
..LN955:
        addl      %edi, %ebx                                    #185.5
..LN956:
        movl      $0, 48(%rsp)                                  #185.5
..LN957:
        movq      $0, 32(%rsp)                                  #185.32
..LN958:
        movl      %r10d, 40(%rsp)                               #185.45
..LN959:
        testl     %r13d, %r13d                                  #185.5
..LN960:
        jbe       ..B1.100      # Prob 15%                      #185.5
..LN961:
                                # LOE rcx r9 r10 r12 r13 r14 eax edx ebx esi edi r8d r10d r11d r15d r10b
..B1.97:                        # Preds ..B1.96
..LN962:
        movl      $0, 24(%rsp)                                  #185.32
..LN963:
        movl      %r8d, 8(%rsp)                                 #185.32
..LN964:
        movl      %r11d, 16(%rsp)                               #185.32
..LN965:
        movl      %edx, 64(%rsp)                                #185.32
..LN966:
        movq      %rcx, 72(%rsp)                                #185.32
..LN967:
        vmovsd    .L_2il0floatpacket.3(%rip), %xmm0             #185.40
..LN968:
        movq      %r14, 80(%rsp)                                #185.32
..LN969:
        movl      24(%rsp), %r11d                               #185.32
..LN970:
        movl      %r10d, %r8d                                   #185.32
..LN971:
        movq      32(%rsp), %r10                                #185.32
..LN972:
        movl      48(%rsp), %ecx                                #185.32
..LN973:
        movq      (%rsp), %rdx                                  #185.32
..LN974:
                                # LOE rdx r9 r10 r12 r13 eax ecx ebx esi edi r8d r11d r15d xmm0
..B1.98:                        # Preds ..B1.98 ..B1.97
..L26:          # optimization report
                # LOOP WAS UNROLLED BY 4
                # PEELED LOOP FOR VECTORIZATION
                # VECTORIZATION SPEEDUP COEFFECIENT 3.494141
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 2
                # NORMALIZED VECTORIZATION OVERHEAD 0.234375
..LN975:
	.loc    1  167  is_stmt 1
        lea       (%r8,%r11), %r14d                             #167.37
..LN976:
	.loc    1  185  is_stmt 1
        movslq    %r14d, %r14                                   #185.45
..LN977:
        incl      %ecx                                          #185.5
..LN978:
        lea       2(%r11,%r15), %r11d                           #185.5
..LN979:
        vmovsd    16(%r12,%r14,8), %xmm1                        #185.45
..LN980:
        vaddsd    24(%r12,%r14,8), %xmm1, %xmm2                 #185.64
..LN981:
        vmulsd    %xmm2, %xmm0, %xmm3                           #185.64
..LN982:
        vmovsd    %xmm3, (%rdx,%r10,8)                          #185.32
..LN983:
        incq      %r10                                          #185.5
..LN984:
        cmpl      %r13d, %ecx                                   #185.5
..LN985:
        jb        ..B1.98       # Prob 82%                      #185.5
..LN986:
                                # LOE rdx r9 r10 r12 r13 eax ecx ebx esi edi r8d r11d r15d xmm0
..B1.99:                        # Preds ..B1.98
..LN987:
        movl      8(%rsp), %r8d                                 #
..LN988:
        movl      16(%rsp), %r11d                               #
..LN989:
        movl      64(%rsp), %edx                                #
..LN990:
        movq      72(%rsp), %rcx                                #
..LN991:
        movq      80(%rsp), %r14                                #
..LN992:
                                # LOE rcx r9 r12 r13 r14 eax edx ebx esi edi r8d r11d r15d
..B1.100:                       # Preds ..B1.96 ..B1.99
..LN993:
        imull     %r13d, %r8d                                   #185.5
..LN994:
        lea       16(,%r15,8), %r10d                            #185.5
..LN995:
        vmovupd   .L_2il0floatpacket.6(%rip), %xmm0             #185.40
..LN996:
        movl      %r10d, 8(%rsp)                                #185.5
..LN997:
        movl      176(%rsp), %r10d                              #185.45
..LN998:
        movl      %eax, 248(%rsp)                               #185.45
..LN999:
        addl      %r15d, %r10d                                  #185.45
..LN1000:
        addl      %r11d, %r10d                                  #185.45
..LN1001:
        movl      %r10d, 16(%rsp)                               #185.45
..LN1002:
        lea       (%r15,%r15,4), %r10d                          #185.45
..LN1003:
        addl      %r15d, %r10d                                  #185.45
..LN1004:
        movl      %esi, 88(%rsp)                                #185.45
..LN1005:
        addl      %r11d, %r10d                                  #185.45
..LN1006:
        movq      %r9, 32(%rsp)                                 #185.45
..LN1007:
        lea       (%r11,%r15,8), %r11d                          #185.45
..LN1008:
        movl      %edi, 24(%rsp)                                #185.45
..LN1009:
        movl      %edx, 64(%rsp)                                #185.45
..LN1010:
        movq      %rcx, 72(%rsp)                                #185.45
..LN1011:
        movq      %r14, 80(%rsp)                                #185.45
..LN1012:
        movl      %r15d, 232(%rsp)                              #185.45
..LN1013:
        movl      16(%rsp), %r9d                                #185.45
..LN1014:
        movq      %r13, %rdi                                    #185.45
..LN1015:
        movl      8(%rsp), %esi                                 #185.45
..LN1016:
        movl      40(%rsp), %eax                                #185.45
..LN1017:
        movq      (%rsp), %rdx                                  #185.45
..LN1018:
        movq      144(%rsp), %rcx                               #185.45
..LN1019:
                                # LOE rdx rcx rdi r12 eax ebx esi r8d r9d r10d r11d r13d xmm0
..B1.101:                       # Preds ..B1.101 ..B1.100
..L27:          # optimization report
                # LOOP WAS UNROLLED BY 4
                # LOOP WAS VECTORIZED
                # VECTORIZATION SPEEDUP COEFFECIENT 3.494141
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 2
                # NORMALIZED VECTORIZATION OVERHEAD 0.234375
                # MAIN VECTOR TYPE: 64-bits floating point
..LN1020:
	.loc    1  167  is_stmt 1
        lea       (%rax,%r8), %r14d                             #167.37
..LN1021:
	.loc    1  185  is_stmt 1
        movslq    %r14d, %r14                                   #185.45
..LN1022:
        addl      $8, %r13d                                     #185.5
..LN1023:
        lea       16(%r12,%r14,8), %r15                         #185.45
..LN1024:
        vmovsd    (%r15), %xmm1                                 #185.45
..LN1025:
        vmovhpd   16(%r15,%rcx,8), %xmm1, %xmm3                 #185.45
..LN1026:
        lea       24(%r12,%r14,8), %r15                         #185.64
..LN1027:
        vmovsd    (%r15), %xmm2                                 #185.64
..LN1028:
        lea       (%r9,%r8), %r14d                              #185.45
..LN1029:
        movslq    %r14d, %r14                                   #185.45
..LN1030:
        vmovhpd   16(%r15,%rcx,8), %xmm2, %xmm4                 #185.64
..LN1031:
        vaddpd    %xmm4, %xmm3, %xmm5                           #185.64
..LN1032:
        vmulpd    %xmm5, %xmm0, %xmm6                           #185.64
..LN1033:
        vmovupd   %xmm6, (%rdx,%rdi,8)                          #185.32
..LN1034:
        lea       48(%r12,%r14,8), %r15                         #185.45
..LN1035:
        vmovsd    (%r15), %xmm7                                 #185.45
..LN1036:
        vmovhpd   16(%r15,%rcx,8), %xmm7, %xmm9                 #185.45
..LN1037:
        lea       56(%r12,%r14,8), %r15                         #185.64
..LN1038:
        vmovsd    (%r15), %xmm8                                 #185.64
..LN1039:
        lea       (%r10,%r8), %r14d                             #185.45
..LN1040:
        movslq    %r14d, %r14                                   #185.45
..LN1041:
        vmovhpd   16(%r15,%rcx,8), %xmm8, %xmm10                #185.64
..LN1042:
        vaddpd    %xmm10, %xmm9, %xmm11                         #185.64
..LN1043:
        vmulpd    %xmm11, %xmm0, %xmm12                         #185.64
..LN1044:
        vmovupd   %xmm12, 16(%rdx,%rdi,8)                       #185.32
..LN1045:
        lea       80(%r12,%r14,8), %r15                         #185.45
..LN1046:
        vmovsd    (%r15), %xmm13                                #185.45
..LN1047:
        vmovhpd   16(%r15,%rcx,8), %xmm13, %xmm15               #185.45
..LN1048:
        lea       88(%r12,%r14,8), %r15                         #185.64
..LN1049:
        vmovsd    (%r15), %xmm14                                #185.64
..LN1050:
        lea       (%r11,%r8), %r14d                             #185.45
..LN1051:
        movslq    %r14d, %r14                                   #185.45
..LN1052:
        addl      %esi, %r8d                                    #185.5
..LN1053:
        vmovhpd   16(%r15,%rcx,8), %xmm14, %xmm1                #185.64
..LN1054:
        vaddpd    %xmm1, %xmm15, %xmm2                          #185.64
..LN1055:
        vmulpd    %xmm2, %xmm0, %xmm3                           #185.64
..LN1056:
        vmovupd   %xmm3, 32(%rdx,%rdi,8)                        #185.32
..LN1057:
        lea       112(%r12,%r14,8), %r15                        #185.45
..LN1058:
        vmovsd    (%r15), %xmm4                                 #185.45
..LN1059:
        vmovhpd   16(%r15,%rcx,8), %xmm4, %xmm6                 #185.45
..LN1060:
        lea       120(%r12,%r14,8), %r15                        #185.64
..LN1061:
        vmovsd    (%r15), %xmm5                                 #185.64
..LN1062:
        vmovhpd   16(%r15,%rcx,8), %xmm5, %xmm7                 #185.64
..LN1063:
        vaddpd    %xmm7, %xmm6, %xmm8                           #185.64
..LN1064:
        vmulpd    %xmm8, %xmm0, %xmm9                           #185.64
..LN1065:
        vmovupd   %xmm9, 48(%rdx,%rdi,8)                        #185.32
..LN1066:
        addq      $8, %rdi                                      #185.5
..LN1067:
        cmpl      %ebx, %r13d                                   #185.5
..LN1068:
        jb        ..B1.101      # Prob 82%                      #185.5
..LN1069:
                                # LOE rdx rcx rdi r12 eax ebx esi r8d r9d r10d r11d r13d xmm0
..B1.102:                       # Preds ..B1.101
..LN1070:
        movl      248(%rsp), %eax                               #
..LN1071:
        movl      88(%rsp), %esi                                #
..LN1072:
        movq      32(%rsp), %r9                                 #
..LN1073:
        movl      24(%rsp), %edi                                #
..LN1074:
        movl      64(%rsp), %edx                                #
..LN1075:
        movq      72(%rsp), %rcx                                #
..LN1076:
        movq      80(%rsp), %r14                                #
..LN1077:
        movl      232(%rsp), %r15d                              #
..LN1078:
                                # LOE rcx r9 r12 r14 eax edx ebx esi edi r15d
..B1.103:                       # Preds ..B1.102 ..B1.331 ..B1.333
..LN1079:
        lea       1(%rbx), %r8d                                 #185.5
..LN1080:
        cmpl      %r8d, %edi                                    #185.5
..LN1081:
        jb        ..B1.355      # Prob 50%                      #185.5
..LN1082:
                                # LOE rcx r9 r12 r14 eax edx ebx esi edi r15d
..B1.104:                       # Preds ..B1.103
..LN1083:
        subl      %ebx, %edi                                    #185.5
..LN1084:
        cmpl      $2, %edi                                      #185.5
..LN1085:
        jl        ..B1.330      # Prob 10%                      #185.5
..LN1086:
                                # LOE rcx r9 r12 r14 eax edx ebx esi edi r15d
..B1.105:                       # Preds ..B1.104
..LN1087:
        xorl      %r10d, %r10d                                  #185.5
..LN1088:
        lea       4(%r15,%r15), %r13d                           #185.5
..LN1089:
        movl      %r13d, 8(%rsp)                                #185.5
..LN1090:
	.loc    1  167  is_stmt 1
        lea       2(%r15), %r11d                                #167.37
..LN1091:
        lea       -1(%rbx,%rdx), %r13d                          #167.37
..LN1092:
        imull     %r11d, %r13d                                  #167.37
..LN1093:
	.loc    1  185  is_stmt 1
        movl      %edi, %r8d                                    #185.5
..LN1094:
        vmovupd   .L_2il0floatpacket.5(%rip), %xmm0             #185.40
..LN1095:
        movl      %ebx, (%rsp)                                  #185.5
..LN1096:
	.loc    1  167  is_stmt 1
        lea       (%r13,%r15,2), %r11d                          #167.37
..LN1097:
	.loc    1  185  is_stmt 1
        movslq    %ebx, %r13                                    #185.32
..LN1098:
        andl      $-2, %r8d                                     #185.5
..LN1099:
        addq      %r9, %r13                                     #185.32
..LN1100:
	.loc    1  167  is_stmt 1
        movl      %r11d, 16(%rsp)                               #167.37
..LN1101:
	.loc    1  185  is_stmt 1
        xorl      %r11d, %r11d                                  #185.5
..LN1102:
        movl      %edx, 64(%rsp)                                #185.5
..LN1103:
        movq      %rcx, 72(%rsp)                                #185.5
..LN1104:
        movq      %r14, 80(%rsp)                                #185.5
..LN1105:
        lea       (%rcx,%r13,8), %r13                           #185.32
..LN1106:
        movl      %r15d, 232(%rsp)                              #185.5
..LN1107:
        movl      %r10d, %ebx                                   #185.5
..LN1108:
        movl      16(%rsp), %r14d                               #185.5
..LN1109:
        movl      8(%rsp), %edx                                 #185.5
..LN1110:
        movq      144(%rsp), %rcx                               #185.5
..LN1111:
        .align    16,0x90
..LN1112:
                                # LOE rcx r9 r11 r12 r13 eax edx ebx esi edi r8d r10d r14d xmm0
..B1.106:                       # Preds ..B1.106 ..B1.105
..L28:          # optimization report
                # LOOP WAS VECTORIZED
                # REMAINDER LOOP FOR VECTORIZATION
                # VECTORIZATION HAS UNALIGNED MEMORY REFERENCES
                # VECTORIZATION SPEEDUP COEFFECIENT 1.867188
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 2
                # NORMALIZED VECTORIZATION OVERHEAD 0.937500
                # MAIN VECTOR TYPE: 64-bits floating point
..LN1113:
        lea       (%r14,%rbx), %r15d                            #185.45
..LN1114:
        movslq    %r15d, %r15                                   #185.45
..LN1115:
        addl      $2, %r10d                                     #185.5
..LN1116:
        addl      %edx, %ebx                                    #185.5
..LN1117:
        lea       (%r12,%r15,8), %r15                           #185.45
..LN1118:
        vmovsd    16(%r15), %xmm1                               #185.45
..LN1119:
        vmovsd    24(%r15), %xmm2                               #185.64
..LN1120:
        vmovhpd   32(%r15,%rcx,8), %xmm1, %xmm3                 #185.45
..LN1121:
        vmovhpd   40(%r15,%rcx,8), %xmm2, %xmm4                 #185.64
..LN1122:
        vaddpd    %xmm4, %xmm3, %xmm5                           #185.64
..LN1123:
        vmulpd    %xmm5, %xmm0, %xmm6                           #185.64
..LN1124:
        vmovupd   %xmm6, (%r13,%r11,8)                          #185.32
..LN1125:
        addq      $2, %r11                                      #185.5
..LN1126:
        cmpl      %r8d, %r10d                                   #185.5
..LN1127:
        jb        ..B1.106      # Prob 82%                      #185.5
..LN1128:
                                # LOE rcx r9 r11 r12 r13 eax edx ebx esi edi r8d r10d r14d xmm0
..B1.107:                       # Preds ..B1.106
..LN1129:
        movl      (%rsp), %ebx                                  #
..LN1130:
        movl      64(%rsp), %edx                                #
..LN1131:
        movq      72(%rsp), %rcx                                #
..LN1132:
        movq      80(%rsp), %r14                                #
..LN1133:
        movl      232(%rsp), %r15d                              #
..LN1134:
                                # LOE rcx r9 r12 r14 eax edx ebx esi edi r8d r15d
..B1.108:                       # Preds ..B1.107 ..B1.330
..LN1135:
        movslq    %r8d, %r11                                    #185.5
..LN1136:
        cmpl      %edi, %r8d                                    #185.5
..LN1137:
        jae       ..B1.355      # Prob 15%                      #185.5
..LN1138:
                                # LOE rcx r9 r11 r12 r14 eax edx ebx esi edi r8d r15d
..B1.109:                       # Preds ..B1.108
..LN1139:
        movl      %r8d, %r13d                                   #185.5
..LN1140:
	.loc    1  167  is_stmt 1
        lea       2(%r15), %r10d                                #167.37
..LN1141:
	.loc    1  185  is_stmt 1
        imull     %r10d, %r13d                                  #185.5
..LN1142:
        vmovsd    .L_2il0floatpacket.3(%rip), %xmm0             #185.40
..LN1143:
        movl      %r13d, (%rsp)                                 #185.5
..LN1144:
	.loc    1  167  is_stmt 1
        lea       -1(%rbx,%rdx), %r13d                          #167.37
..LN1145:
	.loc    1  185  is_stmt 1
        movslq    %ebx, %rbx                                    #185.32
..LN1146:
	.loc    1  167  is_stmt 1
        imull     %r10d, %r13d                                  #167.37
..LN1147:
	.loc    1  185  is_stmt 1
        addq      %r9, %rbx                                     #185.32
..LN1148:
        movq      %r14, 80(%rsp)                                #185.32
..LN1149:
	.loc    1  167  is_stmt 1
        lea       (%r13,%r15,2), %r10d                          #167.37
..LN1150:
	.loc    1  185  is_stmt 1
        lea       (%rcx,%rbx,8), %r13                           #185.32
..LN1151:
        movl      (%rsp), %ebx                                  #185.32
..LN1152:
                                # LOE rcx r9 r11 r12 r13 eax edx ebx esi edi r8d r10d r15d xmm0
..B1.110:                       # Preds ..B1.110 ..B1.109
..L29:          # optimization report
                # REMAINDER LOOP FOR VECTORIZATION
                # VECTORIZATION SPEEDUP COEFFECIENT 1.867188
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 2
                # NORMALIZED VECTORIZATION OVERHEAD 0.937500
..LN1153:
        lea       (%r10,%rbx), %r14d                            #185.45
..LN1154:
        movslq    %r14d, %r14                                   #185.64
..LN1155:
        incl      %r8d                                          #185.5
..LN1156:
        lea       2(%rbx,%r15), %ebx                            #185.5
..LN1157:
        vmovsd    16(%r12,%r14,8), %xmm1                        #185.45
..LN1158:
        vaddsd    24(%r12,%r14,8), %xmm1, %xmm2                 #185.64
..LN1159:
        vmulsd    %xmm2, %xmm0, %xmm3                           #185.64
..LN1160:
        vmovsd    %xmm3, (%r13,%r11,8)                          #185.32
..LN1161:
        incq      %r11                                          #185.5
..LN1162:
        cmpl      %edi, %r8d                                    #185.5
..LN1163:
        jb        ..B1.110      # Prob 82%                      #185.5
..LN1164:
                                # LOE rcx r9 r11 r12 r13 eax edx ebx esi edi r8d r10d r15d xmm0
..B1.111:                       # Preds ..B1.110
..LN1165:
        movq      80(%rsp), %r14                                #
..LN1166:
	.loc    1  166  is_stmt 1
        cmpl      %esi, %edx                                    #166.19
..LN1167:
                                # LOE rcx r9 r12 r14 eax edx esi r15d
..B1.112:                       # Preds ..B1.111
..LN1168:
	.loc    1  186  is_stmt 1
        jge       ..B1.135      # Prob 50%                      #186.21
..LN1169:
                                # LOE rcx r9 r12 r14 eax edx esi r15d
..B1.113:                       # Preds ..B1.355 ..B1.364 ..B1.112
..LN1170:
        subl      %edx, %esi                                    #186.5
..LN1171:
        cmpl      $16, %esi                                     #186.5
..LN1172:
        jl        ..B1.326      # Prob 10%                      #186.5
..LN1173:
                                # LOE rcx r9 r12 r14 eax edx esi r15d
..B1.114:                       # Preds ..B1.113
..LN1174:
        movq      24(%rbp), %rbx                                #186.49
..LN1175:
        lea       (%rbx,%r9,8), %r11                            #186.49
..LN1176:
        cmpl      $29, %esi                                     #186.5
..LN1177:
        jl        ..B1.328      # Prob 10%                      #186.5
..LN1178:
                                # LOE rcx r9 r11 r12 r14 eax edx esi r15d
..B1.115:                       # Preds ..B1.114
..LN1179:
        movq      %r11, %r8                                     #186.5
..LN1180:
        andq      $31, %r8                                      #186.5
..LN1181:
        movl      %r8d, %r8d                                    #186.5
..LN1182:
        testl     %r8d, %r8d                                    #186.5
..LN1183:
        je        ..B1.118      # Prob 50%                      #186.5
..LN1184:
                                # LOE rcx r8 r9 r11 r12 r14 eax edx esi r15d
..B1.116:                       # Preds ..B1.115
..LN1185:
        testl     $7, %r8d                                      #186.5
..LN1186:
        jne       ..B1.326      # Prob 10%                      #186.5
..LN1187:
                                # LOE rcx r8 r9 r11 r12 r14 eax edx esi r15d
..B1.117:                       # Preds ..B1.116
..LN1188:
        negl      %r8d                                          #186.5
..LN1189:
        addl      $32, %r8d                                     #186.5
..LN1190:
        shrl      $3, %r8d                                      #186.5
..LN1191:
                                # LOE rcx r8 r9 r11 r12 r14 eax edx esi r15d
..B1.118:                       # Preds ..B1.117 ..B1.115
..LN1192:
        lea       16(%r8), %ebx                                 #186.5
..LN1193:
        cmpl      %ebx, %esi                                    #186.5
..LN1194:
        jl        ..B1.326      # Prob 10%                      #186.5
..LN1195:
                                # LOE rcx r8 r9 r11 r12 r14 eax edx esi r15d
..B1.119:                       # Preds ..B1.118
..LN1196:
        movl      %esi, %ebx                                    #186.5
..LN1197:
        lea       -1(%rdx), %r10d                               #186.32
..LN1198:
        imull     208(%rsp), %r10d                              #186.32
..LN1199:
        subl      %r8d, %ebx                                    #186.5
..LN1200:
        andl      $15, %ebx                                     #186.5
..LN1201:
        lea       (%rcx,%r9,8), %r13                            #186.81
..LN1202:
        negl      %ebx                                          #186.5
..LN1203:
        xorl      %edi, %edi                                    #186.5
..LN1204:
        addl      %esi, %ebx                                    #186.5
..LN1205:
        movq      %r13, (%rsp)                                  #186.81
..LN1206:
	.loc    1  142  is_stmt 1
        lea       (%r10,%r15,2), %r13d                          #142.12
..LN1207:
        movl      %r13d, 8(%rsp)                                #142.12
..LN1208:
	.loc    1  186  is_stmt 1
        testq     %r8, %r8                                      #186.5
..LN1209:
        jbe       ..B1.123      # Prob 9%                       #186.5
..LN1210:
                                # LOE rcx rdi r8 r9 r11 r12 r13 r14 eax edx ebx esi r10d r13d r15d r13b
..B1.120:                       # Preds ..B1.119
..LN1211:
        movq      %rcx, 72(%rsp)                                #
..LN1212:
        movq      %r14, 80(%rsp)                                #
..LN1213:
        movq      %r12, 168(%rsp)                               #
..LN1214:
        movl      %r15d, 232(%rsp)                              #
..LN1215:
        movq      (%rsp), %r14                                  #
..LN1216:
        movq      192(%rsp), %rcx                               #
..LN1217:
        movl      208(%rsp), %r12d                              #
..LN1218:
                                # LOE rcx rdi r8 r9 r11 r14 eax edx ebx esi r10d r12d r13d
..B1.121:                       # Preds ..B1.121 ..B1.120
..L30:          # optimization report
                # LOOP WAS UNROLLED BY 2
                # PEELED LOOP FOR VECTORIZATION
                # VECTORIZATION SPEEDUP COEFFECIENT 4.027344
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 8
                # NORMALIZED VECTORIZATION OVERHEAD 0.187500
..LN1219:
        movl      %edi, %r15d                                   #186.32
..LN1220:
        vmovsd    8(%r14,%rdi,8), %xmm0                         #186.81
..LN1221:
        imull     %r12d, %r15d                                  #186.32
..LN1222:
        vsubsd    (%r14,%rdi,8), %xmm0, %xmm1                   #186.32
..LN1223:
        addl      %r13d, %r15d                                  #186.32
..LN1224:
        vfnmadd132sd (%r11,%rdi,8), %xmm0, %xmm1                #186.32
..LN1225:
        incq      %rdi                                          #186.5
..LN1226:
        movslq    %r15d, %r15                                   #186.32
..LN1227:
        vmovsd    %xmm1, 8(%rcx,%r15,8)                         #186.32
..LN1228:
        cmpq      %r8, %rdi                                     #186.5
..LN1229:
        jb        ..B1.121      # Prob 81%                      #186.5
..LN1230:
                                # LOE rcx rdi r8 r9 r11 r14 eax edx ebx esi r10d r12d r13d
..B1.122:                       # Preds ..B1.121
..LN1231:
        movq      72(%rsp), %rcx                                #
..LN1232:
        movq      80(%rsp), %r14                                #
..LN1233:
        movl      232(%rsp), %r15d                              #
..LN1234:
        movq      168(%rsp), %r12                               #
..LN1235:
                                # LOE rcx r8 r9 r11 r12 r14 eax edx ebx esi r10d r15d
..B1.123:                       # Preds ..B1.119 ..B1.122 ..B1.328
..LN1236:
        movq      144(%rsp), %rdi                               #186.32
..LN1237:
        lea       (%r15,%r15,8), %r13d                          #186.32
..LN1238:
        addl      %r15d, %r13d                                  #186.32
..LN1239:
        movslq    %ebx, %rbx                                    #186.5
..LN1240:
        addl      %r13d, %r10d                                  #186.32
..LN1241:
        lea       8(,%rdi,8), %rdi                              #186.32
..LN1242:
        movl      %esi, 88(%rsp)                                #186.32
..LN1243:
        lea       (%rdi,%rdi,2), %r13                           #186.32
..LN1244:
        movq      %r9, 32(%rsp)                                 #186.32
..LN1245:
        movl      %edx, 64(%rsp)                                #186.32
..LN1246:
        movq      %rcx, 72(%rsp)                                #186.32
..LN1247:
        movq      %r14, 80(%rsp)                                #186.32
..LN1248:
        movq      %r12, 168(%rsp)                               #186.32
..LN1249:
        vmovupd   .L_2il0floatpacket.7(%rip), %ymm0             #186.68
..LN1250:
        movl      %r15d, 232(%rsp)                              #186.32
..LN1251:
        movq      (%rsp), %r12                                  #186.32
..LN1252:
        movl      8(%rsp), %r9d                                 #186.32
..LN1253:
        movq      %r13, %rsi                                    #186.32
..LN1254:
        movq      %rbx, %r14                                    #186.32
..LN1255:
        movq      192(%rsp), %rdx                               #186.32
..LN1256:
        movl      208(%rsp), %ecx                               #186.32
..LN1257:
                                # LOE rdx rsi rdi r8 r11 r12 r14 eax ecx ebx r9d r10d ymm0
..B1.124:                       # Preds ..B1.124 ..B1.123
..L31:          # optimization report
                # LOOP WAS UNROLLED BY 2
                # LOOP WAS VECTORIZED
                # VECTORIZATION HAS UNALIGNED MEMORY REFERENCES
                # VECTORIZATION SPEEDUP COEFFECIENT 4.027344
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 8
                # NORMALIZED VECTORIZATION OVERHEAD 0.187500
                # MAIN VECTOR TYPE: 64-bits floating point
..LN1258:
        movl      %r8d, %r13d                                   #186.32
..LN1259:
        vmovupd   (%r11,%r8,8), %ymm5                           #186.49
..LN1260:
        vmovupd   32(%r11,%r8,8), %ymm6                         #186.49
..LN1261:
        vmovupd   64(%r11,%r8,8), %ymm11                        #186.49
..LN1262:
        vmovupd   96(%r11,%r8,8), %ymm12                        #186.49
..LN1263:
        imull     %ecx, %r13d                                   #186.32
..LN1264:
        vsubpd    %ymm5, %ymm0, %ymm1                           #186.70
..LN1265:
        vsubpd    %ymm6, %ymm0, %ymm2                           #186.70
..LN1266:
        vsubpd    %ymm11, %ymm0, %ymm7                          #186.70
..LN1267:
        vsubpd    %ymm12, %ymm0, %ymm8                          #186.70
..LN1268:
        vmulpd    8(%r12,%r8,8), %ymm1, %ymm3                   #186.81
..LN1269:
        vmulpd    40(%r12,%r8,8), %ymm2, %ymm4                  #186.81
..LN1270:
        vmulpd    72(%r12,%r8,8), %ymm7, %ymm9                  #186.81
..LN1271:
        vmulpd    104(%r12,%r8,8), %ymm8, %ymm10                #186.81
..LN1272:
        vfmadd132pd (%r12,%r8,8), %ymm3, %ymm5                  #186.81
..LN1273:
        vfmadd132pd 32(%r12,%r8,8), %ymm4, %ymm6                #186.81
..LN1274:
        vfmadd132pd 64(%r12,%r8,8), %ymm9, %ymm11               #186.81
..LN1275:
        vfmadd132pd 96(%r12,%r8,8), %ymm10, %ymm12              #186.81
..LN1276:
        addq      $16, %r8                                      #186.5
..LN1277:
        lea       (%r9,%r13), %r15d                             #186.32
..LN1278:
        movslq    %r15d, %r15                                   #186.32
..LN1279:
        addl      %r10d, %r13d                                  #186.32
..LN1280:
        movslq    %r13d, %r13                                   #186.32
..LN1281:
        vextractf128 $1, %ymm5, %xmm13                          #186.32
..LN1282:
        lea       (%rdx,%r15,8), %r15                           #186.32
..LN1283:
        vmovsd    %xmm5, 8(%r15)                                #186.32
..LN1284:
        vmovhpd   %xmm5, 8(%rdi,%r15)                           #186.32
..LN1285:
        vmovsd    %xmm13, 8(%r15,%rdi,2)                        #186.32
..LN1286:
        lea       (%rdx,%r13,8), %r13                           #186.32
..LN1287:
        vmovhpd   %xmm13, 8(%rsi,%r15)                          #186.32
..LN1288:
        lea       8(%r15,%rdi,4), %r15                          #186.32
..LN1289:
        vextractf128 $1, %ymm6, %xmm14                          #186.32
..LN1290:
        vmovsd    %xmm6, (%r15)                                 #186.32
..LN1291:
        vmovhpd   %xmm6, (%rdi,%r15)                            #186.32
..LN1292:
        vmovsd    %xmm14, (%r15,%rdi,2)                         #186.32
..LN1293:
        vmovhpd   %xmm14, (%rsi,%r15)                           #186.32
..LN1294:
        lea       72(%r13,%rdi,4), %r15                         #186.32
..LN1295:
        vextractf128 $1, %ymm11, %xmm15                         #186.32
..LN1296:
        vmovsd    %xmm11, 72(%r13)                              #186.32
..LN1297:
        vmovhpd   %xmm11, 72(%rdi,%r13)                         #186.32
..LN1298:
        vmovsd    %xmm15, 72(%r13,%rdi,2)                       #186.32
..LN1299:
        vmovhpd   %xmm15, 72(%rsi,%r13)                         #186.32
..LN1300:
        vextractf128 $1, %ymm12, %xmm1                          #186.32
..LN1301:
        vmovsd    %xmm12, (%r15)                                #186.32
..LN1302:
        vmovhpd   %xmm12, (%rdi,%r15)                           #186.32
..LN1303:
        vmovsd    %xmm1, (%r15,%rdi,2)                          #186.32
..LN1304:
        vmovhpd   %xmm1, (%rsi,%r15)                            #186.32
..LN1305:
        cmpq      %r14, %r8                                     #186.5
..LN1306:
        jb        ..B1.124      # Prob 81%                      #186.5
..LN1307:
                                # LOE rdx rsi rdi r8 r11 r12 r14 eax ecx ebx r9d r10d ymm0
..B1.125:                       # Preds ..B1.124
..LN1308:
        movl      88(%rsp), %esi                                #
..LN1309:
        movq      32(%rsp), %r9                                 #
..LN1310:
        movl      64(%rsp), %edx                                #
..LN1311:
        movq      72(%rsp), %rcx                                #
..LN1312:
        movq      80(%rsp), %r14                                #
..LN1313:
        movl      232(%rsp), %r15d                              #
..LN1314:
        movq      168(%rsp), %r12                               #
..LN1315:
                                # LOE rcx r9 r12 r14 eax edx ebx esi r15d
..B1.126:                       # Preds ..B1.125 ..B1.326
..LN1316:
        lea       1(%rbx), %edi                                 #186.5
..LN1317:
        cmpl      %edi, %esi                                    #186.5
..LN1318:
        jb        ..B1.135      # Prob 50%                      #186.5
..LN1319:
                                # LOE rcx r9 r12 r14 eax edx ebx esi r15d
..B1.127:                       # Preds ..B1.126
..LN1320:
        movslq    %esi, %rsi                                    #186.5
..LN1321:
        movslq    %ebx, %rbx                                    #186.5
..LN1322:
        subq      %rbx, %rsi                                    #186.5
..LN1323:
        cmpq      $4, %rsi                                      #186.5
..LN1324:
        jl        ..B1.325      # Prob 10%                      #186.5
..LN1325:
                                # LOE rcx rsi r9 r12 r14 eax edx ebx r15d
..B1.128:                       # Preds ..B1.127
..LN1326:
        movq      144(%rsp), %r8                                #186.32
..LN1327:
        lea       -1(%rbx,%rdx), %r10d                          #186.32
..LN1328:
        imull     208(%rsp), %r10d                              #186.32
..LN1329:
        movl      %esi, %edi                                    #186.5
..LN1330:
        vmovupd   .L_2il0floatpacket.8(%rip), %ymm0             #186.68
..LN1331:
        movslq    %ebx, %rbx                                    #186.49
..LN1332:
        lea       (%r10,%r15,2), %r11d                          #186.32
..LN1333:
        movl      %r11d, 8(%rsp)                                #186.32
..LN1334:
        lea       (%rcx,%r9,8), %r13                            #186.59
..LN1335:
        movq      24(%rbp), %r11                                #186.49
..LN1336:
        andl      $-4, %edi                                     #186.5
..LN1337:
        movq      $0, (%rsp)                                    #186.5
..LN1338:
        lea       8(,%r8,8), %r8                                #186.32
..LN1339:
        movl      %edx, 64(%rsp)                                #186.32
..LN1340:
        lea       (%r13,%rbx,8), %r10                           #186.59
..LN1341:
        movq      %rcx, 72(%rsp)                                #186.32
..LN1342:
        lea       (%r11,%r9,8), %r13                            #186.49
..LN1343:
        movq      %r14, 80(%rsp)                                #186.32
..LN1344:
        lea       (%r13,%rbx,8), %r11                           #186.49
..LN1345:
        movq      %r12, 168(%rsp)                               #186.32
..LN1346:
        lea       (%r8,%r8,2), %r13                             #186.32
..LN1347:
        movslq    %edi, %rdi                                    #186.5
..LN1348:
        movl      %r15d, 232(%rsp)                              #186.32
..LN1349:
        movl      8(%rsp), %edx                                 #186.32
..LN1350:
        movq      (%rsp), %r14                                  #186.32
..LN1351:
        movq      192(%rsp), %rcx                               #186.32
..LN1352:
        movl      208(%rsp), %r12d                              #186.32
..LN1353:
        .align    16,0x90
..LN1354:
                                # LOE rcx rsi rdi r8 r9 r10 r11 r13 r14 eax edx ebx r12d ymm0
..B1.129:                       # Preds ..B1.129 ..B1.128
..L32:          # optimization report
                # LOOP WAS VECTORIZED
                # REMAINDER LOOP FOR VECTORIZATION
                # VECTORIZATION HAS UNALIGNED MEMORY REFERENCES
                # VECTORIZATION SPEEDUP COEFFECIENT 2.300781
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 0.812500
                # MAIN VECTOR TYPE: 64-bits floating point
..LN1355:
        movl      %r14d, %r15d                                  #186.32
..LN1356:
        vmovupd   (%r11,%r14,8), %ymm3                          #186.49
..LN1357:
        imull     %r12d, %r15d                                  #186.32
..LN1358:
        vsubpd    %ymm3, %ymm0, %ymm1                           #186.70
..LN1359:
        vmulpd    8(%r10,%r14,8), %ymm1, %ymm2                  #186.81
..LN1360:
        addl      %edx, %r15d                                   #186.32
..LN1361:
        vfmadd132pd (%r10,%r14,8), %ymm2, %ymm3                 #186.81
..LN1362:
        addq      $4, %r14                                      #186.5
..LN1363:
        movslq    %r15d, %r15                                   #186.32
..LN1364:
        vextractf128 $1, %ymm3, %xmm4                           #186.32
..LN1365:
        lea       8(%rcx,%r15,8), %r15                          #186.32
..LN1366:
        vmovsd    %xmm3, (%r15)                                 #186.32
..LN1367:
        vmovhpd   %xmm3, (%r8,%r15)                             #186.32
..LN1368:
        vmovsd    %xmm4, (%r15,%r8,2)                           #186.32
..LN1369:
        vmovhpd   %xmm4, (%r13,%r15)                            #186.32
..LN1370:
        cmpq      %rdi, %r14                                    #186.5
..LN1371:
        jb        ..B1.129      # Prob 81%                      #186.5
..LN1372:
                                # LOE rcx rsi rdi r8 r9 r10 r11 r13 r14 eax edx ebx r12d ymm0
..B1.130:                       # Preds ..B1.129
..LN1373:
        movl      64(%rsp), %edx                                #
..LN1374:
        movq      72(%rsp), %rcx                                #
..LN1375:
        movq      80(%rsp), %r14                                #
..LN1376:
        movl      232(%rsp), %r15d                              #
..LN1377:
        movq      168(%rsp), %r12                               #
..LN1378:
                                # LOE rcx rsi rdi r9 r12 r14 eax edx ebx r15d
..B1.131:                       # Preds ..B1.130 ..B1.325
..LN1379:
        cmpq      %rsi, %rdi                                    #186.5
..LN1380:
        jae       ..B1.135      # Prob 9%                       #186.5
..LN1381:
                                # LOE rcx rsi rdi r9 r12 r14 eax edx ebx r15d
..B1.132:                       # Preds ..B1.131
..LN1382:
        movl      208(%rsp), %r10d                              #186.49
..LN1383:
        lea       -1(%rbx,%rdx), %r8d                           #186.32
..LN1384:
        imull     208(%rsp), %r8d                               #186.32
..LN1385:
        lea       (%rcx,%r9,8), %rcx                            #186.81
..LN1386:
        movq      24(%rbp), %rdx                                #186.70
..LN1387:
        lea       (%r8,%r15,2), %r8d                            #186.32
..LN1388:
        movslq    %ebx, %rbx                                    #186.49
..LN1389:
        lea       (%rdx,%r9,8), %r9                             #186.70
..LN1390:
        lea       (%rcx,%rbx,8), %rdx                           #186.59
..LN1391:
        lea       (%r9,%rbx,8), %rcx                            #186.49
..LN1392:
        movq      192(%rsp), %r9                                #186.49
..LN1393:
                                # LOE rdx rcx rsi rdi r9 r12 r14 eax r8d r10d r15d
..B1.133:                       # Preds ..B1.133 ..B1.132
..L33:          # optimization report
                # REMAINDER LOOP FOR VECTORIZATION
                # VECTORIZATION SPEEDUP COEFFECIENT 2.300781
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 0.812500
..LN1394:
        movl      %edi, %ebx                                    #186.32
..LN1395:
        vmovsd    8(%rdx,%rdi,8), %xmm0                         #186.81
..LN1396:
        imull     %r10d, %ebx                                   #186.32
..LN1397:
        vsubsd    (%rdx,%rdi,8), %xmm0, %xmm1                   #186.32
..LN1398:
        addl      %r8d, %ebx                                    #186.32
..LN1399:
        vfnmadd132sd (%rcx,%rdi,8), %xmm0, %xmm1                #186.32
..LN1400:
        incq      %rdi                                          #186.5
..LN1401:
        movslq    %ebx, %rbx                                    #186.32
..LN1402:
        vmovsd    %xmm1, 8(%r9,%rbx,8)                          #186.32
..LN1403:
        cmpq      %rsi, %rdi                                    #186.5
..LN1404:
        jb        ..B1.133      # Prob 81%                      #186.5
..LN1405:
                                # LOE rdx rcx rsi rdi r9 r12 r14 eax r8d r10d r15d
..B1.135:                       # Preds ..B1.133 ..B1.355 ..B1.364 ..B1.89 ..B1.112
                                #       ..B1.126 ..B1.131
..LN1406:
	.loc    1  190  is_stmt 1
        cmpl      $0, 112(%rsp)                                 #190.6
..LN1407:
        je        ..B1.181      # Prob 50%                      #190.6
..LN1408:
                                # LOE r12 r14 eax r15d
..B1.136:                       # Preds ..B1.135
..LN1409:
	.loc    1  191  is_stmt 1
        movl      240(%rsp), %edx                               #191.22
..LN1410:
        cmpl      %eax, %edx                                    #191.22
..LN1411:
        jg        ..B1.158      # Prob 50%                      #191.22
..LN1412:
                                # LOE rdx r12 r14 eax r15d
..B1.137:                       # Preds ..B1.136
..LN1413:
        movl      %eax, %edi                                    #191.5
..LN1414:
        subl      240(%rsp), %edi                               #191.5
..LN1415:
        incl      %edi                                          #191.5
..LN1416:
        cmpl      $16, %edi                                     #191.5
..LN1417:
        jl        ..B1.322      # Prob 10%                      #191.5
..LN1418:
                                # LOE rdx r12 r14 eax edi r15d
..B1.138:                       # Preds ..B1.137
..LN1419:
        lea       (%r14,%rdx,8), %rsi                           #191.33
..LN1420:
        movq      %rsi, %rcx                                    #191.5
..LN1421:
        andq      $31, %rcx                                     #191.5
..LN1422:
        movl      %ecx, %ecx                                    #191.5
..LN1423:
        testl     %ecx, %ecx                                    #191.5
..LN1424:
        je        ..B1.141      # Prob 50%                      #191.5
..LN1425:
                                # LOE rdx rcx rsi r12 r14 eax edi r15d
..B1.139:                       # Preds ..B1.138
..LN1426:
        testb     $7, %cl                                       #191.5
..LN1427:
        jne       ..B1.322      # Prob 10%                      #191.5
..LN1428:
                                # LOE rdx rcx rsi r12 r14 eax edi r15d
..B1.140:                       # Preds ..B1.139
..LN1429:
        negl      %ecx                                          #191.5
..LN1430:
        addl      $32, %ecx                                     #191.5
..LN1431:
        shrl      $3, %ecx                                      #191.5
..LN1432:
                                # LOE rdx rcx rsi r12 r14 eax edi r15d
..B1.141:                       # Preds ..B1.140 ..B1.138
..LN1433:
        lea       16(%rcx), %ebx                                #191.5
..LN1434:
        cmpl      %ebx, %edi                                    #191.5
..LN1435:
        jl        ..B1.322      # Prob 10%                      #191.5
..LN1436:
                                # LOE rdx rcx rsi r12 r14 eax edi r15d
..B1.142:                       # Preds ..B1.141
..LN1437:
        movl      %edi, %ebx                                    #191.5
..LN1438:
        xorl      %r10d, %r10d                                  #191.5
..LN1439:
        movq      144(%rsp), %r8                                #191.55
..LN1440:
        subl      %ecx, %ebx                                    #191.5
..LN1441:
        andl      $15, %ebx                                     #191.5
..LN1442:
        negl      %ebx                                          #191.5
..LN1443:
        lea       (%r12,%r8,8), %r9                             #191.55
..LN1444:
        addl      %edi, %ebx                                    #191.5
..LN1445:
        lea       (%r9,%rdx,8), %r9                             #191.55
..LN1446:
        lea       (%r12,%rdx,8), %r8                            #191.46
..LN1447:
        testq     %rcx, %rcx                                    #191.5
..LN1448:
        jbe       ..B1.146      # Prob 15%                      #191.5
..LN1449:
                                # LOE rdx rcx rsi r8 r9 r10 r12 r14 eax ebx edi r15d
..B1.143:                       # Preds ..B1.142
..LN1450:
        vmovsd    .L_2il0floatpacket.3(%rip), %xmm0             #191.41
..LN1451:
                                # LOE rdx rcx rsi r8 r9 r10 r12 r14 eax ebx edi r15d xmm0
..B1.144:                       # Preds ..B1.144 ..B1.143
..L34:          # optimization report
                # LOOP WAS UNROLLED BY 4
                # PEELED LOOP FOR VECTORIZATION
                # VECTORIZATION SPEEDUP COEFFECIENT 5.332031
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 0.437500
..LN1452:
        vmovsd    (%r8,%r10,8), %xmm1                           #191.46
..LN1453:
        vaddsd    16(%r9,%r10,8), %xmm1, %xmm2                  #191.55
..LN1454:
        vmulsd    %xmm2, %xmm0, %xmm3                           #191.55
..LN1455:
        vmovsd    %xmm3, (%rsi,%r10,8)                          #191.33
..LN1456:
        incq      %r10                                          #191.5
..LN1457:
        cmpq      %rcx, %r10                                    #191.5
..LN1458:
        jb        ..B1.144      # Prob 82%                      #191.5
..LN1459:
                                # LOE rdx rcx rsi r8 r9 r10 r12 r14 eax ebx edi r15d xmm0
..B1.146:                       # Preds ..B1.144 ..B1.142
..LN1460:
        vmovupd   .L_2il0floatpacket.4(%rip), %ymm0             #191.41
..LN1461:
        movslq    %ebx, %r10                                    #191.5
..LN1462:
        .align    16,0x90
..LN1463:
                                # LOE rdx rcx rsi r8 r9 r10 r12 r14 eax ebx edi r15d ymm0
..B1.147:                       # Preds ..B1.147 ..B1.146
..L35:          # optimization report
                # LOOP WAS UNROLLED BY 4
                # LOOP WAS VECTORIZED
                # VECTORIZATION HAS UNALIGNED MEMORY REFERENCES
                # VECTORIZATION SPEEDUP COEFFECIENT 5.332031
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 0.437500
                # MAIN VECTOR TYPE: 64-bits floating point
..LN1464:
        vmovupd   (%r8,%rcx,8), %ymm1                           #191.46
..LN1465:
        vmovupd   32(%r8,%rcx,8), %ymm4                         #191.46
..LN1466:
        vmovupd   64(%r8,%rcx,8), %ymm7                         #191.46
..LN1467:
        vmovupd   96(%r8,%rcx,8), %ymm10                        #191.46
..LN1468:
        vaddpd    16(%r9,%rcx,8), %ymm1, %ymm2                  #191.55
..LN1469:
        vaddpd    48(%r9,%rcx,8), %ymm4, %ymm5                  #191.55
..LN1470:
        vaddpd    80(%r9,%rcx,8), %ymm7, %ymm8                  #191.55
..LN1471:
        vaddpd    112(%r9,%rcx,8), %ymm10, %ymm11               #191.55
..LN1472:
        vmulpd    %ymm2, %ymm0, %ymm3                           #191.55
..LN1473:
        vmulpd    %ymm5, %ymm0, %ymm6                           #191.55
..LN1474:
        vmulpd    %ymm8, %ymm0, %ymm9                           #191.55
..LN1475:
        vmulpd    %ymm11, %ymm0, %ymm12                         #191.55
..LN1476:
        vmovupd   %ymm3, (%rsi,%rcx,8)                          #191.33
..LN1477:
        vmovupd   %ymm6, 32(%rsi,%rcx,8)                        #191.33
..LN1478:
        vmovupd   %ymm9, 64(%rsi,%rcx,8)                        #191.33
..LN1479:
        vmovupd   %ymm12, 96(%rsi,%rcx,8)                       #191.33
..LN1480:
        addq      $16, %rcx                                     #191.5
..LN1481:
        cmpq      %r10, %rcx                                    #191.5
..LN1482:
        jb        ..B1.147      # Prob 82%                      #191.5
..LN1483:
                                # LOE rdx rcx rsi r8 r9 r10 r12 r14 eax ebx edi r15d ymm0
..B1.149:                       # Preds ..B1.147 ..B1.322
..LN1484:
        lea       1(%rbx), %ecx                                 #191.5
..LN1485:
        cmpl      %ecx, %edi                                    #191.5
..LN1486:
        jb        ..B1.361      # Prob 50%                      #191.5
..LN1487:
                                # LOE rdx r12 r14 eax ebx edi r15d
..B1.150:                       # Preds ..B1.149
..LN1488:
        movslq    %edi, %rdi                                    #191.5
..LN1489:
        movslq    %ebx, %rbx                                    #191.5
..LN1490:
        subq      %rbx, %rdi                                    #191.5
..LN1491:
        cmpq      $4, %rdi                                      #191.5
..LN1492:
        jl        ..B1.321      # Prob 10%                      #191.5
..LN1493:
                                # LOE rdx rdi r12 r14 eax ebx r15d
..B1.151:                       # Preds ..B1.150
..LN1494:
        movq      144(%rsp), %r10                               #191.55
..LN1495:
        movl      %edi, %r8d                                    #191.5
..LN1496:
        movslq    %ebx, %rbx                                    #191.46
..LN1497:
        andl      $-4, %r8d                                     #191.5
..LN1498:
        movslq    %r8d, %r8                                     #191.5
..LN1499:
        lea       (%r14,%rdx,8), %rcx                           #191.33
..LN1500:
        xorl      %esi, %esi                                    #191.5
..LN1501:
        lea       (%r12,%r10,8), %r9                            #191.55
..LN1502:
        lea       (%r9,%rdx,8), %r11                            #191.55
..LN1503:
        vmovupd   .L_2il0floatpacket.9(%rip), %ymm0             #191.41
..LN1504:
        lea       (%r12,%rdx,8), %r13                           #191.46
..LN1505:
        lea       (%rcx,%rbx,8), %rcx                           #191.33
..LN1506:
        lea       (%r11,%rbx,8), %r10                           #191.55
..LN1507:
        lea       (%r13,%rbx,8), %r9                            #191.46
..LN1508:
                                # LOE rdx rcx rsi rdi r8 r9 r10 r12 r14 eax ebx r15d ymm0
..B1.152:                       # Preds ..B1.152 ..B1.151
..L36:          # optimization report
                # LOOP WAS VECTORIZED
                # REMAINDER LOOP FOR VECTORIZATION
                # VECTORIZATION HAS UNALIGNED MEMORY REFERENCES
                # VECTORIZATION SPEEDUP COEFFECIENT 2.320312
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 1.750000
                # MAIN VECTOR TYPE: 64-bits floating point
..LN1509:
        vmovupd   (%r9,%rsi,8), %ymm1                           #191.46
..LN1510:
        vaddpd    16(%r10,%rsi,8), %ymm1, %ymm2                 #191.55
..LN1511:
        vmulpd    %ymm2, %ymm0, %ymm3                           #191.55
..LN1512:
        vmovupd   %ymm3, (%rcx,%rsi,8)                          #191.33
..LN1513:
        addq      $4, %rsi                                      #191.5
..LN1514:
        cmpq      %r8, %rsi                                     #191.5
..LN1515:
        jb        ..B1.152      # Prob 82%                      #191.5
..LN1516:
                                # LOE rdx rcx rsi rdi r8 r9 r10 r12 r14 eax ebx r15d ymm0
..B1.154:                       # Preds ..B1.152 ..B1.321
..LN1517:
        cmpq      %rdi, %r8                                     #191.5
..LN1518:
        jae       ..B1.361      # Prob 15%                      #191.5
..LN1519:
                                # LOE rdx rdi r8 r12 r14 eax ebx r15d
..B1.155:                       # Preds ..B1.154
..LN1520:
        movq      144(%rsp), %rsi                               #191.55
..LN1521:
        lea       (%r14,%rdx,8), %rcx                           #191.33
..LN1522:
        movslq    %ebx, %rbx                                    #191.46
..LN1523:
        lea       (%r12,%rdx,8), %r11                           #191.46
..LN1524:
        vmovsd    .L_2il0floatpacket.3(%rip), %xmm0             #191.41
..LN1525:
        lea       (%r12,%rsi,8), %r9                            #191.55
..LN1526:
        lea       (%r9,%rdx,8), %r10                            #191.55
..LN1527:
        lea       (%rcx,%rbx,8), %rcx                           #191.33
..LN1528:
        lea       (%r10,%rbx,8), %rsi                           #191.55
..LN1529:
        lea       (%r11,%rbx,8), %rbx                           #191.46
..LN1530:
                                # LOE rdx rcx rbx rsi rdi r8 r12 r14 eax r15d xmm0
..B1.156:                       # Preds ..B1.156 ..B1.155
..L37:          # optimization report
                # REMAINDER LOOP FOR VECTORIZATION
                # VECTORIZATION SPEEDUP COEFFECIENT 2.320312
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 1.750000
..LN1531:
        vmovsd    (%rbx,%r8,8), %xmm1                           #191.46
..LN1532:
        vaddsd    16(%rsi,%r8,8), %xmm1, %xmm2                  #191.55
..LN1533:
        vmulsd    %xmm2, %xmm0, %xmm3                           #191.55
..LN1534:
        vmovsd    %xmm3, (%rcx,%r8,8)                           #191.33
..LN1535:
        incq      %r8                                           #191.5
..LN1536:
        cmpq      %rdi, %r8                                     #191.5
..LN1537:
        jb        ..B1.156      # Prob 82%                      #191.5
..LN1538:
                                # LOE rdx rcx rbx rsi rdi r8 r12 r14 eax r15d xmm0
..B1.157:                       # Preds ..B1.156
..LN1539:
	.loc    1  166  is_stmt 1
        movl      240(%rsp), %ecx                               #166.46
..LN1540:
        cmpl      %eax, %ecx                                    #166.46
..LN1541:
                                # LOE rdx r12 r14 eax r15d
..B1.158:                       # Preds ..B1.136 ..B1.157
..LN1542:
	.loc    1  192  is_stmt 1
        jge       ..B1.181      # Prob 50%                      #192.21
..LN1543:
                                # LOE rdx r12 r14 eax r15d
..B1.159:                       # Preds ..B1.361 ..B1.158
..LN1544:
        movl      %eax, %r8d                                    #192.5
..LN1545:
        subl      240(%rsp), %r8d                               #192.5
..LN1546:
        cmpl      $16, %r8d                                     #192.5
..LN1547:
        jl        ..B1.317      # Prob 10%                      #192.5
..LN1548:
                                # LOE rdx r12 r14 eax r8d r15d
..B1.160:                       # Preds ..B1.159
..LN1549:
        movq      32(%rbp), %rcx                                #192.42
..LN1550:
        lea       (%rcx,%rdx,8), %rbx                           #192.42
..LN1551:
        cmpl      $29, %r8d                                     #192.5
..LN1552:
        jl        ..B1.319      # Prob 10%                      #192.5
..LN1553:
                                # LOE rdx rbx r12 r14 eax r8d r15d
..B1.161:                       # Preds ..B1.160
..LN1554:
        movq      %rbx, %r9                                     #192.5
..LN1555:
        andq      $31, %r9                                      #192.5
..LN1556:
        movl      %r9d, %r9d                                    #192.5
..LN1557:
        testl     %r9d, %r9d                                    #192.5
..LN1558:
        je        ..B1.164      # Prob 50%                      #192.5
..LN1559:
                                # LOE rdx rbx r9 r12 r14 eax r8d r15d
..B1.162:                       # Preds ..B1.161
..LN1560:
        testl     $7, %r9d                                      #192.5
..LN1561:
        jne       ..B1.317      # Prob 10%                      #192.5
..LN1562:
                                # LOE rdx rbx r9 r12 r14 eax r8d r15d
..B1.163:                       # Preds ..B1.162
..LN1563:
        negl      %r9d                                          #192.5
..LN1564:
        addl      $32, %r9d                                     #192.5
..LN1565:
        shrl      $3, %r9d                                      #192.5
..LN1566:
                                # LOE rdx rbx r9 r12 r14 eax r8d r15d
..B1.164:                       # Preds ..B1.163 ..B1.161
..LN1567:
        lea       16(%r9), %ecx                                 #192.5
..LN1568:
        cmpl      %ecx, %r8d                                    #192.5
..LN1569:
        jl        ..B1.317      # Prob 10%                      #192.5
..LN1570:
                                # LOE rdx rbx r9 r12 r14 eax r8d r15d
..B1.165:                       # Preds ..B1.164
..LN1571:
        movl      %r8d, %ecx                                    #192.5
..LN1572:
        xorl      %r10d, %r10d                                  #192.5
..LN1573:
        subl      %r9d, %ecx                                    #192.5
..LN1574:
        movq      192(%rsp), %rsi                               #192.32
..LN1575:
        andl      $15, %ecx                                     #192.5
..LN1576:
        negl      %ecx                                          #192.5
..LN1577:
        addl      %r8d, %ecx                                    #192.5
..LN1578:
        lea       (%rsi,%rdx,8), %rdi                           #192.32
..LN1579:
        lea       (%r14,%rdx,8), %rsi                           #192.52
..LN1580:
        testq     %r9, %r9                                      #192.5
..LN1581:
        jbe       ..B1.169      # Prob 9%                       #192.5
..LN1582:
                                # LOE rdx rbx rsi rdi r9 r10 r12 r14 eax ecx r8d r15d
..B1.167:                       # Preds ..B1.165 ..B1.167
..L38:          # optimization report
                # LOOP WAS UNROLLED BY 4
                # PEELED LOOP FOR VECTORIZATION
                # VECTORIZATION SPEEDUP COEFFECIENT 4.843750
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 0.312500
..LN1583:
        vmovsd    8(%rsi,%r10,8), %xmm0                         #192.76
..LN1584:
        vsubsd    (%rsi,%r10,8), %xmm0, %xmm1                   #192.32
..LN1585:
        vfnmadd132sd (%rbx,%r10,8), %xmm0, %xmm1                #192.32
..LN1586:
        vmovsd    %xmm1, (%rdi,%r10,8)                          #192.32
..LN1587:
        incq      %r10                                          #192.5
..LN1588:
        cmpq      %r9, %r10                                     #192.5
..LN1589:
        jb        ..B1.167      # Prob 81%                      #192.5
..LN1590:
                                # LOE rdx rbx rsi rdi r9 r10 r12 r14 eax ecx r8d r15d
..B1.169:                       # Preds ..B1.167 ..B1.165 ..B1.319
..LN1591:
        vmovupd   .L_2il0floatpacket.7(%rip), %ymm0             #192.61
..LN1592:
        movslq    %ecx, %r10                                    #192.5
..LN1593:
                                # LOE rdx rbx rsi rdi r9 r10 r12 r14 eax ecx r8d r15d ymm0
..B1.170:                       # Preds ..B1.170 ..B1.169
..L39:          # optimization report
                # LOOP WAS UNROLLED BY 4
                # LOOP WAS VECTORIZED
                # VECTORIZATION HAS UNALIGNED MEMORY REFERENCES
                # VECTORIZATION SPEEDUP COEFFECIENT 4.843750
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 0.312500
                # MAIN VECTOR TYPE: 64-bits floating point
..LN1594:
        vmovupd   (%rbx,%r9,8), %ymm3                           #192.42
..LN1595:
        vmovupd   32(%rbx,%r9,8), %ymm6                         #192.42
..LN1596:
        vmovupd   64(%rbx,%r9,8), %ymm9                         #192.42
..LN1597:
        vmovupd   96(%rbx,%r9,8), %ymm12                        #192.42
..LN1598:
        vsubpd    %ymm3, %ymm0, %ymm1                           #192.65
..LN1599:
        vsubpd    %ymm6, %ymm0, %ymm4                           #192.65
..LN1600:
        vsubpd    %ymm9, %ymm0, %ymm7                           #192.65
..LN1601:
        vsubpd    %ymm12, %ymm0, %ymm10                         #192.65
..LN1602:
        vmulpd    8(%rsi,%r9,8), %ymm1, %ymm2                   #192.76
..LN1603:
        vmulpd    40(%rsi,%r9,8), %ymm4, %ymm5                  #192.76
..LN1604:
        vmulpd    72(%rsi,%r9,8), %ymm7, %ymm8                  #192.76
..LN1605:
        vmulpd    104(%rsi,%r9,8), %ymm10, %ymm11               #192.76
..LN1606:
        vfmadd132pd (%rsi,%r9,8), %ymm2, %ymm3                  #192.76
..LN1607:
        vfmadd132pd 32(%rsi,%r9,8), %ymm5, %ymm6                #192.76
..LN1608:
        vfmadd132pd 64(%rsi,%r9,8), %ymm8, %ymm9                #192.76
..LN1609:
        vfmadd132pd 96(%rsi,%r9,8), %ymm11, %ymm12              #192.76
..LN1610:
        vmovupd   %ymm3, (%rdi,%r9,8)                           #192.32
..LN1611:
        vmovupd   %ymm6, 32(%rdi,%r9,8)                         #192.32
..LN1612:
        vmovupd   %ymm9, 64(%rdi,%r9,8)                         #192.32
..LN1613:
        vmovupd   %ymm12, 96(%rdi,%r9,8)                        #192.32
..LN1614:
        addq      $16, %r9                                      #192.5
..LN1615:
        cmpq      %r10, %r9                                     #192.5
..LN1616:
        jb        ..B1.170      # Prob 81%                      #192.5
..LN1617:
                                # LOE rdx rbx rsi rdi r9 r10 r12 r14 eax ecx r8d r15d ymm0
..B1.172:                       # Preds ..B1.170 ..B1.317
..LN1618:
        lea       1(%rcx), %ebx                                 #192.5
..LN1619:
        cmpl      %ebx, %r8d                                    #192.5
..LN1620:
        jb        ..B1.181      # Prob 50%                      #192.5
..LN1621:
                                # LOE rdx r12 r14 eax ecx r8d r15d
..B1.173:                       # Preds ..B1.172
..LN1622:
        movslq    %r8d, %r8                                     #192.5
..LN1623:
        movslq    %ecx, %rcx                                    #192.5
..LN1624:
        subq      %rcx, %r8                                     #192.5
..LN1625:
        cmpq      $4, %r8                                       #192.5
..LN1626:
        jl        ..B1.316      # Prob 10%                      #192.5
..LN1627:
                                # LOE rdx r8 r12 r14 eax ecx r15d
..B1.174:                       # Preds ..B1.173
..LN1628:
        movq      192(%rsp), %rsi                               #192.32
..LN1629:
        movl      %r8d, %r9d                                    #192.5
..LN1630:
        movq      32(%rbp), %r11                                #192.42
..LN1631:
        andl      $-4, %r9d                                     #192.5
..LN1632:
        movslq    %r9d, %r9                                     #192.5
..LN1633:
        lea       (%r14,%rdx,8), %r10                           #192.52
..LN1634:
        xorl      %edi, %edi                                    #192.5
..LN1635:
        lea       (%rsi,%rdx,8), %rbx                           #192.32
..LN1636:
        movslq    %ecx, %rcx                                    #192.42
..LN1637:
        lea       (%r11,%rdx,8), %r13                           #192.42
..LN1638:
        vmovupd   .L_2il0floatpacket.8(%rip), %ymm0             #192.61
..LN1639:
        lea       (%rbx,%rcx,8), %rsi                           #192.32
..LN1640:
        lea       (%r10,%rcx,8), %rbx                           #192.52
..LN1641:
        lea       (%r13,%rcx,8), %r10                           #192.42
..LN1642:
                                # LOE rdx rbx rsi rdi r8 r9 r10 r12 r14 eax ecx r15d ymm0
..B1.175:                       # Preds ..B1.175 ..B1.174
..L40:          # optimization report
                # LOOP WAS VECTORIZED
                # REMAINDER LOOP FOR VECTORIZATION
                # VECTORIZATION HAS UNALIGNED MEMORY REFERENCES
                # VECTORIZATION SPEEDUP COEFFECIENT 2.427734
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 1.375000
                # MAIN VECTOR TYPE: 64-bits floating point
..LN1643:
        vmovupd   (%r10,%rdi,8), %ymm3                          #192.42
..LN1644:
        vsubpd    %ymm3, %ymm0, %ymm1                           #192.65
..LN1645:
        vmulpd    8(%rbx,%rdi,8), %ymm1, %ymm2                  #192.76
..LN1646:
        vfmadd132pd (%rbx,%rdi,8), %ymm2, %ymm3                 #192.76
..LN1647:
        vmovupd   %ymm3, (%rsi,%rdi,8)                          #192.32
..LN1648:
        addq      $4, %rdi                                      #192.5
..LN1649:
        cmpq      %r9, %rdi                                     #192.5
..LN1650:
        jb        ..B1.175      # Prob 81%                      #192.5
..LN1651:
                                # LOE rdx rbx rsi rdi r8 r9 r10 r12 r14 eax ecx r15d ymm0
..B1.177:                       # Preds ..B1.175 ..B1.316
..LN1652:
        cmpq      %r8, %r9                                      #192.5
..LN1653:
        jae       ..B1.181      # Prob 9%                       #192.5
..LN1654:
                                # LOE rdx r8 r9 r12 r14 eax ecx r15d
..B1.178:                       # Preds ..B1.177
..LN1655:
        movq      32(%rbp), %rbx                                #192.42
..LN1656:
        movq      192(%rsp), %rdi                               #192.32
..LN1657:
        movslq    %ecx, %rcx                                    #192.42
..LN1658:
        lea       (%rbx,%rdx,8), %rsi                           #192.42
..LN1659:
        lea       (%rdi,%rdx,8), %r10                           #192.32
..LN1660:
        lea       (%r14,%rdx,8), %rdx                           #192.52
..LN1661:
        lea       (%rsi,%rcx,8), %rbx                           #192.42
..LN1662:
        lea       (%r10,%rcx,8), %rsi                           #192.32
..LN1663:
        lea       (%rdx,%rcx,8), %rdx                           #192.52
..LN1664:
                                # LOE rdx rbx rsi r8 r9 r12 r14 eax r15d
..B1.179:                       # Preds ..B1.179 ..B1.178
..L41:          # optimization report
                # REMAINDER LOOP FOR VECTORIZATION
                # VECTORIZATION SPEEDUP COEFFECIENT 2.427734
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 1.375000
..LN1665:
        vmovsd    8(%rdx,%r9,8), %xmm0                          #192.76
..LN1666:
        vsubsd    (%rdx,%r9,8), %xmm0, %xmm1                    #192.32
..LN1667:
        vfnmadd132sd (%rbx,%r9,8), %xmm0, %xmm1                 #192.32
..LN1668:
        vmovsd    %xmm1, (%rsi,%r9,8)                           #192.32
..LN1669:
        incq      %r9                                           #192.5
..LN1670:
        cmpq      %r8, %r9                                      #192.5
..LN1671:
        jb        ..B1.179      # Prob 81%                      #192.5
..LN1672:
                                # LOE rdx rbx rsi r8 r9 r12 r14 eax r15d
..B1.181:                       # Preds ..B1.179 ..B1.361 ..B1.135 ..B1.158 ..B1.172
                                #       ..B1.177
..LN1673:
	.loc    1  196  is_stmt 1
        cmpl      $0, 104(%rsp)                                 #196.6
..LN1674:
        je        ..B1.227      # Prob 50%                      #196.6
..LN1675:
                                # LOE r12 r14 eax r15d
..B1.182:                       # Preds ..B1.181
..LN1676:
	.loc    1  197  is_stmt 1
        movl      240(%rsp), %esi                               #197.23
..LN1677:
        cmpl      %eax, %esi                                    #197.23
..LN1678:
        jg        ..B1.204      # Prob 50%                      #197.23
..LN1679:
                                # LOE rsi r12 r14 eax r15d
..B1.183:                       # Preds ..B1.182
..LN1680:
        movl      %eax, %ebx                                    #197.6
..LN1681:
        subl      240(%rsp), %ebx                               #197.6
..LN1682:
        incl      %ebx                                          #197.6
..LN1683:
        cmpl      $16, %ebx                                     #197.6
..LN1684:
        jl        ..B1.313      # Prob 10%                      #197.6
..LN1685:
                                # LOE rsi r12 r14 eax ebx r15d
..B1.184:                       # Preds ..B1.183
..LN1686:
        lea       (%r14,%rsi,8), %r10                           #197.34
..LN1687:
        movq      %r10, %r9                                     #197.6
..LN1688:
        andq      $31, %r9                                      #197.6
..LN1689:
        movl      %r9d, %r9d                                    #197.6
..LN1690:
        testl     %r9d, %r9d                                    #197.6
..LN1691:
        je        ..B1.187      # Prob 50%                      #197.6
..LN1692:
                                # LOE rsi r9 r10 r12 r14 eax ebx r15d
..B1.185:                       # Preds ..B1.184
..LN1693:
        testl     $7, %r9d                                      #197.6
..LN1694:
        jne       ..B1.313      # Prob 10%                      #197.6
..LN1695:
                                # LOE rsi r9 r10 r12 r14 eax ebx r15d
..B1.186:                       # Preds ..B1.185
..LN1696:
        negl      %r9d                                          #197.6
..LN1697:
        addl      $32, %r9d                                     #197.6
..LN1698:
        shrl      $3, %r9d                                      #197.6
..LN1699:
                                # LOE rsi r9 r10 r12 r14 eax ebx r15d
..B1.187:                       # Preds ..B1.186 ..B1.184
..LN1700:
        lea       16(%r9), %edx                                 #197.6
..LN1701:
        cmpl      %edx, %ebx                                    #197.6
..LN1702:
        jl        ..B1.313      # Prob 10%                      #197.6
..LN1703:
                                # LOE rsi r9 r10 r12 r14 eax ebx r15d
..B1.188:                       # Preds ..B1.187
..LN1704:
        movl      184(%rsp), %ecx                               #197.58
..LN1705:
        lea       2(%r15), %edi                                 #197.58
..LN1706:
        imull     %edi, %ecx                                    #197.58
..LN1707:
        movl      %ebx, %edx                                    #197.6
..LN1708:
        imull     224(%rsp), %edi                               #197.78
..LN1709:
        movslq    %ecx, %rcx                                    #197.47
..LN1710:
        subl      %r9d, %edx                                    #197.6
..LN1711:
        movslq    %edi, %rdi                                    #197.66
..LN1712:
        andl      $15, %edx                                     #197.6
..LN1713:
        negl      %edx                                          #197.6
..LN1714:
        xorl      %r8d, %r8d                                    #197.6
..LN1715:
        addl      %ebx, %edx                                    #197.6
..LN1716:
        lea       (%r12,%rcx,8), %r11                           #197.47
..LN1717:
        lea       (%r12,%rdi,8), %r13                           #197.66
..LN1718:
        lea       (%r11,%rsi,8), %rcx                           #197.47
..LN1719:
        lea       (%r13,%rsi,8), %rdi                           #197.66
..LN1720:
        testq     %r9, %r9                                      #197.6
..LN1721:
        jbe       ..B1.192      # Prob 15%                      #197.6
..LN1722:
                                # LOE rcx rsi rdi r8 r9 r10 r12 r14 eax edx ebx r15d
..B1.189:                       # Preds ..B1.188
..LN1723:
        vmovsd    .L_2il0floatpacket.3(%rip), %xmm0             #197.42
..LN1724:
                                # LOE rcx rsi rdi r8 r9 r10 r12 r14 eax edx ebx r15d xmm0
..B1.190:                       # Preds ..B1.190 ..B1.189
..L42:          # optimization report
                # LOOP WAS UNROLLED BY 4
                # PEELED LOOP FOR VECTORIZATION
                # VECTORIZATION SPEEDUP COEFFECIENT 6.640625
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 0.437500
..LN1725:
        vmovsd    (%rcx,%r8,8), %xmm1                           #197.47
..LN1726:
        vaddsd    (%rdi,%r8,8), %xmm1, %xmm2                    #197.66
..LN1727:
        vmulsd    %xmm2, %xmm0, %xmm3                           #197.66
..LN1728:
        vmovsd    %xmm3, (%r10,%r8,8)                           #197.34
..LN1729:
        incq      %r8                                           #197.6
..LN1730:
        cmpq      %r9, %r8                                      #197.6
..LN1731:
        jb        ..B1.190      # Prob 82%                      #197.6
..LN1732:
                                # LOE rcx rsi rdi r8 r9 r10 r12 r14 eax edx ebx r15d xmm0
..B1.192:                       # Preds ..B1.190 ..B1.188
..LN1733:
        vmovupd   .L_2il0floatpacket.4(%rip), %ymm0             #197.42
..LN1734:
        movslq    %edx, %r8                                     #197.6
..LN1735:
        .align    16,0x90
..LN1736:
                                # LOE rcx rsi rdi r8 r9 r10 r12 r14 eax edx ebx r15d ymm0
..B1.193:                       # Preds ..B1.193 ..B1.192
..L43:          # optimization report
                # LOOP WAS UNROLLED BY 4
                # LOOP WAS VECTORIZED
                # VECTORIZATION HAS UNALIGNED MEMORY REFERENCES
                # VECTORIZATION SPEEDUP COEFFECIENT 6.640625
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 0.437500
                # MAIN VECTOR TYPE: 64-bits floating point
..LN1737:
        vmovupd   (%rcx,%r9,8), %ymm1                           #197.47
..LN1738:
        vmovupd   32(%rcx,%r9,8), %ymm4                         #197.47
..LN1739:
        vmovupd   64(%rcx,%r9,8), %ymm7                         #197.47
..LN1740:
        vmovupd   96(%rcx,%r9,8), %ymm10                        #197.47
..LN1741:
        vaddpd    (%rdi,%r9,8), %ymm1, %ymm2                    #197.66
..LN1742:
        vaddpd    32(%rdi,%r9,8), %ymm4, %ymm5                  #197.66
..LN1743:
        vaddpd    64(%rdi,%r9,8), %ymm7, %ymm8                  #197.66
..LN1744:
        vaddpd    96(%rdi,%r9,8), %ymm10, %ymm11                #197.66
..LN1745:
        vmulpd    %ymm2, %ymm0, %ymm3                           #197.66
..LN1746:
        vmulpd    %ymm5, %ymm0, %ymm6                           #197.66
..LN1747:
        vmulpd    %ymm8, %ymm0, %ymm9                           #197.66
..LN1748:
        vmulpd    %ymm11, %ymm0, %ymm12                         #197.66
..LN1749:
        vmovupd   %ymm3, (%r10,%r9,8)                           #197.34
..LN1750:
        vmovupd   %ymm6, 32(%r10,%r9,8)                         #197.34
..LN1751:
        vmovupd   %ymm9, 64(%r10,%r9,8)                         #197.34
..LN1752:
        vmovupd   %ymm12, 96(%r10,%r9,8)                        #197.34
..LN1753:
        addq      $16, %r9                                      #197.6
..LN1754:
        cmpq      %r8, %r9                                      #197.6
..LN1755:
        jb        ..B1.193      # Prob 82%                      #197.6
..LN1756:
                                # LOE rcx rsi rdi r8 r9 r10 r12 r14 eax edx ebx r15d ymm0
..B1.195:                       # Preds ..B1.193 ..B1.313
..LN1757:
        lea       1(%rdx), %ecx                                 #197.6
..LN1758:
        cmpl      %ecx, %ebx                                    #197.6
..LN1759:
        jb        ..B1.359      # Prob 50%                      #197.6
..LN1760:
                                # LOE rsi r12 r14 eax edx ebx r15d
..B1.196:                       # Preds ..B1.195
..LN1761:
        movslq    %ebx, %rbx                                    #197.6
..LN1762:
        movslq    %edx, %rdx                                    #197.6
..LN1763:
        subq      %rdx, %rbx                                    #197.6
..LN1764:
        cmpq      $4, %rbx                                      #197.6
..LN1765:
        jl        ..B1.312      # Prob 10%                      #197.6
..LN1766:
                                # LOE rbx rsi r12 r14 eax edx r15d
..B1.197:                       # Preds ..B1.196
..LN1767:
        movl      224(%rsp), %edi                               #197.78
..LN1768:
        lea       2(%r15), %r8d                                 #197.58
..LN1769:
        imull     %r8d, %edi                                    #197.78
..LN1770:
        movl      %ebx, %ecx                                    #197.6
..LN1771:
        imull     184(%rsp), %r8d                               #197.58
..LN1772:
        vmovupd   .L_2il0floatpacket.9(%rip), %ymm0             #197.42
..LN1773:
        movslq    %edi, %rdi                                    #197.66
..LN1774:
        andl      $-4, %ecx                                     #197.6
..LN1775:
        movslq    %r8d, %r8                                     #197.47
..LN1776:
        lea       (%r14,%rsi,8), %r9                            #197.34
..LN1777:
        movslq    %edx, %rdx                                    #197.47
..LN1778:
        xorl      %r10d, %r10d                                  #197.6
..LN1779:
        movslq    %ecx, %rcx                                    #197.6
..LN1780:
        lea       (%r12,%rdi,8), %r11                           #197.66
..LN1781:
        lea       (%r11,%rsi,8), %r13                           #197.66
..LN1782:
        lea       (%r12,%r8,8), %r11                            #197.47
..LN1783:
        lea       (%r13,%rdx,8), %rdi                           #197.66
..LN1784:
        lea       (%r11,%rsi,8), %r13                           #197.47
..LN1785:
        lea       (%r9,%rdx,8), %r9                             #197.34
..LN1786:
        lea       (%r13,%rdx,8), %r8                            #197.47
..LN1787:
                                # LOE rcx rbx rsi rdi r8 r9 r10 r12 r14 eax edx r15d ymm0
..B1.198:                       # Preds ..B1.198 ..B1.197
..L44:          # optimization report
                # LOOP WAS VECTORIZED
                # REMAINDER LOOP FOR VECTORIZATION
                # VECTORIZATION HAS UNALIGNED MEMORY REFERENCES
                # VECTORIZATION SPEEDUP COEFFECIENT 2.679688
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 1.750000
                # MAIN VECTOR TYPE: 64-bits floating point
..LN1788:
        vmovupd   (%r8,%r10,8), %ymm1                           #197.47
..LN1789:
        vaddpd    (%rdi,%r10,8), %ymm1, %ymm2                   #197.66
..LN1790:
        vmulpd    %ymm2, %ymm0, %ymm3                           #197.66
..LN1791:
        vmovupd   %ymm3, (%r9,%r10,8)                           #197.34
..LN1792:
        addq      $4, %r10                                      #197.6
..LN1793:
        cmpq      %rcx, %r10                                    #197.6
..LN1794:
        jb        ..B1.198      # Prob 82%                      #197.6
..LN1795:
                                # LOE rcx rbx rsi rdi r8 r9 r10 r12 r14 eax edx r15d ymm0
..B1.200:                       # Preds ..B1.198 ..B1.312
..LN1796:
        cmpq      %rbx, %rcx                                    #197.6
..LN1797:
        jae       ..B1.359      # Prob 15%                      #197.6
..LN1798:
                                # LOE rcx rbx rsi r12 r14 eax edx r15d
..B1.201:                       # Preds ..B1.200
..LN1799:
        movl      224(%rsp), %edi                               #197.78
..LN1800:
        lea       2(%r15), %r8d                                 #197.58
..LN1801:
        imull     %r8d, %edi                                    #197.78
..LN1802:
        lea       (%r14,%rsi,8), %r9                            #197.34
..LN1803:
        imull     184(%rsp), %r8d                               #197.58
..LN1804:
        vmovsd    .L_2il0floatpacket.3(%rip), %xmm0             #197.42
..LN1805:
        movslq    %edi, %rdi                                    #197.66
..LN1806:
        movslq    %r8d, %r8                                     #197.47
..LN1807:
        movslq    %edx, %rdx                                    #197.47
..LN1808:
        lea       (%r12,%rdi,8), %r10                           #197.66
..LN1809:
        lea       (%r12,%r8,8), %r12                            #197.47
..LN1810:
        lea       (%r10,%rsi,8), %r11                           #197.66
..LN1811:
        lea       (%r12,%rsi,8), %r13                           #197.47
..LN1812:
        lea       (%r9,%rdx,8), %r9                             #197.34
..LN1813:
        lea       (%r11,%rdx,8), %rdi                           #197.66
..LN1814:
        lea       (%r13,%rdx,8), %rdx                           #197.47
..LN1815:
                                # LOE rdx rcx rbx rsi rdi r9 r14 eax r15d xmm0
..B1.202:                       # Preds ..B1.202 ..B1.201
..L45:          # optimization report
                # REMAINDER LOOP FOR VECTORIZATION
                # VECTORIZATION SPEEDUP COEFFECIENT 2.679688
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 1.750000
..LN1816:
        vmovsd    (%rdx,%rcx,8), %xmm1                          #197.47
..LN1817:
        vaddsd    (%rdi,%rcx,8), %xmm1, %xmm2                   #197.66
..LN1818:
        vmulsd    %xmm2, %xmm0, %xmm3                           #197.66
..LN1819:
        vmovsd    %xmm3, (%r9,%rcx,8)                           #197.34
..LN1820:
        incq      %rcx                                          #197.6
..LN1821:
        cmpq      %rbx, %rcx                                    #197.6
..LN1822:
        jb        ..B1.202      # Prob 82%                      #197.6
..LN1823:
                                # LOE rdx rcx rbx rsi rdi r9 r14 eax r15d xmm0
..B1.203:                       # Preds ..B1.202
..LN1824:
	.loc    1  166  is_stmt 1
        movl      240(%rsp), %edx                               #166.46
..LN1825:
        cmpl      %eax, %edx                                    #166.46
..LN1826:
                                # LOE rsi r14 eax r15d
..B1.204:                       # Preds ..B1.182 ..B1.203
..LN1827:
	.loc    1  198  is_stmt 1
        jge       ..B1.227      # Prob 50%                      #198.22
..LN1828:
                                # LOE rsi r14 eax r15d
..B1.205:                       # Preds ..B1.359 ..B1.204
..LN1829:
        subl      240(%rsp), %eax                               #198.6
..LN1830:
	.loc    1  62  is_stmt 1
        movq      40(%rbp), %r8                                 #62.1
..LN1831:
	.loc    1  198  is_stmt 1
        cmpl      $16, %eax                                     #198.6
..LN1832:
        jl        ..B1.308      # Prob 10%                      #198.6
..LN1833:
                                # LOE rsi r8 r14 eax r15d
..B1.206:                       # Preds ..B1.205
..LN1834:
        lea       (%r8,%rsi,8), %rdi                            #198.50
..LN1835:
        cmpl      $29, %eax                                     #198.6
..LN1836:
        jl        ..B1.310      # Prob 10%                      #198.6
..LN1837:
                                # LOE rsi rdi r8 r14 eax r15d
..B1.207:                       # Preds ..B1.206
..LN1838:
        movq      %rdi, %rbx                                    #198.6
..LN1839:
        andq      $31, %rbx                                     #198.6
..LN1840:
        movl      %ebx, %ebx                                    #198.6
..LN1841:
        testl     %ebx, %ebx                                    #198.6
..LN1842:
        je        ..B1.210      # Prob 50%                      #198.6
..LN1843:
                                # LOE rbx rsi rdi r8 r14 eax r15d
..B1.208:                       # Preds ..B1.207
..LN1844:
        testb     $7, %bl                                       #198.6
..LN1845:
        jne       ..B1.308      # Prob 10%                      #198.6
..LN1846:
                                # LOE rbx rsi rdi r8 r14 eax r15d
..B1.209:                       # Preds ..B1.208
..LN1847:
        negl      %ebx                                          #198.6
..LN1848:
        addl      $32, %ebx                                     #198.6
..LN1849:
        shrl      $3, %ebx                                      #198.6
..LN1850:
                                # LOE rbx rsi rdi r8 r14 eax r15d
..B1.210:                       # Preds ..B1.209 ..B1.207
..LN1851:
        lea       16(%rbx), %edx                                #198.6
..LN1852:
        cmpl      %edx, %eax                                    #198.6
..LN1853:
        jl        ..B1.308      # Prob 10%                      #198.6
..LN1854:
                                # LOE rbx rsi rdi r8 r14 eax r15d
..B1.211:                       # Preds ..B1.210
..LN1855:
        movl      184(%rsp), %r9d                               #198.41
..LN1856:
        movl      %eax, %ecx                                    #198.6
..LN1857:
        imull     208(%rsp), %r9d                               #198.41
..LN1858:
        subl      %ebx, %ecx                                    #198.6
..LN1859:
        movslq    %r9d, %r9                                     #198.33
..LN1860:
        andl      $15, %ecx                                     #198.6
..LN1861:
        movq      192(%rsp), %r10                               #198.33
..LN1862:
        negl      %ecx                                          #198.6
..LN1863:
        addl      %eax, %ecx                                    #198.6
..LN1864:
        xorl      %edx, %edx                                    #198.6
..LN1865:
        lea       (%r10,%r9,8), %r11                            #198.33
..LN1866:
        lea       (%r11,%rsi,8), %r10                           #198.33
..LN1867:
        lea       (%r14,%rsi,8), %r9                            #198.60
..LN1868:
        testq     %rbx, %rbx                                    #198.6
..LN1869:
        jbe       ..B1.215      # Prob 9%                       #198.6
..LN1870:
                                # LOE rdx rbx rsi rdi r8 r9 r10 r14 eax ecx r15d
..B1.213:                       # Preds ..B1.211 ..B1.213
..L46:          # optimization report
                # LOOP WAS UNROLLED BY 4
                # PEELED LOOP FOR VECTORIZATION
                # VECTORIZATION SPEEDUP COEFFECIENT 5.363281
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 0.312500
..LN1871:
        vmovsd    8(%r9,%rdx,8), %xmm0                          #198.84
..LN1872:
        vsubsd    (%r9,%rdx,8), %xmm0, %xmm1                    #198.33
..LN1873:
        vfnmadd132sd (%rdi,%rdx,8), %xmm0, %xmm1                #198.33
..LN1874:
        vmovsd    %xmm1, (%r10,%rdx,8)                          #198.33
..LN1875:
        incq      %rdx                                          #198.6
..LN1876:
        cmpq      %rbx, %rdx                                    #198.6
..LN1877:
        jb        ..B1.213      # Prob 81%                      #198.6
..LN1878:
                                # LOE rdx rbx rsi rdi r8 r9 r10 r14 eax ecx r15d
..B1.215:                       # Preds ..B1.213 ..B1.211 ..B1.310
..LN1879:
        vmovupd   .L_2il0floatpacket.7(%rip), %ymm0             #198.69
..LN1880:
        movslq    %ecx, %rdx                                    #198.6
..LN1881:
                                # LOE rdx rbx rsi rdi r8 r9 r10 r14 eax ecx r15d ymm0
..B1.216:                       # Preds ..B1.216 ..B1.215
..L47:          # optimization report
                # LOOP WAS UNROLLED BY 4
                # LOOP WAS VECTORIZED
                # VECTORIZATION HAS UNALIGNED MEMORY REFERENCES
                # VECTORIZATION SPEEDUP COEFFECIENT 5.363281
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 0.312500
                # MAIN VECTOR TYPE: 64-bits floating point
..LN1882:
        vmovupd   (%rdi,%rbx,8), %ymm3                          #198.50
..LN1883:
        vmovupd   32(%rdi,%rbx,8), %ymm6                        #198.50
..LN1884:
        vmovupd   64(%rdi,%rbx,8), %ymm9                        #198.50
..LN1885:
        vmovupd   96(%rdi,%rbx,8), %ymm12                       #198.50
..LN1886:
        vsubpd    %ymm3, %ymm0, %ymm1                           #198.73
..LN1887:
        vsubpd    %ymm6, %ymm0, %ymm4                           #198.73
..LN1888:
        vsubpd    %ymm9, %ymm0, %ymm7                           #198.73
..LN1889:
        vsubpd    %ymm12, %ymm0, %ymm10                         #198.73
..LN1890:
        vmulpd    8(%r9,%rbx,8), %ymm1, %ymm2                   #198.84
..LN1891:
        vmulpd    40(%r9,%rbx,8), %ymm4, %ymm5                  #198.84
..LN1892:
        vmulpd    72(%r9,%rbx,8), %ymm7, %ymm8                  #198.84
..LN1893:
        vmulpd    104(%r9,%rbx,8), %ymm10, %ymm11               #198.84
..LN1894:
        vfmadd132pd (%r9,%rbx,8), %ymm2, %ymm3                  #198.84
..LN1895:
        vfmadd132pd 32(%r9,%rbx,8), %ymm5, %ymm6                #198.84
..LN1896:
        vfmadd132pd 64(%r9,%rbx,8), %ymm8, %ymm9                #198.84
..LN1897:
        vfmadd132pd 96(%r9,%rbx,8), %ymm11, %ymm12              #198.84
..LN1898:
        vmovupd   %ymm3, (%r10,%rbx,8)                          #198.33
..LN1899:
        vmovupd   %ymm6, 32(%r10,%rbx,8)                        #198.33
..LN1900:
        vmovupd   %ymm9, 64(%r10,%rbx,8)                        #198.33
..LN1901:
        vmovupd   %ymm12, 96(%r10,%rbx,8)                       #198.33
..LN1902:
        addq      $16, %rbx                                     #198.6
..LN1903:
        cmpq      %rdx, %rbx                                    #198.6
..LN1904:
        jb        ..B1.216      # Prob 81%                      #198.6
..LN1905:
                                # LOE rdx rbx rsi rdi r8 r9 r10 r14 eax ecx r15d ymm0
..B1.218:                       # Preds ..B1.216 ..B1.308
..LN1906:
        lea       1(%rcx), %edx                                 #198.6
..LN1907:
        cmpl      %edx, %eax                                    #198.6
..LN1908:
        jb        ..B1.227      # Prob 50%                      #198.6
..LN1909:
                                # LOE rsi r8 r14 eax ecx r15d
..B1.219:                       # Preds ..B1.218
..LN1910:
        movslq    %eax, %rax                                    #198.6
..LN1911:
        movslq    %ecx, %rcx                                    #198.6
..LN1912:
        subq      %rcx, %rax                                    #198.6
..LN1913:
        cmpq      $4, %rax                                      #198.6
..LN1914:
        jl        ..B1.307      # Prob 10%                      #198.6
..LN1915:
                                # LOE rax rsi r8 r14 ecx r15d
..B1.220:                       # Preds ..B1.219
..LN1916:
        movl      184(%rsp), %r10d                              #198.41
..LN1917:
        movl      %eax, %ebx                                    #198.6
..LN1918:
        imull     208(%rsp), %r10d                              #198.41
..LN1919:
        andl      $-4, %ebx                                     #198.6
..LN1920:
        vmovupd   .L_2il0floatpacket.8(%rip), %ymm0             #198.69
..LN1921:
        movslq    %r10d, %r10                                   #198.33
..LN1922:
        lea       (%r8,%rsi,8), %r12                            #198.50
..LN1923:
        movq      192(%rsp), %r9                                #198.33
..LN1924:
        lea       (%r14,%rsi,8), %r13                           #198.60
..LN1925:
        movslq    %ecx, %rcx                                    #198.50
..LN1926:
        xorl      %edx, %edx                                    #198.6
..LN1927:
        movslq    %ebx, %rbx                                    #198.6
..LN1928:
        lea       (%r9,%r10,8), %rdi                            #198.33
..LN1929:
        lea       (%rdi,%rsi,8), %r11                           #198.33
..LN1930:
        lea       (%r11,%rcx,8), %r10                           #198.33
..LN1931:
        lea       (%r12,%rcx,8), %r9                            #198.50
..LN1932:
        lea       (%r13,%rcx,8), %rdi                           #198.60
..LN1933:
                                # LOE rax rdx rbx rsi rdi r8 r9 r10 r14 ecx r15d ymm0
..B1.221:                       # Preds ..B1.221 ..B1.220
..L48:          # optimization report
                # LOOP WAS VECTORIZED
                # REMAINDER LOOP FOR VECTORIZATION
                # VECTORIZATION HAS UNALIGNED MEMORY REFERENCES
                # VECTORIZATION SPEEDUP COEFFECIENT 2.587891
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 1.375000
                # MAIN VECTOR TYPE: 64-bits floating point
..LN1934:
        vmovupd   (%r9,%rdx,8), %ymm3                           #198.50
..LN1935:
        vsubpd    %ymm3, %ymm0, %ymm1                           #198.73
..LN1936:
        vmulpd    8(%rdi,%rdx,8), %ymm1, %ymm2                  #198.84
..LN1937:
        vfmadd132pd (%rdi,%rdx,8), %ymm2, %ymm3                 #198.84
..LN1938:
        vmovupd   %ymm3, (%r10,%rdx,8)                          #198.33
..LN1939:
        addq      $4, %rdx                                      #198.6
..LN1940:
        cmpq      %rbx, %rdx                                    #198.6
..LN1941:
        jb        ..B1.221      # Prob 81%                      #198.6
..LN1942:
                                # LOE rax rdx rbx rsi rdi r8 r9 r10 r14 ecx r15d ymm0
..B1.223:                       # Preds ..B1.221 ..B1.307
..LN1943:
        cmpq      %rax, %rbx                                    #198.6
..LN1944:
        jae       ..B1.227      # Prob 9%                       #198.6
..LN1945:
                                # LOE rax rbx rsi r8 r14 ecx r15d
..B1.224:                       # Preds ..B1.223
..LN1946:
        movq      192(%rsp), %r9                                #198.33
..LN1947:
        lea       (%r8,%rsi,8), %rdx                            #198.50
..LN1948:
        movl      184(%rsp), %r8d                               #198.41
..LN1949:
        lea       (%r14,%rsi,8), %rdi                           #198.60
..LN1950:
        movslq    %ecx, %rcx                                    #198.50
..LN1951:
        imull     208(%rsp), %r8d                               #198.41
..LN1952:
        movslq    %r8d, %r8                                     #198.33
..LN1953:
        lea       (%rdx,%rcx,8), %rdx                           #198.73
..LN1954:
        lea       (%rdi,%rcx,8), %rdi                           #198.84
..LN1955:
        lea       (%r9,%r8,8), %r10                             #198.33
..LN1956:
        lea       (%r10,%rsi,8), %rsi                           #198.33
..LN1957:
        lea       (%rsi,%rcx,8), %rcx                           #198.33
..LN1958:
                                # LOE rax rdx rcx rbx rdi r15d
..B1.225:                       # Preds ..B1.225 ..B1.224
..L49:          # optimization report
                # REMAINDER LOOP FOR VECTORIZATION
                # VECTORIZATION SPEEDUP COEFFECIENT 2.587891
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 1.375000
..LN1959:
        vmovsd    8(%rdi,%rbx,8), %xmm0                         #198.84
..LN1960:
        vsubsd    (%rdi,%rbx,8), %xmm0, %xmm1                   #198.33
..LN1961:
        vfnmadd132sd (%rdx,%rbx,8), %xmm0, %xmm1                #198.33
..LN1962:
        vmovsd    %xmm1, (%rcx,%rbx,8)                          #198.33
..LN1963:
        incq      %rbx                                          #198.6
..LN1964:
        cmpq      %rax, %rbx                                    #198.6
..LN1965:
        jb        ..B1.225      # Prob 81%                      #198.6
..LN1966:
                                # LOE rax rdx rcx rbx rdi r15d
..B1.227:                       # Preds ..B1.225 ..B1.359 ..B1.181 ..B1.204 ..B1.218
                                #       ..B1.223
..LN1967:
	.loc    1  87  is_stmt 1
        xorl      %edi, %edi                                    #87.3
..LN1968:
        xorl      %esi, %esi                                    #87.28
..LN1969:
        xorl      %r11d, %r11d                                  #87.28
..LN1970:
        xorl      %r8d, %r8d                                    #87.28
..LN1971:
        cmpl      $0, 224(%rsp)                                 #87.14
..LN1972:
        jle       ..B1.249      # Prob 15%                      #87.14
..LN1973:
                                # LOE rsi r8 edi r11d r15d
..B1.228:                       # Preds ..B1.227
..LN1974:
	.loc    1  91  is_stmt 1
        movl      176(%rsp), %eax                               #91.50
..LN1975:
        movl      %eax, %edx                                    #91.50
..LN1976:
        negl      %edx                                          #91.50
..LN1977:
        addl      %eax, %edx                                    #91.50
..LN1978:
	.loc    1  87  is_stmt 1
        movl      %r15d, %eax                                   #87.24
..LN1979:
        andl      $-4, %eax                                     #87.24
..LN1980:
	.loc    1  91  is_stmt 1
        vmovsd    .L_2il0floatpacket.3(%rip), %xmm2             #91.21
..LN1981:
        vmovupd   .L_2il0floatpacket.4(%rip), %ymm1             #91.21
..LN1982:
	.loc    1  87  is_stmt 1
        movl      %eax, (%rsp)                                  #87.24
..LN1983:
        movq      144(%rsp), %rcx                               #87.24
..LN1984:
                                # LOE rcx rsi r8 edx edi r11d r15d xmm2 ymm1
..B1.229:                       # Preds ..B1.247 ..B1.228
..L50:          # optimization report
                # %s was not vectorized: inner loop was already vectorized
..LN1985:
        testl     %r15d, %r15d                                  #87.35
..LN1986:
        jle       ..B1.247      # Prob 50%                      #87.35
..LN1987:
                                # LOE rcx rsi r8 edx edi r11d r15d xmm2 ymm1
..B1.230:                       # Preds ..B1.229
..LN1988:
        cmpq      $4, %rcx                                      #87.24
..LN1989:
        jl        ..B1.303      # Prob 10%                      #87.24
..LN1990:
                                # LOE rcx rsi r8 edx edi r11d r15d xmm2 ymm1
..B1.231:                       # Preds ..B1.230
..LN1991:
	.loc    1  91  is_stmt 1
        movq      192(%rsp), %rax                               #91.26
..LN1992:
        lea       (%rax,%r8,8), %r9                             #91.26
..LN1993:
	.loc    1  87  is_stmt 1
        cmpq      $600, %rcx                                    #87.24
..LN1994:
        jl        ..B1.305      # Prob 10%                      #87.24
..LN1995:
                                # LOE rcx rsi r8 r9 edx edi r11d r15d xmm2 ymm1
..B1.232:                       # Preds ..B1.231
..LN1996:
        movq      %r9, %r12                                     #87.24
..LN1997:
        andq      $31, %r12                                     #87.24
..LN1998:
        testl     %r12d, %r12d                                  #87.24
..LN1999:
        je        ..B1.235      # Prob 50%                      #87.24
..LN2000:
                                # LOE rcx rsi r8 r9 edx edi r11d r12d r15d xmm2 ymm1
..B1.233:                       # Preds ..B1.232
..LN2001:
        testl     $7, %r12d                                     #87.24
..LN2002:
        jne       ..B1.303      # Prob 10%                      #87.24
..LN2003:
                                # LOE rcx rsi r8 r9 edx edi r11d r12d r15d xmm2 ymm1
..B1.234:                       # Preds ..B1.233
..LN2004:
        negl      %r12d                                         #87.24
..LN2005:
        addl      $32, %r12d                                    #87.24
..LN2006:
        shrl      $3, %r12d                                     #87.24
..LN2007:
                                # LOE rcx rsi r8 r9 edx edi r11d r12d r15d xmm2 ymm1
..B1.235:                       # Preds ..B1.234 ..B1.232
..LN2008:
        movl      %r12d, %r14d                                  #87.24
..LN2009:
        lea       4(%r14), %rax                                 #87.24
..LN2010:
        cmpq      %rax, %rcx                                    #87.24
..LN2011:
        jl        ..B1.303      # Prob 10%                      #87.24
..LN2012:
                                # LOE rcx rsi r8 r9 r14 edx edi r11d r12d r15d xmm2 ymm1
..B1.236:                       # Preds ..B1.235
..LN2013:
        movl      %r15d, %ebx                                   #87.24
..LN2014:
        xorl      %r13d, %r13d                                  #87.24
..LN2015:
        subl      %r12d, %ebx                                   #87.24
..LN2016:
	.loc    1  91  is_stmt 1
        lea       (%rdx,%r11), %r10d                            #91.50
..LN2017:
        movq      216(%rsp), %rax                               #91.43
..LN2018:
	.loc    1  87  is_stmt 1
        andl      $3, %ebx                                      #87.24
..LN2019:
        negl      %ebx                                          #87.24
..LN2020:
        addl      %r15d, %ebx                                   #87.24
..LN2021:
	.loc    1  91  is_stmt 1
        lea       (%rax,%rsi,8), %rax                           #91.43
..LN2022:
	.loc    1  87  is_stmt 1
        testq     %r14, %r14                                    #87.24
..LN2023:
        jbe       ..B1.240      # Prob 10%                      #87.24
..LN2024:
                                # LOE rax rcx rsi r8 r9 r13 r14 edx ebx edi r10d r11d r12d r15d xmm2 ymm1
..B1.237:                       # Preds ..B1.236
..LN2025:
        movl      %edi, 8(%rsp)                                 #
..LN2026:
        movl      %r15d, 232(%rsp)                              #
..LN2027:
        movq      48(%rbp), %rcx                                #
..LN2028:
        movq      128(%rsp), %rdi                               #
..LN2029:
        .align    16,0x90
..LN2030:
                                # LOE rax rcx rsi rdi r8 r9 r13 r14 edx ebx r10d r11d r12d xmm2 ymm1
..B1.238:                       # Preds ..B1.237 ..B1.238
..L51:          # optimization report
                # LOOP WAS UNROLLED BY 1
                # PEELED LOOP FOR VECTORIZATION
                # VECTORIZATION SPEEDUP COEFFECIENT 3.580078
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 0.171875
..LN2031:
	.loc    1  91  is_stmt 1
        vmovsd    (%r9,%r13,8), %xmm0                           #91.26
..LN2032:
        vmulsd    (%rax,%r13,8), %xmm2, %xmm3                   #91.33
..LN2033:
        vaddsd    8(%r9,%r13,8), %xmm0, %xmm4                   #91.33
..LN2034:
        vmulsd    %xmm4, %xmm3, %xmm7                           #91.43
..LN2035:
        lea       (%r13,%r13,2), %r15d                          #91.50
..LN2036:
        addl      %r10d, %r15d                                  #91.50
..LN2037:
	.loc    1  87  is_stmt 1
        incq      %r13                                          #87.24
..LN2038:
	.loc    1  91  is_stmt 1
        movslq    %r15d, %r15                                   #91.50
..LN2039:
        vmulsd    (%rcx,%r15,8), %xmm7, %xmm5                   #91.50
..LN2040:
        vmulsd    8(%rcx,%r15,8), %xmm7, %xmm6                  #91.50
..LN2041:
        vmulsd    16(%rcx,%r15,8), %xmm7, %xmm8                 #91.50
..LN2042:
        vmovsd    %xmm5, (%rdi,%r15,8)                          #91.7
..LN2043:
        vmovsd    %xmm6, 8(%rdi,%r15,8)                         #91.7
..LN2044:
        vmovsd    %xmm8, 16(%rdi,%r15,8)                        #91.7
..LN2045:
	.loc    1  87  is_stmt 1
        cmpq      %r14, %r13                                    #87.24
..LN2046:
        jb        ..B1.238      # Prob 82%                      #87.24
..LN2047:
                                # LOE rax rcx rsi rdi r8 r9 r13 r14 edx ebx r10d r11d r12d xmm2 ymm1
..B1.239:                       # Preds ..B1.238
..LN2048:
        movl      8(%rsp), %edi                                 #
..LN2049:
        movq      144(%rsp), %rcx                               #
..LN2050:
        movl      232(%rsp), %r15d                              #
..LN2051:
                                # LOE rax rcx rsi r8 r9 edx ebx edi r10d r11d r12d r15d xmm2 ymm1
..B1.240:                       # Preds ..B1.236 ..B1.239 ..B1.305
..LN2052:
        movl      %edi, 8(%rsp)                                 #87.24
..LN2053:
        lea       (%r12,%r12,2), %r13d                          #87.24
..LN2054:
        movl      %r12d, %r14d                                  #87.24
..LN2055:
        movl      %r15d, 232(%rsp)                              #87.24
..LN2056:
        movq      48(%rbp), %rcx                                #87.24
..LN2057:
        movq      128(%rsp), %rdi                               #87.24
..LN2058:
                                # LOE rax rcx rsi rdi r8 r9 r14 edx ebx r10d r11d r12d r13d xmm2 ymm1
..B1.241:                       # Preds ..B1.241 ..B1.240
..L53:          # optimization report
                # LOOP WAS COMPLETELY UNROLLED BY 3
..L52:          # optimization report
                # LOOP WAS UNROLLED BY 1
                # LOOP WAS VECTORIZED
                # VECTORIZATION HAS UNALIGNED MEMORY REFERENCES
                # VECTORIZATION SPEEDUP COEFFECIENT 3.580078
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 0.171875
                # MAIN VECTOR TYPE: 64-bits floating point
..LN2059:
	.loc    1  91  is_stmt 1
        lea       (%r10,%r13), %r15d                            #91.50
..LN2060:
        vmovupd   (%r9,%r14,8), %ymm3                           #91.26
..LN2061:
	.loc    1  87  is_stmt 1
        addl      $4, %r12d                                     #87.24
..LN2062:
	.loc    1  91  is_stmt 1
        vmulpd    (%rax,%r14,8), %ymm1, %ymm4                   #91.33
..LN2063:
        vaddpd    8(%r9,%r14,8), %ymm3, %ymm5                   #91.33
..LN2064:
        movslq    %r15d, %r15                                   #91.50
..LN2065:
	.loc    1  87  is_stmt 1
        addq      $4, %r14                                      #87.24
..LN2066:
	.loc    1  91  is_stmt 1
        vmulpd    %ymm5, %ymm4, %ymm0                           #91.43
..LN2067:
	.loc    1  87  is_stmt 1
        addl      $12, %r13d                                    #87.24
..LN2068:
	.loc    1  91  is_stmt 1
        vmovups   (%rcx,%r15,8), %xmm6                          #91.50
..LN2069:
        vmovups   16(%rcx,%r15,8), %xmm7                        #91.50
..LN2070:
        vmovups   32(%rcx,%r15,8), %xmm8                        #91.50
..LN2071:
	.loc    1  87  is_stmt 1
        cmpl      %ebx, %r12d                                   #87.24
..LN2072:
	.loc    1  91  is_stmt 1
        vinsertf128 $1, 48(%rcx,%r15,8), %ymm6, %ymm9           #91.50
..LN2073:
        vinsertf128 $1, 64(%rcx,%r15,8), %ymm7, %ymm10          #91.50
..LN2074:
        vinsertf128 $1, 80(%rcx,%r15,8), %ymm8, %ymm11          #91.50
..LN2075:
        vblendpd  $10, %ymm10, %ymm9, %ymm12                    #91.50
..LN2076:
        vshufpd   $5, %ymm11, %ymm9, %ymm15                     #91.50
..LN2077:
        vblendpd  $10, %ymm11, %ymm10, %ymm3                    #91.50
..LN2078:
        vmulpd    %ymm12, %ymm0, %ymm13                         #91.50
..LN2079:
        vmulpd    %ymm15, %ymm0, %ymm12                         #91.50
..LN2080:
        vmulpd    %ymm3, %ymm0, %ymm0                           #91.50
..LN2081:
        vextractf128 $1, %ymm13, %xmm14                         #91.7
..LN2082:
        vmovsd    %xmm13, (%rdi,%r15,8)                         #91.7
..LN2083:
        vmovhpd   %xmm13, 24(%rdi,%r15,8)                       #91.7
..LN2084:
        vextractf128 $1, %ymm12, %xmm13                         #91.7
..LN2085:
        vextractf128 $1, %ymm0, %xmm4                           #91.7
..LN2086:
        vmovsd    %xmm14, 48(%rdi,%r15,8)                       #91.7
..LN2087:
        vmovhpd   %xmm14, 72(%rdi,%r15,8)                       #91.7
..LN2088:
        vmovsd    %xmm12, 8(%rdi,%r15,8)                        #91.7
..LN2089:
        vmovhpd   %xmm12, 32(%rdi,%r15,8)                       #91.7
..LN2090:
        vmovsd    %xmm13, 56(%rdi,%r15,8)                       #91.7
..LN2091:
        vmovhpd   %xmm13, 80(%rdi,%r15,8)                       #91.7
..LN2092:
        vmovsd    %xmm0, 16(%rdi,%r15,8)                        #91.7
..LN2093:
        vmovhpd   %xmm0, 40(%rdi,%r15,8)                        #91.7
..LN2094:
        vmovsd    %xmm4, 64(%rdi,%r15,8)                        #91.7
..LN2095:
        vmovhpd   %xmm4, 88(%rdi,%r15,8)                        #91.7
..LN2096:
	.loc    1  87  is_stmt 1
        jb        ..B1.241      # Prob 82%                      #87.24
..LN2097:
                                # LOE rax rcx rsi rdi r8 r9 r14 edx ebx r10d r11d r12d r13d xmm2 ymm1
..B1.242:                       # Preds ..B1.241
..LN2098:
        movl      8(%rsp), %edi                                 #
..LN2099:
        movq      144(%rsp), %rcx                               #
..LN2100:
        movl      232(%rsp), %r15d                              #
..LN2101:
                                # LOE rcx rsi r8 edx ebx edi r11d r15d xmm2 ymm1
..B1.243:                       # Preds ..B1.242 ..B1.303
..LN2102:
        movslq    %ebx, %rbx                                    #87.24
..LN2103:
        cmpq      %rcx, %rbx                                    #87.24
..LN2104:
        jae       ..B1.247      # Prob 10%                      #87.24
..LN2105:
                                # LOE rcx rbx rsi r8 edx edi r11d r15d xmm2 ymm1
..B1.244:                       # Preds ..B1.243
..LN2106:
	.loc    1  91  is_stmt 1
        movq      192(%rsp), %r13                               #91.26
..LN2107:
        movq      216(%rsp), %rax                               #91.43
..LN2108:
        movq      128(%rsp), %r9                                #91.50
..LN2109:
        movq      48(%rbp), %r10                                #91.50
..LN2110:
        lea       (%r13,%r8,8), %r13                            #91.26
..LN2111:
        lea       (%rax,%rsi,8), %r12                           #91.43
..LN2112:
        lea       (%rdx,%r11), %eax                             #91.50
..LN2113:
        .align    16,0x90
..LN2114:
                                # LOE rcx rbx rsi r8 r9 r10 r12 r13 eax edx edi r11d r15d xmm2 ymm1
..B1.245:                       # Preds ..B1.245 ..B1.244
..L54:          # optimization report
                # LOOP WAS UNROLLED BY 1
                # REMAINDER LOOP FOR VECTORIZATION
                # VECTORIZATION SPEEDUP COEFFECIENT 3.580078
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 0.171875
..LN2115:
        vmovsd    (%r13,%rbx,8), %xmm0                          #91.26
..LN2116:
        vmulsd    (%r12,%rbx,8), %xmm2, %xmm3                   #91.33
..LN2117:
        vaddsd    8(%r13,%rbx,8), %xmm0, %xmm4                  #91.33
..LN2118:
        vmulsd    %xmm4, %xmm3, %xmm7                           #91.43
..LN2119:
        lea       (%rbx,%rbx,2), %r14d                          #91.50
..LN2120:
        addl      %eax, %r14d                                   #91.50
..LN2121:
	.loc    1  87  is_stmt 1
        incq      %rbx                                          #87.24
..LN2122:
	.loc    1  91  is_stmt 1
        movslq    %r14d, %r14                                   #91.50
..LN2123:
        vmulsd    (%r10,%r14,8), %xmm7, %xmm5                   #91.50
..LN2124:
        vmulsd    8(%r10,%r14,8), %xmm7, %xmm6                  #91.50
..LN2125:
        vmulsd    16(%r10,%r14,8), %xmm7, %xmm8                 #91.50
..LN2126:
        vmovsd    %xmm5, (%r9,%r14,8)                           #91.7
..LN2127:
        vmovsd    %xmm6, 8(%r9,%r14,8)                          #91.7
..LN2128:
        vmovsd    %xmm8, 16(%r9,%r14,8)                         #91.7
..LN2129:
	.loc    1  87  is_stmt 1
        cmpq      %rcx, %rbx                                    #87.24
..LN2130:
        jb        ..B1.245      # Prob 82%                      #87.24
..LN2131:
                                # LOE rcx rbx rsi r8 r9 r10 r12 r13 eax edx edi r11d r15d xmm2 ymm1
..B1.247:                       # Preds ..B1.245 ..B1.229 ..B1.243
..LN2132:
        incl      %edi                                          #87.3
..LN2133:
        addq      %rcx, %rsi                                    #87.3
..LN2134:
        addl      176(%rsp), %r11d                              #87.3
..LN2135:
        addq      200(%rsp), %r8                                #87.3
..LN2136:
        cmpl      224(%rsp), %edi                               #87.3
..LN2137:
        jb        ..B1.229      # Prob 82%                      #87.3
..LN2138:
                                # LOE rcx rsi r8 edx edi r11d r15d xmm2 ymm1
..B1.249:                       # Preds ..B1.247 ..B1.227
..LN2139:
	.loc    1  95  is_stmt 1
        xorl      %r11d, %r11d                                  #95.3
..LN2140:
        xorl      %r12d, %r12d                                  #95.27
..LN2141:
        xorl      %r10d, %r10d                                  #95.27
..LN2142:
        cmpl      $0, 184(%rsp)                                 #95.14
..LN2143:
        jle       ..B1.271      # Prob 15%                      #95.14
..LN2144:
                                # LOE r12 r10d r11d r15d
..B1.250:                       # Preds ..B1.249
..LN2145:
	.loc    1  98  is_stmt 1
        movq      144(%rsp), %rdx                               #98.33
..LN2146:
        movq      192(%rsp), %r9                                #98.33
..LN2147:
        movl      176(%rsp), %eax                               #98.52
..LN2148:
        movl      %eax, %r13d                                   #98.52
..LN2149:
        negl      %r13d                                         #98.52
..LN2150:
	.loc    1  95  is_stmt 1
        lea       1(%rdx), %r8                                  #95.23
..LN2151:
	.loc    1  98  is_stmt 1
        addl      %eax, %r13d                                   #98.52
..LN2152:
        lea       (%r9,%rdx,8), %r9                             #98.33
..LN2153:
	.loc    1  95  is_stmt 1
        movl      %r8d, %edx                                    #95.23
..LN2154:
        movl      %edx, %eax                                    #95.23
..LN2155:
        andl      $-4, %eax                                     #95.23
..LN2156:
	.loc    1  98  is_stmt 1
        vmovsd    .L_2il0floatpacket.3(%rip), %xmm2             #98.21
..LN2157:
        vmovupd   .L_2il0floatpacket.4(%rip), %ymm1             #98.21
..LN2158:
	.loc    1  62  is_stmt 1
        movq      56(%rbp), %rcx                                #62.1
..LN2159:
	.loc    1  95  is_stmt 1
        movl      %eax, (%rsp)                                  #95.23
..LN2160:
        movl      %edx, 32(%rsp)                                #95.23
..LN2161:
        movl      %r15d, 232(%rsp)                              #95.23
..LN2162:
                                # LOE r8 r9 r12 r10d r11d r13d xmm2 ymm1
..B1.251:                       # Preds ..B1.269 ..B1.250
..L55:          # optimization report
                # %s was not vectorized: inner loop was already vectorized
..LN2163:
        cmpl      $0, 208(%rsp)                                 #95.34
..LN2164:
        jle       ..B1.269      # Prob 50%                      #95.34
..LN2165:
                                # LOE r8 r9 r12 r10d r11d r13d xmm2 ymm1
..B1.252:                       # Preds ..B1.251
..LN2166:
        cmpq      $4, %r8                                       #95.23
..LN2167:
        jl        ..B1.299      # Prob 10%                      #95.23
..LN2168:
                                # LOE r8 r9 r12 r10d r11d r13d xmm2 ymm1
..B1.253:                       # Preds ..B1.252
..LN2169:
	.loc    1  98  is_stmt 1
        movq      136(%rsp), %rax                               #98.45
..LN2170:
        lea       (%rax,%r12,8), %rcx                           #98.45
..LN2171:
	.loc    1  95  is_stmt 1
        cmpq      $600, %r8                                     #95.23
..LN2172:
        jl        ..B1.301      # Prob 10%                      #95.23
..LN2173:
                                # LOE rcx r8 r9 r12 r10d r11d r13d xmm2 ymm1
..B1.254:                       # Preds ..B1.253
..LN2174:
        movq      %rcx, %rdi                                    #95.23
..LN2175:
        andq      $31, %rdi                                     #95.23
..LN2176:
        testl     %edi, %edi                                    #95.23
..LN2177:
        je        ..B1.257      # Prob 50%                      #95.23
..LN2178:
                                # LOE rcx r8 r9 r12 edi r10d r11d r13d xmm2 ymm1
..B1.255:                       # Preds ..B1.254
..LN2179:
        testl     $7, %edi                                      #95.23
..LN2180:
        jne       ..B1.299      # Prob 10%                      #95.23
..LN2181:
                                # LOE rcx r8 r9 r12 edi r10d r11d r13d xmm2 ymm1
..B1.256:                       # Preds ..B1.255
..LN2182:
        negl      %edi                                          #95.23
..LN2183:
        addl      $32, %edi                                     #95.23
..LN2184:
        shrl      $3, %edi                                      #95.23
..LN2185:
                                # LOE rcx r8 r9 r12 edi r10d r11d r13d xmm2 ymm1
..B1.257:                       # Preds ..B1.256 ..B1.254
..LN2186:
        movl      %edi, %r15d                                   #95.23
..LN2187:
        lea       4(%r15), %rax                                 #95.23
..LN2188:
        cmpq      %rax, %r8                                     #95.23
..LN2189:
        jl        ..B1.299      # Prob 10%                      #95.23
..LN2190:
                                # LOE rcx r8 r9 r12 r15 edi r10d r11d r13d xmm2 ymm1
..B1.258:                       # Preds ..B1.257
..LN2191:
        movl      32(%rsp), %r14d                               #95.23
..LN2192:
        movl      %r14d, %edx                                   #95.23
..LN2193:
        subl      %edi, %edx                                    #95.23
..LN2194:
	.loc    1  98  is_stmt 1
        lea       (%r9,%r12,8), %rbx                            #98.33
..LN2195:
        movq      192(%rsp), %rax                               #98.26
..LN2196:
	.loc    1  95  is_stmt 1
        andl      $3, %edx                                      #95.23
..LN2197:
        negl      %edx                                          #95.23
..LN2198:
	.loc    1  98  is_stmt 1
        lea       (%r13,%r10), %esi                             #98.52
..LN2199:
	.loc    1  95  is_stmt 1
        addl      %r14d, %edx                                   #95.23
..LN2200:
        xorl      %r14d, %r14d                                  #95.23
..LN2201:
	.loc    1  98  is_stmt 1
        lea       (%rax,%r12,8), %rax                           #98.26
..LN2202:
	.loc    1  95  is_stmt 1
        testq     %r15, %r15                                    #95.23
..LN2203:
        jbe       ..B1.262      # Prob 10%                      #95.23
..LN2204:
                                # LOE rax rcx rbx r8 r9 r12 r14 r15 edx esi edi r10d r11d r13d xmm2 ymm1
..B1.259:                       # Preds ..B1.258
..LN2205:
        movl      %r10d, 16(%rsp)                               #
..LN2206:
        movl      %r11d, 24(%rsp)                               #
..LN2207:
        movq      %r12, 8(%rsp)                                 #
..LN2208:
        movq      56(%rbp), %r10                                #
..LN2209:
        movq      120(%rsp), %r11                               #
..LN2210:
        .align    16,0x90
..LN2211:
                                # LOE rax rcx rbx r8 r9 r10 r11 r14 r15 edx esi edi r13d xmm2 ymm1
..B1.260:                       # Preds ..B1.259 ..B1.260
..L56:          # optimization report
                # LOOP WAS UNROLLED BY 1
                # PEELED LOOP FOR VECTORIZATION
                # VECTORIZATION SPEEDUP COEFFECIENT 3.664062
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 0.203125
..LN2212:
	.loc    1  98  is_stmt 1
        vmovsd    (%rax,%r14,8), %xmm0                          #98.26
..LN2213:
        vaddsd    8(%rbx,%r14,8), %xmm0, %xmm3                  #98.33
..LN2214:
        vmulsd    %xmm3, %xmm2, %xmm4                           #98.33
..LN2215:
        vmulsd    (%rcx,%r14,8), %xmm4, %xmm7                   #98.45
..LN2216:
        lea       (%r14,%r14,2), %r12d                          #98.52
..LN2217:
        addl      %esi, %r12d                                   #98.7
..LN2218:
	.loc    1  95  is_stmt 1
        incq      %r14                                          #95.23
..LN2219:
	.loc    1  98  is_stmt 1
        movslq    %r12d, %r12                                   #98.52
..LN2220:
        vmulsd    (%r10,%r12,8), %xmm7, %xmm5                   #98.52
..LN2221:
        vmulsd    8(%r10,%r12,8), %xmm7, %xmm6                  #98.52
..LN2222:
        vmulsd    16(%r10,%r12,8), %xmm7, %xmm8                 #98.52
..LN2223:
        vmovsd    %xmm5, (%r11,%r12,8)                          #98.7
..LN2224:
        vmovsd    %xmm6, 8(%r11,%r12,8)                         #98.7
..LN2225:
        vmovsd    %xmm8, 16(%r11,%r12,8)                        #98.7
..LN2226:
	.loc    1  95  is_stmt 1
        cmpq      %r15, %r14                                    #95.23
..LN2227:
        jb        ..B1.260      # Prob 82%                      #95.23
..LN2228:
                                # LOE rax rcx rbx r8 r9 r10 r11 r14 r15 edx esi edi r13d xmm2 ymm1
..B1.261:                       # Preds ..B1.260
..LN2229:
        movq      8(%rsp), %r12                                 #
..LN2230:
        movl      16(%rsp), %r10d                               #
..LN2231:
        movl      24(%rsp), %r11d                               #
..LN2232:
                                # LOE rax rcx rbx r8 r9 r12 edx esi edi r10d r11d r13d xmm2 ymm1
..B1.262:                       # Preds ..B1.258 ..B1.261 ..B1.301
..LN2233:
        movl      %r10d, 16(%rsp)                               #95.23
..LN2234:
        lea       (%rdi,%rdi,2), %r14d                          #95.23
..LN2235:
        movl      %r11d, 24(%rsp)                               #95.23
..LN2236:
        movl      %edi, %r15d                                   #95.23
..LN2237:
        movq      %r12, 8(%rsp)                                 #95.23
..LN2238:
        movq      56(%rbp), %r10                                #95.23
..LN2239:
        movq      120(%rsp), %r11                               #95.23
..LN2240:
                                # LOE rax rcx rbx r8 r9 r10 r11 r15 edx esi edi r13d r14d xmm2 ymm1
..B1.263:                       # Preds ..B1.263 ..B1.262
..L58:          # optimization report
                # LOOP WAS COMPLETELY UNROLLED BY 3
..L57:          # optimization report
                # LOOP WAS UNROLLED BY 1
                # LOOP WAS VECTORIZED
                # VECTORIZATION HAS UNALIGNED MEMORY REFERENCES
                # VECTORIZATION SPEEDUP COEFFECIENT 3.664062
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 0.203125
                # MAIN VECTOR TYPE: 64-bits floating point
..LN2241:
	.loc    1  98  is_stmt 1
        lea       (%rsi,%r14), %r12d                            #98.7
..LN2242:
        vmovupd   (%rax,%r15,8), %ymm3                          #98.26
..LN2243:
	.loc    1  95  is_stmt 1
        addl      $4, %edi                                      #95.23
..LN2244:
	.loc    1  98  is_stmt 1
        vaddpd    8(%rbx,%r15,8), %ymm3, %ymm4                  #98.33
..LN2245:
	.loc    1  95  is_stmt 1
        addl      $12, %r14d                                    #95.23
..LN2246:
	.loc    1  98  is_stmt 1
        vmulpd    %ymm4, %ymm1, %ymm5                           #98.33
..LN2247:
        movslq    %r12d, %r12                                   #98.52
..LN2248:
        vmulpd    (%rcx,%r15,8), %ymm5, %ymm0                   #98.45
..LN2249:
	.loc    1  95  is_stmt 1
        addq      $4, %r15                                      #95.23
..LN2250:
	.loc    1  98  is_stmt 1
        vmovups   (%r10,%r12,8), %xmm6                          #98.52
..LN2251:
        vmovups   16(%r10,%r12,8), %xmm7                        #98.52
..LN2252:
        vmovups   32(%r10,%r12,8), %xmm8                        #98.52
..LN2253:
	.loc    1  95  is_stmt 1
        cmpl      %edx, %edi                                    #95.23
..LN2254:
	.loc    1  98  is_stmt 1
        vinsertf128 $1, 48(%r10,%r12,8), %ymm6, %ymm9           #98.52
..LN2255:
        vinsertf128 $1, 64(%r10,%r12,8), %ymm7, %ymm10          #98.52
..LN2256:
        vinsertf128 $1, 80(%r10,%r12,8), %ymm8, %ymm11          #98.52
..LN2257:
        vblendpd  $10, %ymm10, %ymm9, %ymm12                    #98.52
..LN2258:
        vshufpd   $5, %ymm11, %ymm9, %ymm15                     #98.52
..LN2259:
        vblendpd  $10, %ymm11, %ymm10, %ymm3                    #98.52
..LN2260:
        vmulpd    %ymm12, %ymm0, %ymm13                         #98.52
..LN2261:
        vmulpd    %ymm15, %ymm0, %ymm12                         #98.52
..LN2262:
        vmulpd    %ymm3, %ymm0, %ymm0                           #98.52
..LN2263:
        vextractf128 $1, %ymm13, %xmm14                         #98.7
..LN2264:
        vmovsd    %xmm13, (%r11,%r12,8)                         #98.7
..LN2265:
        vmovhpd   %xmm13, 24(%r11,%r12,8)                       #98.7
..LN2266:
        vextractf128 $1, %ymm12, %xmm13                         #98.7
..LN2267:
        vextractf128 $1, %ymm0, %xmm4                           #98.7
..LN2268:
        vmovsd    %xmm14, 48(%r11,%r12,8)                       #98.7
..LN2269:
        vmovhpd   %xmm14, 72(%r11,%r12,8)                       #98.7
..LN2270:
        vmovsd    %xmm12, 8(%r11,%r12,8)                        #98.7
..LN2271:
        vmovhpd   %xmm12, 32(%r11,%r12,8)                       #98.7
..LN2272:
        vmovsd    %xmm13, 56(%r11,%r12,8)                       #98.7
..LN2273:
        vmovhpd   %xmm13, 80(%r11,%r12,8)                       #98.7
..LN2274:
        vmovsd    %xmm0, 16(%r11,%r12,8)                        #98.7
..LN2275:
        vmovhpd   %xmm0, 40(%r11,%r12,8)                        #98.7
..LN2276:
        vmovsd    %xmm4, 64(%r11,%r12,8)                        #98.7
..LN2277:
        vmovhpd   %xmm4, 88(%r11,%r12,8)                        #98.7
..LN2278:
	.loc    1  95  is_stmt 1
        jb        ..B1.263      # Prob 82%                      #95.23
..LN2279:
                                # LOE rax rcx rbx r8 r9 r10 r11 r15 edx esi edi r13d r14d xmm2 ymm1
..B1.264:                       # Preds ..B1.263
..LN2280:
        movq      8(%rsp), %r12                                 #
..LN2281:
        movl      16(%rsp), %r10d                               #
..LN2282:
        movl      24(%rsp), %r11d                               #
..LN2283:
                                # LOE r8 r9 r12 edx r10d r11d r13d xmm2 ymm1
..B1.265:                       # Preds ..B1.264 ..B1.299
..LN2284:
        movslq    %edx, %rdx                                    #95.23
..LN2285:
        cmpq      %r8, %rdx                                     #95.23
..LN2286:
        jae       ..B1.269      # Prob 10%                      #95.23
..LN2287:
                                # LOE rdx r8 r9 r12 r10d r11d r13d xmm2 ymm1
..B1.266:                       # Preds ..B1.265
..LN2288:
	.loc    1  98  is_stmt 1
        movq      192(%rsp), %r14                               #98.26
..LN2289:
        lea       (%r9,%r12,8), %rsi                            #98.33
..LN2290:
        movq      136(%rsp), %rax                               #98.45
..LN2291:
        movq      120(%rsp), %rbx                               #98.52
..LN2292:
        movq      56(%rbp), %rcx                                #98.52
..LN2293:
        lea       (%r14,%r12,8), %r14                           #98.26
..LN2294:
        lea       (%rax,%r12,8), %rdi                           #98.45
..LN2295:
        lea       (%r13,%r10), %eax                             #98.52
..LN2296:
        .align    16,0x90
..LN2297:
                                # LOE rdx rcx rbx rsi rdi r8 r9 r12 r14 eax r10d r11d r13d xmm2 ymm1
..B1.267:                       # Preds ..B1.267 ..B1.266
..L59:          # optimization report
                # LOOP WAS UNROLLED BY 1
                # REMAINDER LOOP FOR VECTORIZATION
                # VECTORIZATION SPEEDUP COEFFECIENT 3.664062
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 0.203125
..LN2298:
        vmovsd    (%r14,%rdx,8), %xmm0                          #98.26
..LN2299:
        vaddsd    8(%rsi,%rdx,8), %xmm0, %xmm3                  #98.33
..LN2300:
        vmulsd    %xmm3, %xmm2, %xmm4                           #98.33
..LN2301:
        vmulsd    (%rdi,%rdx,8), %xmm4, %xmm7                   #98.45
..LN2302:
        lea       (%rdx,%rdx,2), %r15d                          #98.52
..LN2303:
        addl      %eax, %r15d                                   #98.7
..LN2304:
	.loc    1  95  is_stmt 1
        incq      %rdx                                          #95.23
..LN2305:
	.loc    1  98  is_stmt 1
        movslq    %r15d, %r15                                   #98.52
..LN2306:
        vmulsd    (%rcx,%r15,8), %xmm7, %xmm5                   #98.52
..LN2307:
        vmulsd    8(%rcx,%r15,8), %xmm7, %xmm6                  #98.52
..LN2308:
        vmulsd    16(%rcx,%r15,8), %xmm7, %xmm8                 #98.52
..LN2309:
        vmovsd    %xmm5, (%rbx,%r15,8)                          #98.7
..LN2310:
        vmovsd    %xmm6, 8(%rbx,%r15,8)                         #98.7
..LN2311:
        vmovsd    %xmm8, 16(%rbx,%r15,8)                        #98.7
..LN2312:
	.loc    1  95  is_stmt 1
        cmpq      %r8, %rdx                                     #95.23
..LN2313:
        jb        ..B1.267      # Prob 82%                      #95.23
..LN2314:
                                # LOE rdx rcx rbx rsi rdi r8 r9 r12 r14 eax r10d r11d r13d xmm2 ymm1
..B1.269:                       # Preds ..B1.267 ..B1.251 ..B1.265
..LN2315:
        movl      176(%rsp), %eax                               #95.3
..LN2316:
        incl      %r11d                                         #95.3
..LN2317:
        addq      200(%rsp), %r12                               #95.3
..LN2318:
        lea       3(%r10,%rax), %r10d                           #95.3
..LN2319:
        cmpl      184(%rsp), %r11d                              #95.3
..LN2320:
        jb        ..B1.251      # Prob 82%                      #95.3
..LN2321:
                                # LOE r8 r9 r12 r10d r11d r13d xmm2 ymm1
..B1.270:                       # Preds ..B1.269
..LN2322:
        movl      232(%rsp), %r15d                              #
..LN2323:
        cmpl      $0, 184(%rsp)                                 #95.14
..LN2324:
                                # LOE r15d
..B1.271:                       # Preds ..B1.249 ..B1.270
..LN2325:
	.loc    1  103  is_stmt 1
        movl      $0, %esi                                      #103.3
..LN2326:
        movl      %esi, %edi                                    #103.27
..LN2327:
        movl      %edi, %r8d                                    #103.27
..LN2328:
        jle       ..B1.290      # Prob 15%                      #103.14
..LN2329:
                                # LOE esi edi r8d r15d
..B1.272:                       # Preds ..B1.271
..L60:          # optimization report
                # %s was not vectorized: inner loop was already vectorized
..LN2330:
        testl     %r15d, %r15d                                  #103.34
..LN2331:
        jg        ..B1.278      # Prob 50%                      #103.34
..LN2332:
                                # LOE esi edi r8d r15d
..B1.273:                       # Preds ..B1.297 ..B1.286 ..B1.272
..LN2333:
	.loc    1  115  is_stmt 1
        movl      176(%rsp), %eax                               #115.19
..LN2334:
        movl      %eax, %r12d                                   #115.19
..LN2335:
	.loc    1  103  is_stmt 1
        xorl      %r14d, %r14d                                  #103.3
..LN2336:
	.loc    1  115  is_stmt 1
        negl      %r12d                                         #115.19
..LN2337:
	.loc    1  116  is_stmt 1
        vmovsd    .L_2il0floatpacket.10(%rip), %xmm0            #116.19
..LN2338:
	.loc    1  115  is_stmt 1
        addl      %eax, %r12d                                   #115.76
..LN2339:
	.loc    1  103  is_stmt 1
        xorl      %r10d, %r10d                                  #103.3
..LN2340:
        xorl      %r8d, %r8d                                    #103.3
..LN2341:
	.loc    1  62  is_stmt 1
        movq      80(%rbp), %r11                                #62.1
..LN2342:
        movq      88(%rbp), %r13                                #62.1
..LN2343:
                                # LOE r8 r11 r13 r10d r12d r14d r15d xmm0
..B1.274:                       # Preds ..B1.277 ..B1.288 ..B1.273
..L61:          # optimization report
                # %s was not vectorized: vector dependence prevents vectorization%s
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
..LN2344:
	.loc    1  111  is_stmt 1
        xorl      %ecx, %ecx                                    #111.23
..LN2345:
	.loc    1  112  is_stmt 1
        xorl      %edx, %edx                                    #112.5
..LN2346:
        xorl      %eax, %eax                                    #112.5
..LN2347:
	.loc    1  111  is_stmt 1
        testl     %r15d, %r15d                                  #111.34
..LN2348:
        jle       ..B1.288      # Prob 9%                       #111.34
..LN2349:
                                # LOE rax r8 r11 r13 edx ecx r10d r12d r14d r15d xmm0
..B1.275:                       # Preds ..B1.274
..LN2350:
	.loc    1  115  is_stmt 1
        movq      152(%rsp), %rsi                               #115.89
..LN2351:
        lea       (%r11,%r8,8), %rbx                            #115.5
..LN2352:
        movl      %r12d, 8(%rsp)                                #115.19
..LN2353:
	.loc    1  118  is_stmt 1
        lea       (%r13,%r8,8), %rdi                            #118.5
..LN2354:
	.loc    1  115  is_stmt 1
        movl      %r14d, (%rsp)                                 #115.19
..LN2355:
        lea       (%r12,%r10), %r9d                             #115.19
..LN2356:
        movq      72(%rbp), %r11                                #115.19
..LN2357:
        lea       (%rsi,%r8,8), %rsi                            #115.89
..LN2358:
        movq      64(%rbp), %r12                                #115.19
..LN2359:
        movq      160(%rsp), %r13                               #115.19
..LN2360:
        .align    16,0x90
..LN2361:
                                # LOE rax rbx rsi rdi r8 r11 r12 r13 edx ecx r9d r10d r15d xmm0
..B1.276:                       # Preds ..B1.276 ..B1.275
..L62:          # optimization report
                # %s was not vectorized: vector dependence prevents vectorization%s
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
..LN2362:
        lea       (%r9,%rdx), %r14d                             #115.76
..LN2363:
        movslq    %r14d, %r14                                   #115.19
..LN2364:
	.loc    1  111  is_stmt 1
        incl      %ecx                                          #111.23
..LN2365:
        addl      $3, %edx                                      #111.23
..LN2366:
	.loc    1  115  is_stmt 1
        vmovsd    8(%r13,%r14,8), %xmm4                         #115.51
..LN2367:
        vmulsd    8(%r12,%r14,8), %xmm4, %xmm1                  #115.51
..LN2368:
        vmovsd    (%r13,%r14,8), %xmm5                          #115.28
..LN2369:
	.loc    1  116  is_stmt 1
        vfmadd231sd (%r12,%r14,8), %xmm5, %xmm1                 #116.5
..LN2370:
	.loc    1  115  is_stmt 1
        vmovsd    16(%r13,%r14,8), %xmm6                        #115.76
..LN2371:
	.loc    1  116  is_stmt 1
        vfmadd231sd 16(%r12,%r14,8), %xmm6, %xmm1               #116.5
..LN2372:
	.loc    1  115  is_stmt 1
        vdivsd    (%rsi,%rax,8), %xmm1, %xmm2                   #115.89
..LN2373:
	.loc    1  116  is_stmt 1
        vmulsd    %xmm2, %xmm0, %xmm3                           #116.5
..LN2374:
        vmovsd    %xmm3, (%rbx,%rax,8)                          #116.5
..LN2375:
	.loc    1  118  is_stmt 1
        vmulsd    8(%r11,%r14,8), %xmm4, %xmm7                  #118.51
..LN2376:
	.loc    1  119  is_stmt 1
        vfmadd231sd (%r11,%r14,8), %xmm5, %xmm7                 #119.5
..LN2377:
        vfmadd231sd 16(%r11,%r14,8), %xmm6, %xmm7               #119.5
..LN2378:
	.loc    1  118  is_stmt 1
        vdivsd    (%rsi,%rax,8), %xmm7, %xmm8                   #118.90
..LN2379:
	.loc    1  119  is_stmt 1
        vmulsd    %xmm0, %xmm8, %xmm9                           #119.5
..LN2380:
        vmovsd    %xmm9, (%rdi,%rax,8)                          #119.5
..LN2381:
	.loc    1  111  is_stmt 1
        incq      %rax                                          #111.23
..LN2382:
        cmpl      %r15d, %ecx                                   #111.23
..LN2383:
        jb        ..B1.276      # Prob 82%                      #111.23
..LN2384:
                                # LOE rax rbx rsi rdi r8 r11 r12 r13 edx ecx r9d r10d r15d xmm0
..B1.277:                       # Preds ..B1.276
..LN2385:
        movl      (%rsp), %r14d                                 #
..LN2386:
        incl      %r14d                                         #111.3
..LN2387:
        addl      176(%rsp), %r10d                              #111.3
..LN2388:
        addq      144(%rsp), %r8                                #111.3
..LN2389:
        movl      8(%rsp), %r12d                                #
..LN2390:
        movq      88(%rbp), %r13                                #
..LN2391:
        movq      80(%rbp), %r11                                #
..LN2392:
        cmpl      184(%rsp), %r14d                              #111.3
..LN2393:
        jb        ..B1.274      # Prob 81%                      #111.3
..LN2394:
        jmp       ..B1.290      # Prob 100%                     #111.3
..LN2395:
                                # LOE r8 r11 r13 r10d r12d r14d r15d xmm0
..B1.278:                       # Preds ..B1.272
..LN2396:
	.loc    1  106  is_stmt 1
        movl      176(%rsp), %eax                               #106.53
..LN2397:
        movl      %eax, %r9d                                    #106.53
..LN2398:
        negl      %r9d                                          #106.53
..LN2399:
        addl      %eax, %r9d                                    #106.72
..LN2400:
	.loc    1  103  is_stmt 1
        movl      %r15d, %eax                                   #103.23
..LN2401:
        movq      160(%rsp), %r10                               #103.23
..LN2402:
        andl      $-4, %eax                                     #103.23
..LN2403:
        movl      176(%rsp), %edx                               #103.23
..LN2404:
        movl      184(%rsp), %ecx                               #103.23
..LN2405:
                                # LOE r10 eax edx ecx esi edi r8d r9d r15d
..B1.279:                       # Preds ..B1.286 ..B1.297 ..B1.278
..LN2406:
        cmpl      $4, %r15d                                     #103.23
..LN2407:
        jl        ..B1.296      # Prob 10%                      #103.23
..LN2408:
                                # LOE r10 eax edx ecx esi edi r8d r9d r15d
..B1.280:                       # Preds ..B1.279
..LN2409:
        xorl      %r12d, %r12d                                  #103.23
..LN2410:
        movl      %eax, %ebx                                    #103.23
..LN2411:
	.loc    1  104  is_stmt 1
        movl      %esi, (%rsp)                                  #104.5
..LN2412:
	.loc    1  106  is_stmt 1
        lea       (%rdx,%r8), %r13d                             #106.21
..LN2413:
	.loc    1  104  is_stmt 1
        movl      %r15d, 232(%rsp)                              #104.5
..LN2414:
	.loc    1  106  is_stmt 1
        lea       (%r9,%rdi), %r14d                             #106.53
..LN2415:
	.loc    1  104  is_stmt 1
        movq      120(%rsp), %rcx                               #104.5
..LN2416:
        xorl      %r11d, %r11d                                  #104.5
..LN2417:
        movq      128(%rsp), %rsi                               #104.5
..LN2418:
                                # LOE rcx rsi r10 eax ebx edi r8d r9d r11d r12d r13d r14d
..B1.281:                       # Preds ..B1.281 ..B1.280
..L64:          # optimization report
                # LOOP WAS COMPLETELY UNROLLED BY 3
..L63:          # optimization report
                # LOOP WAS UNROLLED BY 1
                # LOOP WAS VECTORIZED
                # VECTORIZATION SPEEDUP COEFFECIENT 2.628906
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 0.005859
                # MAIN VECTOR TYPE: 64-bits floating point
..LN2419:
	.loc    1  106  is_stmt 1
        lea       (%r13,%r11), %r15d                            #106.21
..LN2420:
        movslq    %r15d, %r15                                   #106.21
..LN2421:
        lea       (%r8,%r11), %edx                              #106.43
..LN2422:
        movslq    %edx, %rdx                                    #106.43
..LN2423:
	.loc    1  103  is_stmt 1
        addl      $4, %r12d                                     #103.23
..LN2424:
	.loc    1  106  is_stmt 1
        vmovups   (%rsi,%r15,8), %xmm8                          #106.21
..LN2425:
        vmovups   16(%rsi,%r15,8), %xmm9                        #106.21
..LN2426:
        vmovups   32(%rsi,%r15,8), %xmm10                       #106.21
..LN2427:
        vmovups   16(%rsi,%rdx,8), %xmm15                       #106.43
..LN2428:
        vmovups   32(%rsi,%rdx,8), %xmm2                        #106.43
..LN2429:
        vmovups   (%rsi,%rdx,8), %xmm14                         #106.43
..LN2430:
        vinsertf128 $1, 48(%rsi,%r15,8), %ymm8, %ymm11          #106.21
..LN2431:
        vinsertf128 $1, 64(%rsi,%r15,8), %ymm9, %ymm12          #106.21
..LN2432:
        vinsertf128 $1, 80(%rsi,%r15,8), %ymm10, %ymm13         #106.21
..LN2433:
	.loc    1  98  is_stmt 1
        lea       (%r14,%r11), %r15d                            #98.7
..LN2434:
	.loc    1  106  is_stmt 1
        movslq    %r15d, %r15                                   #106.53
..LN2435:
	.loc    1  103  is_stmt 1
        addl      $12, %r11d                                    #103.23
..LN2436:
	.loc    1  106  is_stmt 1
        vblendpd  $10, %ymm13, %ymm12, %ymm5                    #106.21
..LN2437:
	.loc    1  103  is_stmt 1
        cmpl      %eax, %r12d                                   #103.23
..LN2438:
	.loc    1  106  is_stmt 1
        vblendpd  $10, %ymm12, %ymm11, %ymm6                    #106.21
..LN2439:
        vshufpd   $5, %ymm13, %ymm11, %ymm7                     #106.21
..LN2440:
        vmovsd    16(%rcx,%r15,8), %xmm11                       #106.53
..LN2441:
        vmovsd    64(%rcx,%r15,8), %xmm12                       #106.53
..LN2442:
        vmovhpd   40(%rcx,%r15,8), %xmm11, %xmm13               #106.53
..LN2443:
        vinsertf128 $1, 64(%rsi,%rdx,8), %ymm15, %ymm3          #106.43
..LN2444:
        vinsertf128 $1, 80(%rsi,%rdx,8), %ymm2, %ymm1           #106.43
..LN2445:
        vinsertf128 $1, 48(%rsi,%rdx,8), %ymm14, %ymm0          #106.43
..LN2446:
        vblendpd  $10, %ymm1, %ymm3, %ymm9                      #106.43
..LN2447:
        vblendpd  $10, %ymm3, %ymm0, %ymm4                      #106.43
..LN2448:
        vshufpd   $5, %ymm1, %ymm0, %ymm8                       #106.43
..LN2449:
        vsubpd    %ymm9, %ymm5, %ymm2                           #106.43
..LN2450:
        vmovsd    24(%rcx,%r15,8), %xmm5                        #106.53
..LN2451:
        vmovsd    (%rcx,%r15,8), %xmm9                          #106.53
..LN2452:
        vsubpd    %ymm4, %ymm6, %ymm4                           #106.43
..LN2453:
        vmovsd    72(%rcx,%r15,8), %xmm6                        #106.53
..LN2454:
        vmovhpd   96(%rcx,%r15,8), %xmm6, %xmm10                #106.53
..LN2455:
        vsubpd    %ymm8, %ymm7, %ymm3                           #106.43
..LN2456:
        vmovhpd   48(%rcx,%r15,8), %xmm5, %xmm7                 #106.53
..LN2457:
        vmovhpd   88(%rcx,%r15,8), %xmm12, %xmm0                #106.53
..LN2458:
        vmovhpd   24(%rcx,%r15,8), %xmm9, %xmm11                #106.53
..LN2459:
        vmovsd    8(%rcx,%r15,8), %xmm5                         #106.53
..LN2460:
        vmovsd    56(%rcx,%r15,8), %xmm6                        #106.53
..LN2461:
        vmovhpd   80(%rcx,%r15,8), %xmm6, %xmm8                 #106.53
..LN2462:
        vinsertf128 $1, %xmm10, %ymm7, %ymm1                    #106.53
..LN2463:
        vmovsd    48(%rcx,%r15,8), %xmm10                       #106.53
..LN2464:
        vmovhpd   72(%rcx,%r15,8), %xmm10, %xmm12               #106.53
..LN2465:
        vmovhpd   32(%rcx,%r15,8), %xmm5, %xmm7                 #106.53
..LN2466:
        vinsertf128 $1, %xmm12, %ymm11, %ymm14                  #106.53
..LN2467:
        vsubpd    %ymm14, %ymm4, %ymm4                          #106.53
..LN2468:
        vaddpd    %ymm1, %ymm4, %ymm1                           #106.72
..LN2469:
        vinsertf128 $1, %xmm8, %ymm7, %ymm5                     #106.53
..LN2470:
        vsubpd    %ymm5, %ymm3, %ymm5                           #106.53
..LN2471:
        vmovsd    32(%rcx,%r15,8), %xmm3                        #106.72
..LN2472:
        vmovsd    %xmm1, (%r10,%rdx,8)                          #106.7
..LN2473:
        vmovhpd   %xmm1, 24(%r10,%rdx,8)                        #106.7
..LN2474:
        vextractf128 $1, %ymm1, %xmm15                          #106.7
..LN2475:
        vmovhpd   56(%rcx,%r15,8), %xmm3, %xmm1                 #106.72
..LN2476:
        vmovsd    80(%rcx,%r15,8), %xmm3                        #106.72
..LN2477:
        vmovhpd   104(%rcx,%r15,8), %xmm3, %xmm4                #106.72
..LN2478:
        vmovsd    %xmm15, 48(%r10,%rdx,8)                       #106.7
..LN2479:
        vmovhpd   %xmm15, 72(%r10,%rdx,8)                       #106.7
..LN2480:
        vinsertf128 $1, %xmm0, %ymm13, %ymm0                    #106.53
..LN2481:
        vsubpd    %ymm0, %ymm2, %ymm3                           #106.53
..LN2482:
        vmovsd    40(%rcx,%r15,8), %xmm2                        #106.72
..LN2483:
        vmovhpd   64(%rcx,%r15,8), %xmm2, %xmm0                 #106.72
..LN2484:
        vmovsd    88(%rcx,%r15,8), %xmm2                        #106.72
..LN2485:
        vinsertf128 $1, %xmm4, %ymm1, %ymm6                     #106.72
..LN2486:
        vmovhpd   112(%rcx,%r15,8), %xmm2, %xmm1                #106.72
..LN2487:
        vaddpd    %ymm6, %ymm5, %ymm7                           #106.72
..LN2488:
        vinsertf128 $1, %xmm1, %ymm0, %ymm4                     #106.72
..LN2489:
        vaddpd    %ymm4, %ymm3, %ymm5                           #106.72
..LN2490:
        vextractf128 $1, %ymm7, %xmm8                           #106.7
..LN2491:
        vextractf128 $1, %ymm5, %xmm6                           #106.7
..LN2492:
        vmovsd    %xmm7, 8(%r10,%rdx,8)                         #106.7
..LN2493:
        vmovhpd   %xmm7, 32(%r10,%rdx,8)                        #106.7
..LN2494:
        vmovsd    %xmm8, 56(%r10,%rdx,8)                        #106.7
..LN2495:
        vmovhpd   %xmm8, 80(%r10,%rdx,8)                        #106.7
..LN2496:
        vmovsd    %xmm5, 16(%r10,%rdx,8)                        #106.7
..LN2497:
        vmovhpd   %xmm5, 40(%r10,%rdx,8)                        #106.7
..LN2498:
        vmovsd    %xmm6, 64(%r10,%rdx,8)                        #106.7
..LN2499:
        vmovhpd   %xmm6, 88(%r10,%rdx,8)                        #106.7
..LN2500:
	.loc    1  103  is_stmt 1
        jb        ..B1.281      # Prob 82%                      #103.23
..LN2501:
                                # LOE rcx rsi r10 eax ebx edi r8d r9d r11d r12d r13d r14d
..B1.282:                       # Preds ..B1.281
..LN2502:
        movl      (%rsp), %esi                                  #
..LN2503:
        movl      176(%rsp), %edx                               #
..LN2504:
        movl      184(%rsp), %ecx                               #
..LN2505:
        movl      232(%rsp), %r15d                              #
..LN2506:
                                # LOE r10 eax edx ecx ebx esi edi r8d r9d r15d
..B1.283:                       # Preds ..B1.282 ..B1.296
..LN2507:
        lea       (%rbx,%rbx,2), %r13d                          #103.23
..LN2508:
        cmpl      %r15d, %ebx                                   #103.23
..LN2509:
        jae       ..B1.297      # Prob 10%                      #103.23
..LN2510:
                                # LOE r10 eax edx ecx ebx esi edi r8d r9d r13d r15d
..B1.284:                       # Preds ..B1.283
..LN2511:
	.loc    1  106  is_stmt 1
        movl      %esi, (%rsp)                                  #106.53
..LN2512:
        lea       (%rdx,%r8), %r12d                             #106.21
..LN2513:
        movq      120(%rsp), %rcx                               #106.53
..LN2514:
        lea       (%r9,%rdi), %r11d                             #106.53
..LN2515:
        movq      128(%rsp), %rsi                               #106.53
..LN2516:
                                # LOE rcx rsi r10 eax ebx edi r8d r9d r11d r12d r13d r15d
..B1.285:                       # Preds ..B1.285 ..B1.284
..L65:          # optimization report
                # LOOP WAS UNROLLED BY 1
                # REMAINDER LOOP FOR VECTORIZATION
                # VECTORIZATION SPEEDUP COEFFECIENT 2.628906
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 0.005859
..LN2517:
        lea       (%r12,%r13), %r14d                            #106.21
..LN2518:
        movslq    %r14d, %r14                                   #106.21
..LN2519:
        lea       (%r8,%r13), %edx                              #106.43
..LN2520:
        movslq    %edx, %rdx                                    #106.43
..LN2521:
	.loc    1  103  is_stmt 1
        incl      %ebx                                          #103.23
..LN2522:
	.loc    1  106  is_stmt 1
        vmovsd    (%rsi,%r14,8), %xmm0                          #106.21
..LN2523:
        vmovsd    8(%rsi,%r14,8), %xmm1                         #106.21
..LN2524:
        vmovsd    16(%rsi,%r14,8), %xmm2                        #106.21
..LN2525:
	.loc    1  98  is_stmt 1
        lea       (%r11,%r13), %r14d                            #98.7
..LN2526:
	.loc    1  106  is_stmt 1
        movslq    %r14d, %r14                                   #106.53
..LN2527:
	.loc    1  103  is_stmt 1
        addl      $3, %r13d                                     #103.23
..LN2528:
	.loc    1  106  is_stmt 1
        vsubsd    (%rsi,%rdx,8), %xmm0, %xmm3                   #106.43
..LN2529:
        vsubsd    8(%rsi,%rdx,8), %xmm1, %xmm6                  #106.43
..LN2530:
        vsubsd    16(%rsi,%rdx,8), %xmm2, %xmm9                 #106.43
..LN2531:
        vsubsd    (%rcx,%r14,8), %xmm3, %xmm4                   #106.53
..LN2532:
        vsubsd    8(%rcx,%r14,8), %xmm6, %xmm7                  #106.53
..LN2533:
        vsubsd    16(%rcx,%r14,8), %xmm9, %xmm10                #106.53
..LN2534:
        vaddsd    24(%rcx,%r14,8), %xmm4, %xmm5                 #106.72
..LN2535:
        vaddsd    32(%rcx,%r14,8), %xmm7, %xmm8                 #106.72
..LN2536:
        vaddsd    40(%rcx,%r14,8), %xmm10, %xmm11               #106.72
..LN2537:
        vmovsd    %xmm5, (%r10,%rdx,8)                          #106.7
..LN2538:
        vmovsd    %xmm8, 8(%r10,%rdx,8)                         #106.7
..LN2539:
        vmovsd    %xmm11, 16(%r10,%rdx,8)                       #106.7
..LN2540:
	.loc    1  103  is_stmt 1
        cmpl      %r15d, %ebx                                   #103.23
..LN2541:
        jb        ..B1.285      # Prob 82%                      #103.23
..LN2542:
                                # LOE rcx rsi r10 eax ebx edi r8d r9d r11d r12d r13d r15d
..B1.286:                       # Preds ..B1.285
..LN2543:
        movl      (%rsp), %esi                                  #
..LN2544:
        incl      %esi                                          #103.3
..LN2545:
        movl      176(%rsp), %edx                               #
..LN2546:
        addl      %edx, %r8d                                    #103.3
..LN2547:
        movl      184(%rsp), %ecx                               #
..LN2548:
        lea       3(%rdi,%rdx), %edi                            #103.3
..LN2549:
        cmpl      %ecx, %esi                                    #103.3
..LN2550:
        jb        ..B1.279      # Prob 82%                      #103.3
..LN2551:
        jmp       ..B1.273      # Prob 100%                     #103.3
..LN2552:
                                # LOE r10 eax edx ecx esi edi r8d r9d r15d
..B1.288:                       # Preds ..B1.274                # Infreq
..LN2553:
	.loc    1  111  is_stmt 1
        incl      %r14d                                         #111.3
..LN2554:
        addl      176(%rsp), %r10d                              #111.3
..LN2555:
        addq      144(%rsp), %r8                                #111.3
..LN2556:
        cmpl      184(%rsp), %r14d                              #111.3
..LN2557:
        jb        ..B1.274      # Prob 81%                      #111.3
..LN2558:
                                # LOE r8 r11 r13 r10d r12d r14d r15d xmm0
..B1.290:                       # Preds ..B1.277 ..B1.288 ..B1.271 # Infreq
..LN2559:
	.loc    1  122  is_stmt 1
        vzeroupper                                              #122.3
..LN2560:
        movq      192(%rsp), %rdi                               #122.3
..LN2561:
#       free(void *)
        call      free                                          #122.3
..LN2562:
                                # LOE
..B1.291:                       # Preds ..B1.290                # Infreq
..LN2563:
	.loc    1  123  is_stmt 1
        movq      128(%rsp), %rdi                               #123.3
..LN2564:
#       free(void *)
        call      free                                          #123.3
..LN2565:
                                # LOE
..B1.292:                       # Preds ..B1.291                # Infreq
..LN2566:
	.loc    1  124  is_stmt 1
        movq      120(%rsp), %rdi                               #124.3
..LN2567:
#       free(void *)
        call      free                                          #124.3
..LN2568:
                                # LOE
..B1.293:                       # Preds ..B1.292                # Infreq
..LN2569:
	.loc    1  125  is_stmt 1
        movq      160(%rsp), %rdi                               #125.3
..LN2570:
	.loc    1  125  epilogue_begin  is_stmt 1
        addq      $280, %rsp                                    #125.3
	.cfi_restore 3
..LN2571:
        popq      %rbx                                          #125.3
	.cfi_restore 15
..LN2572:
        popq      %r15                                          #125.3
	.cfi_restore 14
..LN2573:
        popq      %r14                                          #125.3
	.cfi_restore 13
..LN2574:
        popq      %r13                                          #125.3
	.cfi_restore 12
..LN2575:
        popq      %r12                                          #125.3
..LN2576:
        movq      %rbp, %rsp                                    #125.3
..LN2577:
        popq      %rbp                                          #125.3
	.cfi_def_cfa 7, 8
	.cfi_restore 6
..LN2578:
#       free(void *)
        jmp       free                                          #125.3
	.cfi_def_cfa 6, 16
	.cfi_escape 0x10, 0x03, 0x0e, 0x38, 0x1c, 0x0d, 0xe0, 0xff, 0xff, 0xff, 0x1a, 0x0d, 0xd8, 0xff, 0xff, 0xff, 0x22
	.cfi_offset 6, -16
	.cfi_escape 0x10, 0x0c, 0x0e, 0x38, 0x1c, 0x0d, 0xe0, 0xff, 0xff, 0xff, 0x1a, 0x0d, 0xf8, 0xff, 0xff, 0xff, 0x22
	.cfi_escape 0x10, 0x0d, 0x0e, 0x38, 0x1c, 0x0d, 0xe0, 0xff, 0xff, 0xff, 0x1a, 0x0d, 0xf0, 0xff, 0xff, 0xff, 0x22
	.cfi_escape 0x10, 0x0e, 0x0e, 0x38, 0x1c, 0x0d, 0xe0, 0xff, 0xff, 0xff, 0x1a, 0x0d, 0xe8, 0xff, 0xff, 0xff, 0x22
	.cfi_escape 0x10, 0x0f, 0x0e, 0x38, 0x1c, 0x0d, 0xe0, 0xff, 0xff, 0xff, 0x1a, 0x0d, 0xe0, 0xff, 0xff, 0xff, 0x22
..LN2579:
                                # LOE
..B1.296:                       # Preds ..B1.279                # Infreq
..LN2580:
	.loc    1  103  is_stmt 1
        xorl      %ebx, %ebx                                    #103.23
..LN2581:
        jmp       ..B1.283      # Prob 100%                     #103.23
..LN2582:
                                # LOE r10 eax edx ecx ebx esi edi r8d r9d r15d
..B1.297:                       # Preds ..B1.283                # Infreq
..LN2583:
        incl      %esi                                          #103.3
..LN2584:
        addl      %edx, %r8d                                    #103.3
..LN2585:
        lea       3(%rdi,%rdx), %edi                            #103.3
..LN2586:
        cmpl      %ecx, %esi                                    #103.3
..LN2587:
        jb        ..B1.279      # Prob 82%                      #103.3
..LN2588:
        jmp       ..B1.273      # Prob 100%                     #103.3
..LN2589:
                                # LOE r10 eax edx ecx esi edi r8d r9d r15d
..B1.299:                       # Preds ..B1.252 ..B1.255 ..B1.257 # Infreq
..LN2590:
	.loc    1  95  is_stmt 1
        xorl      %edx, %edx                                    #95.23
..LN2591:
        jmp       ..B1.265      # Prob 100%                     #95.23
..LN2592:
                                # LOE r8 r9 r12 edx r10d r11d r13d xmm2 ymm1
..B1.301:                       # Preds ..B1.253                # Infreq
..LN2593:
	.loc    1  98  is_stmt 1
        movq      192(%rsp), %rax                               #98.26
..LN2594:
	.loc    1  95  is_stmt 1
        xorl      %edi, %edi                                    #95.23
..LN2595:
        movl      (%rsp), %edx                                  #95.23
..LN2596:
	.loc    1  98  is_stmt 1
        lea       (%r9,%r12,8), %rbx                            #98.33
..LN2597:
        lea       (%r13,%r10), %esi                             #98.52
..LN2598:
        lea       (%rax,%r12,8), %rax                           #98.26
..LN2599:
        jmp       ..B1.262      # Prob 100%                     #98.26
..LN2600:
                                # LOE rax rcx rbx r8 r9 r12 edx esi edi r10d r11d r13d xmm2 ymm1
..B1.303:                       # Preds ..B1.230 ..B1.233 ..B1.235 # Infreq
..LN2601:
	.loc    1  87  is_stmt 1
        xorl      %ebx, %ebx                                    #87.24
..LN2602:
        jmp       ..B1.243      # Prob 100%                     #87.24
..LN2603:
                                # LOE rcx rsi r8 edx ebx edi r11d r15d xmm2 ymm1
..B1.305:                       # Preds ..B1.231                # Infreq
..LN2604:
	.loc    1  91  is_stmt 1
        movq      216(%rsp), %rax                               #91.43
..LN2605:
	.loc    1  87  is_stmt 1
        xorl      %r12d, %r12d                                  #87.24
..LN2606:
        movl      (%rsp), %ebx                                  #87.24
..LN2607:
	.loc    1  91  is_stmt 1
        lea       (%rdx,%r11), %r10d                            #91.50
..LN2608:
        lea       (%rax,%rsi,8), %rax                           #91.43
..LN2609:
        jmp       ..B1.240      # Prob 100%                     #91.43
..LN2610:
                                # LOE rax rcx rsi r8 r9 edx ebx edi r10d r11d r12d r15d xmm2 ymm1
..B1.307:                       # Preds ..B1.219                # Infreq
..LN2611:
	.loc    1  198  is_stmt 1
        xorl      %ebx, %ebx                                    #198.6
..LN2612:
        jmp       ..B1.223      # Prob 100%                     #198.6
..LN2613:
                                # LOE rax rbx rsi r8 r14 ecx r15d
..B1.308:                       # Preds ..B1.205 ..B1.208 ..B1.210 # Infreq
..LN2614:
        xorl      %ecx, %ecx                                    #198.6
..LN2615:
        jmp       ..B1.218      # Prob 100%                     #198.6
..LN2616:
                                # LOE rsi r8 r14 eax ecx r15d
..B1.310:                       # Preds ..B1.206                # Infreq
..LN2617:
        movl      184(%rsp), %edx                               #198.41
..LN2618:
        movl      %eax, %ecx                                    #198.6
..LN2619:
        imull     208(%rsp), %edx                               #198.41
..LN2620:
        andl      $-16, %ecx                                    #198.6
..LN2621:
        movslq    %edx, %rdx                                    #198.33
..LN2622:
        xorl      %ebx, %ebx                                    #198.6
..LN2623:
        movq      192(%rsp), %r9                                #198.33
..LN2624:
        lea       (%r9,%rdx,8), %r10                            #198.33
..LN2625:
        lea       (%r10,%rsi,8), %r10                           #198.33
..LN2626:
        lea       (%r14,%rsi,8), %r9                            #198.60
..LN2627:
        jmp       ..B1.215      # Prob 100%                     #198.60
..LN2628:
                                # LOE rbx rsi rdi r8 r9 r10 r14 eax ecx r15d
..B1.312:                       # Preds ..B1.196                # Infreq
..LN2629:
	.loc    1  197  is_stmt 1
        xorl      %ecx, %ecx                                    #197.6
..LN2630:
        jmp       ..B1.200      # Prob 100%                     #197.6
..LN2631:
                                # LOE rcx rbx rsi r12 r14 eax edx r15d
..B1.313:                       # Preds ..B1.183 ..B1.185 ..B1.187 # Infreq
..LN2632:
        xorl      %edx, %edx                                    #197.6
..LN2633:
        jmp       ..B1.195      # Prob 100%                     #197.6
..LN2634:
                                # LOE rsi r12 r14 eax edx ebx r15d
..B1.316:                       # Preds ..B1.173                # Infreq
..LN2635:
	.loc    1  192  is_stmt 1
        xorl      %r9d, %r9d                                    #192.5
..LN2636:
        jmp       ..B1.177      # Prob 100%                     #192.5
..LN2637:
                                # LOE rdx r8 r9 r12 r14 eax ecx r15d
..B1.317:                       # Preds ..B1.159 ..B1.162 ..B1.164 # Infreq
..LN2638:
        xorl      %ecx, %ecx                                    #192.5
..LN2639:
        jmp       ..B1.172      # Prob 100%                     #192.5
..LN2640:
                                # LOE rdx r12 r14 eax ecx r8d r15d
..B1.319:                       # Preds ..B1.160                # Infreq
..LN2641:
        movq      192(%rsp), %rsi                               #192.32
..LN2642:
        movl      %r8d, %ecx                                    #192.5
..LN2643:
        andl      $-16, %ecx                                    #192.5
..LN2644:
        xorl      %r9d, %r9d                                    #192.5
..LN2645:
        lea       (%rsi,%rdx,8), %rdi                           #192.32
..LN2646:
        lea       (%r14,%rdx,8), %rsi                           #192.52
..LN2647:
        jmp       ..B1.169      # Prob 100%                     #192.52
..LN2648:
                                # LOE rdx rbx rsi rdi r9 r12 r14 eax ecx r8d r15d
..B1.321:                       # Preds ..B1.150                # Infreq
..LN2649:
	.loc    1  191  is_stmt 1
        xorl      %r8d, %r8d                                    #191.5
..LN2650:
        jmp       ..B1.154      # Prob 100%                     #191.5
..LN2651:
                                # LOE rdx rdi r8 r12 r14 eax ebx r15d
..B1.322:                       # Preds ..B1.137 ..B1.139 ..B1.141 # Infreq
..LN2652:
        xorl      %ebx, %ebx                                    #191.5
..LN2653:
        jmp       ..B1.149      # Prob 100%                     #191.5
..LN2654:
                                # LOE rdx r12 r14 eax ebx edi r15d
..B1.325:                       # Preds ..B1.127                # Infreq
..LN2655:
	.loc    1  186  is_stmt 1
        xorl      %edi, %edi                                    #186.5
..LN2656:
        jmp       ..B1.131      # Prob 100%                     #186.5
..LN2657:
                                # LOE rcx rsi rdi r9 r12 r14 eax edx ebx r15d
..B1.326:                       # Preds ..B1.113 ..B1.116 ..B1.118 # Infreq
..LN2658:
        xorl      %ebx, %ebx                                    #186.5
..LN2659:
        jmp       ..B1.126      # Prob 100%                     #186.5
..LN2660:
                                # LOE rcx r9 r12 r14 eax edx ebx esi r15d
..B1.328:                       # Preds ..B1.114                # Infreq
..LN2661:
        movl      %esi, %ebx                                    #186.5
..LN2662:
        lea       -1(%rdx), %r10d                               #186.32
..LN2663:
        imull     208(%rsp), %r10d                              #186.32
..LN2664:
        lea       (%rcx,%r9,8), %r8                             #186.59
..LN2665:
        movq      %r8, (%rsp)                                   #186.59
..LN2666:
	.loc    1  142  is_stmt 1
        lea       (%r10,%r15,2), %edi                           #142.12
..LN2667:
        movl      %edi, 8(%rsp)                                 #142.12
..LN2668:
	.loc    1  186  is_stmt 1
        andl      $-16, %ebx                                    #186.5
..LN2669:
        xorl      %r8d, %r8d                                    #186.5
..LN2670:
        jmp       ..B1.123      # Prob 100%                     #186.5
..LN2671:
                                # LOE rcx r8 r9 r11 r12 r14 eax edx ebx esi r10d r15d
..B1.330:                       # Preds ..B1.104                # Infreq
..LN2672:
	.loc    1  185  is_stmt 1
        xorl      %r8d, %r8d                                    #185.5
..LN2673:
        jmp       ..B1.108      # Prob 100%                     #185.5
..LN2674:
                                # LOE rcx r9 r12 r14 eax edx ebx esi edi r8d r15d
..B1.331:                       # Preds ..B1.93 ..B1.95         # Infreq
..LN2675:
        xorl      %ebx, %ebx                                    #185.5
..LN2676:
        jmp       ..B1.103      # Prob 100%                     #185.5
..LN2677:
                                # LOE rcx r9 r12 r14 eax edx ebx esi edi r15d
..B1.333:                       # Preds ..B1.91                 # Infreq
..LN2678:
        movl      %edx, %r9d                                    #185.5
..LN2679:
        xorl      %ebx, %ebx                                    #185.5
..LN2680:
        jmp       ..B1.103      # Prob 100%                     #185.5
..LN2681:
                                # LOE rcx r9 r12 r14 eax edx ebx esi edi r15d
..B1.334:                       # Preds ..B1.81                 # Infreq
..LN2682:
	.loc    1  180  is_stmt 1
        xorl      %r9d, %r9d                                    #180.5
..LN2683:
        jmp       ..B1.85       # Prob 100%                     #180.5
..LN2684:
                                # LOE rcx r8 r9 r10 r12 r14 eax edx ebx esi r13d r15d
..B1.335:                       # Preds ..B1.67 ..B1.70 ..B1.72 # Infreq
..LN2685:
        xorl      %ebx, %ebx                                    #180.5
..LN2686:
        jmp       ..B1.80       # Prob 100%                     #180.5
..LN2687:
                                # LOE rcx r10 r12 r14 eax edx ebx esi r8d r13d r15d
..B1.337:                       # Preds ..B1.68                 # Infreq
..LN2688:
        movl      %r8d, %ebx                                    #180.5
..LN2689:
        lea       -1(%rdx), %edi                                #180.32
..LN2690:
        imull     208(%rsp), %edi                               #180.32
..LN2691:
        lea       (%rcx,%r10,8), %r11                           #180.56
..LN2692:
        movq      %r11, 32(%rsp)                                #180.56
..LN2693:
        lea       (%r15,%rdi), %r9d                             #180.32
..LN2694:
        movl      %r9d, 40(%rsp)                                #180.32
..LN2695:
        andl      $-16, %ebx                                    #180.5
..LN2696:
        movq      $0, 56(%rsp)                                  #180.5
..LN2697:
        jmp       ..B1.77       # Prob 100%                     #180.5
..LN2698:
                                # LOE rcx r10 r12 r14 eax edx ebx esi edi r8d r13d r15d
..B1.339:                       # Preds ..B1.58                 # Infreq
..LN2699:
	.loc    1  179  is_stmt 1
        xorl      %r8d, %r8d                                    #179.5
..LN2700:
        jmp       ..B1.62       # Prob 100%                     #179.5
..LN2701:
                                # LOE rcx r10 r12 r14 eax edx ebx esi edi r8d r13d r15d
..B1.340:                       # Preds ..B1.47 ..B1.49         # Infreq
..LN2702:
        xorl      %ebx, %ebx                                    #179.5
..LN2703:
        jmp       ..B1.57       # Prob 100%                     #179.5
..LN2704:
                                # LOE rcx r10 r12 r14 eax edx ebx esi edi r13d r15d
..B1.342:                       # Preds ..B1.45                 # Infreq
..LN2705:
        movl      %edx, %r10d                                   #179.5
..LN2706:
        xorl      %ebx, %ebx                                    #179.5
..LN2707:
        jmp       ..B1.57       # Prob 100%                     #179.5
..LN2708:
                                # LOE rcx r10 r12 r14 eax edx ebx esi edi r13d r15d
..B1.343:                       # Preds ..B1.23                 # Infreq
..LN2709:
	.loc    1  166  is_stmt 1
        xorl      %r11d, %r11d                                  #166.30
..LN2710:
        jmp       ..B1.27       # Prob 100%                     #166.30
..LN2711:
                                # LOE rdx rbx r11 r12 eax ecx esi edi r8d r9d r10d xmm0 ymm1
..B1.344:                       # Preds ..B1.10 ..B1.12 ..B1.14 # Infreq
..LN2712:
        xorl      %eax, %eax                                    #166.30
..LN2713:
        jmp       ..B1.22       # Prob 100%                     #166.30
..LN2714:
                                # LOE rbx r12 eax ecx esi edi r8d r9d r10d xmm0 ymm1
..B1.355:                       # Preds ..B1.103 ..B1.108       # Infreq
..LN2715:
        cmpl      %esi, %edx                                    #166.19
..LN2716:
        jl        ..B1.113      # Prob 50%                      #166.19
..LN2717:
        jmp       ..B1.135      # Prob 100%                     #166.19
..LN2718:
                                # LOE rcx r9 r12 r14 eax edx esi r15d
..B1.357:                       # Preds ..B1.57 ..B1.62         # Infreq
..LN2719:
        cmpl      %esi, %edx                                    #166.19
..LN2720:
        jl        ..B1.67       # Prob 50%                      #166.19
..LN2721:
        jmp       ..B1.89       # Prob 100%                     #166.19
..LN2722:
                                # LOE rcx r10 r12 r14 eax edx esi r13d r15d
..B1.359:                       # Preds ..B1.195 ..B1.200       # Infreq
..LN2723:
        movl      240(%rsp), %edx                               #166.46
..LN2724:
        cmpl      %eax, %edx                                    #166.46
..LN2725:
        jl        ..B1.205      # Prob 50%                      #166.46
..LN2726:
        jmp       ..B1.227      # Prob 100%                     #166.46
..LN2727:
                                # LOE rsi r14 eax r15d
..B1.361:                       # Preds ..B1.149 ..B1.154       # Infreq
..LN2728:
        movl      240(%rsp), %ecx                               #166.46
..LN2729:
        cmpl      %eax, %ecx                                    #166.46
..LN2730:
        jl        ..B1.159      # Prob 50%                      #166.46
..LN2731:
        jmp       ..B1.181      # Prob 100%                     #166.46
..LN2732:
                                # LOE rdx r12 r14 eax r15d
..B1.364:                       # Preds ..B1.90                 # Infreq
..LN2733:
	.loc    1  179  is_stmt 1
        movl      %edx, %r9d                                    #179.33
..LN2734:
        jl        ..B1.113      # Prob 50%                      #179.33
..LN2735:
        jmp       ..B1.135      # Prob 100%                     #179.33
..LN2736:
                                # LOE rcx r9 r12 r14 eax edx esi r15d
..B1.365:                       # Preds ..B1.44                 # Infreq
..LN2737:
        movl      %edx, %r10d                                   #179.33
..LN2738:
        jl        ..B1.67       # Prob 50%                      #179.33
..LN2739:
        jmp       ..B1.89       # Prob 100%                     #179.33
..LN2740:
        .align    16,0x90
	.cfi_endproc
..LN2741:
                                # LOE rcx r10 r12 r14 eax edx esi r13d r15d
..LN2742:
# mark_end;
	.type	grad_c2l_,@function
	.size	grad_c2l_,.-grad_c2l_
..LNgrad_c2l_.2743:
.LNgrad_c2l_:
	.data
# -- End  grad_c2l_
	.text
.L_2__routine_start_grad_c2l_1:
# -- Begin  grad_c2l
	.text
# mark_begin;
       .align    16,0x90
	.globl grad_c2l
# --- grad_c2l(const int *, const int *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, double *, double *, const int *, const int *, const int *, const int *)
grad_c2l:
# parameter 1(nlon): %rdi
# parameter 2(nlat): %rsi
# parameter 3(pin): %rdx
# parameter 4(dx): %rcx
# parameter 5(dy): %r8
# parameter 6(area): %r9
# parameter 7(edge_w): 16 + %rbp
# parameter 8(edge_e): 24 + %rbp
# parameter 9(edge_s): 32 + %rbp
# parameter 10(edge_n): 40 + %rbp
# parameter 11(en_n): 48 + %rbp
# parameter 12(en_e): 56 + %rbp
# parameter 13(vlon): 64 + %rbp
# parameter 14(vlat): 72 + %rbp
# parameter 15(grad_x): 80 + %rbp
# parameter 16(grad_y): 88 + %rbp
# parameter 17(on_west_edge): 96 + %rbp
# parameter 18(on_east_edge): 104 + %rbp
# parameter 19(on_south_edge): 112 + %rbp
# parameter 20(on_north_edge): 120 + %rbp
..B2.1:                         # Preds ..B2.0
	.cfi_startproc
..___tag_value_grad_c2l.85:
..L86:
                                                         #72.1
..LN2744:
	.loc    1  72  is_stmt 1
        pushq     %rbp                                          #72.1
	.cfi_def_cfa_offset 16
..LN2745:
        movq      %rsp, %rbp                                    #72.1
	.cfi_def_cfa 6, 16
	.cfi_offset 6, -16
..LN2746:
        andq      $-32, %rsp                                    #72.1
..LN2747:
        pushq     %r12                                          #72.1
..LN2748:
        pushq     %r13                                          #72.1
..LN2749:
        pushq     %r14                                          #72.1
..LN2750:
        pushq     %r15                                          #72.1
..LN2751:
        pushq     %rbx                                          #72.1
..LN2752:
        subq      $280, %rsp                                    #72.1
	.cfi_escape 0x10, 0x03, 0x0e, 0x38, 0x1c, 0x0d, 0xe0, 0xff, 0xff, 0xff, 0x1a, 0x0d, 0xd8, 0xff, 0xff, 0xff, 0x22
	.cfi_escape 0x10, 0x0c, 0x0e, 0x38, 0x1c, 0x0d, 0xe0, 0xff, 0xff, 0xff, 0x1a, 0x0d, 0xf8, 0xff, 0xff, 0xff, 0x22
	.cfi_escape 0x10, 0x0d, 0x0e, 0x38, 0x1c, 0x0d, 0xe0, 0xff, 0xff, 0xff, 0x1a, 0x0d, 0xf0, 0xff, 0xff, 0xff, 0x22
	.cfi_escape 0x10, 0x0e, 0x0e, 0x38, 0x1c, 0x0d, 0xe0, 0xff, 0xff, 0xff, 0x1a, 0x0d, 0xe8, 0xff, 0xff, 0xff, 0x22
	.cfi_escape 0x10, 0x0f, 0x0e, 0x38, 0x1c, 0x0d, 0xe0, 0xff, 0xff, 0xff, 0x1a, 0x0d, 0xe0, 0xff, 0xff, 0xff, 0x22
..LN2753:
        movq      %rdx, %r12                                    #72.1
..LN2754:
	.loc    1  78  prologue_end  is_stmt 1
        movl      (%rsi), %eax                                  #78.12
..LN2755:
	.loc    1  77  is_stmt 1
        movl      (%rdi), %r15d                                 #77.12
..LN2756:
	.loc    1  111  is_stmt 1
        movslq    %r15d, %r15                                   #111.27
..LN2757:
	.loc    1  72  is_stmt 1
        movq      %r9, 152(%rsp)                                #72.1
..LN2758:
	.loc    1  79  is_stmt 1
        lea       1(%r15), %edi                                 #79.14
..LN2759:
        movl      %edi, 208(%rsp)                               #79.14
..LN2760:
	.loc    1  80  is_stmt 1
        lea       1(%rax), %r10d                                #80.14
..LN2761:
	.loc    1  95  is_stmt 1
        movslq    %edi, %rdi                                    #95.27
..LN2762:
        movq      %rdi, 200(%rsp)                               #95.27
..LN2763:
	.loc    1  81  is_stmt 1
        imull     %r10d, %edi                                   #81.21
..LN2764:
        movslq    %edi, %rdi                                    #81.21
..LN2765:
        shlq      $3, %rdi                                      #81.21
..LN2766:
	.loc    1  72  is_stmt 1
        movq      %r8, 136(%rsp)                                #72.1
..LN2767:
        movq      %rcx, 216(%rsp)                               #72.1
..LN2768:
	.loc    1  111  is_stmt 1
        movq      %r15, 144(%rsp)                               #111.27
..LN2769:
	.loc    1  78  is_stmt 1
        movl      %eax, 184(%rsp)                               #78.12
..LN2770:
	.loc    1  80  is_stmt 1
        movl      %r10d, 224(%rsp)                              #80.14
..LN2771:
	.loc    1  81  is_stmt 1
#       malloc(size_t)
        call      malloc                                        #81.21
..LN2772:
                                # LOE rax r12 r15 r15d r15b
..B2.349:                       # Preds ..B2.1
..LN2773:
        movq      %rax, 192(%rsp)                               #81.21
..LN2774:
                                # LOE r12 r15 r15d r15b
..B2.2:                         # Preds ..B2.349
..LN2775:
	.loc    1  82  is_stmt 1
        movl      224(%rsp), %edi                               #82.21
..LN2776:
        lea       (%r15,%r15,2), %eax                           #82.30
..LN2777:
        imull     %eax, %edi                                    #82.21
..LN2778:
        movslq    %edi, %rdi                                    #82.21
..LN2779:
        shlq      $3, %rdi                                      #82.21
..LN2780:
        movl      %eax, 176(%rsp)                               #82.30
..LN2781:
#       malloc(size_t)
        call      malloc                                        #82.21
..LN2782:
                                # LOE rax r12 r15 r15d r15b
..B2.350:                       # Preds ..B2.2
..LN2783:
        movq      %rax, 128(%rsp)                               #82.21
..LN2784:
                                # LOE r12 r15 r15d r15b
..B2.3:                         # Preds ..B2.350
..LN2785:
	.loc    1  83  is_stmt 1
        movl      176(%rsp), %eax                               #83.34
..LN2786:
        lea       3(%rax), %edi                                 #83.34
..LN2787:
        imull     184(%rsp), %edi                               #83.21
..LN2788:
        movslq    %edi, %rdi                                    #83.21
..LN2789:
        shlq      $3, %rdi                                      #83.21
..LN2790:
#       malloc(size_t)
        call      malloc                                        #83.21
..LN2791:
                                # LOE rax r12 r15 r15d r15b
..B2.351:                       # Preds ..B2.3
..LN2792:
        movq      %rax, 120(%rsp)                               #83.21
..LN2793:
                                # LOE r12 r15 r15d r15b
..B2.4:                         # Preds ..B2.351
..LN2794:
	.loc    1  84  is_stmt 1
        movl      184(%rsp), %edi                               #84.21
..LN2795:
        imull     176(%rsp), %edi                               #84.21
..LN2796:
        movslq    %edi, %rdi                                    #84.21
..LN2797:
        shlq      $3, %rdi                                      #84.21
..LN2798:
#       malloc(size_t)
        call      malloc                                        #84.21
..LN2799:
                                # LOE rax r12 r15 r15d r15b
..B2.352:                       # Preds ..B2.4
..LN2800:
        movq      %rax, 160(%rsp)                               #84.21
..LN2801:
                                # LOE r12 r15 r15d r15b
..B2.5:                         # Preds ..B2.352
..LN2802:
	.loc    1  72  is_stmt 1
        movq      112(%rbp), %rax                               #72.1
..LN2803:
        movq      120(%rbp), %rcx                               #72.1
..LN2804:
	.loc    1  144  is_stmt 1
        movq      %r15, %r9                                     #144.32
..LN2805:
	.loc    1  72  is_stmt 1
        movq      96(%rbp), %rbx                                #72.1
..LN2806:
        movq      104(%rbp), %r13                               #72.1
..LN2807:
	.loc    1  85  is_stmt 1
        movl      (%rax), %edx                                  #85.91
..LN2808:
	.loc    1  144  is_stmt 1
        lea       16(,%r9,8), %rdi                              #144.18
..LN2809:
	.loc    1  85  is_stmt 1
        movl      (%rcx), %esi                                  #85.107
..LN2810:
	.loc    1  144  is_stmt 1
        lea       (,%r9,8), %r8                                 #144.32
..LN2811:
	.loc    1  85  is_stmt 1
        movl      (%rbx), %ebx                                  #85.62
..LN2812:
        movl      (%r13), %r13d                                 #85.77
..LN2813:
        movl      %edx, 112(%rsp)                               #85.91
..LN2814:
        movl      %esi, 104(%rsp)                               #85.107
..LN2815:
	.loc    1  144  is_stmt 1
        movq      %r8, 8(%rsp)                                  #144.32
..LN2816:
#       malloc(size_t)
        call      malloc                                        #144.18
..LN2817:
                                # LOE rax r12 r15 ebx r13d r15d r15b
..B2.353:                       # Preds ..B2.5
..LN2818:
        movq      %rax, %r14                                    #144.18
..LN2819:
                                # LOE r12 r14 r15 ebx r13d r15d r15b
..B2.6:                         # Preds ..B2.353
..LN2820:
	.loc    1  145  is_stmt 1
        movslq    184(%rsp), %rax                               #145.18
..LN2821:
        lea       16(,%rax,8), %rdi                             #145.18
..LN2822:
#       malloc(size_t)
        call      malloc                                        #145.18
..LN2823:
                                # LOE rax r12 r14 r15 ebx r13d r15d r15b
..B2.354:                       # Preds ..B2.6
..LN2824:
        movq      %rax, %rcx                                    #145.18
..LN2825:
                                # LOE rcx r12 r14 r15 ebx r13d r15d r15b
..B2.7:                         # Preds ..B2.354
..LN2826:
	.loc    1  151  is_stmt 1
        movl      $1, %eax                                      #151.5
..LN2827:
        testl     %ebx, %ebx                                    #151.5
..LN2828:
	.loc    1  159  is_stmt 1
        movl      112(%rsp), %esi                               #159.5
..LN2829:
	.loc    1  151  is_stmt 1
        cmove     %ebx, %eax                                    #151.5
..LN2830:
        movl      $1, %edx                                      #151.5
..LN2831:
	.loc    1  155  is_stmt 1
        testl     %r13d, %r13d                                  #155.5
..LN2832:
	.loc    1  151  is_stmt 1
        movl      %eax, 240(%rsp)                               #151.5
..LN2833:
	.loc    1  155  is_stmt 1
        movl      208(%rsp), %eax                               #155.5
..LN2834:
        cmovne    %r15d, %eax                                   #155.5
..LN2835:
        xorl      %edi, %edi                                    #155.5
..LN2836:
	.loc    1  159  is_stmt 1
        testl     %esi, %esi                                    #159.5
..LN2837:
	.loc    1  166  is_stmt 1
        movl      %edi, 24(%rsp)                                #166.3
..LN2838:
	.loc    1  159  is_stmt 1
        cmove     %esi, %edx                                    #159.5
..LN2839:
	.loc    1  163  is_stmt 1
        cmpl      $0, 104(%rsp)                                 #163.5
..LN2840:
        movl      224(%rsp), %esi                               #163.5
..LN2841:
        cmovne    184(%rsp), %esi                               #163.5
..LN2842:
	.loc    1  166  is_stmt 1
        movl      %edi, 16(%rsp)                                #166.34
..LN2843:
        cmpl      %esi, %edx                                    #166.19
..LN2844:
        jge       ..B2.33       # Prob 9%                       #166.19
..LN2845:
                                # LOE rcx r12 r14 r15 eax edx ebx esi r13d r15d r15b
..B2.8:                         # Preds ..B2.7
..LN2846:
        movl      %esi, %r9d                                    #166.7
..LN2847:
	.loc    1  167  is_stmt 1
        lea       2(%r15), %edi                                 #167.37
..LN2848:
	.loc    1  166  is_stmt 1
        subl      %edx, %r9d                                    #166.7
..LN2849:
        movl      %eax, %r8d                                    #166.30
..LN2850:
        movl      %r9d, 48(%rsp)                                #166.7
..LN2851:
        lea       -1(%rdx), %r9d                                #
..LN2852:
	.loc    1  167  is_stmt 1
        movl      208(%rsp), %r11d                              #167.5
..LN2853:
        imull     %r9d, %r11d                                   #167.5
..LN2854:
        imull     %edi, %r9d                                    #167.5
..LN2855:
        imull     %edx, %edi                                    #167.5
..LN2856:
        vmovsd    .L_2il0floatpacket.1(%rip), %xmm0             #167.21
..LN2857:
        vmovupd   .L_2il0floatpacket.0(%rip), %ymm1             #167.21
..LN2858:
	.loc    1  166  is_stmt 1
        movl      240(%rsp), %r10d                              #166.30
..LN2859:
        subl      %r10d, %r8d                                   #166.30
..LN2860:
        movslq    %r8d, %r8                                     #166.30
..LN2861:
        movl      %esi, 88(%rsp)                                #166.34
..LN2862:
	.loc    1  167  is_stmt 1
        addl      %r15d, %r10d                                  #167.27
..LN2863:
        addl      %r10d, %r11d                                  #167.5
..LN2864:
        addl      %r10d, %r9d                                   #167.45
..LN2865:
	.loc    1  168  is_stmt 1
        addl      %edi, %r10d                                   #168.28
..LN2866:
	.loc    1  166  is_stmt 1
        xorl      %edi, %edi                                    #166.34
..LN2867:
        movq      %rcx, 72(%rsp)                                #166.34
..LN2868:
        movl      %ebx, (%rsp)                                  #166.34
..LN2869:
	.loc    1  167  is_stmt 1
        movl      %r11d, 32(%rsp)                               #167.5
..LN2870:
	.loc    1  166  is_stmt 1
        movq      %r8, 40(%rsp)                                 #166.30
..LN2871:
        movl      %eax, 248(%rsp)                               #166.34
..LN2872:
        movl      %edx, 64(%rsp)                                #166.34
..LN2873:
        movq      %r14, 80(%rsp)                                #166.34
..LN2874:
        movl      %r13d, 96(%rsp)                               #166.34
..LN2875:
        movl      %r15d, 232(%rsp)                              #166.34
..LN2876:
        movl      %r10d, %ecx                                   #166.34
..LN2877:
        movl      16(%rsp), %r10d                               #166.34
..LN2878:
        movl      24(%rsp), %esi                                #166.34
..LN2879:
        movq      192(%rsp), %rbx                               #166.34
..LN2880:
                                # LOE rbx r12 ecx esi edi r8d r9d r10d xmm0 ymm1
..B2.9:                         # Preds ..B2.31 ..B2.8
..L96:          # optimization report
                # %s was not vectorized: inner loop was already vectorized
..LN2881:
        movl      240(%rsp), %eax                               #166.46
..LN2882:
        cmpl      248(%rsp), %eax                               #166.46
..LN2883:
        jge       ..B2.31       # Prob 50%                      #166.46
..LN2884:
                                # LOE rbx r12 ecx esi edi r8d r9d r10d xmm0 ymm1
..B2.10:                        # Preds ..B2.9
..LN2885:
        cmpl      $16, %r8d                                     #166.30
..LN2886:
        jl        ..B2.344      # Prob 10%                      #166.30
..LN2887:
                                # LOE rbx r12 ecx esi edi r8d r9d r10d xmm0 ymm1
..B2.11:                        # Preds ..B2.10
..LN2888:
	.loc    1  142  is_stmt 1
        movl      32(%rsp), %r13d                               #142.12
..LN2889:
        lea       (%r13,%r10), %eax                             #142.12
..LN2890:
	.loc    1  167  is_stmt 1
        movslq    %eax, %rax                                    #167.5
..LN2891:
        lea       (%rbx,%rax,8), %r13                           #167.5
..LN2892:
        lea       8(%r13), %r14                                 #167.5
..LN2893:
	.loc    1  166  is_stmt 1
        andq      $31, %r14                                     #166.30
..LN2894:
        movl      %r14d, %r14d                                  #166.30
..LN2895:
        testl     %r14d, %r14d                                  #166.30
..LN2896:
        je        ..B2.14       # Prob 50%                      #166.30
..LN2897:
                                # LOE rbx r12 r13 r14 ecx esi edi r8d r9d r10d xmm0 ymm1
..B2.12:                        # Preds ..B2.11
..LN2898:
        testl     $7, %r14d                                     #166.30
..LN2899:
        jne       ..B2.344      # Prob 10%                      #166.30
..LN2900:
                                # LOE rbx r12 r13 r14 ecx esi edi r8d r9d r10d xmm0 ymm1
..B2.13:                        # Preds ..B2.12
..LN2901:
        negl      %r14d                                         #166.30
..LN2902:
        addl      $32, %r14d                                    #166.30
..LN2903:
        shrl      $3, %r14d                                     #166.30
..LN2904:
                                # LOE rbx r12 r13 r14 ecx esi edi r8d r9d r10d xmm0 ymm1
..B2.14:                        # Preds ..B2.13 ..B2.11
..LN2905:
        lea       16(%r14), %eax                                #166.30
..LN2906:
        cmpl      %eax, %r8d                                    #166.30
..LN2907:
        jl        ..B2.344      # Prob 10%                      #166.30
..LN2908:
                                # LOE rbx r12 r13 r14 ecx esi edi r8d r9d r10d xmm0 ymm1
..B2.15:                        # Preds ..B2.14
..LN2909:
        movl      %r8d, %eax                                    #166.30
..LN2910:
	.loc    1  167  is_stmt 1
        lea       (%r9,%rdi), %r15d                             #167.27
..LN2911:
        movslq    %r15d, %r15                                   #167.45
..LN2912:
	.loc    1  168  is_stmt 1
        lea       (%rcx,%rdi), %r11d                            #168.6
..LN2913:
        movslq    %r11d, %r11                                   #168.28
..LN2914:
	.loc    1  166  is_stmt 1
        subl      %r14d, %eax                                   #166.30
..LN2915:
        andl      $15, %eax                                     #166.30
..LN2916:
        xorl      %edx, %edx                                    #166.30
..LN2917:
        negl      %eax                                          #166.30
..LN2918:
        addl      %r8d, %eax                                    #166.30
..LN2919:
	.loc    1  167  is_stmt 1
        lea       (%r12,%r15,8), %r15                           #167.45
..LN2920:
	.loc    1  168  is_stmt 1
        lea       (%r12,%r11,8), %r11                           #168.28
..LN2921:
	.loc    1  166  is_stmt 1
        testq     %r14, %r14                                    #166.30
..LN2922:
        jbe       ..B2.19       # Prob 10%                      #166.30
..LN2923:
                                # LOE rdx rbx r11 r12 r13 r14 r15 eax ecx esi edi r8d r9d r10d xmm0 ymm1
..B2.17:                        # Preds ..B2.15 ..B2.17
..L97:          # optimization report
                # LOOP WAS UNROLLED BY 4
                # PEELED LOOP FOR VECTORIZATION
                # VECTORIZATION SPEEDUP COEFFECIENT 7.718750
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 0.375000
..LN2924:
	.loc    1  167  is_stmt 1
        vmovsd    16(%r15,%rdx,8), %xmm2                        #167.27
..LN2925:
        vaddsd    24(%r15,%rdx,8), %xmm2, %xmm3                 #167.45
..LN2926:
	.loc    1  168  is_stmt 1
        vaddsd    16(%r11,%rdx,8), %xmm3, %xmm4                 #168.6
..LN2927:
        vaddsd    24(%r11,%rdx,8), %xmm4, %xmm5                 #168.28
..LN2928:
        vmulsd    %xmm5, %xmm0, %xmm6                           #168.28
..LN2929:
	.loc    1  167  is_stmt 1
        vmovsd    %xmm6, 8(%r13,%rdx,8)                         #167.5
..LN2930:
	.loc    1  166  is_stmt 1
        incq      %rdx                                          #166.30
..LN2931:
        cmpq      %r14, %rdx                                    #166.30
..LN2932:
        jb        ..B2.17       # Prob 82%                      #166.30
..LN2933:
                                # LOE rdx rbx r11 r12 r13 r14 r15 eax ecx esi edi r8d r9d r10d xmm0 ymm1
..B2.19:                        # Preds ..B2.17 ..B2.15
..LN2934:
        movslq    %eax, %rdx                                    #166.30
..LN2935:
                                # LOE rdx rbx r11 r12 r13 r14 r15 eax ecx esi edi r8d r9d r10d xmm0 ymm1
..B2.20:                        # Preds ..B2.20 ..B2.19
..L98:          # optimization report
                # LOOP WAS UNROLLED BY 4
                # LOOP WAS VECTORIZED
                # VECTORIZATION HAS UNALIGNED MEMORY REFERENCES
                # VECTORIZATION SPEEDUP COEFFECIENT 7.718750
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 0.375000
                # MAIN VECTOR TYPE: 64-bits floating point
..LN2936:
	.loc    1  167  is_stmt 1
        vmovupd   16(%r15,%r14,8), %ymm2                        #167.27
..LN2937:
        vmovupd   48(%r15,%r14,8), %ymm7                        #167.27
..LN2938:
        vmovupd   80(%r15,%r14,8), %ymm12                       #167.27
..LN2939:
        vaddpd    24(%r15,%r14,8), %ymm2, %ymm3                 #167.45
..LN2940:
        vaddpd    56(%r15,%r14,8), %ymm7, %ymm8                 #167.45
..LN2941:
        vaddpd    88(%r15,%r14,8), %ymm12, %ymm13               #167.45
..LN2942:
	.loc    1  168  is_stmt 1
        vaddpd    16(%r11,%r14,8), %ymm3, %ymm4                 #168.6
..LN2943:
        vaddpd    48(%r11,%r14,8), %ymm8, %ymm9                 #168.6
..LN2944:
        vaddpd    80(%r11,%r14,8), %ymm13, %ymm14               #168.6
..LN2945:
        vaddpd    24(%r11,%r14,8), %ymm4, %ymm5                 #168.28
..LN2946:
        vaddpd    56(%r11,%r14,8), %ymm9, %ymm10                #168.28
..LN2947:
        vaddpd    88(%r11,%r14,8), %ymm14, %ymm15               #168.28
..LN2948:
	.loc    1  167  is_stmt 1
        vmovupd   112(%r15,%r14,8), %ymm3                       #167.27
..LN2949:
	.loc    1  168  is_stmt 1
        vmulpd    %ymm5, %ymm1, %ymm6                           #168.28
..LN2950:
        vmulpd    %ymm10, %ymm1, %ymm11                         #168.28
..LN2951:
        vmulpd    %ymm15, %ymm1, %ymm2                          #168.28
..LN2952:
	.loc    1  167  is_stmt 1
        vaddpd    120(%r15,%r14,8), %ymm3, %ymm4                #167.45
..LN2953:
        vmovupd   %ymm6, 8(%r13,%r14,8)                         #167.5
..LN2954:
        vmovupd   %ymm11, 40(%r13,%r14,8)                       #167.5
..LN2955:
        vmovupd   %ymm2, 72(%r13,%r14,8)                        #167.5
..LN2956:
	.loc    1  168  is_stmt 1
        vaddpd    112(%r11,%r14,8), %ymm4, %ymm5                #168.6
..LN2957:
        vaddpd    120(%r11,%r14,8), %ymm5, %ymm6                #168.28
..LN2958:
        vmulpd    %ymm6, %ymm1, %ymm7                           #168.28
..LN2959:
	.loc    1  167  is_stmt 1
        vmovupd   %ymm7, 104(%r13,%r14,8)                       #167.5
..LN2960:
	.loc    1  166  is_stmt 1
        addq      $16, %r14                                     #166.30
..LN2961:
        cmpq      %rdx, %r14                                    #166.30
..LN2962:
        jb        ..B2.20       # Prob 82%                      #166.30
..LN2963:
                                # LOE rdx rbx r11 r12 r13 r14 r15 eax ecx esi edi r8d r9d r10d xmm0 ymm1
..B2.22:                        # Preds ..B2.20 ..B2.344
..LN2964:
        lea       1(%rax), %edx                                 #166.30
..LN2965:
        cmpl      %edx, %r8d                                    #166.30
..LN2966:
        jb        ..B2.31       # Prob 50%                      #166.30
..LN2967:
                                # LOE rbx r12 eax ecx esi edi r8d r9d r10d xmm0 ymm1
..B2.23:                        # Preds ..B2.22
..LN2968:
        movslq    %eax, %rdx                                    #166.30
..LN2969:
        negq      %rdx                                          #166.30
..LN2970:
        addq      40(%rsp), %rdx                                #166.30
..LN2971:
        cmpq      $4, %rdx                                      #166.30
..LN2972:
        jl        ..B2.343      # Prob 10%                      #166.30
..LN2973:
                                # LOE rdx rbx r12 eax ecx esi edi r8d r9d r10d xmm0 ymm1
..B2.24:                        # Preds ..B2.23
..LN2974:
	.loc    1  167  is_stmt 1
        movl      32(%rsp), %r14d                               #167.5
..LN2975:
	.loc    1  166  is_stmt 1
        movl      %edx, %r11d                                   #166.30
..LN2976:
	.loc    1  167  is_stmt 1
        movslq    %eax, %rax                                    #167.27
..LN2977:
	.loc    1  166  is_stmt 1
        andl      $-4, %r11d                                    #166.30
..LN2978:
        movq      $0, 16(%rsp)                                  #166.30
..LN2979:
	.loc    1  167  is_stmt 1
        movq      %r12, 168(%rsp)                               #167.27
..LN2980:
        lea       (%r14,%r10), %r13d                            #167.5
..LN2981:
        movslq    %r13d, %r13                                   #167.5
..LN2982:
	.loc    1  166  is_stmt 1
        movslq    %r11d, %r11                                   #166.30
..LN2983:
	.loc    1  167  is_stmt 1
        lea       (%rbx,%r13,8), %r15                           #167.5
..LN2984:
	.loc    1  168  is_stmt 1
        lea       (%rcx,%rdi), %r13d                            #168.6
..LN2985:
        movslq    %r13d, %r13                                   #168.6
..LN2986:
	.loc    1  167  is_stmt 1
        lea       (%r15,%rax,8), %r14                           #167.5
..LN2987:
	.loc    1  168  is_stmt 1
        lea       (%r12,%r13,8), %r15                           #168.6
..LN2988:
        lea       (%r15,%rax,8), %r13                           #168.6
..LN2989:
        movq      %r13, 24(%rsp)                                #168.6
..LN2990:
	.loc    1  167  is_stmt 1
        lea       (%r9,%rdi), %r15d                             #167.27
..LN2991:
        movslq    %r15d, %r15                                   #167.27
..LN2992:
        lea       (%r12,%r15,8), %r13                           #167.27
..LN2993:
        movq      24(%rsp), %r12                                #167.27
..LN2994:
        movq      16(%rsp), %r15                                #167.27
..LN2995:
        lea       (%r13,%rax,8), %r13                           #167.27
..LN2996:
                                # LOE rdx rbx r11 r12 r13 r14 r15 eax ecx esi edi r8d r9d r10d xmm0 ymm1
..B2.25:                        # Preds ..B2.25 ..B2.24
..L99:          # optimization report
                # LOOP WAS VECTORIZED
                # REMAINDER LOOP FOR VECTORIZATION
                # VECTORIZATION HAS UNALIGNED MEMORY REFERENCES
                # VECTORIZATION SPEEDUP COEFFECIENT 3.091797
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 1.500000
                # MAIN VECTOR TYPE: 64-bits floating point
..LN2997:
        vmovupd   16(%r13,%r15,8), %ymm2                        #167.27
..LN2998:
        vaddpd    24(%r13,%r15,8), %ymm2, %ymm3                 #167.45
..LN2999:
	.loc    1  168  is_stmt 1
        vaddpd    16(%r12,%r15,8), %ymm3, %ymm4                 #168.6
..LN3000:
        vaddpd    24(%r12,%r15,8), %ymm4, %ymm5                 #168.28
..LN3001:
        vmulpd    %ymm5, %ymm1, %ymm6                           #168.28
..LN3002:
	.loc    1  167  is_stmt 1
        vmovupd   %ymm6, 8(%r14,%r15,8)                         #167.5
..LN3003:
	.loc    1  166  is_stmt 1
        addq      $4, %r15                                      #166.30
..LN3004:
        cmpq      %r11, %r15                                    #166.30
..LN3005:
        jb        ..B2.25       # Prob 82%                      #166.30
..LN3006:
                                # LOE rdx rbx r11 r12 r13 r14 r15 eax ecx esi edi r8d r9d r10d xmm0 ymm1
..B2.26:                        # Preds ..B2.25
..LN3007:
        movq      168(%rsp), %r12                               #
..LN3008:
                                # LOE rdx rbx r11 r12 eax ecx esi edi r8d r9d r10d xmm0 ymm1
..B2.27:                        # Preds ..B2.26 ..B2.343
..LN3009:
        cmpq      %rdx, %r11                                    #166.30
..LN3010:
        jae       ..B2.31       # Prob 10%                      #166.30
..LN3011:
                                # LOE rdx rbx r11 r12 eax ecx esi edi r8d r9d r10d xmm0 ymm1
..B2.28:                        # Preds ..B2.27
..LN3012:
	.loc    1  167  is_stmt 1
        movl      32(%rsp), %r14d                               #167.5
..LN3013:
        movslq    %eax, %rax                                    #167.27
..LN3014:
        lea       (%r14,%r10), %r13d                            #167.5
..LN3015:
        movslq    %r13d, %r13                                   #167.5
..LN3016:
        lea       (%rbx,%r13,8), %r15                           #167.5
..LN3017:
	.loc    1  168  is_stmt 1
        lea       (%rcx,%rdi), %r13d                            #168.6
..LN3018:
        movslq    %r13d, %r13                                   #168.28
..LN3019:
	.loc    1  167  is_stmt 1
        lea       (%r15,%rax,8), %r14                           #167.5
..LN3020:
	.loc    1  168  is_stmt 1
        lea       (%r12,%r13,8), %r15                           #168.28
..LN3021:
        lea       (%r15,%rax,8), %r13                           #168.6
..LN3022:
	.loc    1  167  is_stmt 1
        lea       (%r9,%rdi), %r15d                             #167.27
..LN3023:
        movslq    %r15d, %r15                                   #167.45
..LN3024:
        lea       (%r12,%r15,8), %r15                           #167.45
..LN3025:
        lea       (%r15,%rax,8), %rax                           #167.27
..LN3026:
                                # LOE rax rdx rbx r11 r12 r13 r14 ecx esi edi r8d r9d r10d xmm0 ymm1
..B2.29:                        # Preds ..B2.29 ..B2.28
..L100:         # optimization report
                # REMAINDER LOOP FOR VECTORIZATION
                # VECTORIZATION SPEEDUP COEFFECIENT 3.091797
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 1.500000
..LN3027:
        vmovsd    16(%rax,%r11,8), %xmm2                        #167.27
..LN3028:
        vaddsd    24(%rax,%r11,8), %xmm2, %xmm3                 #167.45
..LN3029:
	.loc    1  168  is_stmt 1
        vaddsd    16(%r13,%r11,8), %xmm3, %xmm4                 #168.6
..LN3030:
        vaddsd    24(%r13,%r11,8), %xmm4, %xmm5                 #168.28
..LN3031:
        vmulsd    %xmm5, %xmm0, %xmm6                           #168.28
..LN3032:
	.loc    1  167  is_stmt 1
        vmovsd    %xmm6, 8(%r14,%r11,8)                         #167.5
..LN3033:
	.loc    1  166  is_stmt 1
        incq      %r11                                          #166.30
..LN3034:
        cmpq      %rdx, %r11                                    #166.30
..LN3035:
        jb        ..B2.29       # Prob 82%                      #166.30
..LN3036:
                                # LOE rax rdx rbx r11 r12 r13 r14 ecx esi edi r8d r9d r10d xmm0 ymm1
..B2.31:                        # Preds ..B2.29 ..B2.9 ..B2.22 ..B2.27
..LN3037:
        movl      232(%rsp), %eax                               #166.3
..LN3038:
        incl      %esi                                          #166.3
..LN3039:
        lea       2(%rdi,%rax), %edi                            #166.3
..LN3040:
        lea       1(%r10,%rax), %r10d                           #166.3
..LN3041:
        cmpl      48(%rsp), %esi                                #166.3
..LN3042:
        jb        ..B2.9        # Prob 82%                      #166.3
..LN3043:
                                # LOE rbx r12 ecx esi edi r8d r9d r10d xmm0 ymm1
..B2.32:                        # Preds ..B2.31
..LN3044:
        movl      248(%rsp), %eax                               #
..LN3045:
        movl      88(%rsp), %esi                                #
..LN3046:
        movl      64(%rsp), %edx                                #
..LN3047:
        movq      72(%rsp), %rcx                                #
..LN3048:
        movq      80(%rsp), %r14                                #
..LN3049:
        movl      96(%rsp), %r13d                               #
..LN3050:
        movl      (%rsp), %ebx                                  #
..LN3051:
        movl      232(%rsp), %r15d                              #
..LN3052:
                                # LOE rcx r12 r14 eax edx ebx esi r13d r15d
..B2.33:                        # Preds ..B2.7 ..B2.32
..LN3053:
	.loc    1  172  is_stmt 1
        testl     %ebx, %ebx                                    #172.6
..LN3054:
        je        ..B2.36       # Prob 50%                      #172.6
..LN3055:
                                # LOE rcx r12 r14 eax edx ebx esi r13d r15d
..B2.34:                        # Preds ..B2.33
..LN3056:
        cmpl      $0, 112(%rsp)                                 #172.22
..LN3057:
        je        ..B2.36       # Prob 50%                      #172.22
..LN3058:
                                # LOE rcx r12 r14 eax edx ebx esi r13d r15d
..B2.35:                        # Preds ..B2.34
..LN3059:
        movq      8(%rsp), %rdi                                 #172.76
..LN3060:
        vmovsd    8(%r12), %xmm0                                #172.95
..LN3061:
        movq      192(%rsp), %r8                                #172.36
..LN3062:
        vaddsd    24(%r12,%rdi), %xmm0, %xmm1                   #172.76
..LN3063:
        vaddsd    16(%r12,%rdi), %xmm1, %xmm2                   #172.95
..LN3064:
        vmulsd    .L_2il0floatpacket.2(%rip), %xmm2, %xmm3      #172.95
..LN3065:
        vmovsd    %xmm3, (%r8)                                  #172.36
..LN3066:
                                # LOE rcx r12 r14 eax edx ebx esi r13d r15d
..B2.36:                        # Preds ..B2.33 ..B2.34 ..B2.35
..LN3067:
	.loc    1  173  is_stmt 1
        testl     %r13d, %r13d                                  #173.6
..LN3068:
        je        ..B2.41       # Prob 50%                      #173.6
..LN3069:
                                # LOE rcx r12 r14 eax edx ebx esi r13d r15d
..B2.37:                        # Preds ..B2.36
..LN3070:
        cmpl      $0, 112(%rsp)                                 #173.22
..LN3071:
        je        ..B2.39       # Prob 50%                      #173.22
..LN3072:
                                # LOE rcx r12 r14 eax edx ebx esi r13d r15d
..B2.38:                        # Preds ..B2.37
..LN3073:
        movq      144(%rsp), %rdi                               #173.58
..LN3074:
        shlq      $4, %rdi                                      #173.58
..LN3075:
        movq      8(%rsp), %r9                                  #173.76
..LN3076:
        movq      192(%rsp), %r8                                #173.36
..LN3077:
        vmovsd    16(%rdi,%r12), %xmm0                          #173.58
..LN3078:
        vaddsd    (%r12,%r9), %xmm0, %xmm1                      #173.76
..LN3079:
        vaddsd    24(%rdi,%r12), %xmm1, %xmm2                   #173.95
..LN3080:
        vmulsd    .L_2il0floatpacket.2(%rip), %xmm2, %xmm3      #173.95
..LN3081:
        vmovsd    %xmm3, (%r8,%r9)                              #173.36
..LN3082:
                                # LOE rcx r12 r14 eax edx ebx esi r13d r15d
..B2.39:                        # Preds ..B2.37 ..B2.38
..LN3083:
	.loc    1  174  is_stmt 1
        cmpl      $0, 104(%rsp)                                 #174.22
..LN3084:
        je        ..B2.41       # Prob 50%                      #174.22
..LN3085:
                                # LOE rcx r12 r14 eax edx ebx esi r13d r15d
..B2.40:                        # Preds ..B2.39
..LN3086:
        movl      184(%rsp), %r8d                               #174.87
..LN3087:
        lea       2(%r15), %r10d                                #174.69
..LN3088:
        movl      %r8d, %r9d                                    #174.87
..LN3089:
        imull     %r10d, %r9d                                   #174.87
..LN3090:
        imull     224(%rsp), %r10d                              #174.107
..LN3091:
        imull     208(%rsp), %r8d                               #174.44
..LN3092:
        movslq    %r9d, %r9                                     #174.58
..LN3093:
        movq      144(%rsp), %rdi                               #174.90
..LN3094:
        addq      %rdi, %r9                                     #174.90
..LN3095:
        movslq    %r10d, %r10                                   #174.95
..LN3096:
        movslq    %r8d, %r8                                     #174.36
..LN3097:
        addq      %rdi, %r10                                    #174.110
..LN3098:
        addq      %rdi, %r8                                     #174.48
..LN3099:
        vmovsd    (%r12,%r9,8), %xmm0                           #174.58
..LN3100:
        movq      192(%rsp), %r11                               #174.36
..LN3101:
        vaddsd    8(%r12,%r9,8), %xmm0, %xmm1                   #174.76
..LN3102:
        vaddsd    (%r12,%r10,8), %xmm1, %xmm2                   #174.95
..LN3103:
        vmulsd    .L_2il0floatpacket.2(%rip), %xmm2, %xmm3      #174.95
..LN3104:
        vmovsd    %xmm3, (%r11,%r8,8)                           #174.36
..LN3105:
                                # LOE rcx r12 r14 eax edx ebx esi r13d r15d
..B2.41:                        # Preds ..B2.36 ..B2.39 ..B2.40
..LN3106:
	.loc    1  175  is_stmt 1
        testl     %ebx, %ebx                                    #175.6
..LN3107:
        je        ..B2.89       # Prob 50%                      #175.6
..LN3108:
                                # LOE rcx r12 r14 eax edx esi r13d r15d
..B2.42:                        # Preds ..B2.41
..LN3109:
        cmpl      $0, 104(%rsp)                                 #175.22
..LN3110:
        je        ..B2.44       # Prob 50%                      #175.22
..LN3111:
                                # LOE rcx r12 r14 eax edx esi r13d r15d
..B2.43:                        # Preds ..B2.42
..LN3112:
        movl      184(%rsp), %r8d                               #175.87
..LN3113:
        lea       2(%r15), %edi                                 #175.69
..LN3114:
        movl      %r8d, %ebx                                    #175.87
..LN3115:
        imull     %edi, %ebx                                    #175.87
..LN3116:
        imull     224(%rsp), %edi                               #175.107
..LN3117:
        imull     208(%rsp), %r8d                               #175.44
..LN3118:
        movslq    %ebx, %rbx                                    #175.58
..LN3119:
        movslq    %edi, %rdi                                    #175.95
..LN3120:
        movslq    %r8d, %r8                                     #175.36
..LN3121:
        movq      192(%rsp), %r9                                #175.36
..LN3122:
        vmovsd    8(%r12,%rbx,8), %xmm0                         #175.58
..LN3123:
        vaddsd    (%r12,%rbx,8), %xmm0, %xmm1                   #175.76
..LN3124:
        vaddsd    8(%r12,%rdi,8), %xmm1, %xmm2                  #175.95
..LN3125:
        vmulsd    .L_2il0floatpacket.2(%rip), %xmm2, %xmm3      #175.95
..LN3126:
        vmovsd    %xmm3, (%r9,%r8,8)                            #175.36
..LN3127:
                                # LOE rcx r12 r14 eax edx esi r13d r15d
..B2.44:                        # Preds ..B2.42 ..B2.43
..LN3128:
	.loc    1  179  is_stmt 1
        cmpl      %esi, %edx                                    #179.22
..LN3129:
        jg        ..B2.365      # Prob 50%                      #179.22
..LN3130:
                                # LOE rcx r12 r14 eax edx esi r13d r15d
..B2.45:                        # Preds ..B2.44
..LN3131:
        movl      %esi, %edi                                    #179.5
..LN3132:
        subl      %edx, %edi                                    #179.5
..LN3133:
        incl      %edi                                          #179.5
..LN3134:
        cmpl      $8, %edi                                      #179.5
..LN3135:
        jl        ..B2.342      # Prob 10%                      #179.5
..LN3136:
                                # LOE rcx r12 r14 eax edx esi edi r13d r15d
..B2.46:                        # Preds ..B2.45
..LN3137:
        movl      %edx, %r10d                                   #179.33
..LN3138:
        lea       (%rcx,%r10,8), %r9                            #179.33
..LN3139:
        movq      %r9, (%rsp)                                   #179.33
..LN3140:
        andq      $15, %r9                                      #179.5
..LN3141:
        movl      %r9d, %r9d                                    #179.5
..LN3142:
        testl     %r9d, %r9d                                    #179.5
..LN3143:
        je        ..B2.49       # Prob 50%                      #179.5
..LN3144:
                                # LOE rcx r9 r10 r12 r14 eax edx esi edi r13d r15d
..B2.47:                        # Preds ..B2.46
..LN3145:
        testl     $7, %r9d                                      #179.5
..LN3146:
        jne       ..B2.340      # Prob 10%                      #179.5
..LN3147:
                                # LOE rcx r10 r12 r14 eax edx esi edi r13d r15d
..B2.48:                        # Preds ..B2.47
..LN3148:
        movl      $1, %r9d                                      #179.5
..LN3149:
                                # LOE rcx r9 r10 r12 r14 eax edx esi edi r13d r15d
..B2.49:                        # Preds ..B2.48 ..B2.46
..LN3150:
        lea       8(%r9), %ebx                                  #179.5
..LN3151:
        cmpl      %ebx, %edi                                    #179.5
..LN3152:
        jl        ..B2.340      # Prob 10%                      #179.5
..LN3153:
                                # LOE rcx r9 r10 r12 r14 eax edx esi edi r13d r15d
..B2.50:                        # Preds ..B2.49
..LN3154:
        movl      %edi, %ebx                                    #179.5
..LN3155:
	.loc    1  167  is_stmt 1
        lea       2(%r15), %r11d                                #167.37
..LN3156:
	.loc    1  179  is_stmt 1
        subl      %r9d, %ebx                                    #179.5
..LN3157:
        lea       -1(%rdx), %r8d                                #179.33
..LN3158:
        imull     %r11d, %r8d                                   #179.33
..LN3159:
        andl      $7, %ebx                                      #179.5
..LN3160:
        negl      %ebx                                          #179.5
..LN3161:
        addl      %edi, %ebx                                    #179.5
..LN3162:
	.loc    1  167  is_stmt 1
        movl      %r11d, 56(%rsp)                               #167.37
..LN3163:
	.loc    1  179  is_stmt 1
        lea       (%r15,%r8), %r11d                             #179.46
..LN3164:
        movl      $0, 32(%rsp)                                  #179.5
..LN3165:
        movq      $0, 24(%rsp)                                  #179.33
..LN3166:
        movl      %r11d, 40(%rsp)                               #179.46
..LN3167:
        testl     %r9d, %r9d                                    #179.5
..LN3168:
        jbe       ..B2.54       # Prob 15%                      #179.5
..LN3169:
                                # LOE rcx r9 r10 r11 r12 r14 eax edx ebx esi edi r8d r11d r13d r15d r11b
..B2.51:                        # Preds ..B2.50
..LN3170:
        movl      $0, 16(%rsp)                                  #179.33
..LN3171:
        movl      %r8d, 8(%rsp)                                 #179.33
..LN3172:
        movl      %edx, 64(%rsp)                                #179.33
..LN3173:
        movq      %rcx, 72(%rsp)                                #179.33
..LN3174:
        movl      %r13d, 96(%rsp)                               #179.33
..LN3175:
        vmovsd    .L_2il0floatpacket.3(%rip), %xmm0             #179.41
..LN3176:
        movq      %r14, 80(%rsp)                                #179.33
..LN3177:
        movl      16(%rsp), %r13d                               #179.33
..LN3178:
        movl      %r11d, %r8d                                   #179.33
..LN3179:
        movq      24(%rsp), %r11                                #179.33
..LN3180:
        movl      32(%rsp), %ecx                                #179.33
..LN3181:
        movq      (%rsp), %rdx                                  #179.33
..LN3182:
                                # LOE rdx r9 r10 r11 r12 eax ecx ebx esi edi r8d r13d r15d xmm0
..B2.52:                        # Preds ..B2.52 ..B2.51
..L101:         # optimization report
                # LOOP WAS UNROLLED BY 4
                # PEELED LOOP FOR VECTORIZATION
                # VECTORIZATION SPEEDUP COEFFECIENT 3.158203
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 2
                # NORMALIZED VECTORIZATION OVERHEAD 0.234375
..LN3183:
	.loc    1  167  is_stmt 1
        lea       (%r8,%r13), %r14d                             #167.37
..LN3184:
	.loc    1  179  is_stmt 1
        movslq    %r14d, %r14                                   #179.46
..LN3185:
        incl      %ecx                                          #179.5
..LN3186:
        lea       2(%r13,%r15), %r13d                           #179.5
..LN3187:
        vmovsd    16(%r12,%r14,8), %xmm1                        #179.46
..LN3188:
        vaddsd    24(%r12,%r14,8), %xmm1, %xmm2                 #179.62
..LN3189:
        vmulsd    %xmm2, %xmm0, %xmm3                           #179.62
..LN3190:
        vmovsd    %xmm3, (%rdx,%r11,8)                          #179.33
..LN3191:
        incq      %r11                                          #179.5
..LN3192:
        cmpl      %r9d, %ecx                                    #179.5
..LN3193:
        jb        ..B2.52       # Prob 82%                      #179.5
..LN3194:
                                # LOE rdx r9 r10 r11 r12 eax ecx ebx esi edi r8d r13d r15d xmm0
..B2.53:                        # Preds ..B2.52
..LN3195:
        movl      8(%rsp), %r8d                                 #
..LN3196:
        movl      64(%rsp), %edx                                #
..LN3197:
        movq      72(%rsp), %rcx                                #
..LN3198:
        movq      80(%rsp), %r14                                #
..LN3199:
        movl      96(%rsp), %r13d                               #
..LN3200:
                                # LOE rcx r9 r10 r12 r14 eax edx ebx esi edi r8d r13d r15d
..B2.54:                        # Preds ..B2.50 ..B2.53
..LN3201:
        movl      56(%rsp), %r11d                               #179.5
..LN3202:
        imull     %r9d, %r11d                                   #179.5
..LN3203:
        vmovupd   .L_2il0floatpacket.6(%rip), %xmm0             #179.41
..LN3204:
        movl      %r11d, 56(%rsp)                               #179.5
..LN3205:
        lea       16(,%r15,8), %r11d                            #179.5
..LN3206:
        movl      %r11d, 16(%rsp)                               #179.5
..LN3207:
        movl      176(%rsp), %r11d                              #179.46
..LN3208:
        movl      %eax, 248(%rsp)                               #179.46
..LN3209:
        addl      %r8d, %r11d                                   #179.46
..LN3210:
        movl      %r11d, 8(%rsp)                                #179.46
..LN3211:
        lea       (%r15,%r15,4), %r11d                          #179.46
..LN3212:
        addl      %r8d, %r11d                                   #179.46
..LN3213:
        movl      %r11d, 24(%rsp)                               #179.46
..LN3214:
        lea       (,%r15,8), %r11d                              #179.46
..LN3215:
        subl      %r15d, %r11d                                  #179.46
..LN3216:
        movl      %esi, 88(%rsp)                                #179.46
..LN3217:
        addl      %r11d, %r8d                                   #179.46
..LN3218:
        movq      %r10, 48(%rsp)                                #179.46
..LN3219:
        movl      %edi, 32(%rsp)                                #179.46
..LN3220:
        movl      %edx, 64(%rsp)                                #179.46
..LN3221:
        movq      %rcx, 72(%rsp)                                #179.46
..LN3222:
        movl      %r13d, 96(%rsp)                               #179.46
..LN3223:
        movq      %r14, 80(%rsp)                                #179.46
..LN3224:
        movl      %r15d, 232(%rsp)                              #179.46
..LN3225:
        movl      24(%rsp), %r10d                               #179.46
..LN3226:
        movl      8(%rsp), %r13d                                #179.46
..LN3227:
        movl      56(%rsp), %edi                                #179.46
..LN3228:
        movq      %r9, %r11                                     #179.46
..LN3229:
        movl      16(%rsp), %esi                                #179.46
..LN3230:
        movl      40(%rsp), %eax                                #179.46
..LN3231:
        movq      (%rsp), %rdx                                  #179.46
..LN3232:
        movq      144(%rsp), %rcx                               #179.46
..LN3233:
                                # LOE rdx rcx r11 r12 eax ebx esi edi r8d r9d r10d r13d xmm0
..B2.55:                        # Preds ..B2.55 ..B2.54
..L102:         # optimization report
                # LOOP WAS UNROLLED BY 4
                # LOOP WAS VECTORIZED
                # VECTORIZATION SPEEDUP COEFFECIENT 3.158203
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 2
                # NORMALIZED VECTORIZATION OVERHEAD 0.234375
                # MAIN VECTOR TYPE: 64-bits floating point
..LN3234:
	.loc    1  167  is_stmt 1
        lea       (%rax,%rdi), %r14d                            #167.37
..LN3235:
	.loc    1  179  is_stmt 1
        movslq    %r14d, %r14                                   #179.46
..LN3236:
        addl      $8, %r9d                                      #179.5
..LN3237:
        lea       16(%r12,%r14,8), %r15                         #179.46
..LN3238:
        vmovsd    (%r15), %xmm1                                 #179.46
..LN3239:
        vmovhpd   16(%r15,%rcx,8), %xmm1, %xmm3                 #179.46
..LN3240:
        lea       24(%r12,%r14,8), %r15                         #179.62
..LN3241:
        vmovsd    (%r15), %xmm2                                 #179.62
..LN3242:
        lea       (%r13,%rdi), %r14d                            #179.46
..LN3243:
        movslq    %r14d, %r14                                   #179.46
..LN3244:
        vmovhpd   16(%r15,%rcx,8), %xmm2, %xmm4                 #179.62
..LN3245:
        vaddpd    %xmm4, %xmm3, %xmm5                           #179.62
..LN3246:
        vmulpd    %xmm5, %xmm0, %xmm6                           #179.62
..LN3247:
        vmovupd   %xmm6, (%rdx,%r11,8)                          #179.33
..LN3248:
        lea       48(%r12,%r14,8), %r15                         #179.46
..LN3249:
        vmovsd    (%r15), %xmm7                                 #179.46
..LN3250:
        vmovhpd   16(%r15,%rcx,8), %xmm7, %xmm9                 #179.46
..LN3251:
        lea       56(%r12,%r14,8), %r15                         #179.62
..LN3252:
        vmovsd    (%r15), %xmm8                                 #179.62
..LN3253:
        lea       (%r10,%rdi), %r14d                            #179.46
..LN3254:
        movslq    %r14d, %r14                                   #179.46
..LN3255:
        vmovhpd   16(%r15,%rcx,8), %xmm8, %xmm10                #179.62
..LN3256:
        vaddpd    %xmm10, %xmm9, %xmm11                         #179.62
..LN3257:
        vmulpd    %xmm11, %xmm0, %xmm12                         #179.62
..LN3258:
        vmovupd   %xmm12, 16(%rdx,%r11,8)                       #179.33
..LN3259:
        lea       80(%r12,%r14,8), %r15                         #179.46
..LN3260:
        vmovsd    (%r15), %xmm13                                #179.46
..LN3261:
        vmovhpd   16(%r15,%rcx,8), %xmm13, %xmm15               #179.46
..LN3262:
        lea       88(%r12,%r14,8), %r15                         #179.62
..LN3263:
        vmovsd    (%r15), %xmm14                                #179.62
..LN3264:
        lea       (%r8,%rdi), %r14d                             #179.46
..LN3265:
        movslq    %r14d, %r14                                   #179.46
..LN3266:
        addl      %esi, %edi                                    #179.5
..LN3267:
        vmovhpd   16(%r15,%rcx,8), %xmm14, %xmm1                #179.62
..LN3268:
        vaddpd    %xmm1, %xmm15, %xmm2                          #179.62
..LN3269:
        vmulpd    %xmm2, %xmm0, %xmm3                           #179.62
..LN3270:
        vmovupd   %xmm3, 32(%rdx,%r11,8)                        #179.33
..LN3271:
        lea       112(%r12,%r14,8), %r15                        #179.46
..LN3272:
        vmovsd    (%r15), %xmm4                                 #179.46
..LN3273:
        vmovhpd   16(%r15,%rcx,8), %xmm4, %xmm6                 #179.46
..LN3274:
        lea       120(%r12,%r14,8), %r15                        #179.62
..LN3275:
        vmovsd    (%r15), %xmm5                                 #179.62
..LN3276:
        vmovhpd   16(%r15,%rcx,8), %xmm5, %xmm7                 #179.62
..LN3277:
        vaddpd    %xmm7, %xmm6, %xmm8                           #179.62
..LN3278:
        vmulpd    %xmm8, %xmm0, %xmm9                           #179.62
..LN3279:
        vmovupd   %xmm9, 48(%rdx,%r11,8)                        #179.33
..LN3280:
        addq      $8, %r11                                      #179.5
..LN3281:
        cmpl      %ebx, %r9d                                    #179.5
..LN3282:
        jb        ..B2.55       # Prob 82%                      #179.5
..LN3283:
                                # LOE rdx rcx r11 r12 eax ebx esi edi r8d r9d r10d r13d xmm0
..B2.56:                        # Preds ..B2.55
..LN3284:
        movl      248(%rsp), %eax                               #
..LN3285:
        movl      88(%rsp), %esi                                #
..LN3286:
        movq      48(%rsp), %r10                                #
..LN3287:
        movl      32(%rsp), %edi                                #
..LN3288:
        movl      64(%rsp), %edx                                #
..LN3289:
        movq      72(%rsp), %rcx                                #
..LN3290:
        movq      80(%rsp), %r14                                #
..LN3291:
        movl      96(%rsp), %r13d                               #
..LN3292:
        movl      232(%rsp), %r15d                              #
..LN3293:
                                # LOE rcx r10 r12 r14 eax edx ebx esi edi r13d r15d
..B2.57:                        # Preds ..B2.56 ..B2.340 ..B2.342
..LN3294:
        lea       1(%rbx), %r8d                                 #179.5
..LN3295:
        cmpl      %r8d, %edi                                    #179.5
..LN3296:
        jb        ..B2.357      # Prob 50%                      #179.5
..LN3297:
                                # LOE rcx r10 r12 r14 eax edx ebx esi edi r13d r15d
..B2.58:                        # Preds ..B2.57
..LN3298:
        subl      %ebx, %edi                                    #179.5
..LN3299:
        cmpl      $2, %edi                                      #179.5
..LN3300:
        jl        ..B2.339      # Prob 10%                      #179.5
..LN3301:
                                # LOE rcx r10 r12 r14 eax edx ebx esi edi r13d r15d
..B2.59:                        # Preds ..B2.58
..LN3302:
        movl      %edi, %r11d                                   #179.5
..LN3303:
        lea       4(%r15,%r15), %r9d                            #179.5
..LN3304:
        movl      %r9d, 8(%rsp)                                 #179.5
..LN3305:
	.loc    1  167  is_stmt 1
        lea       2(%r15), %r8d                                 #167.37
..LN3306:
	.loc    1  179  is_stmt 1
        andl      $-2, %r11d                                    #179.5
..LN3307:
	.loc    1  167  is_stmt 1
        lea       -1(%rbx,%rdx), %r9d                           #167.37
..LN3308:
        imull     %r8d, %r9d                                    #167.37
..LN3309:
	.loc    1  179  is_stmt 1
        vmovupd   .L_2il0floatpacket.5(%rip), %xmm0             #179.41
..LN3310:
        movslq    %ebx, %r8                                     #179.33
..LN3311:
	.loc    1  167  is_stmt 1
        addl      %r15d, %r9d                                   #167.37
..LN3312:
	.loc    1  179  is_stmt 1
        addq      %r10, %r8                                     #179.33
..LN3313:
        movl      %r11d, 40(%rsp)                               #179.5
..LN3314:
        xorl      %r11d, %r11d                                  #179.5
..LN3315:
	.loc    1  167  is_stmt 1
        movl      %r9d, 16(%rsp)                                #167.37
..LN3316:
	.loc    1  179  is_stmt 1
        xorl      %r9d, %r9d                                    #179.5
..LN3317:
        movq      $0, 24(%rsp)                                  #179.5
..LN3318:
        movl      %ebx, (%rsp)                                  #179.5
..LN3319:
        lea       (%rcx,%r8,8), %r8                             #179.33
..LN3320:
        movq      %r8, 32(%rsp)                                 #179.33
..LN3321:
        movl      %edx, 64(%rsp)                                #179.5
..LN3322:
        movq      %rcx, 72(%rsp)                                #179.5
..LN3323:
        movq      %r14, 80(%rsp)                                #179.5
..LN3324:
        movl      %r13d, 96(%rsp)                               #179.5
..LN3325:
        movl      40(%rsp), %r8d                                #179.5
..LN3326:
        movq      24(%rsp), %r13                                #179.5
..LN3327:
        movq      32(%rsp), %rbx                                #179.5
..LN3328:
        movl      16(%rsp), %r14d                               #179.5
..LN3329:
        movl      8(%rsp), %edx                                 #179.5
..LN3330:
        movq      144(%rsp), %rcx                               #179.5
..LN3331:
        movl      %r15d, 232(%rsp)                              #179.5
..LN3332:
        .align    16,0x90
..LN3333:
                                # LOE rcx rbx r10 r12 r13 eax edx esi edi r8d r9d r11d r14d xmm0
..B2.60:                        # Preds ..B2.60 ..B2.59
..L103:         # optimization report
                # LOOP WAS VECTORIZED
                # REMAINDER LOOP FOR VECTORIZATION
                # VECTORIZATION HAS UNALIGNED MEMORY REFERENCES
                # VECTORIZATION SPEEDUP COEFFECIENT 1.726562
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 2
                # NORMALIZED VECTORIZATION OVERHEAD 0.937500
                # MAIN VECTOR TYPE: 64-bits floating point
..LN3334:
        lea       (%r14,%r9), %r15d                             #179.46
..LN3335:
        movslq    %r15d, %r15                                   #179.46
..LN3336:
        addl      $2, %r11d                                     #179.5
..LN3337:
        addl      %edx, %r9d                                    #179.5
..LN3338:
        lea       (%r12,%r15,8), %r15                           #179.46
..LN3339:
        vmovsd    16(%r15), %xmm1                               #179.46
..LN3340:
        vmovsd    24(%r15), %xmm2                               #179.62
..LN3341:
        vmovhpd   32(%r15,%rcx,8), %xmm1, %xmm3                 #179.46
..LN3342:
        vmovhpd   40(%r15,%rcx,8), %xmm2, %xmm4                 #179.62
..LN3343:
        vaddpd    %xmm4, %xmm3, %xmm5                           #179.62
..LN3344:
        vmulpd    %xmm5, %xmm0, %xmm6                           #179.62
..LN3345:
        vmovupd   %xmm6, (%rbx,%r13,8)                          #179.33
..LN3346:
        addq      $2, %r13                                      #179.5
..LN3347:
        cmpl      %r8d, %r11d                                   #179.5
..LN3348:
        jb        ..B2.60       # Prob 82%                      #179.5
..LN3349:
                                # LOE rcx rbx r10 r12 r13 eax edx esi edi r8d r9d r11d r14d xmm0
..B2.61:                        # Preds ..B2.60
..LN3350:
        movl      (%rsp), %ebx                                  #
..LN3351:
        movl      64(%rsp), %edx                                #
..LN3352:
        movq      72(%rsp), %rcx                                #
..LN3353:
        movq      80(%rsp), %r14                                #
..LN3354:
        movl      96(%rsp), %r13d                               #
..LN3355:
        movl      232(%rsp), %r15d                              #
..LN3356:
                                # LOE rcx r10 r12 r14 eax edx ebx esi edi r8d r13d r15d
..B2.62:                        # Preds ..B2.61 ..B2.339
..LN3357:
        cmpl      %edi, %r8d                                    #179.5
..LN3358:
        movslq    %r8d, %r8                                     #179.5
..LN3359:
        jae       ..B2.357      # Prob 15%                      #179.5
..LN3360:
                                # LOE rcx r8 r10 r12 r14 eax edx ebx esi edi r8d r13d r15d r8b
..B2.63:                        # Preds ..B2.62
..LN3361:
        movl      %r8d, %r11d                                   #179.5
..LN3362:
	.loc    1  167  is_stmt 1
        lea       2(%r15), %r9d                                 #167.37
..LN3363:
	.loc    1  179  is_stmt 1
        imull     %r9d, %r11d                                   #179.5
..LN3364:
        vmovsd    .L_2il0floatpacket.3(%rip), %xmm0             #179.41
..LN3365:
        movl      %r11d, (%rsp)                                 #179.5
..LN3366:
	.loc    1  167  is_stmt 1
        lea       -1(%rbx,%rdx), %r11d                          #167.37
..LN3367:
        imull     %r9d, %r11d                                   #167.37
..LN3368:
	.loc    1  179  is_stmt 1
        movslq    %ebx, %rbx                                    #179.33
..LN3369:
	.loc    1  167  is_stmt 1
        addl      %r15d, %r11d                                  #167.37
..LN3370:
	.loc    1  179  is_stmt 1
        addq      %r10, %rbx                                    #179.33
..LN3371:
        movl      %r13d, 96(%rsp)                               #179.33
..LN3372:
        movq      %r14, 80(%rsp)                                #179.33
..LN3373:
        lea       (%rcx,%rbx,8), %rbx                           #179.33
..LN3374:
        movl      (%rsp), %r13d                                 #179.33
..LN3375:
        movq      %r8, %r9                                      #179.33
..LN3376:
                                # LOE rcx rbx r9 r10 r12 eax edx esi edi r8d r11d r13d r15d xmm0
..B2.64:                        # Preds ..B2.64 ..B2.63
..L104:         # optimization report
                # REMAINDER LOOP FOR VECTORIZATION
                # VECTORIZATION SPEEDUP COEFFECIENT 1.726562
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 2
                # NORMALIZED VECTORIZATION OVERHEAD 0.937500
..LN3377:
        lea       (%r11,%r13), %r14d                            #179.46
..LN3378:
        movslq    %r14d, %r14                                   #179.62
..LN3379:
        incl      %r8d                                          #179.5
..LN3380:
        lea       2(%r13,%r15), %r13d                           #179.5
..LN3381:
        vmovsd    16(%r12,%r14,8), %xmm1                        #179.46
..LN3382:
        vaddsd    24(%r12,%r14,8), %xmm1, %xmm2                 #179.62
..LN3383:
        vmulsd    %xmm2, %xmm0, %xmm3                           #179.62
..LN3384:
        vmovsd    %xmm3, (%rbx,%r9,8)                           #179.33
..LN3385:
        incq      %r9                                           #179.5
..LN3386:
        cmpl      %edi, %r8d                                    #179.5
..LN3387:
        jb        ..B2.64       # Prob 82%                      #179.5
..LN3388:
                                # LOE rcx rbx r9 r10 r12 eax edx esi edi r8d r11d r13d r15d xmm0
..B2.65:                        # Preds ..B2.64
..LN3389:
        movq      80(%rsp), %r14                                #
..LN3390:
	.loc    1  166  is_stmt 1
        cmpl      %esi, %edx                                    #166.19
..LN3391:
        movl      96(%rsp), %r13d                               #
..LN3392:
                                # LOE rcx r10 r12 r14 eax edx esi r13d r15d
..B2.66:                        # Preds ..B2.65
..LN3393:
	.loc    1  180  is_stmt 1
        jge       ..B2.89       # Prob 50%                      #180.21
..LN3394:
                                # LOE rcx r10 r12 r14 eax edx esi r13d r15d
..B2.67:                        # Preds ..B2.357 ..B2.365 ..B2.66
..LN3395:
        movl      %esi, %r8d                                    #180.5
..LN3396:
        subl      %edx, %r8d                                    #180.5
..LN3397:
        cmpl      $16, %r8d                                     #180.5
..LN3398:
        jl        ..B2.335      # Prob 10%                      #180.5
..LN3399:
                                # LOE rcx r10 r12 r14 eax edx esi r8d r13d r15d
..B2.68:                        # Preds ..B2.67
..LN3400:
        movq      16(%rbp), %rbx                                #180.46
..LN3401:
        lea       (%rbx,%r10,8), %rdi                           #180.46
..LN3402:
        movq      %rdi, (%rsp)                                  #180.46
..LN3403:
        cmpl      $29, %r8d                                     #180.5
..LN3404:
        jl        ..B2.337      # Prob 10%                      #180.5
..LN3405:
                                # LOE rcx rdi r10 r12 r14 eax edx esi edi r8d r13d r15d dil
..B2.69:                        # Preds ..B2.68
..LN3406:
        movq      %rdi, %r9                                     #180.5
..LN3407:
        andq      $31, %r9                                      #180.5
..LN3408:
        movl      %r9d, %r9d                                    #180.5
..LN3409:
        testl     %r9d, %r9d                                    #180.5
..LN3410:
        je        ..B2.72       # Prob 50%                      #180.5
..LN3411:
                                # LOE rcx r9 r10 r12 r14 eax edx esi r8d r13d r15d
..B2.70:                        # Preds ..B2.69
..LN3412:
        testl     $7, %r9d                                      #180.5
..LN3413:
        jne       ..B2.335      # Prob 10%                      #180.5
..LN3414:
                                # LOE rcx r9 r10 r12 r14 eax edx esi r8d r13d r15d
..B2.71:                        # Preds ..B2.70
..LN3415:
        negl      %r9d                                          #180.5
..LN3416:
        addl      $32, %r9d                                     #180.5
..LN3417:
        shrl      $3, %r9d                                      #180.5
..LN3418:
                                # LOE rcx r9 r10 r12 r14 eax edx esi r8d r13d r15d
..B2.72:                        # Preds ..B2.71 ..B2.69
..LN3419:
        lea       16(%r9), %ebx                                 #180.5
..LN3420:
        cmpl      %ebx, %r8d                                    #180.5
..LN3421:
        jl        ..B2.335      # Prob 10%                      #180.5
..LN3422:
                                # LOE rcx r9 r10 r12 r14 eax edx esi r8d r13d r15d
..B2.73:                        # Preds ..B2.72
..LN3423:
        movl      %r8d, %ebx                                    #180.5
..LN3424:
        lea       -1(%rdx), %edi                                #180.32
..LN3425:
        imull     208(%rsp), %edi                               #180.32
..LN3426:
        subl      %r9d, %ebx                                    #180.5
..LN3427:
        andl      $15, %ebx                                     #180.5
..LN3428:
        lea       (%r15,%rdi), %r11d                            #180.32
..LN3429:
        negl      %ebx                                          #180.5
..LN3430:
        addl      %r8d, %ebx                                    #180.5
..LN3431:
        movq      %r9, 56(%rsp)                                 #180.5
..LN3432:
        movq      $0, 8(%rsp)                                   #180.5
..LN3433:
        movl      %r11d, 40(%rsp)                               #180.32
..LN3434:
        testq     %r9, %r9                                      #180.5
..LN3435:
        lea       (%rcx,%r10,8), %r9                            #180.78
..LN3436:
        movq      %r9, 32(%rsp)                                 #180.78
..LN3437:
        jbe       ..B2.77       # Prob 9%                       #180.5
..LN3438:
                                # LOE rcx r9 r10 r11 r12 r14 eax edx ebx esi edi r8d r9d r11d r13d r15d r9b r11b
..B2.74:                        # Preds ..B2.73
..LN3439:
        movl      %edx, 64(%rsp)                                #
..LN3440:
        movq      %rcx, 72(%rsp)                                #
..LN3441:
        movq      %r14, 80(%rsp)                                #
..LN3442:
        movl      %r13d, 96(%rsp)                               #
..LN3443:
        movq      %r12, 168(%rsp)                               #
..LN3444:
        movl      %r15d, 232(%rsp)                              #
..LN3445:
        movq      %r9, %r12                                     #
..LN3446:
        movq      56(%rsp), %r9                                 #
..LN3447:
        movq      8(%rsp), %r13                                 #
..LN3448:
        movq      (%rsp), %r14                                  #
..LN3449:
        movq      192(%rsp), %rdx                               #
..LN3450:
        movl      208(%rsp), %ecx                               #
..LN3451:
                                # LOE rdx r9 r10 r12 r13 r14 eax ecx ebx esi edi r8d r11d
..B2.75:                        # Preds ..B2.75 ..B2.74
..L105:         # optimization report
                # LOOP WAS UNROLLED BY 2
                # PEELED LOOP FOR VECTORIZATION
                # VECTORIZATION SPEEDUP COEFFECIENT 3.888672
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 8
                # NORMALIZED VECTORIZATION OVERHEAD 0.187500
..LN3452:
        movl      %r13d, %r15d                                  #180.32
..LN3453:
        vmovsd    8(%r12,%r13,8), %xmm0                         #180.78
..LN3454:
        imull     %ecx, %r15d                                   #180.32
..LN3455:
        vsubsd    (%r12,%r13,8), %xmm0, %xmm1                   #180.32
..LN3456:
	.loc    1  142  is_stmt 1
        addl      %r11d, %r15d                                  #142.12
..LN3457:
	.loc    1  180  is_stmt 1
        vfnmadd132sd (%r14,%r13,8), %xmm0, %xmm1                #180.32
..LN3458:
        incq      %r13                                          #180.5
..LN3459:
        movslq    %r15d, %r15                                   #180.32
..LN3460:
        vmovsd    %xmm1, 8(%rdx,%r15,8)                         #180.32
..LN3461:
        cmpq      %r9, %r13                                     #180.5
..LN3462:
        jb        ..B2.75       # Prob 81%                      #180.5
..LN3463:
                                # LOE rdx r9 r10 r12 r13 r14 eax ecx ebx esi edi r8d r11d
..B2.76:                        # Preds ..B2.75
..LN3464:
        movq      %r9, 56(%rsp)                                 #
..LN3465:
        movl      64(%rsp), %edx                                #
..LN3466:
        movq      72(%rsp), %rcx                                #
..LN3467:
        movq      80(%rsp), %r14                                #
..LN3468:
        movl      96(%rsp), %r13d                               #
..LN3469:
        movl      232(%rsp), %r15d                              #
..LN3470:
        movq      168(%rsp), %r12                               #
..LN3471:
                                # LOE rcx r10 r12 r14 eax edx ebx esi edi r8d r13d r15d
..B2.77:                        # Preds ..B2.73 ..B2.76 ..B2.337
..LN3472:
        movq      144(%rsp), %r9                                #180.32
..LN3473:
        lea       (%r15,%r15,8), %r11d                          #180.32
..LN3474:
        movslq    %ebx, %rbx                                    #180.5
..LN3475:
        addl      %edi, %r11d                                   #180.32
..LN3476:
        movl      %r11d, 24(%rsp)                               #180.32
..LN3477:
        lea       8(,%r9,8), %r9                                #180.32
..LN3478:
        movl      %ebx, 8(%rsp)                                 #180.32
..LN3479:
        lea       (%r9,%r9,2), %rdi                             #180.32
..LN3480:
        movl      %r8d, 16(%rsp)                                #180.32
..LN3481:
        movq      %r10, 48(%rsp)                                #180.32
..LN3482:
        movl      %edx, 64(%rsp)                                #180.32
..LN3483:
        movq      %rcx, 72(%rsp)                                #180.32
..LN3484:
        movq      %r14, 80(%rsp)                                #180.32
..LN3485:
        movq      %r12, 168(%rsp)                               #180.32
..LN3486:
        vmovupd   .L_2il0floatpacket.7(%rip), %ymm0             #180.65
..LN3487:
        movl      %r13d, 96(%rsp)                               #180.32
..LN3488:
        movl      %r15d, 232(%rsp)                              #180.32
..LN3489:
        movq      32(%rsp), %r12                                #180.32
..LN3490:
        movl      40(%rsp), %r11d                               #180.32
..LN3491:
        movq      %rbx, %r14                                    #180.32
..LN3492:
        movl      24(%rsp), %edx                                #180.32
..LN3493:
        movq      56(%rsp), %rcx                                #180.32
..LN3494:
        movq      (%rsp), %rbx                                  #180.32
..LN3495:
        movq      192(%rsp), %r8                                #180.32
..LN3496:
        movl      208(%rsp), %r10d                              #180.32
..LN3497:
                                # LOE rcx rbx rdi r8 r9 r12 r14 eax edx esi r10d r11d ymm0
..B2.78:                        # Preds ..B2.78 ..B2.77
..L106:         # optimization report
                # LOOP WAS UNROLLED BY 2
                # LOOP WAS VECTORIZED
                # VECTORIZATION HAS UNALIGNED MEMORY REFERENCES
                # VECTORIZATION SPEEDUP COEFFECIENT 3.888672
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 8
                # NORMALIZED VECTORIZATION OVERHEAD 0.187500
                # MAIN VECTOR TYPE: 64-bits floating point
..LN3498:
        movl      %ecx, %r13d                                   #180.32
..LN3499:
        vmovupd   (%rbx,%rcx,8), %ymm5                          #180.46
..LN3500:
        vmovupd   32(%rbx,%rcx,8), %ymm6                        #180.46
..LN3501:
        vmovupd   64(%rbx,%rcx,8), %ymm11                       #180.46
..LN3502:
        vmovupd   96(%rbx,%rcx,8), %ymm12                       #180.46
..LN3503:
        imull     %r10d, %r13d                                  #180.32
..LN3504:
        vsubpd    %ymm5, %ymm0, %ymm1                           #180.67
..LN3505:
        vsubpd    %ymm6, %ymm0, %ymm2                           #180.67
..LN3506:
        vsubpd    %ymm11, %ymm0, %ymm7                          #180.67
..LN3507:
        vsubpd    %ymm12, %ymm0, %ymm8                          #180.67
..LN3508:
        vmulpd    8(%r12,%rcx,8), %ymm1, %ymm3                  #180.78
..LN3509:
        vmulpd    40(%r12,%rcx,8), %ymm2, %ymm4                 #180.78
..LN3510:
        vmulpd    72(%r12,%rcx,8), %ymm7, %ymm9                 #180.78
..LN3511:
        vmulpd    104(%r12,%rcx,8), %ymm8, %ymm10               #180.78
..LN3512:
        vfmadd132pd (%r12,%rcx,8), %ymm3, %ymm5                 #180.78
..LN3513:
        vfmadd132pd 32(%r12,%rcx,8), %ymm4, %ymm6               #180.78
..LN3514:
        vfmadd132pd 64(%r12,%rcx,8), %ymm9, %ymm11              #180.78
..LN3515:
        vfmadd132pd 96(%r12,%rcx,8), %ymm10, %ymm12             #180.78
..LN3516:
        addq      $16, %rcx                                     #180.5
..LN3517:
	.loc    1  142  is_stmt 1
        lea       (%r11,%r13), %r15d                            #142.12
..LN3518:
	.loc    1  180  is_stmt 1
        movslq    %r15d, %r15                                   #180.32
..LN3519:
        addl      %edx, %r13d                                   #180.32
..LN3520:
        movslq    %r13d, %r13                                   #180.32
..LN3521:
        vextractf128 $1, %ymm5, %xmm13                          #180.32
..LN3522:
        lea       (%r8,%r15,8), %r15                            #180.32
..LN3523:
        vmovsd    %xmm5, 8(%r15)                                #180.32
..LN3524:
        vmovhpd   %xmm5, 8(%r9,%r15)                            #180.32
..LN3525:
        vmovsd    %xmm13, 8(%r15,%r9,2)                         #180.32
..LN3526:
        lea       (%r8,%r13,8), %r13                            #180.32
..LN3527:
        vmovhpd   %xmm13, 8(%rdi,%r15)                          #180.32
..LN3528:
        lea       8(%r15,%r9,4), %r15                           #180.32
..LN3529:
        vextractf128 $1, %ymm6, %xmm14                          #180.32
..LN3530:
        vmovsd    %xmm6, (%r15)                                 #180.32
..LN3531:
        vmovhpd   %xmm6, (%r9,%r15)                             #180.32
..LN3532:
        vmovsd    %xmm14, (%r15,%r9,2)                          #180.32
..LN3533:
        vmovhpd   %xmm14, (%rdi,%r15)                           #180.32
..LN3534:
        lea       72(%r13,%r9,4), %r15                          #180.32
..LN3535:
        vextractf128 $1, %ymm11, %xmm15                         #180.32
..LN3536:
        vmovsd    %xmm11, 72(%r13)                              #180.32
..LN3537:
        vmovhpd   %xmm11, 72(%r9,%r13)                          #180.32
..LN3538:
        vmovsd    %xmm15, 72(%r13,%r9,2)                        #180.32
..LN3539:
        vmovhpd   %xmm15, 72(%rdi,%r13)                         #180.32
..LN3540:
        vextractf128 $1, %ymm12, %xmm1                          #180.32
..LN3541:
        vmovsd    %xmm12, (%r15)                                #180.32
..LN3542:
        vmovhpd   %xmm12, (%r9,%r15)                            #180.32
..LN3543:
        vmovsd    %xmm1, (%r15,%r9,2)                           #180.32
..LN3544:
        vmovhpd   %xmm1, (%rdi,%r15)                            #180.32
..LN3545:
        cmpq      %r14, %rcx                                    #180.5
..LN3546:
        jb        ..B2.78       # Prob 81%                      #180.5
..LN3547:
                                # LOE rcx rbx rdi r8 r9 r12 r14 eax edx esi r10d r11d ymm0
..B2.79:                        # Preds ..B2.78
..LN3548:
        movl      8(%rsp), %ebx                                 #
..LN3549:
        movl      16(%rsp), %r8d                                #
..LN3550:
        movq      48(%rsp), %r10                                #
..LN3551:
        movl      64(%rsp), %edx                                #
..LN3552:
        movq      72(%rsp), %rcx                                #
..LN3553:
        movq      80(%rsp), %r14                                #
..LN3554:
        movl      96(%rsp), %r13d                               #
..LN3555:
        movl      232(%rsp), %r15d                              #
..LN3556:
        movq      168(%rsp), %r12                               #
..LN3557:
                                # LOE rcx r10 r12 r14 eax edx ebx esi r8d r13d r15d
..B2.80:                        # Preds ..B2.79 ..B2.335
..LN3558:
        lea       1(%rbx), %edi                                 #180.5
..LN3559:
        cmpl      %edi, %r8d                                    #180.5
..LN3560:
        jb        ..B2.89       # Prob 50%                      #180.5
..LN3561:
                                # LOE rcx r10 r12 r14 eax edx ebx esi r8d r13d r15d
..B2.81:                        # Preds ..B2.80
..LN3562:
        movslq    %r8d, %r8                                     #180.5
..LN3563:
        movslq    %ebx, %rbx                                    #180.5
..LN3564:
        subq      %rbx, %r8                                     #180.5
..LN3565:
        cmpq      $4, %r8                                       #180.5
..LN3566:
        jl        ..B2.334      # Prob 10%                      #180.5
..LN3567:
                                # LOE rcx r8 r10 r12 r14 eax edx ebx esi r13d r15d
..B2.82:                        # Preds ..B2.81
..LN3568:
        movq      144(%rsp), %rdi                               #180.32
..LN3569:
	.loc    1  142  is_stmt 1
        lea       -1(%rbx,%rdx), %r11d                          #142.12
..LN3570:
        imull     208(%rsp), %r11d                              #142.12
..LN3571:
	.loc    1  180  is_stmt 1
        movl      %r8d, %r9d                                    #180.5
..LN3572:
        vmovupd   .L_2il0floatpacket.8(%rip), %ymm0             #180.65
..LN3573:
        movslq    %ebx, %rbx                                    #180.46
..LN3574:
	.loc    1  142  is_stmt 1
        addl      %r15d, %r11d                                  #142.12
..LN3575:
        movl      %r11d, 8(%rsp)                                #142.12
..LN3576:
	.loc    1  180  is_stmt 1
        lea       (%rcx,%r10,8), %r11                           #180.56
..LN3577:
        movq      $0, (%rsp)                                    #180.5
..LN3578:
        lea       8(,%rdi,8), %rdi                              #180.32
..LN3579:
        andl      $-4, %r9d                                     #180.5
..LN3580:
        movq      %r10, 48(%rsp)                                #180.32
..LN3581:
        lea       (%r11,%rbx,8), %r11                           #180.56
..LN3582:
        movq      %r11, 16(%rsp)                                #180.56
..LN3583:
        movq      16(%rbp), %r11                                #180.46
..LN3584:
        movl      %edx, 64(%rsp)                                #180.32
..LN3585:
        movq      %rcx, 72(%rsp)                                #180.32
..LN3586:
        movq      %r14, 80(%rsp)                                #180.32
..LN3587:
        lea       (%r11,%r10,8), %r11                           #180.46
..LN3588:
        movl      %r13d, 96(%rsp)                               #180.32
..LN3589:
        lea       (%r11,%rbx,8), %r11                           #180.46
..LN3590:
        movq      %r11, 24(%rsp)                                #180.46
..LN3591:
        lea       (%rdi,%rdi,2), %r11                           #180.32
..LN3592:
        movq      %r12, 168(%rsp)                               #180.32
..LN3593:
        movslq    %r9d, %r9                                     #180.5
..LN3594:
        movl      %r15d, 232(%rsp)                              #180.32
..LN3595:
        movq      %r11, %r12                                    #180.32
..LN3596:
        movq      24(%rsp), %r11                                #180.32
..LN3597:
        movq      16(%rsp), %r14                                #180.32
..LN3598:
        movl      8(%rsp), %edx                                 #180.32
..LN3599:
        movq      (%rsp), %r13                                  #180.32
..LN3600:
        movq      192(%rsp), %rcx                               #180.32
..LN3601:
        movl      208(%rsp), %r10d                              #180.32
..LN3602:
        .align    16,0x90
..LN3603:
                                # LOE rcx rdi r8 r9 r11 r12 r13 r14 eax edx ebx esi r10d ymm0
..B2.83:                        # Preds ..B2.83 ..B2.82
..L107:         # optimization report
                # LOOP WAS VECTORIZED
                # REMAINDER LOOP FOR VECTORIZATION
                # VECTORIZATION HAS UNALIGNED MEMORY REFERENCES
                # VECTORIZATION SPEEDUP COEFFECIENT 2.250000
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 0.812500
                # MAIN VECTOR TYPE: 64-bits floating point
..LN3604:
        movl      %r13d, %r15d                                  #180.32
..LN3605:
        vmovupd   (%r11,%r13,8), %ymm3                          #180.46
..LN3606:
        imull     %r10d, %r15d                                  #180.32
..LN3607:
        vsubpd    %ymm3, %ymm0, %ymm1                           #180.67
..LN3608:
        vmulpd    8(%r14,%r13,8), %ymm1, %ymm2                  #180.78
..LN3609:
        addl      %edx, %r15d                                   #180.32
..LN3610:
        vfmadd132pd (%r14,%r13,8), %ymm2, %ymm3                 #180.78
..LN3611:
        addq      $4, %r13                                      #180.5
..LN3612:
        movslq    %r15d, %r15                                   #180.32
..LN3613:
        vextractf128 $1, %ymm3, %xmm4                           #180.32
..LN3614:
        lea       8(%rcx,%r15,8), %r15                          #180.32
..LN3615:
        vmovsd    %xmm3, (%r15)                                 #180.32
..LN3616:
        vmovhpd   %xmm3, (%rdi,%r15)                            #180.32
..LN3617:
        vmovsd    %xmm4, (%r15,%rdi,2)                          #180.32
..LN3618:
        vmovhpd   %xmm4, (%r12,%r15)                            #180.32
..LN3619:
        cmpq      %r9, %r13                                     #180.5
..LN3620:
        jb        ..B2.83       # Prob 81%                      #180.5
..LN3621:
                                # LOE rcx rdi r8 r9 r11 r12 r13 r14 eax edx ebx esi r10d ymm0
..B2.84:                        # Preds ..B2.83
..LN3622:
        movq      48(%rsp), %r10                                #
..LN3623:
        movl      64(%rsp), %edx                                #
..LN3624:
        movq      72(%rsp), %rcx                                #
..LN3625:
        movq      80(%rsp), %r14                                #
..LN3626:
        movl      96(%rsp), %r13d                               #
..LN3627:
        movl      232(%rsp), %r15d                              #
..LN3628:
        movq      168(%rsp), %r12                               #
..LN3629:
                                # LOE rcx r8 r9 r10 r12 r14 eax edx ebx esi r13d r15d
..B2.85:                        # Preds ..B2.84 ..B2.334
..LN3630:
        cmpq      %r8, %r9                                      #180.5
..LN3631:
        jae       ..B2.89       # Prob 9%                       #180.5
..LN3632:
                                # LOE rcx r8 r9 r10 r12 r14 eax edx ebx esi r13d r15d
..B2.86:                        # Preds ..B2.85
..LN3633:
        movq      16(%rbp), %r11                                #180.67
..LN3634:
        movq      %r12, 168(%rsp)                               #180.46
..LN3635:
        movl      %r15d, 232(%rsp)                              #180.46
..LN3636:
        movl      208(%rsp), %r12d                              #180.46
..LN3637:
        lea       (%r11,%r10,8), %rdi                           #180.67
..LN3638:
	.loc    1  142  is_stmt 1
        lea       -1(%rbx,%rdx), %r11d                          #142.12
..LN3639:
	.loc    1  180  is_stmt 1
        movslq    %ebx, %rbx                                    #180.46
..LN3640:
	.loc    1  142  is_stmt 1
        imull     208(%rsp), %r11d                              #142.12
..LN3641:
	.loc    1  180  is_stmt 1
        lea       (%rcx,%r10,8), %r10                           #180.78
..LN3642:
	.loc    1  142  is_stmt 1
        addl      %r15d, %r11d                                  #142.12
..LN3643:
	.loc    1  180  is_stmt 1
        lea       (%r10,%rbx,8), %r10                           #180.56
..LN3644:
        lea       (%rdi,%rbx,8), %rbx                           #180.46
..LN3645:
        movq      192(%rsp), %rdi                               #180.46
..LN3646:
                                # LOE rcx rbx rdi r8 r9 r10 r14 eax edx esi r11d r12d r13d
..B2.87:                        # Preds ..B2.87 ..B2.86
..L108:         # optimization report
                # REMAINDER LOOP FOR VECTORIZATION
                # VECTORIZATION SPEEDUP COEFFECIENT 2.250000
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 0.812500
..LN3647:
        movl      %r9d, %r15d                                   #180.32
..LN3648:
        vmovsd    8(%r10,%r9,8), %xmm0                          #180.78
..LN3649:
        imull     %r12d, %r15d                                  #180.32
..LN3650:
        vsubsd    (%r10,%r9,8), %xmm0, %xmm1                    #180.32
..LN3651:
        addl      %r11d, %r15d                                  #180.32
..LN3652:
        vfnmadd132sd (%rbx,%r9,8), %xmm0, %xmm1                 #180.32
..LN3653:
        incq      %r9                                           #180.5
..LN3654:
        movslq    %r15d, %r15                                   #180.32
..LN3655:
        vmovsd    %xmm1, 8(%rdi,%r15,8)                         #180.32
..LN3656:
        cmpq      %r8, %r9                                      #180.5
..LN3657:
        jb        ..B2.87       # Prob 81%                      #180.5
..LN3658:
                                # LOE rcx rbx rdi r8 r9 r10 r14 eax edx esi r11d r12d r13d
..B2.88:                        # Preds ..B2.87
..LN3659:
        movl      232(%rsp), %r15d                              #
..LN3660:
        movq      168(%rsp), %r12                               #
..LN3661:
                                # LOE rcx r12 r14 eax edx esi r13d r15d
..B2.89:                        # Preds ..B2.357 ..B2.365 ..B2.41 ..B2.66 ..B2.80
                                #       ..B2.85 ..B2.88
..LN3662:
	.loc    1  184  is_stmt 1
        testl     %r13d, %r13d                                  #184.6
..LN3663:
        je        ..B2.135      # Prob 50%                      #184.6
..LN3664:
                                # LOE rcx r12 r14 eax edx esi r15d
..B2.90:                        # Preds ..B2.89
..LN3665:
	.loc    1  185  is_stmt 1
        cmpl      %esi, %edx                                    #185.22
..LN3666:
        jg        ..B2.364      # Prob 50%                      #185.22
..LN3667:
                                # LOE rcx r12 r14 eax edx esi r15d
..B2.91:                        # Preds ..B2.90
..LN3668:
        movl      %esi, %edi                                    #185.5
..LN3669:
        subl      %edx, %edi                                    #185.5
..LN3670:
        incl      %edi                                          #185.5
..LN3671:
        cmpl      $8, %edi                                      #185.5
..LN3672:
        jl        ..B2.333      # Prob 10%                      #185.5
..LN3673:
                                # LOE rcx r12 r14 eax edx esi edi r15d
..B2.92:                        # Preds ..B2.91
..LN3674:
        movl      %edx, %r9d                                    #185.32
..LN3675:
        lea       (%rcx,%r9,8), %r13                            #185.32
..LN3676:
        movq      %r13, (%rsp)                                  #185.32
..LN3677:
        andq      $15, %r13                                     #185.5
..LN3678:
        movl      %r13d, %r13d                                  #185.5
..LN3679:
        testl     %r13d, %r13d                                  #185.5
..LN3680:
        je        ..B2.95       # Prob 50%                      #185.5
..LN3681:
                                # LOE rcx r9 r12 r13 r14 eax edx esi edi r15d
..B2.93:                        # Preds ..B2.92
..LN3682:
        testl     $7, %r13d                                     #185.5
..LN3683:
        jne       ..B2.331      # Prob 10%                      #185.5
..LN3684:
                                # LOE rcx r9 r12 r14 eax edx esi edi r15d
..B2.94:                        # Preds ..B2.93
..LN3685:
        movl      $1, %r13d                                     #185.5
..LN3686:
                                # LOE rcx r9 r12 r13 r14 eax edx esi edi r15d
..B2.95:                        # Preds ..B2.94 ..B2.92
..LN3687:
        lea       8(%r13), %ebx                                 #185.5
..LN3688:
        cmpl      %ebx, %edi                                    #185.5
..LN3689:
        jl        ..B2.331      # Prob 10%                      #185.5
..LN3690:
                                # LOE rcx r9 r12 r13 r14 eax edx esi edi r15d
..B2.96:                        # Preds ..B2.95
..LN3691:
        movl      %edi, %ebx                                    #185.5
..LN3692:
	.loc    1  167  is_stmt 1
        lea       2(%r15), %r8d                                 #167.37
..LN3693:
	.loc    1  185  is_stmt 1
        subl      %r13d, %ebx                                   #185.5
..LN3694:
        lea       -1(%rdx), %r11d                               #185.32
..LN3695:
        imull     %r8d, %r11d                                   #185.32
..LN3696:
        andl      $7, %ebx                                      #185.5
..LN3697:
        negl      %ebx                                          #185.5
..LN3698:
        lea       (%r11,%r15,2), %r10d                          #185.45
..LN3699:
        addl      %edi, %ebx                                    #185.5
..LN3700:
        movl      $0, 48(%rsp)                                  #185.5
..LN3701:
        movq      $0, 32(%rsp)                                  #185.32
..LN3702:
        movl      %r10d, 40(%rsp)                               #185.45
..LN3703:
        testl     %r13d, %r13d                                  #185.5
..LN3704:
        jbe       ..B2.100      # Prob 15%                      #185.5
..LN3705:
                                # LOE rcx r9 r10 r12 r13 r14 eax edx ebx esi edi r8d r10d r11d r15d r10b
..B2.97:                        # Preds ..B2.96
..LN3706:
        movl      $0, 24(%rsp)                                  #185.32
..LN3707:
        movl      %r8d, 8(%rsp)                                 #185.32
..LN3708:
        movl      %r11d, 16(%rsp)                               #185.32
..LN3709:
        movl      %edx, 64(%rsp)                                #185.32
..LN3710:
        movq      %rcx, 72(%rsp)                                #185.32
..LN3711:
        vmovsd    .L_2il0floatpacket.3(%rip), %xmm0             #185.40
..LN3712:
        movq      %r14, 80(%rsp)                                #185.32
..LN3713:
        movl      24(%rsp), %r11d                               #185.32
..LN3714:
        movl      %r10d, %r8d                                   #185.32
..LN3715:
        movq      32(%rsp), %r10                                #185.32
..LN3716:
        movl      48(%rsp), %ecx                                #185.32
..LN3717:
        movq      (%rsp), %rdx                                  #185.32
..LN3718:
                                # LOE rdx r9 r10 r12 r13 eax ecx ebx esi edi r8d r11d r15d xmm0
..B2.98:                        # Preds ..B2.98 ..B2.97
..L109:         # optimization report
                # LOOP WAS UNROLLED BY 4
                # PEELED LOOP FOR VECTORIZATION
                # VECTORIZATION SPEEDUP COEFFECIENT 3.494141
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 2
                # NORMALIZED VECTORIZATION OVERHEAD 0.234375
..LN3719:
	.loc    1  167  is_stmt 1
        lea       (%r8,%r11), %r14d                             #167.37
..LN3720:
	.loc    1  185  is_stmt 1
        movslq    %r14d, %r14                                   #185.45
..LN3721:
        incl      %ecx                                          #185.5
..LN3722:
        lea       2(%r11,%r15), %r11d                           #185.5
..LN3723:
        vmovsd    16(%r12,%r14,8), %xmm1                        #185.45
..LN3724:
        vaddsd    24(%r12,%r14,8), %xmm1, %xmm2                 #185.64
..LN3725:
        vmulsd    %xmm2, %xmm0, %xmm3                           #185.64
..LN3726:
        vmovsd    %xmm3, (%rdx,%r10,8)                          #185.32
..LN3727:
        incq      %r10                                          #185.5
..LN3728:
        cmpl      %r13d, %ecx                                   #185.5
..LN3729:
        jb        ..B2.98       # Prob 82%                      #185.5
..LN3730:
                                # LOE rdx r9 r10 r12 r13 eax ecx ebx esi edi r8d r11d r15d xmm0
..B2.99:                        # Preds ..B2.98
..LN3731:
        movl      8(%rsp), %r8d                                 #
..LN3732:
        movl      16(%rsp), %r11d                               #
..LN3733:
        movl      64(%rsp), %edx                                #
..LN3734:
        movq      72(%rsp), %rcx                                #
..LN3735:
        movq      80(%rsp), %r14                                #
..LN3736:
                                # LOE rcx r9 r12 r13 r14 eax edx ebx esi edi r8d r11d r15d
..B2.100:                       # Preds ..B2.96 ..B2.99
..LN3737:
        imull     %r13d, %r8d                                   #185.5
..LN3738:
        lea       16(,%r15,8), %r10d                            #185.5
..LN3739:
        vmovupd   .L_2il0floatpacket.6(%rip), %xmm0             #185.40
..LN3740:
        movl      %r10d, 8(%rsp)                                #185.5
..LN3741:
        movl      176(%rsp), %r10d                              #185.45
..LN3742:
        movl      %eax, 248(%rsp)                               #185.45
..LN3743:
        addl      %r15d, %r10d                                  #185.45
..LN3744:
        addl      %r11d, %r10d                                  #185.45
..LN3745:
        movl      %r10d, 16(%rsp)                               #185.45
..LN3746:
        lea       (%r15,%r15,4), %r10d                          #185.45
..LN3747:
        addl      %r15d, %r10d                                  #185.45
..LN3748:
        movl      %esi, 88(%rsp)                                #185.45
..LN3749:
        addl      %r11d, %r10d                                  #185.45
..LN3750:
        movq      %r9, 32(%rsp)                                 #185.45
..LN3751:
        lea       (%r11,%r15,8), %r11d                          #185.45
..LN3752:
        movl      %edi, 24(%rsp)                                #185.45
..LN3753:
        movl      %edx, 64(%rsp)                                #185.45
..LN3754:
        movq      %rcx, 72(%rsp)                                #185.45
..LN3755:
        movq      %r14, 80(%rsp)                                #185.45
..LN3756:
        movl      %r15d, 232(%rsp)                              #185.45
..LN3757:
        movl      16(%rsp), %r9d                                #185.45
..LN3758:
        movq      %r13, %rdi                                    #185.45
..LN3759:
        movl      8(%rsp), %esi                                 #185.45
..LN3760:
        movl      40(%rsp), %eax                                #185.45
..LN3761:
        movq      (%rsp), %rdx                                  #185.45
..LN3762:
        movq      144(%rsp), %rcx                               #185.45
..LN3763:
                                # LOE rdx rcx rdi r12 eax ebx esi r8d r9d r10d r11d r13d xmm0
..B2.101:                       # Preds ..B2.101 ..B2.100
..L110:         # optimization report
                # LOOP WAS UNROLLED BY 4
                # LOOP WAS VECTORIZED
                # VECTORIZATION SPEEDUP COEFFECIENT 3.494141
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 2
                # NORMALIZED VECTORIZATION OVERHEAD 0.234375
                # MAIN VECTOR TYPE: 64-bits floating point
..LN3764:
	.loc    1  167  is_stmt 1
        lea       (%rax,%r8), %r14d                             #167.37
..LN3765:
	.loc    1  185  is_stmt 1
        movslq    %r14d, %r14                                   #185.45
..LN3766:
        addl      $8, %r13d                                     #185.5
..LN3767:
        lea       16(%r12,%r14,8), %r15                         #185.45
..LN3768:
        vmovsd    (%r15), %xmm1                                 #185.45
..LN3769:
        vmovhpd   16(%r15,%rcx,8), %xmm1, %xmm3                 #185.45
..LN3770:
        lea       24(%r12,%r14,8), %r15                         #185.64
..LN3771:
        vmovsd    (%r15), %xmm2                                 #185.64
..LN3772:
        lea       (%r9,%r8), %r14d                              #185.45
..LN3773:
        movslq    %r14d, %r14                                   #185.45
..LN3774:
        vmovhpd   16(%r15,%rcx,8), %xmm2, %xmm4                 #185.64
..LN3775:
        vaddpd    %xmm4, %xmm3, %xmm5                           #185.64
..LN3776:
        vmulpd    %xmm5, %xmm0, %xmm6                           #185.64
..LN3777:
        vmovupd   %xmm6, (%rdx,%rdi,8)                          #185.32
..LN3778:
        lea       48(%r12,%r14,8), %r15                         #185.45
..LN3779:
        vmovsd    (%r15), %xmm7                                 #185.45
..LN3780:
        vmovhpd   16(%r15,%rcx,8), %xmm7, %xmm9                 #185.45
..LN3781:
        lea       56(%r12,%r14,8), %r15                         #185.64
..LN3782:
        vmovsd    (%r15), %xmm8                                 #185.64
..LN3783:
        lea       (%r10,%r8), %r14d                             #185.45
..LN3784:
        movslq    %r14d, %r14                                   #185.45
..LN3785:
        vmovhpd   16(%r15,%rcx,8), %xmm8, %xmm10                #185.64
..LN3786:
        vaddpd    %xmm10, %xmm9, %xmm11                         #185.64
..LN3787:
        vmulpd    %xmm11, %xmm0, %xmm12                         #185.64
..LN3788:
        vmovupd   %xmm12, 16(%rdx,%rdi,8)                       #185.32
..LN3789:
        lea       80(%r12,%r14,8), %r15                         #185.45
..LN3790:
        vmovsd    (%r15), %xmm13                                #185.45
..LN3791:
        vmovhpd   16(%r15,%rcx,8), %xmm13, %xmm15               #185.45
..LN3792:
        lea       88(%r12,%r14,8), %r15                         #185.64
..LN3793:
        vmovsd    (%r15), %xmm14                                #185.64
..LN3794:
        lea       (%r11,%r8), %r14d                             #185.45
..LN3795:
        movslq    %r14d, %r14                                   #185.45
..LN3796:
        addl      %esi, %r8d                                    #185.5
..LN3797:
        vmovhpd   16(%r15,%rcx,8), %xmm14, %xmm1                #185.64
..LN3798:
        vaddpd    %xmm1, %xmm15, %xmm2                          #185.64
..LN3799:
        vmulpd    %xmm2, %xmm0, %xmm3                           #185.64
..LN3800:
        vmovupd   %xmm3, 32(%rdx,%rdi,8)                        #185.32
..LN3801:
        lea       112(%r12,%r14,8), %r15                        #185.45
..LN3802:
        vmovsd    (%r15), %xmm4                                 #185.45
..LN3803:
        vmovhpd   16(%r15,%rcx,8), %xmm4, %xmm6                 #185.45
..LN3804:
        lea       120(%r12,%r14,8), %r15                        #185.64
..LN3805:
        vmovsd    (%r15), %xmm5                                 #185.64
..LN3806:
        vmovhpd   16(%r15,%rcx,8), %xmm5, %xmm7                 #185.64
..LN3807:
        vaddpd    %xmm7, %xmm6, %xmm8                           #185.64
..LN3808:
        vmulpd    %xmm8, %xmm0, %xmm9                           #185.64
..LN3809:
        vmovupd   %xmm9, 48(%rdx,%rdi,8)                        #185.32
..LN3810:
        addq      $8, %rdi                                      #185.5
..LN3811:
        cmpl      %ebx, %r13d                                   #185.5
..LN3812:
        jb        ..B2.101      # Prob 82%                      #185.5
..LN3813:
                                # LOE rdx rcx rdi r12 eax ebx esi r8d r9d r10d r11d r13d xmm0
..B2.102:                       # Preds ..B2.101
..LN3814:
        movl      248(%rsp), %eax                               #
..LN3815:
        movl      88(%rsp), %esi                                #
..LN3816:
        movq      32(%rsp), %r9                                 #
..LN3817:
        movl      24(%rsp), %edi                                #
..LN3818:
        movl      64(%rsp), %edx                                #
..LN3819:
        movq      72(%rsp), %rcx                                #
..LN3820:
        movq      80(%rsp), %r14                                #
..LN3821:
        movl      232(%rsp), %r15d                              #
..LN3822:
                                # LOE rcx r9 r12 r14 eax edx ebx esi edi r15d
..B2.103:                       # Preds ..B2.102 ..B2.331 ..B2.333
..LN3823:
        lea       1(%rbx), %r8d                                 #185.5
..LN3824:
        cmpl      %r8d, %edi                                    #185.5
..LN3825:
        jb        ..B2.355      # Prob 50%                      #185.5
..LN3826:
                                # LOE rcx r9 r12 r14 eax edx ebx esi edi r15d
..B2.104:                       # Preds ..B2.103
..LN3827:
        subl      %ebx, %edi                                    #185.5
..LN3828:
        cmpl      $2, %edi                                      #185.5
..LN3829:
        jl        ..B2.330      # Prob 10%                      #185.5
..LN3830:
                                # LOE rcx r9 r12 r14 eax edx ebx esi edi r15d
..B2.105:                       # Preds ..B2.104
..LN3831:
        xorl      %r10d, %r10d                                  #185.5
..LN3832:
        lea       4(%r15,%r15), %r13d                           #185.5
..LN3833:
        movl      %r13d, 8(%rsp)                                #185.5
..LN3834:
	.loc    1  167  is_stmt 1
        lea       2(%r15), %r11d                                #167.37
..LN3835:
        lea       -1(%rbx,%rdx), %r13d                          #167.37
..LN3836:
        imull     %r11d, %r13d                                  #167.37
..LN3837:
	.loc    1  185  is_stmt 1
        movl      %edi, %r8d                                    #185.5
..LN3838:
        vmovupd   .L_2il0floatpacket.5(%rip), %xmm0             #185.40
..LN3839:
        movl      %ebx, (%rsp)                                  #185.5
..LN3840:
	.loc    1  167  is_stmt 1
        lea       (%r13,%r15,2), %r11d                          #167.37
..LN3841:
	.loc    1  185  is_stmt 1
        movslq    %ebx, %r13                                    #185.32
..LN3842:
        andl      $-2, %r8d                                     #185.5
..LN3843:
        addq      %r9, %r13                                     #185.32
..LN3844:
	.loc    1  167  is_stmt 1
        movl      %r11d, 16(%rsp)                               #167.37
..LN3845:
	.loc    1  185  is_stmt 1
        xorl      %r11d, %r11d                                  #185.5
..LN3846:
        movl      %edx, 64(%rsp)                                #185.5
..LN3847:
        movq      %rcx, 72(%rsp)                                #185.5
..LN3848:
        movq      %r14, 80(%rsp)                                #185.5
..LN3849:
        lea       (%rcx,%r13,8), %r13                           #185.32
..LN3850:
        movl      %r15d, 232(%rsp)                              #185.5
..LN3851:
        movl      %r10d, %ebx                                   #185.5
..LN3852:
        movl      16(%rsp), %r14d                               #185.5
..LN3853:
        movl      8(%rsp), %edx                                 #185.5
..LN3854:
        movq      144(%rsp), %rcx                               #185.5
..LN3855:
        .align    16,0x90
..LN3856:
                                # LOE rcx r9 r11 r12 r13 eax edx ebx esi edi r8d r10d r14d xmm0
..B2.106:                       # Preds ..B2.106 ..B2.105
..L111:         # optimization report
                # LOOP WAS VECTORIZED
                # REMAINDER LOOP FOR VECTORIZATION
                # VECTORIZATION HAS UNALIGNED MEMORY REFERENCES
                # VECTORIZATION SPEEDUP COEFFECIENT 1.867188
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 2
                # NORMALIZED VECTORIZATION OVERHEAD 0.937500
                # MAIN VECTOR TYPE: 64-bits floating point
..LN3857:
        lea       (%r14,%rbx), %r15d                            #185.45
..LN3858:
        movslq    %r15d, %r15                                   #185.45
..LN3859:
        addl      $2, %r10d                                     #185.5
..LN3860:
        addl      %edx, %ebx                                    #185.5
..LN3861:
        lea       (%r12,%r15,8), %r15                           #185.45
..LN3862:
        vmovsd    16(%r15), %xmm1                               #185.45
..LN3863:
        vmovsd    24(%r15), %xmm2                               #185.64
..LN3864:
        vmovhpd   32(%r15,%rcx,8), %xmm1, %xmm3                 #185.45
..LN3865:
        vmovhpd   40(%r15,%rcx,8), %xmm2, %xmm4                 #185.64
..LN3866:
        vaddpd    %xmm4, %xmm3, %xmm5                           #185.64
..LN3867:
        vmulpd    %xmm5, %xmm0, %xmm6                           #185.64
..LN3868:
        vmovupd   %xmm6, (%r13,%r11,8)                          #185.32
..LN3869:
        addq      $2, %r11                                      #185.5
..LN3870:
        cmpl      %r8d, %r10d                                   #185.5
..LN3871:
        jb        ..B2.106      # Prob 82%                      #185.5
..LN3872:
                                # LOE rcx r9 r11 r12 r13 eax edx ebx esi edi r8d r10d r14d xmm0
..B2.107:                       # Preds ..B2.106
..LN3873:
        movl      (%rsp), %ebx                                  #
..LN3874:
        movl      64(%rsp), %edx                                #
..LN3875:
        movq      72(%rsp), %rcx                                #
..LN3876:
        movq      80(%rsp), %r14                                #
..LN3877:
        movl      232(%rsp), %r15d                              #
..LN3878:
                                # LOE rcx r9 r12 r14 eax edx ebx esi edi r8d r15d
..B2.108:                       # Preds ..B2.107 ..B2.330
..LN3879:
        movslq    %r8d, %r11                                    #185.5
..LN3880:
        cmpl      %edi, %r8d                                    #185.5
..LN3881:
        jae       ..B2.355      # Prob 15%                      #185.5
..LN3882:
                                # LOE rcx r9 r11 r12 r14 eax edx ebx esi edi r8d r15d
..B2.109:                       # Preds ..B2.108
..LN3883:
        movl      %r8d, %r13d                                   #185.5
..LN3884:
	.loc    1  167  is_stmt 1
        lea       2(%r15), %r10d                                #167.37
..LN3885:
	.loc    1  185  is_stmt 1
        imull     %r10d, %r13d                                  #185.5
..LN3886:
        vmovsd    .L_2il0floatpacket.3(%rip), %xmm0             #185.40
..LN3887:
        movl      %r13d, (%rsp)                                 #185.5
..LN3888:
	.loc    1  167  is_stmt 1
        lea       -1(%rbx,%rdx), %r13d                          #167.37
..LN3889:
	.loc    1  185  is_stmt 1
        movslq    %ebx, %rbx                                    #185.32
..LN3890:
	.loc    1  167  is_stmt 1
        imull     %r10d, %r13d                                  #167.37
..LN3891:
	.loc    1  185  is_stmt 1
        addq      %r9, %rbx                                     #185.32
..LN3892:
        movq      %r14, 80(%rsp)                                #185.32
..LN3893:
	.loc    1  167  is_stmt 1
        lea       (%r13,%r15,2), %r10d                          #167.37
..LN3894:
	.loc    1  185  is_stmt 1
        lea       (%rcx,%rbx,8), %r13                           #185.32
..LN3895:
        movl      (%rsp), %ebx                                  #185.32
..LN3896:
                                # LOE rcx r9 r11 r12 r13 eax edx ebx esi edi r8d r10d r15d xmm0
..B2.110:                       # Preds ..B2.110 ..B2.109
..L112:         # optimization report
                # REMAINDER LOOP FOR VECTORIZATION
                # VECTORIZATION SPEEDUP COEFFECIENT 1.867188
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 2
                # NORMALIZED VECTORIZATION OVERHEAD 0.937500
..LN3897:
        lea       (%r10,%rbx), %r14d                            #185.45
..LN3898:
        movslq    %r14d, %r14                                   #185.64
..LN3899:
        incl      %r8d                                          #185.5
..LN3900:
        lea       2(%rbx,%r15), %ebx                            #185.5
..LN3901:
        vmovsd    16(%r12,%r14,8), %xmm1                        #185.45
..LN3902:
        vaddsd    24(%r12,%r14,8), %xmm1, %xmm2                 #185.64
..LN3903:
        vmulsd    %xmm2, %xmm0, %xmm3                           #185.64
..LN3904:
        vmovsd    %xmm3, (%r13,%r11,8)                          #185.32
..LN3905:
        incq      %r11                                          #185.5
..LN3906:
        cmpl      %edi, %r8d                                    #185.5
..LN3907:
        jb        ..B2.110      # Prob 82%                      #185.5
..LN3908:
                                # LOE rcx r9 r11 r12 r13 eax edx ebx esi edi r8d r10d r15d xmm0
..B2.111:                       # Preds ..B2.110
..LN3909:
        movq      80(%rsp), %r14                                #
..LN3910:
	.loc    1  166  is_stmt 1
        cmpl      %esi, %edx                                    #166.19
..LN3911:
                                # LOE rcx r9 r12 r14 eax edx esi r15d
..B2.112:                       # Preds ..B2.111
..LN3912:
	.loc    1  186  is_stmt 1
        jge       ..B2.135      # Prob 50%                      #186.21
..LN3913:
                                # LOE rcx r9 r12 r14 eax edx esi r15d
..B2.113:                       # Preds ..B2.355 ..B2.364 ..B2.112
..LN3914:
        subl      %edx, %esi                                    #186.5
..LN3915:
        cmpl      $16, %esi                                     #186.5
..LN3916:
        jl        ..B2.326      # Prob 10%                      #186.5
..LN3917:
                                # LOE rcx r9 r12 r14 eax edx esi r15d
..B2.114:                       # Preds ..B2.113
..LN3918:
        movq      24(%rbp), %rbx                                #186.49
..LN3919:
        lea       (%rbx,%r9,8), %r11                            #186.49
..LN3920:
        cmpl      $29, %esi                                     #186.5
..LN3921:
        jl        ..B2.328      # Prob 10%                      #186.5
..LN3922:
                                # LOE rcx r9 r11 r12 r14 eax edx esi r15d
..B2.115:                       # Preds ..B2.114
..LN3923:
        movq      %r11, %r8                                     #186.5
..LN3924:
        andq      $31, %r8                                      #186.5
..LN3925:
        movl      %r8d, %r8d                                    #186.5
..LN3926:
        testl     %r8d, %r8d                                    #186.5
..LN3927:
        je        ..B2.118      # Prob 50%                      #186.5
..LN3928:
                                # LOE rcx r8 r9 r11 r12 r14 eax edx esi r15d
..B2.116:                       # Preds ..B2.115
..LN3929:
        testl     $7, %r8d                                      #186.5
..LN3930:
        jne       ..B2.326      # Prob 10%                      #186.5
..LN3931:
                                # LOE rcx r8 r9 r11 r12 r14 eax edx esi r15d
..B2.117:                       # Preds ..B2.116
..LN3932:
        negl      %r8d                                          #186.5
..LN3933:
        addl      $32, %r8d                                     #186.5
..LN3934:
        shrl      $3, %r8d                                      #186.5
..LN3935:
                                # LOE rcx r8 r9 r11 r12 r14 eax edx esi r15d
..B2.118:                       # Preds ..B2.117 ..B2.115
..LN3936:
        lea       16(%r8), %ebx                                 #186.5
..LN3937:
        cmpl      %ebx, %esi                                    #186.5
..LN3938:
        jl        ..B2.326      # Prob 10%                      #186.5
..LN3939:
                                # LOE rcx r8 r9 r11 r12 r14 eax edx esi r15d
..B2.119:                       # Preds ..B2.118
..LN3940:
        movl      %esi, %ebx                                    #186.5
..LN3941:
        lea       -1(%rdx), %r10d                               #186.32
..LN3942:
        imull     208(%rsp), %r10d                              #186.32
..LN3943:
        subl      %r8d, %ebx                                    #186.5
..LN3944:
        andl      $15, %ebx                                     #186.5
..LN3945:
        lea       (%rcx,%r9,8), %r13                            #186.81
..LN3946:
        negl      %ebx                                          #186.5
..LN3947:
        xorl      %edi, %edi                                    #186.5
..LN3948:
        addl      %esi, %ebx                                    #186.5
..LN3949:
        movq      %r13, (%rsp)                                  #186.81
..LN3950:
	.loc    1  142  is_stmt 1
        lea       (%r10,%r15,2), %r13d                          #142.12
..LN3951:
        movl      %r13d, 8(%rsp)                                #142.12
..LN3952:
	.loc    1  186  is_stmt 1
        testq     %r8, %r8                                      #186.5
..LN3953:
        jbe       ..B2.123      # Prob 9%                       #186.5
..LN3954:
                                # LOE rcx rdi r8 r9 r11 r12 r13 r14 eax edx ebx esi r10d r13d r15d r13b
..B2.120:                       # Preds ..B2.119
..LN3955:
        movq      %rcx, 72(%rsp)                                #
..LN3956:
        movq      %r14, 80(%rsp)                                #
..LN3957:
        movq      %r12, 168(%rsp)                               #
..LN3958:
        movl      %r15d, 232(%rsp)                              #
..LN3959:
        movq      (%rsp), %r14                                  #
..LN3960:
        movq      192(%rsp), %rcx                               #
..LN3961:
        movl      208(%rsp), %r12d                              #
..LN3962:
                                # LOE rcx rdi r8 r9 r11 r14 eax edx ebx esi r10d r12d r13d
..B2.121:                       # Preds ..B2.121 ..B2.120
..L113:         # optimization report
                # LOOP WAS UNROLLED BY 2
                # PEELED LOOP FOR VECTORIZATION
                # VECTORIZATION SPEEDUP COEFFECIENT 4.027344
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 8
                # NORMALIZED VECTORIZATION OVERHEAD 0.187500
..LN3963:
        movl      %edi, %r15d                                   #186.32
..LN3964:
        vmovsd    8(%r14,%rdi,8), %xmm0                         #186.81
..LN3965:
        imull     %r12d, %r15d                                  #186.32
..LN3966:
        vsubsd    (%r14,%rdi,8), %xmm0, %xmm1                   #186.32
..LN3967:
        addl      %r13d, %r15d                                  #186.32
..LN3968:
        vfnmadd132sd (%r11,%rdi,8), %xmm0, %xmm1                #186.32
..LN3969:
        incq      %rdi                                          #186.5
..LN3970:
        movslq    %r15d, %r15                                   #186.32
..LN3971:
        vmovsd    %xmm1, 8(%rcx,%r15,8)                         #186.32
..LN3972:
        cmpq      %r8, %rdi                                     #186.5
..LN3973:
        jb        ..B2.121      # Prob 81%                      #186.5
..LN3974:
                                # LOE rcx rdi r8 r9 r11 r14 eax edx ebx esi r10d r12d r13d
..B2.122:                       # Preds ..B2.121
..LN3975:
        movq      72(%rsp), %rcx                                #
..LN3976:
        movq      80(%rsp), %r14                                #
..LN3977:
        movl      232(%rsp), %r15d                              #
..LN3978:
        movq      168(%rsp), %r12                               #
..LN3979:
                                # LOE rcx r8 r9 r11 r12 r14 eax edx ebx esi r10d r15d
..B2.123:                       # Preds ..B2.119 ..B2.122 ..B2.328
..LN3980:
        movq      144(%rsp), %rdi                               #186.32
..LN3981:
        lea       (%r15,%r15,8), %r13d                          #186.32
..LN3982:
        addl      %r15d, %r13d                                  #186.32
..LN3983:
        movslq    %ebx, %rbx                                    #186.5
..LN3984:
        addl      %r13d, %r10d                                  #186.32
..LN3985:
        lea       8(,%rdi,8), %rdi                              #186.32
..LN3986:
        movl      %esi, 88(%rsp)                                #186.32
..LN3987:
        lea       (%rdi,%rdi,2), %r13                           #186.32
..LN3988:
        movq      %r9, 32(%rsp)                                 #186.32
..LN3989:
        movl      %edx, 64(%rsp)                                #186.32
..LN3990:
        movq      %rcx, 72(%rsp)                                #186.32
..LN3991:
        movq      %r14, 80(%rsp)                                #186.32
..LN3992:
        movq      %r12, 168(%rsp)                               #186.32
..LN3993:
        vmovupd   .L_2il0floatpacket.7(%rip), %ymm0             #186.68
..LN3994:
        movl      %r15d, 232(%rsp)                              #186.32
..LN3995:
        movq      (%rsp), %r12                                  #186.32
..LN3996:
        movl      8(%rsp), %r9d                                 #186.32
..LN3997:
        movq      %r13, %rsi                                    #186.32
..LN3998:
        movq      %rbx, %r14                                    #186.32
..LN3999:
        movq      192(%rsp), %rdx                               #186.32
..LN4000:
        movl      208(%rsp), %ecx                               #186.32
..LN4001:
                                # LOE rdx rsi rdi r8 r11 r12 r14 eax ecx ebx r9d r10d ymm0
..B2.124:                       # Preds ..B2.124 ..B2.123
..L114:         # optimization report
                # LOOP WAS UNROLLED BY 2
                # LOOP WAS VECTORIZED
                # VECTORIZATION HAS UNALIGNED MEMORY REFERENCES
                # VECTORIZATION SPEEDUP COEFFECIENT 4.027344
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 8
                # NORMALIZED VECTORIZATION OVERHEAD 0.187500
                # MAIN VECTOR TYPE: 64-bits floating point
..LN4002:
        movl      %r8d, %r13d                                   #186.32
..LN4003:
        vmovupd   (%r11,%r8,8), %ymm5                           #186.49
..LN4004:
        vmovupd   32(%r11,%r8,8), %ymm6                         #186.49
..LN4005:
        vmovupd   64(%r11,%r8,8), %ymm11                        #186.49
..LN4006:
        vmovupd   96(%r11,%r8,8), %ymm12                        #186.49
..LN4007:
        imull     %ecx, %r13d                                   #186.32
..LN4008:
        vsubpd    %ymm5, %ymm0, %ymm1                           #186.70
..LN4009:
        vsubpd    %ymm6, %ymm0, %ymm2                           #186.70
..LN4010:
        vsubpd    %ymm11, %ymm0, %ymm7                          #186.70
..LN4011:
        vsubpd    %ymm12, %ymm0, %ymm8                          #186.70
..LN4012:
        vmulpd    8(%r12,%r8,8), %ymm1, %ymm3                   #186.81
..LN4013:
        vmulpd    40(%r12,%r8,8), %ymm2, %ymm4                  #186.81
..LN4014:
        vmulpd    72(%r12,%r8,8), %ymm7, %ymm9                  #186.81
..LN4015:
        vmulpd    104(%r12,%r8,8), %ymm8, %ymm10                #186.81
..LN4016:
        vfmadd132pd (%r12,%r8,8), %ymm3, %ymm5                  #186.81
..LN4017:
        vfmadd132pd 32(%r12,%r8,8), %ymm4, %ymm6                #186.81
..LN4018:
        vfmadd132pd 64(%r12,%r8,8), %ymm9, %ymm11               #186.81
..LN4019:
        vfmadd132pd 96(%r12,%r8,8), %ymm10, %ymm12              #186.81
..LN4020:
        addq      $16, %r8                                      #186.5
..LN4021:
        lea       (%r9,%r13), %r15d                             #186.32
..LN4022:
        movslq    %r15d, %r15                                   #186.32
..LN4023:
        addl      %r10d, %r13d                                  #186.32
..LN4024:
        movslq    %r13d, %r13                                   #186.32
..LN4025:
        vextractf128 $1, %ymm5, %xmm13                          #186.32
..LN4026:
        lea       (%rdx,%r15,8), %r15                           #186.32
..LN4027:
        vmovsd    %xmm5, 8(%r15)                                #186.32
..LN4028:
        vmovhpd   %xmm5, 8(%rdi,%r15)                           #186.32
..LN4029:
        vmovsd    %xmm13, 8(%r15,%rdi,2)                        #186.32
..LN4030:
        lea       (%rdx,%r13,8), %r13                           #186.32
..LN4031:
        vmovhpd   %xmm13, 8(%rsi,%r15)                          #186.32
..LN4032:
        lea       8(%r15,%rdi,4), %r15                          #186.32
..LN4033:
        vextractf128 $1, %ymm6, %xmm14                          #186.32
..LN4034:
        vmovsd    %xmm6, (%r15)                                 #186.32
..LN4035:
        vmovhpd   %xmm6, (%rdi,%r15)                            #186.32
..LN4036:
        vmovsd    %xmm14, (%r15,%rdi,2)                         #186.32
..LN4037:
        vmovhpd   %xmm14, (%rsi,%r15)                           #186.32
..LN4038:
        lea       72(%r13,%rdi,4), %r15                         #186.32
..LN4039:
        vextractf128 $1, %ymm11, %xmm15                         #186.32
..LN4040:
        vmovsd    %xmm11, 72(%r13)                              #186.32
..LN4041:
        vmovhpd   %xmm11, 72(%rdi,%r13)                         #186.32
..LN4042:
        vmovsd    %xmm15, 72(%r13,%rdi,2)                       #186.32
..LN4043:
        vmovhpd   %xmm15, 72(%rsi,%r13)                         #186.32
..LN4044:
        vextractf128 $1, %ymm12, %xmm1                          #186.32
..LN4045:
        vmovsd    %xmm12, (%r15)                                #186.32
..LN4046:
        vmovhpd   %xmm12, (%rdi,%r15)                           #186.32
..LN4047:
        vmovsd    %xmm1, (%r15,%rdi,2)                          #186.32
..LN4048:
        vmovhpd   %xmm1, (%rsi,%r15)                            #186.32
..LN4049:
        cmpq      %r14, %r8                                     #186.5
..LN4050:
        jb        ..B2.124      # Prob 81%                      #186.5
..LN4051:
                                # LOE rdx rsi rdi r8 r11 r12 r14 eax ecx ebx r9d r10d ymm0
..B2.125:                       # Preds ..B2.124
..LN4052:
        movl      88(%rsp), %esi                                #
..LN4053:
        movq      32(%rsp), %r9                                 #
..LN4054:
        movl      64(%rsp), %edx                                #
..LN4055:
        movq      72(%rsp), %rcx                                #
..LN4056:
        movq      80(%rsp), %r14                                #
..LN4057:
        movl      232(%rsp), %r15d                              #
..LN4058:
        movq      168(%rsp), %r12                               #
..LN4059:
                                # LOE rcx r9 r12 r14 eax edx ebx esi r15d
..B2.126:                       # Preds ..B2.125 ..B2.326
..LN4060:
        lea       1(%rbx), %edi                                 #186.5
..LN4061:
        cmpl      %edi, %esi                                    #186.5
..LN4062:
        jb        ..B2.135      # Prob 50%                      #186.5
..LN4063:
                                # LOE rcx r9 r12 r14 eax edx ebx esi r15d
..B2.127:                       # Preds ..B2.126
..LN4064:
        movslq    %esi, %rsi                                    #186.5
..LN4065:
        movslq    %ebx, %rbx                                    #186.5
..LN4066:
        subq      %rbx, %rsi                                    #186.5
..LN4067:
        cmpq      $4, %rsi                                      #186.5
..LN4068:
        jl        ..B2.325      # Prob 10%                      #186.5
..LN4069:
                                # LOE rcx rsi r9 r12 r14 eax edx ebx r15d
..B2.128:                       # Preds ..B2.127
..LN4070:
        movq      144(%rsp), %r8                                #186.32
..LN4071:
        lea       -1(%rbx,%rdx), %r10d                          #186.32
..LN4072:
        imull     208(%rsp), %r10d                              #186.32
..LN4073:
        movl      %esi, %edi                                    #186.5
..LN4074:
        vmovupd   .L_2il0floatpacket.8(%rip), %ymm0             #186.68
..LN4075:
        movslq    %ebx, %rbx                                    #186.49
..LN4076:
        lea       (%r10,%r15,2), %r11d                          #186.32
..LN4077:
        movl      %r11d, 8(%rsp)                                #186.32
..LN4078:
        lea       (%rcx,%r9,8), %r13                            #186.59
..LN4079:
        movq      24(%rbp), %r11                                #186.49
..LN4080:
        andl      $-4, %edi                                     #186.5
..LN4081:
        movq      $0, (%rsp)                                    #186.5
..LN4082:
        lea       8(,%r8,8), %r8                                #186.32
..LN4083:
        movl      %edx, 64(%rsp)                                #186.32
..LN4084:
        lea       (%r13,%rbx,8), %r10                           #186.59
..LN4085:
        movq      %rcx, 72(%rsp)                                #186.32
..LN4086:
        lea       (%r11,%r9,8), %r13                            #186.49
..LN4087:
        movq      %r14, 80(%rsp)                                #186.32
..LN4088:
        lea       (%r13,%rbx,8), %r11                           #186.49
..LN4089:
        movq      %r12, 168(%rsp)                               #186.32
..LN4090:
        lea       (%r8,%r8,2), %r13                             #186.32
..LN4091:
        movslq    %edi, %rdi                                    #186.5
..LN4092:
        movl      %r15d, 232(%rsp)                              #186.32
..LN4093:
        movl      8(%rsp), %edx                                 #186.32
..LN4094:
        movq      (%rsp), %r14                                  #186.32
..LN4095:
        movq      192(%rsp), %rcx                               #186.32
..LN4096:
        movl      208(%rsp), %r12d                              #186.32
..LN4097:
        .align    16,0x90
..LN4098:
                                # LOE rcx rsi rdi r8 r9 r10 r11 r13 r14 eax edx ebx r12d ymm0
..B2.129:                       # Preds ..B2.129 ..B2.128
..L115:         # optimization report
                # LOOP WAS VECTORIZED
                # REMAINDER LOOP FOR VECTORIZATION
                # VECTORIZATION HAS UNALIGNED MEMORY REFERENCES
                # VECTORIZATION SPEEDUP COEFFECIENT 2.300781
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 0.812500
                # MAIN VECTOR TYPE: 64-bits floating point
..LN4099:
        movl      %r14d, %r15d                                  #186.32
..LN4100:
        vmovupd   (%r11,%r14,8), %ymm3                          #186.49
..LN4101:
        imull     %r12d, %r15d                                  #186.32
..LN4102:
        vsubpd    %ymm3, %ymm0, %ymm1                           #186.70
..LN4103:
        vmulpd    8(%r10,%r14,8), %ymm1, %ymm2                  #186.81
..LN4104:
        addl      %edx, %r15d                                   #186.32
..LN4105:
        vfmadd132pd (%r10,%r14,8), %ymm2, %ymm3                 #186.81
..LN4106:
        addq      $4, %r14                                      #186.5
..LN4107:
        movslq    %r15d, %r15                                   #186.32
..LN4108:
        vextractf128 $1, %ymm3, %xmm4                           #186.32
..LN4109:
        lea       8(%rcx,%r15,8), %r15                          #186.32
..LN4110:
        vmovsd    %xmm3, (%r15)                                 #186.32
..LN4111:
        vmovhpd   %xmm3, (%r8,%r15)                             #186.32
..LN4112:
        vmovsd    %xmm4, (%r15,%r8,2)                           #186.32
..LN4113:
        vmovhpd   %xmm4, (%r13,%r15)                            #186.32
..LN4114:
        cmpq      %rdi, %r14                                    #186.5
..LN4115:
        jb        ..B2.129      # Prob 81%                      #186.5
..LN4116:
                                # LOE rcx rsi rdi r8 r9 r10 r11 r13 r14 eax edx ebx r12d ymm0
..B2.130:                       # Preds ..B2.129
..LN4117:
        movl      64(%rsp), %edx                                #
..LN4118:
        movq      72(%rsp), %rcx                                #
..LN4119:
        movq      80(%rsp), %r14                                #
..LN4120:
        movl      232(%rsp), %r15d                              #
..LN4121:
        movq      168(%rsp), %r12                               #
..LN4122:
                                # LOE rcx rsi rdi r9 r12 r14 eax edx ebx r15d
..B2.131:                       # Preds ..B2.130 ..B2.325
..LN4123:
        cmpq      %rsi, %rdi                                    #186.5
..LN4124:
        jae       ..B2.135      # Prob 9%                       #186.5
..LN4125:
                                # LOE rcx rsi rdi r9 r12 r14 eax edx ebx r15d
..B2.132:                       # Preds ..B2.131
..LN4126:
        movl      208(%rsp), %r10d                              #186.49
..LN4127:
        lea       -1(%rbx,%rdx), %r8d                           #186.32
..LN4128:
        imull     208(%rsp), %r8d                               #186.32
..LN4129:
        lea       (%rcx,%r9,8), %rcx                            #186.81
..LN4130:
        movq      24(%rbp), %rdx                                #186.70
..LN4131:
        lea       (%r8,%r15,2), %r8d                            #186.32
..LN4132:
        movslq    %ebx, %rbx                                    #186.49
..LN4133:
        lea       (%rdx,%r9,8), %r9                             #186.70
..LN4134:
        lea       (%rcx,%rbx,8), %rdx                           #186.59
..LN4135:
        lea       (%r9,%rbx,8), %rcx                            #186.49
..LN4136:
        movq      192(%rsp), %r9                                #186.49
..LN4137:
                                # LOE rdx rcx rsi rdi r9 r12 r14 eax r8d r10d r15d
..B2.133:                       # Preds ..B2.133 ..B2.132
..L116:         # optimization report
                # REMAINDER LOOP FOR VECTORIZATION
                # VECTORIZATION SPEEDUP COEFFECIENT 2.300781
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 0.812500
..LN4138:
        movl      %edi, %ebx                                    #186.32
..LN4139:
        vmovsd    8(%rdx,%rdi,8), %xmm0                         #186.81
..LN4140:
        imull     %r10d, %ebx                                   #186.32
..LN4141:
        vsubsd    (%rdx,%rdi,8), %xmm0, %xmm1                   #186.32
..LN4142:
        addl      %r8d, %ebx                                    #186.32
..LN4143:
        vfnmadd132sd (%rcx,%rdi,8), %xmm0, %xmm1                #186.32
..LN4144:
        incq      %rdi                                          #186.5
..LN4145:
        movslq    %ebx, %rbx                                    #186.32
..LN4146:
        vmovsd    %xmm1, 8(%r9,%rbx,8)                          #186.32
..LN4147:
        cmpq      %rsi, %rdi                                    #186.5
..LN4148:
        jb        ..B2.133      # Prob 81%                      #186.5
..LN4149:
                                # LOE rdx rcx rsi rdi r9 r12 r14 eax r8d r10d r15d
..B2.135:                       # Preds ..B2.133 ..B2.355 ..B2.364 ..B2.89 ..B2.112
                                #       ..B2.126 ..B2.131
..LN4150:
	.loc    1  190  is_stmt 1
        cmpl      $0, 112(%rsp)                                 #190.6
..LN4151:
        je        ..B2.181      # Prob 50%                      #190.6
..LN4152:
                                # LOE r12 r14 eax r15d
..B2.136:                       # Preds ..B2.135
..LN4153:
	.loc    1  191  is_stmt 1
        movl      240(%rsp), %edx                               #191.22
..LN4154:
        cmpl      %eax, %edx                                    #191.22
..LN4155:
        jg        ..B2.158      # Prob 50%                      #191.22
..LN4156:
                                # LOE rdx r12 r14 eax r15d
..B2.137:                       # Preds ..B2.136
..LN4157:
        movl      %eax, %edi                                    #191.5
..LN4158:
        subl      240(%rsp), %edi                               #191.5
..LN4159:
        incl      %edi                                          #191.5
..LN4160:
        cmpl      $16, %edi                                     #191.5
..LN4161:
        jl        ..B2.322      # Prob 10%                      #191.5
..LN4162:
                                # LOE rdx r12 r14 eax edi r15d
..B2.138:                       # Preds ..B2.137
..LN4163:
        lea       (%r14,%rdx,8), %rsi                           #191.33
..LN4164:
        movq      %rsi, %rcx                                    #191.5
..LN4165:
        andq      $31, %rcx                                     #191.5
..LN4166:
        movl      %ecx, %ecx                                    #191.5
..LN4167:
        testl     %ecx, %ecx                                    #191.5
..LN4168:
        je        ..B2.141      # Prob 50%                      #191.5
..LN4169:
                                # LOE rdx rcx rsi r12 r14 eax edi r15d
..B2.139:                       # Preds ..B2.138
..LN4170:
        testb     $7, %cl                                       #191.5
..LN4171:
        jne       ..B2.322      # Prob 10%                      #191.5
..LN4172:
                                # LOE rdx rcx rsi r12 r14 eax edi r15d
..B2.140:                       # Preds ..B2.139
..LN4173:
        negl      %ecx                                          #191.5
..LN4174:
        addl      $32, %ecx                                     #191.5
..LN4175:
        shrl      $3, %ecx                                      #191.5
..LN4176:
                                # LOE rdx rcx rsi r12 r14 eax edi r15d
..B2.141:                       # Preds ..B2.140 ..B2.138
..LN4177:
        lea       16(%rcx), %ebx                                #191.5
..LN4178:
        cmpl      %ebx, %edi                                    #191.5
..LN4179:
        jl        ..B2.322      # Prob 10%                      #191.5
..LN4180:
                                # LOE rdx rcx rsi r12 r14 eax edi r15d
..B2.142:                       # Preds ..B2.141
..LN4181:
        movl      %edi, %ebx                                    #191.5
..LN4182:
        xorl      %r10d, %r10d                                  #191.5
..LN4183:
        movq      144(%rsp), %r8                                #191.55
..LN4184:
        subl      %ecx, %ebx                                    #191.5
..LN4185:
        andl      $15, %ebx                                     #191.5
..LN4186:
        negl      %ebx                                          #191.5
..LN4187:
        lea       (%r12,%r8,8), %r9                             #191.55
..LN4188:
        addl      %edi, %ebx                                    #191.5
..LN4189:
        lea       (%r9,%rdx,8), %r9                             #191.55
..LN4190:
        lea       (%r12,%rdx,8), %r8                            #191.46
..LN4191:
        testq     %rcx, %rcx                                    #191.5
..LN4192:
        jbe       ..B2.146      # Prob 15%                      #191.5
..LN4193:
                                # LOE rdx rcx rsi r8 r9 r10 r12 r14 eax ebx edi r15d
..B2.143:                       # Preds ..B2.142
..LN4194:
        vmovsd    .L_2il0floatpacket.3(%rip), %xmm0             #191.41
..LN4195:
                                # LOE rdx rcx rsi r8 r9 r10 r12 r14 eax ebx edi r15d xmm0
..B2.144:                       # Preds ..B2.144 ..B2.143
..L117:         # optimization report
                # LOOP WAS UNROLLED BY 4
                # PEELED LOOP FOR VECTORIZATION
                # VECTORIZATION SPEEDUP COEFFECIENT 5.332031
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 0.437500
..LN4196:
        vmovsd    (%r8,%r10,8), %xmm1                           #191.46
..LN4197:
        vaddsd    16(%r9,%r10,8), %xmm1, %xmm2                  #191.55
..LN4198:
        vmulsd    %xmm2, %xmm0, %xmm3                           #191.55
..LN4199:
        vmovsd    %xmm3, (%rsi,%r10,8)                          #191.33
..LN4200:
        incq      %r10                                          #191.5
..LN4201:
        cmpq      %rcx, %r10                                    #191.5
..LN4202:
        jb        ..B2.144      # Prob 82%                      #191.5
..LN4203:
                                # LOE rdx rcx rsi r8 r9 r10 r12 r14 eax ebx edi r15d xmm0
..B2.146:                       # Preds ..B2.144 ..B2.142
..LN4204:
        vmovupd   .L_2il0floatpacket.4(%rip), %ymm0             #191.41
..LN4205:
        movslq    %ebx, %r10                                    #191.5
..LN4206:
        .align    16,0x90
..LN4207:
                                # LOE rdx rcx rsi r8 r9 r10 r12 r14 eax ebx edi r15d ymm0
..B2.147:                       # Preds ..B2.147 ..B2.146
..L118:         # optimization report
                # LOOP WAS UNROLLED BY 4
                # LOOP WAS VECTORIZED
                # VECTORIZATION HAS UNALIGNED MEMORY REFERENCES
                # VECTORIZATION SPEEDUP COEFFECIENT 5.332031
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 0.437500
                # MAIN VECTOR TYPE: 64-bits floating point
..LN4208:
        vmovupd   (%r8,%rcx,8), %ymm1                           #191.46
..LN4209:
        vmovupd   32(%r8,%rcx,8), %ymm4                         #191.46
..LN4210:
        vmovupd   64(%r8,%rcx,8), %ymm7                         #191.46
..LN4211:
        vmovupd   96(%r8,%rcx,8), %ymm10                        #191.46
..LN4212:
        vaddpd    16(%r9,%rcx,8), %ymm1, %ymm2                  #191.55
..LN4213:
        vaddpd    48(%r9,%rcx,8), %ymm4, %ymm5                  #191.55
..LN4214:
        vaddpd    80(%r9,%rcx,8), %ymm7, %ymm8                  #191.55
..LN4215:
        vaddpd    112(%r9,%rcx,8), %ymm10, %ymm11               #191.55
..LN4216:
        vmulpd    %ymm2, %ymm0, %ymm3                           #191.55
..LN4217:
        vmulpd    %ymm5, %ymm0, %ymm6                           #191.55
..LN4218:
        vmulpd    %ymm8, %ymm0, %ymm9                           #191.55
..LN4219:
        vmulpd    %ymm11, %ymm0, %ymm12                         #191.55
..LN4220:
        vmovupd   %ymm3, (%rsi,%rcx,8)                          #191.33
..LN4221:
        vmovupd   %ymm6, 32(%rsi,%rcx,8)                        #191.33
..LN4222:
        vmovupd   %ymm9, 64(%rsi,%rcx,8)                        #191.33
..LN4223:
        vmovupd   %ymm12, 96(%rsi,%rcx,8)                       #191.33
..LN4224:
        addq      $16, %rcx                                     #191.5
..LN4225:
        cmpq      %r10, %rcx                                    #191.5
..LN4226:
        jb        ..B2.147      # Prob 82%                      #191.5
..LN4227:
                                # LOE rdx rcx rsi r8 r9 r10 r12 r14 eax ebx edi r15d ymm0
..B2.149:                       # Preds ..B2.147 ..B2.322
..LN4228:
        lea       1(%rbx), %ecx                                 #191.5
..LN4229:
        cmpl      %ecx, %edi                                    #191.5
..LN4230:
        jb        ..B2.361      # Prob 50%                      #191.5
..LN4231:
                                # LOE rdx r12 r14 eax ebx edi r15d
..B2.150:                       # Preds ..B2.149
..LN4232:
        movslq    %edi, %rdi                                    #191.5
..LN4233:
        movslq    %ebx, %rbx                                    #191.5
..LN4234:
        subq      %rbx, %rdi                                    #191.5
..LN4235:
        cmpq      $4, %rdi                                      #191.5
..LN4236:
        jl        ..B2.321      # Prob 10%                      #191.5
..LN4237:
                                # LOE rdx rdi r12 r14 eax ebx r15d
..B2.151:                       # Preds ..B2.150
..LN4238:
        movq      144(%rsp), %r10                               #191.55
..LN4239:
        movl      %edi, %r8d                                    #191.5
..LN4240:
        movslq    %ebx, %rbx                                    #191.46
..LN4241:
        andl      $-4, %r8d                                     #191.5
..LN4242:
        movslq    %r8d, %r8                                     #191.5
..LN4243:
        lea       (%r14,%rdx,8), %rcx                           #191.33
..LN4244:
        xorl      %esi, %esi                                    #191.5
..LN4245:
        lea       (%r12,%r10,8), %r9                            #191.55
..LN4246:
        lea       (%r9,%rdx,8), %r11                            #191.55
..LN4247:
        vmovupd   .L_2il0floatpacket.9(%rip), %ymm0             #191.41
..LN4248:
        lea       (%r12,%rdx,8), %r13                           #191.46
..LN4249:
        lea       (%rcx,%rbx,8), %rcx                           #191.33
..LN4250:
        lea       (%r11,%rbx,8), %r10                           #191.55
..LN4251:
        lea       (%r13,%rbx,8), %r9                            #191.46
..LN4252:
                                # LOE rdx rcx rsi rdi r8 r9 r10 r12 r14 eax ebx r15d ymm0
..B2.152:                       # Preds ..B2.152 ..B2.151
..L119:         # optimization report
                # LOOP WAS VECTORIZED
                # REMAINDER LOOP FOR VECTORIZATION
                # VECTORIZATION HAS UNALIGNED MEMORY REFERENCES
                # VECTORIZATION SPEEDUP COEFFECIENT 2.320312
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 1.750000
                # MAIN VECTOR TYPE: 64-bits floating point
..LN4253:
        vmovupd   (%r9,%rsi,8), %ymm1                           #191.46
..LN4254:
        vaddpd    16(%r10,%rsi,8), %ymm1, %ymm2                 #191.55
..LN4255:
        vmulpd    %ymm2, %ymm0, %ymm3                           #191.55
..LN4256:
        vmovupd   %ymm3, (%rcx,%rsi,8)                          #191.33
..LN4257:
        addq      $4, %rsi                                      #191.5
..LN4258:
        cmpq      %r8, %rsi                                     #191.5
..LN4259:
        jb        ..B2.152      # Prob 82%                      #191.5
..LN4260:
                                # LOE rdx rcx rsi rdi r8 r9 r10 r12 r14 eax ebx r15d ymm0
..B2.154:                       # Preds ..B2.152 ..B2.321
..LN4261:
        cmpq      %rdi, %r8                                     #191.5
..LN4262:
        jae       ..B2.361      # Prob 15%                      #191.5
..LN4263:
                                # LOE rdx rdi r8 r12 r14 eax ebx r15d
..B2.155:                       # Preds ..B2.154
..LN4264:
        movq      144(%rsp), %rsi                               #191.55
..LN4265:
        lea       (%r14,%rdx,8), %rcx                           #191.33
..LN4266:
        movslq    %ebx, %rbx                                    #191.46
..LN4267:
        lea       (%r12,%rdx,8), %r11                           #191.46
..LN4268:
        vmovsd    .L_2il0floatpacket.3(%rip), %xmm0             #191.41
..LN4269:
        lea       (%r12,%rsi,8), %r9                            #191.55
..LN4270:
        lea       (%r9,%rdx,8), %r10                            #191.55
..LN4271:
        lea       (%rcx,%rbx,8), %rcx                           #191.33
..LN4272:
        lea       (%r10,%rbx,8), %rsi                           #191.55
..LN4273:
        lea       (%r11,%rbx,8), %rbx                           #191.46
..LN4274:
                                # LOE rdx rcx rbx rsi rdi r8 r12 r14 eax r15d xmm0
..B2.156:                       # Preds ..B2.156 ..B2.155
..L120:         # optimization report
                # REMAINDER LOOP FOR VECTORIZATION
                # VECTORIZATION SPEEDUP COEFFECIENT 2.320312
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 1.750000
..LN4275:
        vmovsd    (%rbx,%r8,8), %xmm1                           #191.46
..LN4276:
        vaddsd    16(%rsi,%r8,8), %xmm1, %xmm2                  #191.55
..LN4277:
        vmulsd    %xmm2, %xmm0, %xmm3                           #191.55
..LN4278:
        vmovsd    %xmm3, (%rcx,%r8,8)                           #191.33
..LN4279:
        incq      %r8                                           #191.5
..LN4280:
        cmpq      %rdi, %r8                                     #191.5
..LN4281:
        jb        ..B2.156      # Prob 82%                      #191.5
..LN4282:
                                # LOE rdx rcx rbx rsi rdi r8 r12 r14 eax r15d xmm0
..B2.157:                       # Preds ..B2.156
..LN4283:
	.loc    1  166  is_stmt 1
        movl      240(%rsp), %ecx                               #166.46
..LN4284:
        cmpl      %eax, %ecx                                    #166.46
..LN4285:
                                # LOE rdx r12 r14 eax r15d
..B2.158:                       # Preds ..B2.136 ..B2.157
..LN4286:
	.loc    1  192  is_stmt 1
        jge       ..B2.181      # Prob 50%                      #192.21
..LN4287:
                                # LOE rdx r12 r14 eax r15d
..B2.159:                       # Preds ..B2.361 ..B2.158
..LN4288:
        movl      %eax, %r8d                                    #192.5
..LN4289:
        subl      240(%rsp), %r8d                               #192.5
..LN4290:
        cmpl      $16, %r8d                                     #192.5
..LN4291:
        jl        ..B2.317      # Prob 10%                      #192.5
..LN4292:
                                # LOE rdx r12 r14 eax r8d r15d
..B2.160:                       # Preds ..B2.159
..LN4293:
        movq      32(%rbp), %rcx                                #192.42
..LN4294:
        lea       (%rcx,%rdx,8), %rbx                           #192.42
..LN4295:
        cmpl      $29, %r8d                                     #192.5
..LN4296:
        jl        ..B2.319      # Prob 10%                      #192.5
..LN4297:
                                # LOE rdx rbx r12 r14 eax r8d r15d
..B2.161:                       # Preds ..B2.160
..LN4298:
        movq      %rbx, %r9                                     #192.5
..LN4299:
        andq      $31, %r9                                      #192.5
..LN4300:
        movl      %r9d, %r9d                                    #192.5
..LN4301:
        testl     %r9d, %r9d                                    #192.5
..LN4302:
        je        ..B2.164      # Prob 50%                      #192.5
..LN4303:
                                # LOE rdx rbx r9 r12 r14 eax r8d r15d
..B2.162:                       # Preds ..B2.161
..LN4304:
        testl     $7, %r9d                                      #192.5
..LN4305:
        jne       ..B2.317      # Prob 10%                      #192.5
..LN4306:
                                # LOE rdx rbx r9 r12 r14 eax r8d r15d
..B2.163:                       # Preds ..B2.162
..LN4307:
        negl      %r9d                                          #192.5
..LN4308:
        addl      $32, %r9d                                     #192.5
..LN4309:
        shrl      $3, %r9d                                      #192.5
..LN4310:
                                # LOE rdx rbx r9 r12 r14 eax r8d r15d
..B2.164:                       # Preds ..B2.163 ..B2.161
..LN4311:
        lea       16(%r9), %ecx                                 #192.5
..LN4312:
        cmpl      %ecx, %r8d                                    #192.5
..LN4313:
        jl        ..B2.317      # Prob 10%                      #192.5
..LN4314:
                                # LOE rdx rbx r9 r12 r14 eax r8d r15d
..B2.165:                       # Preds ..B2.164
..LN4315:
        movl      %r8d, %ecx                                    #192.5
..LN4316:
        xorl      %r10d, %r10d                                  #192.5
..LN4317:
        subl      %r9d, %ecx                                    #192.5
..LN4318:
        movq      192(%rsp), %rsi                               #192.32
..LN4319:
        andl      $15, %ecx                                     #192.5
..LN4320:
        negl      %ecx                                          #192.5
..LN4321:
        addl      %r8d, %ecx                                    #192.5
..LN4322:
        lea       (%rsi,%rdx,8), %rdi                           #192.32
..LN4323:
        lea       (%r14,%rdx,8), %rsi                           #192.52
..LN4324:
        testq     %r9, %r9                                      #192.5
..LN4325:
        jbe       ..B2.169      # Prob 9%                       #192.5
..LN4326:
                                # LOE rdx rbx rsi rdi r9 r10 r12 r14 eax ecx r8d r15d
..B2.167:                       # Preds ..B2.165 ..B2.167
..L121:         # optimization report
                # LOOP WAS UNROLLED BY 4
                # PEELED LOOP FOR VECTORIZATION
                # VECTORIZATION SPEEDUP COEFFECIENT 4.843750
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 0.312500
..LN4327:
        vmovsd    8(%rsi,%r10,8), %xmm0                         #192.76
..LN4328:
        vsubsd    (%rsi,%r10,8), %xmm0, %xmm1                   #192.32
..LN4329:
        vfnmadd132sd (%rbx,%r10,8), %xmm0, %xmm1                #192.32
..LN4330:
        vmovsd    %xmm1, (%rdi,%r10,8)                          #192.32
..LN4331:
        incq      %r10                                          #192.5
..LN4332:
        cmpq      %r9, %r10                                     #192.5
..LN4333:
        jb        ..B2.167      # Prob 81%                      #192.5
..LN4334:
                                # LOE rdx rbx rsi rdi r9 r10 r12 r14 eax ecx r8d r15d
..B2.169:                       # Preds ..B2.167 ..B2.165 ..B2.319
..LN4335:
        vmovupd   .L_2il0floatpacket.7(%rip), %ymm0             #192.61
..LN4336:
        movslq    %ecx, %r10                                    #192.5
..LN4337:
                                # LOE rdx rbx rsi rdi r9 r10 r12 r14 eax ecx r8d r15d ymm0
..B2.170:                       # Preds ..B2.170 ..B2.169
..L122:         # optimization report
                # LOOP WAS UNROLLED BY 4
                # LOOP WAS VECTORIZED
                # VECTORIZATION HAS UNALIGNED MEMORY REFERENCES
                # VECTORIZATION SPEEDUP COEFFECIENT 4.843750
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 0.312500
                # MAIN VECTOR TYPE: 64-bits floating point
..LN4338:
        vmovupd   (%rbx,%r9,8), %ymm3                           #192.42
..LN4339:
        vmovupd   32(%rbx,%r9,8), %ymm6                         #192.42
..LN4340:
        vmovupd   64(%rbx,%r9,8), %ymm9                         #192.42
..LN4341:
        vmovupd   96(%rbx,%r9,8), %ymm12                        #192.42
..LN4342:
        vsubpd    %ymm3, %ymm0, %ymm1                           #192.65
..LN4343:
        vsubpd    %ymm6, %ymm0, %ymm4                           #192.65
..LN4344:
        vsubpd    %ymm9, %ymm0, %ymm7                           #192.65
..LN4345:
        vsubpd    %ymm12, %ymm0, %ymm10                         #192.65
..LN4346:
        vmulpd    8(%rsi,%r9,8), %ymm1, %ymm2                   #192.76
..LN4347:
        vmulpd    40(%rsi,%r9,8), %ymm4, %ymm5                  #192.76
..LN4348:
        vmulpd    72(%rsi,%r9,8), %ymm7, %ymm8                  #192.76
..LN4349:
        vmulpd    104(%rsi,%r9,8), %ymm10, %ymm11               #192.76
..LN4350:
        vfmadd132pd (%rsi,%r9,8), %ymm2, %ymm3                  #192.76
..LN4351:
        vfmadd132pd 32(%rsi,%r9,8), %ymm5, %ymm6                #192.76
..LN4352:
        vfmadd132pd 64(%rsi,%r9,8), %ymm8, %ymm9                #192.76
..LN4353:
        vfmadd132pd 96(%rsi,%r9,8), %ymm11, %ymm12              #192.76
..LN4354:
        vmovupd   %ymm3, (%rdi,%r9,8)                           #192.32
..LN4355:
        vmovupd   %ymm6, 32(%rdi,%r9,8)                         #192.32
..LN4356:
        vmovupd   %ymm9, 64(%rdi,%r9,8)                         #192.32
..LN4357:
        vmovupd   %ymm12, 96(%rdi,%r9,8)                        #192.32
..LN4358:
        addq      $16, %r9                                      #192.5
..LN4359:
        cmpq      %r10, %r9                                     #192.5
..LN4360:
        jb        ..B2.170      # Prob 81%                      #192.5
..LN4361:
                                # LOE rdx rbx rsi rdi r9 r10 r12 r14 eax ecx r8d r15d ymm0
..B2.172:                       # Preds ..B2.170 ..B2.317
..LN4362:
        lea       1(%rcx), %ebx                                 #192.5
..LN4363:
        cmpl      %ebx, %r8d                                    #192.5
..LN4364:
        jb        ..B2.181      # Prob 50%                      #192.5
..LN4365:
                                # LOE rdx r12 r14 eax ecx r8d r15d
..B2.173:                       # Preds ..B2.172
..LN4366:
        movslq    %r8d, %r8                                     #192.5
..LN4367:
        movslq    %ecx, %rcx                                    #192.5
..LN4368:
        subq      %rcx, %r8                                     #192.5
..LN4369:
        cmpq      $4, %r8                                       #192.5
..LN4370:
        jl        ..B2.316      # Prob 10%                      #192.5
..LN4371:
                                # LOE rdx r8 r12 r14 eax ecx r15d
..B2.174:                       # Preds ..B2.173
..LN4372:
        movq      192(%rsp), %rsi                               #192.32
..LN4373:
        movl      %r8d, %r9d                                    #192.5
..LN4374:
        movq      32(%rbp), %r11                                #192.42
..LN4375:
        andl      $-4, %r9d                                     #192.5
..LN4376:
        movslq    %r9d, %r9                                     #192.5
..LN4377:
        lea       (%r14,%rdx,8), %r10                           #192.52
..LN4378:
        xorl      %edi, %edi                                    #192.5
..LN4379:
        lea       (%rsi,%rdx,8), %rbx                           #192.32
..LN4380:
        movslq    %ecx, %rcx                                    #192.42
..LN4381:
        lea       (%r11,%rdx,8), %r13                           #192.42
..LN4382:
        vmovupd   .L_2il0floatpacket.8(%rip), %ymm0             #192.61
..LN4383:
        lea       (%rbx,%rcx,8), %rsi                           #192.32
..LN4384:
        lea       (%r10,%rcx,8), %rbx                           #192.52
..LN4385:
        lea       (%r13,%rcx,8), %r10                           #192.42
..LN4386:
                                # LOE rdx rbx rsi rdi r8 r9 r10 r12 r14 eax ecx r15d ymm0
..B2.175:                       # Preds ..B2.175 ..B2.174
..L123:         # optimization report
                # LOOP WAS VECTORIZED
                # REMAINDER LOOP FOR VECTORIZATION
                # VECTORIZATION HAS UNALIGNED MEMORY REFERENCES
                # VECTORIZATION SPEEDUP COEFFECIENT 2.427734
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 1.375000
                # MAIN VECTOR TYPE: 64-bits floating point
..LN4387:
        vmovupd   (%r10,%rdi,8), %ymm3                          #192.42
..LN4388:
        vsubpd    %ymm3, %ymm0, %ymm1                           #192.65
..LN4389:
        vmulpd    8(%rbx,%rdi,8), %ymm1, %ymm2                  #192.76
..LN4390:
        vfmadd132pd (%rbx,%rdi,8), %ymm2, %ymm3                 #192.76
..LN4391:
        vmovupd   %ymm3, (%rsi,%rdi,8)                          #192.32
..LN4392:
        addq      $4, %rdi                                      #192.5
..LN4393:
        cmpq      %r9, %rdi                                     #192.5
..LN4394:
        jb        ..B2.175      # Prob 81%                      #192.5
..LN4395:
                                # LOE rdx rbx rsi rdi r8 r9 r10 r12 r14 eax ecx r15d ymm0
..B2.177:                       # Preds ..B2.175 ..B2.316
..LN4396:
        cmpq      %r8, %r9                                      #192.5
..LN4397:
        jae       ..B2.181      # Prob 9%                       #192.5
..LN4398:
                                # LOE rdx r8 r9 r12 r14 eax ecx r15d
..B2.178:                       # Preds ..B2.177
..LN4399:
        movq      32(%rbp), %rbx                                #192.42
..LN4400:
        movq      192(%rsp), %rdi                               #192.32
..LN4401:
        movslq    %ecx, %rcx                                    #192.42
..LN4402:
        lea       (%rbx,%rdx,8), %rsi                           #192.42
..LN4403:
        lea       (%rdi,%rdx,8), %r10                           #192.32
..LN4404:
        lea       (%r14,%rdx,8), %rdx                           #192.52
..LN4405:
        lea       (%rsi,%rcx,8), %rbx                           #192.42
..LN4406:
        lea       (%r10,%rcx,8), %rsi                           #192.32
..LN4407:
        lea       (%rdx,%rcx,8), %rdx                           #192.52
..LN4408:
                                # LOE rdx rbx rsi r8 r9 r12 r14 eax r15d
..B2.179:                       # Preds ..B2.179 ..B2.178
..L124:         # optimization report
                # REMAINDER LOOP FOR VECTORIZATION
                # VECTORIZATION SPEEDUP COEFFECIENT 2.427734
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 1.375000
..LN4409:
        vmovsd    8(%rdx,%r9,8), %xmm0                          #192.76
..LN4410:
        vsubsd    (%rdx,%r9,8), %xmm0, %xmm1                    #192.32
..LN4411:
        vfnmadd132sd (%rbx,%r9,8), %xmm0, %xmm1                 #192.32
..LN4412:
        vmovsd    %xmm1, (%rsi,%r9,8)                           #192.32
..LN4413:
        incq      %r9                                           #192.5
..LN4414:
        cmpq      %r8, %r9                                      #192.5
..LN4415:
        jb        ..B2.179      # Prob 81%                      #192.5
..LN4416:
                                # LOE rdx rbx rsi r8 r9 r12 r14 eax r15d
..B2.181:                       # Preds ..B2.179 ..B2.361 ..B2.135 ..B2.158 ..B2.172
                                #       ..B2.177
..LN4417:
	.loc    1  196  is_stmt 1
        cmpl      $0, 104(%rsp)                                 #196.6
..LN4418:
        je        ..B2.227      # Prob 50%                      #196.6
..LN4419:
                                # LOE r12 r14 eax r15d
..B2.182:                       # Preds ..B2.181
..LN4420:
	.loc    1  197  is_stmt 1
        movl      240(%rsp), %esi                               #197.23
..LN4421:
        cmpl      %eax, %esi                                    #197.23
..LN4422:
        jg        ..B2.204      # Prob 50%                      #197.23
..LN4423:
                                # LOE rsi r12 r14 eax r15d
..B2.183:                       # Preds ..B2.182
..LN4424:
        movl      %eax, %ebx                                    #197.6
..LN4425:
        subl      240(%rsp), %ebx                               #197.6
..LN4426:
        incl      %ebx                                          #197.6
..LN4427:
        cmpl      $16, %ebx                                     #197.6
..LN4428:
        jl        ..B2.313      # Prob 10%                      #197.6
..LN4429:
                                # LOE rsi r12 r14 eax ebx r15d
..B2.184:                       # Preds ..B2.183
..LN4430:
        lea       (%r14,%rsi,8), %r10                           #197.34
..LN4431:
        movq      %r10, %r9                                     #197.6
..LN4432:
        andq      $31, %r9                                      #197.6
..LN4433:
        movl      %r9d, %r9d                                    #197.6
..LN4434:
        testl     %r9d, %r9d                                    #197.6
..LN4435:
        je        ..B2.187      # Prob 50%                      #197.6
..LN4436:
                                # LOE rsi r9 r10 r12 r14 eax ebx r15d
..B2.185:                       # Preds ..B2.184
..LN4437:
        testl     $7, %r9d                                      #197.6
..LN4438:
        jne       ..B2.313      # Prob 10%                      #197.6
..LN4439:
                                # LOE rsi r9 r10 r12 r14 eax ebx r15d
..B2.186:                       # Preds ..B2.185
..LN4440:
        negl      %r9d                                          #197.6
..LN4441:
        addl      $32, %r9d                                     #197.6
..LN4442:
        shrl      $3, %r9d                                      #197.6
..LN4443:
                                # LOE rsi r9 r10 r12 r14 eax ebx r15d
..B2.187:                       # Preds ..B2.186 ..B2.184
..LN4444:
        lea       16(%r9), %edx                                 #197.6
..LN4445:
        cmpl      %edx, %ebx                                    #197.6
..LN4446:
        jl        ..B2.313      # Prob 10%                      #197.6
..LN4447:
                                # LOE rsi r9 r10 r12 r14 eax ebx r15d
..B2.188:                       # Preds ..B2.187
..LN4448:
        movl      184(%rsp), %ecx                               #197.58
..LN4449:
        lea       2(%r15), %edi                                 #197.58
..LN4450:
        imull     %edi, %ecx                                    #197.58
..LN4451:
        movl      %ebx, %edx                                    #197.6
..LN4452:
        imull     224(%rsp), %edi                               #197.78
..LN4453:
        movslq    %ecx, %rcx                                    #197.47
..LN4454:
        subl      %r9d, %edx                                    #197.6
..LN4455:
        movslq    %edi, %rdi                                    #197.66
..LN4456:
        andl      $15, %edx                                     #197.6
..LN4457:
        negl      %edx                                          #197.6
..LN4458:
        xorl      %r8d, %r8d                                    #197.6
..LN4459:
        addl      %ebx, %edx                                    #197.6
..LN4460:
        lea       (%r12,%rcx,8), %r11                           #197.47
..LN4461:
        lea       (%r12,%rdi,8), %r13                           #197.66
..LN4462:
        lea       (%r11,%rsi,8), %rcx                           #197.47
..LN4463:
        lea       (%r13,%rsi,8), %rdi                           #197.66
..LN4464:
        testq     %r9, %r9                                      #197.6
..LN4465:
        jbe       ..B2.192      # Prob 15%                      #197.6
..LN4466:
                                # LOE rcx rsi rdi r8 r9 r10 r12 r14 eax edx ebx r15d
..B2.189:                       # Preds ..B2.188
..LN4467:
        vmovsd    .L_2il0floatpacket.3(%rip), %xmm0             #197.42
..LN4468:
                                # LOE rcx rsi rdi r8 r9 r10 r12 r14 eax edx ebx r15d xmm0
..B2.190:                       # Preds ..B2.190 ..B2.189
..L125:         # optimization report
                # LOOP WAS UNROLLED BY 4
                # PEELED LOOP FOR VECTORIZATION
                # VECTORIZATION SPEEDUP COEFFECIENT 6.640625
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 0.437500
..LN4469:
        vmovsd    (%rcx,%r8,8), %xmm1                           #197.47
..LN4470:
        vaddsd    (%rdi,%r8,8), %xmm1, %xmm2                    #197.66
..LN4471:
        vmulsd    %xmm2, %xmm0, %xmm3                           #197.66
..LN4472:
        vmovsd    %xmm3, (%r10,%r8,8)                           #197.34
..LN4473:
        incq      %r8                                           #197.6
..LN4474:
        cmpq      %r9, %r8                                      #197.6
..LN4475:
        jb        ..B2.190      # Prob 82%                      #197.6
..LN4476:
                                # LOE rcx rsi rdi r8 r9 r10 r12 r14 eax edx ebx r15d xmm0
..B2.192:                       # Preds ..B2.190 ..B2.188
..LN4477:
        vmovupd   .L_2il0floatpacket.4(%rip), %ymm0             #197.42
..LN4478:
        movslq    %edx, %r8                                     #197.6
..LN4479:
        .align    16,0x90
..LN4480:
                                # LOE rcx rsi rdi r8 r9 r10 r12 r14 eax edx ebx r15d ymm0
..B2.193:                       # Preds ..B2.193 ..B2.192
..L126:         # optimization report
                # LOOP WAS UNROLLED BY 4
                # LOOP WAS VECTORIZED
                # VECTORIZATION HAS UNALIGNED MEMORY REFERENCES
                # VECTORIZATION SPEEDUP COEFFECIENT 6.640625
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 0.437500
                # MAIN VECTOR TYPE: 64-bits floating point
..LN4481:
        vmovupd   (%rcx,%r9,8), %ymm1                           #197.47
..LN4482:
        vmovupd   32(%rcx,%r9,8), %ymm4                         #197.47
..LN4483:
        vmovupd   64(%rcx,%r9,8), %ymm7                         #197.47
..LN4484:
        vmovupd   96(%rcx,%r9,8), %ymm10                        #197.47
..LN4485:
        vaddpd    (%rdi,%r9,8), %ymm1, %ymm2                    #197.66
..LN4486:
        vaddpd    32(%rdi,%r9,8), %ymm4, %ymm5                  #197.66
..LN4487:
        vaddpd    64(%rdi,%r9,8), %ymm7, %ymm8                  #197.66
..LN4488:
        vaddpd    96(%rdi,%r9,8), %ymm10, %ymm11                #197.66
..LN4489:
        vmulpd    %ymm2, %ymm0, %ymm3                           #197.66
..LN4490:
        vmulpd    %ymm5, %ymm0, %ymm6                           #197.66
..LN4491:
        vmulpd    %ymm8, %ymm0, %ymm9                           #197.66
..LN4492:
        vmulpd    %ymm11, %ymm0, %ymm12                         #197.66
..LN4493:
        vmovupd   %ymm3, (%r10,%r9,8)                           #197.34
..LN4494:
        vmovupd   %ymm6, 32(%r10,%r9,8)                         #197.34
..LN4495:
        vmovupd   %ymm9, 64(%r10,%r9,8)                         #197.34
..LN4496:
        vmovupd   %ymm12, 96(%r10,%r9,8)                        #197.34
..LN4497:
        addq      $16, %r9                                      #197.6
..LN4498:
        cmpq      %r8, %r9                                      #197.6
..LN4499:
        jb        ..B2.193      # Prob 82%                      #197.6
..LN4500:
                                # LOE rcx rsi rdi r8 r9 r10 r12 r14 eax edx ebx r15d ymm0
..B2.195:                       # Preds ..B2.193 ..B2.313
..LN4501:
        lea       1(%rdx), %ecx                                 #197.6
..LN4502:
        cmpl      %ecx, %ebx                                    #197.6
..LN4503:
        jb        ..B2.359      # Prob 50%                      #197.6
..LN4504:
                                # LOE rsi r12 r14 eax edx ebx r15d
..B2.196:                       # Preds ..B2.195
..LN4505:
        movslq    %ebx, %rbx                                    #197.6
..LN4506:
        movslq    %edx, %rdx                                    #197.6
..LN4507:
        subq      %rdx, %rbx                                    #197.6
..LN4508:
        cmpq      $4, %rbx                                      #197.6
..LN4509:
        jl        ..B2.312      # Prob 10%                      #197.6
..LN4510:
                                # LOE rbx rsi r12 r14 eax edx r15d
..B2.197:                       # Preds ..B2.196
..LN4511:
        movl      224(%rsp), %edi                               #197.78
..LN4512:
        lea       2(%r15), %r8d                                 #197.58
..LN4513:
        imull     %r8d, %edi                                    #197.78
..LN4514:
        movl      %ebx, %ecx                                    #197.6
..LN4515:
        imull     184(%rsp), %r8d                               #197.58
..LN4516:
        vmovupd   .L_2il0floatpacket.9(%rip), %ymm0             #197.42
..LN4517:
        movslq    %edi, %rdi                                    #197.66
..LN4518:
        andl      $-4, %ecx                                     #197.6
..LN4519:
        movslq    %r8d, %r8                                     #197.47
..LN4520:
        lea       (%r14,%rsi,8), %r9                            #197.34
..LN4521:
        movslq    %edx, %rdx                                    #197.47
..LN4522:
        xorl      %r10d, %r10d                                  #197.6
..LN4523:
        movslq    %ecx, %rcx                                    #197.6
..LN4524:
        lea       (%r12,%rdi,8), %r11                           #197.66
..LN4525:
        lea       (%r11,%rsi,8), %r13                           #197.66
..LN4526:
        lea       (%r12,%r8,8), %r11                            #197.47
..LN4527:
        lea       (%r13,%rdx,8), %rdi                           #197.66
..LN4528:
        lea       (%r11,%rsi,8), %r13                           #197.47
..LN4529:
        lea       (%r9,%rdx,8), %r9                             #197.34
..LN4530:
        lea       (%r13,%rdx,8), %r8                            #197.47
..LN4531:
                                # LOE rcx rbx rsi rdi r8 r9 r10 r12 r14 eax edx r15d ymm0
..B2.198:                       # Preds ..B2.198 ..B2.197
..L127:         # optimization report
                # LOOP WAS VECTORIZED
                # REMAINDER LOOP FOR VECTORIZATION
                # VECTORIZATION HAS UNALIGNED MEMORY REFERENCES
                # VECTORIZATION SPEEDUP COEFFECIENT 2.679688
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 1.750000
                # MAIN VECTOR TYPE: 64-bits floating point
..LN4532:
        vmovupd   (%r8,%r10,8), %ymm1                           #197.47
..LN4533:
        vaddpd    (%rdi,%r10,8), %ymm1, %ymm2                   #197.66
..LN4534:
        vmulpd    %ymm2, %ymm0, %ymm3                           #197.66
..LN4535:
        vmovupd   %ymm3, (%r9,%r10,8)                           #197.34
..LN4536:
        addq      $4, %r10                                      #197.6
..LN4537:
        cmpq      %rcx, %r10                                    #197.6
..LN4538:
        jb        ..B2.198      # Prob 82%                      #197.6
..LN4539:
                                # LOE rcx rbx rsi rdi r8 r9 r10 r12 r14 eax edx r15d ymm0
..B2.200:                       # Preds ..B2.198 ..B2.312
..LN4540:
        cmpq      %rbx, %rcx                                    #197.6
..LN4541:
        jae       ..B2.359      # Prob 15%                      #197.6
..LN4542:
                                # LOE rcx rbx rsi r12 r14 eax edx r15d
..B2.201:                       # Preds ..B2.200
..LN4543:
        movl      224(%rsp), %edi                               #197.78
..LN4544:
        lea       2(%r15), %r8d                                 #197.58
..LN4545:
        imull     %r8d, %edi                                    #197.78
..LN4546:
        lea       (%r14,%rsi,8), %r9                            #197.34
..LN4547:
        imull     184(%rsp), %r8d                               #197.58
..LN4548:
        vmovsd    .L_2il0floatpacket.3(%rip), %xmm0             #197.42
..LN4549:
        movslq    %edi, %rdi                                    #197.66
..LN4550:
        movslq    %r8d, %r8                                     #197.47
..LN4551:
        movslq    %edx, %rdx                                    #197.47
..LN4552:
        lea       (%r12,%rdi,8), %r10                           #197.66
..LN4553:
        lea       (%r12,%r8,8), %r12                            #197.47
..LN4554:
        lea       (%r10,%rsi,8), %r11                           #197.66
..LN4555:
        lea       (%r12,%rsi,8), %r13                           #197.47
..LN4556:
        lea       (%r9,%rdx,8), %r9                             #197.34
..LN4557:
        lea       (%r11,%rdx,8), %rdi                           #197.66
..LN4558:
        lea       (%r13,%rdx,8), %rdx                           #197.47
..LN4559:
                                # LOE rdx rcx rbx rsi rdi r9 r14 eax r15d xmm0
..B2.202:                       # Preds ..B2.202 ..B2.201
..L128:         # optimization report
                # REMAINDER LOOP FOR VECTORIZATION
                # VECTORIZATION SPEEDUP COEFFECIENT 2.679688
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 1.750000
..LN4560:
        vmovsd    (%rdx,%rcx,8), %xmm1                          #197.47
..LN4561:
        vaddsd    (%rdi,%rcx,8), %xmm1, %xmm2                   #197.66
..LN4562:
        vmulsd    %xmm2, %xmm0, %xmm3                           #197.66
..LN4563:
        vmovsd    %xmm3, (%r9,%rcx,8)                           #197.34
..LN4564:
        incq      %rcx                                          #197.6
..LN4565:
        cmpq      %rbx, %rcx                                    #197.6
..LN4566:
        jb        ..B2.202      # Prob 82%                      #197.6
..LN4567:
                                # LOE rdx rcx rbx rsi rdi r9 r14 eax r15d xmm0
..B2.203:                       # Preds ..B2.202
..LN4568:
	.loc    1  166  is_stmt 1
        movl      240(%rsp), %edx                               #166.46
..LN4569:
        cmpl      %eax, %edx                                    #166.46
..LN4570:
                                # LOE rsi r14 eax r15d
..B2.204:                       # Preds ..B2.182 ..B2.203
..LN4571:
	.loc    1  198  is_stmt 1
        jge       ..B2.227      # Prob 50%                      #198.22
..LN4572:
                                # LOE rsi r14 eax r15d
..B2.205:                       # Preds ..B2.359 ..B2.204
..LN4573:
        subl      240(%rsp), %eax                               #198.6
..LN4574:
	.loc    1  72  is_stmt 1
        movq      40(%rbp), %r8                                 #72.1
..LN4575:
	.loc    1  198  is_stmt 1
        cmpl      $16, %eax                                     #198.6
..LN4576:
        jl        ..B2.308      # Prob 10%                      #198.6
..LN4577:
                                # LOE rsi r8 r14 eax r15d
..B2.206:                       # Preds ..B2.205
..LN4578:
        lea       (%r8,%rsi,8), %rdi                            #198.50
..LN4579:
        cmpl      $29, %eax                                     #198.6
..LN4580:
        jl        ..B2.310      # Prob 10%                      #198.6
..LN4581:
                                # LOE rsi rdi r8 r14 eax r15d
..B2.207:                       # Preds ..B2.206
..LN4582:
        movq      %rdi, %rbx                                    #198.6
..LN4583:
        andq      $31, %rbx                                     #198.6
..LN4584:
        movl      %ebx, %ebx                                    #198.6
..LN4585:
        testl     %ebx, %ebx                                    #198.6
..LN4586:
        je        ..B2.210      # Prob 50%                      #198.6
..LN4587:
                                # LOE rbx rsi rdi r8 r14 eax r15d
..B2.208:                       # Preds ..B2.207
..LN4588:
        testb     $7, %bl                                       #198.6
..LN4589:
        jne       ..B2.308      # Prob 10%                      #198.6
..LN4590:
                                # LOE rbx rsi rdi r8 r14 eax r15d
..B2.209:                       # Preds ..B2.208
..LN4591:
        negl      %ebx                                          #198.6
..LN4592:
        addl      $32, %ebx                                     #198.6
..LN4593:
        shrl      $3, %ebx                                      #198.6
..LN4594:
                                # LOE rbx rsi rdi r8 r14 eax r15d
..B2.210:                       # Preds ..B2.209 ..B2.207
..LN4595:
        lea       16(%rbx), %edx                                #198.6
..LN4596:
        cmpl      %edx, %eax                                    #198.6
..LN4597:
        jl        ..B2.308      # Prob 10%                      #198.6
..LN4598:
                                # LOE rbx rsi rdi r8 r14 eax r15d
..B2.211:                       # Preds ..B2.210
..LN4599:
        movl      184(%rsp), %r9d                               #198.41
..LN4600:
        movl      %eax, %ecx                                    #198.6
..LN4601:
        imull     208(%rsp), %r9d                               #198.41
..LN4602:
        subl      %ebx, %ecx                                    #198.6
..LN4603:
        movslq    %r9d, %r9                                     #198.33
..LN4604:
        andl      $15, %ecx                                     #198.6
..LN4605:
        movq      192(%rsp), %r10                               #198.33
..LN4606:
        negl      %ecx                                          #198.6
..LN4607:
        addl      %eax, %ecx                                    #198.6
..LN4608:
        xorl      %edx, %edx                                    #198.6
..LN4609:
        lea       (%r10,%r9,8), %r11                            #198.33
..LN4610:
        lea       (%r11,%rsi,8), %r10                           #198.33
..LN4611:
        lea       (%r14,%rsi,8), %r9                            #198.60
..LN4612:
        testq     %rbx, %rbx                                    #198.6
..LN4613:
        jbe       ..B2.215      # Prob 9%                       #198.6
..LN4614:
                                # LOE rdx rbx rsi rdi r8 r9 r10 r14 eax ecx r15d
..B2.213:                       # Preds ..B2.211 ..B2.213
..L129:         # optimization report
                # LOOP WAS UNROLLED BY 4
                # PEELED LOOP FOR VECTORIZATION
                # VECTORIZATION SPEEDUP COEFFECIENT 5.363281
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 0.312500
..LN4615:
        vmovsd    8(%r9,%rdx,8), %xmm0                          #198.84
..LN4616:
        vsubsd    (%r9,%rdx,8), %xmm0, %xmm1                    #198.33
..LN4617:
        vfnmadd132sd (%rdi,%rdx,8), %xmm0, %xmm1                #198.33
..LN4618:
        vmovsd    %xmm1, (%r10,%rdx,8)                          #198.33
..LN4619:
        incq      %rdx                                          #198.6
..LN4620:
        cmpq      %rbx, %rdx                                    #198.6
..LN4621:
        jb        ..B2.213      # Prob 81%                      #198.6
..LN4622:
                                # LOE rdx rbx rsi rdi r8 r9 r10 r14 eax ecx r15d
..B2.215:                       # Preds ..B2.213 ..B2.211 ..B2.310
..LN4623:
        vmovupd   .L_2il0floatpacket.7(%rip), %ymm0             #198.69
..LN4624:
        movslq    %ecx, %rdx                                    #198.6
..LN4625:
                                # LOE rdx rbx rsi rdi r8 r9 r10 r14 eax ecx r15d ymm0
..B2.216:                       # Preds ..B2.216 ..B2.215
..L130:         # optimization report
                # LOOP WAS UNROLLED BY 4
                # LOOP WAS VECTORIZED
                # VECTORIZATION HAS UNALIGNED MEMORY REFERENCES
                # VECTORIZATION SPEEDUP COEFFECIENT 5.363281
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 0.312500
                # MAIN VECTOR TYPE: 64-bits floating point
..LN4626:
        vmovupd   (%rdi,%rbx,8), %ymm3                          #198.50
..LN4627:
        vmovupd   32(%rdi,%rbx,8), %ymm6                        #198.50
..LN4628:
        vmovupd   64(%rdi,%rbx,8), %ymm9                        #198.50
..LN4629:
        vmovupd   96(%rdi,%rbx,8), %ymm12                       #198.50
..LN4630:
        vsubpd    %ymm3, %ymm0, %ymm1                           #198.73
..LN4631:
        vsubpd    %ymm6, %ymm0, %ymm4                           #198.73
..LN4632:
        vsubpd    %ymm9, %ymm0, %ymm7                           #198.73
..LN4633:
        vsubpd    %ymm12, %ymm0, %ymm10                         #198.73
..LN4634:
        vmulpd    8(%r9,%rbx,8), %ymm1, %ymm2                   #198.84
..LN4635:
        vmulpd    40(%r9,%rbx,8), %ymm4, %ymm5                  #198.84
..LN4636:
        vmulpd    72(%r9,%rbx,8), %ymm7, %ymm8                  #198.84
..LN4637:
        vmulpd    104(%r9,%rbx,8), %ymm10, %ymm11               #198.84
..LN4638:
        vfmadd132pd (%r9,%rbx,8), %ymm2, %ymm3                  #198.84
..LN4639:
        vfmadd132pd 32(%r9,%rbx,8), %ymm5, %ymm6                #198.84
..LN4640:
        vfmadd132pd 64(%r9,%rbx,8), %ymm8, %ymm9                #198.84
..LN4641:
        vfmadd132pd 96(%r9,%rbx,8), %ymm11, %ymm12              #198.84
..LN4642:
        vmovupd   %ymm3, (%r10,%rbx,8)                          #198.33
..LN4643:
        vmovupd   %ymm6, 32(%r10,%rbx,8)                        #198.33
..LN4644:
        vmovupd   %ymm9, 64(%r10,%rbx,8)                        #198.33
..LN4645:
        vmovupd   %ymm12, 96(%r10,%rbx,8)                       #198.33
..LN4646:
        addq      $16, %rbx                                     #198.6
..LN4647:
        cmpq      %rdx, %rbx                                    #198.6
..LN4648:
        jb        ..B2.216      # Prob 81%                      #198.6
..LN4649:
                                # LOE rdx rbx rsi rdi r8 r9 r10 r14 eax ecx r15d ymm0
..B2.218:                       # Preds ..B2.216 ..B2.308
..LN4650:
        lea       1(%rcx), %edx                                 #198.6
..LN4651:
        cmpl      %edx, %eax                                    #198.6
..LN4652:
        jb        ..B2.227      # Prob 50%                      #198.6
..LN4653:
                                # LOE rsi r8 r14 eax ecx r15d
..B2.219:                       # Preds ..B2.218
..LN4654:
        movslq    %eax, %rax                                    #198.6
..LN4655:
        movslq    %ecx, %rcx                                    #198.6
..LN4656:
        subq      %rcx, %rax                                    #198.6
..LN4657:
        cmpq      $4, %rax                                      #198.6
..LN4658:
        jl        ..B2.307      # Prob 10%                      #198.6
..LN4659:
                                # LOE rax rsi r8 r14 ecx r15d
..B2.220:                       # Preds ..B2.219
..LN4660:
        movl      184(%rsp), %r10d                              #198.41
..LN4661:
        movl      %eax, %ebx                                    #198.6
..LN4662:
        imull     208(%rsp), %r10d                              #198.41
..LN4663:
        andl      $-4, %ebx                                     #198.6
..LN4664:
        vmovupd   .L_2il0floatpacket.8(%rip), %ymm0             #198.69
..LN4665:
        movslq    %r10d, %r10                                   #198.33
..LN4666:
        lea       (%r8,%rsi,8), %r12                            #198.50
..LN4667:
        movq      192(%rsp), %r9                                #198.33
..LN4668:
        lea       (%r14,%rsi,8), %r13                           #198.60
..LN4669:
        movslq    %ecx, %rcx                                    #198.50
..LN4670:
        xorl      %edx, %edx                                    #198.6
..LN4671:
        movslq    %ebx, %rbx                                    #198.6
..LN4672:
        lea       (%r9,%r10,8), %rdi                            #198.33
..LN4673:
        lea       (%rdi,%rsi,8), %r11                           #198.33
..LN4674:
        lea       (%r11,%rcx,8), %r10                           #198.33
..LN4675:
        lea       (%r12,%rcx,8), %r9                            #198.50
..LN4676:
        lea       (%r13,%rcx,8), %rdi                           #198.60
..LN4677:
                                # LOE rax rdx rbx rsi rdi r8 r9 r10 r14 ecx r15d ymm0
..B2.221:                       # Preds ..B2.221 ..B2.220
..L131:         # optimization report
                # LOOP WAS VECTORIZED
                # REMAINDER LOOP FOR VECTORIZATION
                # VECTORIZATION HAS UNALIGNED MEMORY REFERENCES
                # VECTORIZATION SPEEDUP COEFFECIENT 2.587891
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 1.375000
                # MAIN VECTOR TYPE: 64-bits floating point
..LN4678:
        vmovupd   (%r9,%rdx,8), %ymm3                           #198.50
..LN4679:
        vsubpd    %ymm3, %ymm0, %ymm1                           #198.73
..LN4680:
        vmulpd    8(%rdi,%rdx,8), %ymm1, %ymm2                  #198.84
..LN4681:
        vfmadd132pd (%rdi,%rdx,8), %ymm2, %ymm3                 #198.84
..LN4682:
        vmovupd   %ymm3, (%r10,%rdx,8)                          #198.33
..LN4683:
        addq      $4, %rdx                                      #198.6
..LN4684:
        cmpq      %rbx, %rdx                                    #198.6
..LN4685:
        jb        ..B2.221      # Prob 81%                      #198.6
..LN4686:
                                # LOE rax rdx rbx rsi rdi r8 r9 r10 r14 ecx r15d ymm0
..B2.223:                       # Preds ..B2.221 ..B2.307
..LN4687:
        cmpq      %rax, %rbx                                    #198.6
..LN4688:
        jae       ..B2.227      # Prob 9%                       #198.6
..LN4689:
                                # LOE rax rbx rsi r8 r14 ecx r15d
..B2.224:                       # Preds ..B2.223
..LN4690:
        movq      192(%rsp), %r9                                #198.33
..LN4691:
        lea       (%r8,%rsi,8), %rdx                            #198.50
..LN4692:
        movl      184(%rsp), %r8d                               #198.41
..LN4693:
        lea       (%r14,%rsi,8), %rdi                           #198.60
..LN4694:
        movslq    %ecx, %rcx                                    #198.50
..LN4695:
        imull     208(%rsp), %r8d                               #198.41
..LN4696:
        movslq    %r8d, %r8                                     #198.33
..LN4697:
        lea       (%rdx,%rcx,8), %rdx                           #198.73
..LN4698:
        lea       (%rdi,%rcx,8), %rdi                           #198.84
..LN4699:
        lea       (%r9,%r8,8), %r10                             #198.33
..LN4700:
        lea       (%r10,%rsi,8), %rsi                           #198.33
..LN4701:
        lea       (%rsi,%rcx,8), %rcx                           #198.33
..LN4702:
                                # LOE rax rdx rcx rbx rdi r15d
..B2.225:                       # Preds ..B2.225 ..B2.224
..L132:         # optimization report
                # REMAINDER LOOP FOR VECTORIZATION
                # VECTORIZATION SPEEDUP COEFFECIENT 2.587891
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 1.375000
..LN4703:
        vmovsd    8(%rdi,%rbx,8), %xmm0                         #198.84
..LN4704:
        vsubsd    (%rdi,%rbx,8), %xmm0, %xmm1                   #198.33
..LN4705:
        vfnmadd132sd (%rdx,%rbx,8), %xmm0, %xmm1                #198.33
..LN4706:
        vmovsd    %xmm1, (%rcx,%rbx,8)                          #198.33
..LN4707:
        incq      %rbx                                          #198.6
..LN4708:
        cmpq      %rax, %rbx                                    #198.6
..LN4709:
        jb        ..B2.225      # Prob 81%                      #198.6
..LN4710:
                                # LOE rax rdx rcx rbx rdi r15d
..B2.227:                       # Preds ..B2.225 ..B2.359 ..B2.181 ..B2.204 ..B2.218
                                #       ..B2.223
..LN4711:
	.loc    1  87  is_stmt 1
        xorl      %edi, %edi                                    #87.3
..LN4712:
        xorl      %esi, %esi                                    #87.28
..LN4713:
        xorl      %r11d, %r11d                                  #87.28
..LN4714:
        xorl      %r8d, %r8d                                    #87.28
..LN4715:
        cmpl      $0, 224(%rsp)                                 #87.14
..LN4716:
        jle       ..B2.249      # Prob 15%                      #87.14
..LN4717:
                                # LOE rsi r8 edi r11d r15d
..B2.228:                       # Preds ..B2.227
..LN4718:
	.loc    1  91  is_stmt 1
        movl      176(%rsp), %eax                               #91.50
..LN4719:
        movl      %eax, %edx                                    #91.50
..LN4720:
        negl      %edx                                          #91.50
..LN4721:
        addl      %eax, %edx                                    #91.50
..LN4722:
	.loc    1  87  is_stmt 1
        movl      %r15d, %eax                                   #87.24
..LN4723:
        andl      $-4, %eax                                     #87.24
..LN4724:
	.loc    1  91  is_stmt 1
        vmovsd    .L_2il0floatpacket.3(%rip), %xmm2             #91.21
..LN4725:
        vmovupd   .L_2il0floatpacket.4(%rip), %ymm1             #91.21
..LN4726:
	.loc    1  87  is_stmt 1
        movl      %eax, (%rsp)                                  #87.24
..LN4727:
        movq      144(%rsp), %rcx                               #87.24
..LN4728:
                                # LOE rcx rsi r8 edx edi r11d r15d xmm2 ymm1
..B2.229:                       # Preds ..B2.247 ..B2.228
..L133:         # optimization report
                # %s was not vectorized: inner loop was already vectorized
..LN4729:
        testl     %r15d, %r15d                                  #87.35
..LN4730:
        jle       ..B2.247      # Prob 50%                      #87.35
..LN4731:
                                # LOE rcx rsi r8 edx edi r11d r15d xmm2 ymm1
..B2.230:                       # Preds ..B2.229
..LN4732:
        cmpq      $4, %rcx                                      #87.24
..LN4733:
        jl        ..B2.303      # Prob 10%                      #87.24
..LN4734:
                                # LOE rcx rsi r8 edx edi r11d r15d xmm2 ymm1
..B2.231:                       # Preds ..B2.230
..LN4735:
	.loc    1  91  is_stmt 1
        movq      192(%rsp), %rax                               #91.26
..LN4736:
        lea       (%rax,%r8,8), %r9                             #91.26
..LN4737:
	.loc    1  87  is_stmt 1
        cmpq      $600, %rcx                                    #87.24
..LN4738:
        jl        ..B2.305      # Prob 10%                      #87.24
..LN4739:
                                # LOE rcx rsi r8 r9 edx edi r11d r15d xmm2 ymm1
..B2.232:                       # Preds ..B2.231
..LN4740:
        movq      %r9, %r12                                     #87.24
..LN4741:
        andq      $31, %r12                                     #87.24
..LN4742:
        testl     %r12d, %r12d                                  #87.24
..LN4743:
        je        ..B2.235      # Prob 50%                      #87.24
..LN4744:
                                # LOE rcx rsi r8 r9 edx edi r11d r12d r15d xmm2 ymm1
..B2.233:                       # Preds ..B2.232
..LN4745:
        testl     $7, %r12d                                     #87.24
..LN4746:
        jne       ..B2.303      # Prob 10%                      #87.24
..LN4747:
                                # LOE rcx rsi r8 r9 edx edi r11d r12d r15d xmm2 ymm1
..B2.234:                       # Preds ..B2.233
..LN4748:
        negl      %r12d                                         #87.24
..LN4749:
        addl      $32, %r12d                                    #87.24
..LN4750:
        shrl      $3, %r12d                                     #87.24
..LN4751:
                                # LOE rcx rsi r8 r9 edx edi r11d r12d r15d xmm2 ymm1
..B2.235:                       # Preds ..B2.234 ..B2.232
..LN4752:
        movl      %r12d, %r14d                                  #87.24
..LN4753:
        lea       4(%r14), %rax                                 #87.24
..LN4754:
        cmpq      %rax, %rcx                                    #87.24
..LN4755:
        jl        ..B2.303      # Prob 10%                      #87.24
..LN4756:
                                # LOE rcx rsi r8 r9 r14 edx edi r11d r12d r15d xmm2 ymm1
..B2.236:                       # Preds ..B2.235
..LN4757:
        movl      %r15d, %ebx                                   #87.24
..LN4758:
        xorl      %r13d, %r13d                                  #87.24
..LN4759:
        subl      %r12d, %ebx                                   #87.24
..LN4760:
	.loc    1  91  is_stmt 1
        lea       (%rdx,%r11), %r10d                            #91.50
..LN4761:
        movq      216(%rsp), %rax                               #91.43
..LN4762:
	.loc    1  87  is_stmt 1
        andl      $3, %ebx                                      #87.24
..LN4763:
        negl      %ebx                                          #87.24
..LN4764:
        addl      %r15d, %ebx                                   #87.24
..LN4765:
	.loc    1  91  is_stmt 1
        lea       (%rax,%rsi,8), %rax                           #91.43
..LN4766:
	.loc    1  87  is_stmt 1
        testq     %r14, %r14                                    #87.24
..LN4767:
        jbe       ..B2.240      # Prob 10%                      #87.24
..LN4768:
                                # LOE rax rcx rsi r8 r9 r13 r14 edx ebx edi r10d r11d r12d r15d xmm2 ymm1
..B2.237:                       # Preds ..B2.236
..LN4769:
        movl      %edi, 8(%rsp)                                 #
..LN4770:
        movl      %r15d, 232(%rsp)                              #
..LN4771:
        movq      48(%rbp), %rcx                                #
..LN4772:
        movq      128(%rsp), %rdi                               #
..LN4773:
        .align    16,0x90
..LN4774:
                                # LOE rax rcx rsi rdi r8 r9 r13 r14 edx ebx r10d r11d r12d xmm2 ymm1
..B2.238:                       # Preds ..B2.237 ..B2.238
..L134:         # optimization report
                # LOOP WAS UNROLLED BY 1
                # PEELED LOOP FOR VECTORIZATION
                # VECTORIZATION SPEEDUP COEFFECIENT 3.580078
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 0.171875
..LN4775:
	.loc    1  91  is_stmt 1
        vmovsd    (%r9,%r13,8), %xmm0                           #91.26
..LN4776:
        vmulsd    (%rax,%r13,8), %xmm2, %xmm3                   #91.33
..LN4777:
        vaddsd    8(%r9,%r13,8), %xmm0, %xmm4                   #91.33
..LN4778:
        vmulsd    %xmm4, %xmm3, %xmm7                           #91.43
..LN4779:
        lea       (%r13,%r13,2), %r15d                          #91.50
..LN4780:
        addl      %r10d, %r15d                                  #91.50
..LN4781:
	.loc    1  87  is_stmt 1
        incq      %r13                                          #87.24
..LN4782:
	.loc    1  91  is_stmt 1
        movslq    %r15d, %r15                                   #91.50
..LN4783:
        vmulsd    (%rcx,%r15,8), %xmm7, %xmm5                   #91.50
..LN4784:
        vmulsd    8(%rcx,%r15,8), %xmm7, %xmm6                  #91.50
..LN4785:
        vmulsd    16(%rcx,%r15,8), %xmm7, %xmm8                 #91.50
..LN4786:
        vmovsd    %xmm5, (%rdi,%r15,8)                          #91.7
..LN4787:
        vmovsd    %xmm6, 8(%rdi,%r15,8)                         #91.7
..LN4788:
        vmovsd    %xmm8, 16(%rdi,%r15,8)                        #91.7
..LN4789:
	.loc    1  87  is_stmt 1
        cmpq      %r14, %r13                                    #87.24
..LN4790:
        jb        ..B2.238      # Prob 82%                      #87.24
..LN4791:
                                # LOE rax rcx rsi rdi r8 r9 r13 r14 edx ebx r10d r11d r12d xmm2 ymm1
..B2.239:                       # Preds ..B2.238
..LN4792:
        movl      8(%rsp), %edi                                 #
..LN4793:
        movq      144(%rsp), %rcx                               #
..LN4794:
        movl      232(%rsp), %r15d                              #
..LN4795:
                                # LOE rax rcx rsi r8 r9 edx ebx edi r10d r11d r12d r15d xmm2 ymm1
..B2.240:                       # Preds ..B2.236 ..B2.239 ..B2.305
..LN4796:
        movl      %edi, 8(%rsp)                                 #87.24
..LN4797:
        lea       (%r12,%r12,2), %r13d                          #87.24
..LN4798:
        movl      %r12d, %r14d                                  #87.24
..LN4799:
        movl      %r15d, 232(%rsp)                              #87.24
..LN4800:
        movq      48(%rbp), %rcx                                #87.24
..LN4801:
        movq      128(%rsp), %rdi                               #87.24
..LN4802:
                                # LOE rax rcx rsi rdi r8 r9 r14 edx ebx r10d r11d r12d r13d xmm2 ymm1
..B2.241:                       # Preds ..B2.241 ..B2.240
..L136:         # optimization report
                # LOOP WAS COMPLETELY UNROLLED BY 3
..L135:         # optimization report
                # LOOP WAS UNROLLED BY 1
                # LOOP WAS VECTORIZED
                # VECTORIZATION HAS UNALIGNED MEMORY REFERENCES
                # VECTORIZATION SPEEDUP COEFFECIENT 3.580078
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 0.171875
                # MAIN VECTOR TYPE: 64-bits floating point
..LN4803:
	.loc    1  91  is_stmt 1
        lea       (%r10,%r13), %r15d                            #91.50
..LN4804:
        vmovupd   (%r9,%r14,8), %ymm3                           #91.26
..LN4805:
	.loc    1  87  is_stmt 1
        addl      $4, %r12d                                     #87.24
..LN4806:
	.loc    1  91  is_stmt 1
        vmulpd    (%rax,%r14,8), %ymm1, %ymm4                   #91.33
..LN4807:
        vaddpd    8(%r9,%r14,8), %ymm3, %ymm5                   #91.33
..LN4808:
        movslq    %r15d, %r15                                   #91.50
..LN4809:
	.loc    1  87  is_stmt 1
        addq      $4, %r14                                      #87.24
..LN4810:
	.loc    1  91  is_stmt 1
        vmulpd    %ymm5, %ymm4, %ymm0                           #91.43
..LN4811:
	.loc    1  87  is_stmt 1
        addl      $12, %r13d                                    #87.24
..LN4812:
	.loc    1  91  is_stmt 1
        vmovups   (%rcx,%r15,8), %xmm6                          #91.50
..LN4813:
        vmovups   16(%rcx,%r15,8), %xmm7                        #91.50
..LN4814:
        vmovups   32(%rcx,%r15,8), %xmm8                        #91.50
..LN4815:
	.loc    1  87  is_stmt 1
        cmpl      %ebx, %r12d                                   #87.24
..LN4816:
	.loc    1  91  is_stmt 1
        vinsertf128 $1, 48(%rcx,%r15,8), %ymm6, %ymm9           #91.50
..LN4817:
        vinsertf128 $1, 64(%rcx,%r15,8), %ymm7, %ymm10          #91.50
..LN4818:
        vinsertf128 $1, 80(%rcx,%r15,8), %ymm8, %ymm11          #91.50
..LN4819:
        vblendpd  $10, %ymm10, %ymm9, %ymm12                    #91.50
..LN4820:
        vshufpd   $5, %ymm11, %ymm9, %ymm15                     #91.50
..LN4821:
        vblendpd  $10, %ymm11, %ymm10, %ymm3                    #91.50
..LN4822:
        vmulpd    %ymm12, %ymm0, %ymm13                         #91.50
..LN4823:
        vmulpd    %ymm15, %ymm0, %ymm12                         #91.50
..LN4824:
        vmulpd    %ymm3, %ymm0, %ymm0                           #91.50
..LN4825:
        vextractf128 $1, %ymm13, %xmm14                         #91.7
..LN4826:
        vmovsd    %xmm13, (%rdi,%r15,8)                         #91.7
..LN4827:
        vmovhpd   %xmm13, 24(%rdi,%r15,8)                       #91.7
..LN4828:
        vextractf128 $1, %ymm12, %xmm13                         #91.7
..LN4829:
        vextractf128 $1, %ymm0, %xmm4                           #91.7
..LN4830:
        vmovsd    %xmm14, 48(%rdi,%r15,8)                       #91.7
..LN4831:
        vmovhpd   %xmm14, 72(%rdi,%r15,8)                       #91.7
..LN4832:
        vmovsd    %xmm12, 8(%rdi,%r15,8)                        #91.7
..LN4833:
        vmovhpd   %xmm12, 32(%rdi,%r15,8)                       #91.7
..LN4834:
        vmovsd    %xmm13, 56(%rdi,%r15,8)                       #91.7
..LN4835:
        vmovhpd   %xmm13, 80(%rdi,%r15,8)                       #91.7
..LN4836:
        vmovsd    %xmm0, 16(%rdi,%r15,8)                        #91.7
..LN4837:
        vmovhpd   %xmm0, 40(%rdi,%r15,8)                        #91.7
..LN4838:
        vmovsd    %xmm4, 64(%rdi,%r15,8)                        #91.7
..LN4839:
        vmovhpd   %xmm4, 88(%rdi,%r15,8)                        #91.7
..LN4840:
	.loc    1  87  is_stmt 1
        jb        ..B2.241      # Prob 82%                      #87.24
..LN4841:
                                # LOE rax rcx rsi rdi r8 r9 r14 edx ebx r10d r11d r12d r13d xmm2 ymm1
..B2.242:                       # Preds ..B2.241
..LN4842:
        movl      8(%rsp), %edi                                 #
..LN4843:
        movq      144(%rsp), %rcx                               #
..LN4844:
        movl      232(%rsp), %r15d                              #
..LN4845:
                                # LOE rcx rsi r8 edx ebx edi r11d r15d xmm2 ymm1
..B2.243:                       # Preds ..B2.242 ..B2.303
..LN4846:
        movslq    %ebx, %rbx                                    #87.24
..LN4847:
        cmpq      %rcx, %rbx                                    #87.24
..LN4848:
        jae       ..B2.247      # Prob 10%                      #87.24
..LN4849:
                                # LOE rcx rbx rsi r8 edx edi r11d r15d xmm2 ymm1
..B2.244:                       # Preds ..B2.243
..LN4850:
	.loc    1  91  is_stmt 1
        movq      192(%rsp), %r13                               #91.26
..LN4851:
        movq      216(%rsp), %rax                               #91.43
..LN4852:
        movq      128(%rsp), %r9                                #91.50
..LN4853:
        movq      48(%rbp), %r10                                #91.50
..LN4854:
        lea       (%r13,%r8,8), %r13                            #91.26
..LN4855:
        lea       (%rax,%rsi,8), %r12                           #91.43
..LN4856:
        lea       (%rdx,%r11), %eax                             #91.50
..LN4857:
        .align    16,0x90
..LN4858:
                                # LOE rcx rbx rsi r8 r9 r10 r12 r13 eax edx edi r11d r15d xmm2 ymm1
..B2.245:                       # Preds ..B2.245 ..B2.244
..L137:         # optimization report
                # LOOP WAS UNROLLED BY 1
                # REMAINDER LOOP FOR VECTORIZATION
                # VECTORIZATION SPEEDUP COEFFECIENT 3.580078
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 0.171875
..LN4859:
        vmovsd    (%r13,%rbx,8), %xmm0                          #91.26
..LN4860:
        vmulsd    (%r12,%rbx,8), %xmm2, %xmm3                   #91.33
..LN4861:
        vaddsd    8(%r13,%rbx,8), %xmm0, %xmm4                  #91.33
..LN4862:
        vmulsd    %xmm4, %xmm3, %xmm7                           #91.43
..LN4863:
        lea       (%rbx,%rbx,2), %r14d                          #91.50
..LN4864:
        addl      %eax, %r14d                                   #91.50
..LN4865:
	.loc    1  87  is_stmt 1
        incq      %rbx                                          #87.24
..LN4866:
	.loc    1  91  is_stmt 1
        movslq    %r14d, %r14                                   #91.50
..LN4867:
        vmulsd    (%r10,%r14,8), %xmm7, %xmm5                   #91.50
..LN4868:
        vmulsd    8(%r10,%r14,8), %xmm7, %xmm6                  #91.50
..LN4869:
        vmulsd    16(%r10,%r14,8), %xmm7, %xmm8                 #91.50
..LN4870:
        vmovsd    %xmm5, (%r9,%r14,8)                           #91.7
..LN4871:
        vmovsd    %xmm6, 8(%r9,%r14,8)                          #91.7
..LN4872:
        vmovsd    %xmm8, 16(%r9,%r14,8)                         #91.7
..LN4873:
	.loc    1  87  is_stmt 1
        cmpq      %rcx, %rbx                                    #87.24
..LN4874:
        jb        ..B2.245      # Prob 82%                      #87.24
..LN4875:
                                # LOE rcx rbx rsi r8 r9 r10 r12 r13 eax edx edi r11d r15d xmm2 ymm1
..B2.247:                       # Preds ..B2.245 ..B2.229 ..B2.243
..LN4876:
        incl      %edi                                          #87.3
..LN4877:
        addq      %rcx, %rsi                                    #87.3
..LN4878:
        addl      176(%rsp), %r11d                              #87.3
..LN4879:
        addq      200(%rsp), %r8                                #87.3
..LN4880:
        cmpl      224(%rsp), %edi                               #87.3
..LN4881:
        jb        ..B2.229      # Prob 82%                      #87.3
..LN4882:
                                # LOE rcx rsi r8 edx edi r11d r15d xmm2 ymm1
..B2.249:                       # Preds ..B2.247 ..B2.227
..LN4883:
	.loc    1  95  is_stmt 1
        xorl      %r11d, %r11d                                  #95.3
..LN4884:
        xorl      %r12d, %r12d                                  #95.27
..LN4885:
        xorl      %r10d, %r10d                                  #95.27
..LN4886:
        cmpl      $0, 184(%rsp)                                 #95.14
..LN4887:
        jle       ..B2.271      # Prob 15%                      #95.14
..LN4888:
                                # LOE r12 r10d r11d r15d
..B2.250:                       # Preds ..B2.249
..LN4889:
	.loc    1  98  is_stmt 1
        movq      144(%rsp), %rdx                               #98.33
..LN4890:
        movq      192(%rsp), %r9                                #98.33
..LN4891:
        movl      176(%rsp), %eax                               #98.52
..LN4892:
        movl      %eax, %r13d                                   #98.52
..LN4893:
        negl      %r13d                                         #98.52
..LN4894:
	.loc    1  95  is_stmt 1
        lea       1(%rdx), %r8                                  #95.23
..LN4895:
	.loc    1  98  is_stmt 1
        addl      %eax, %r13d                                   #98.52
..LN4896:
        lea       (%r9,%rdx,8), %r9                             #98.33
..LN4897:
	.loc    1  95  is_stmt 1
        movl      %r8d, %edx                                    #95.23
..LN4898:
        movl      %edx, %eax                                    #95.23
..LN4899:
        andl      $-4, %eax                                     #95.23
..LN4900:
	.loc    1  98  is_stmt 1
        vmovsd    .L_2il0floatpacket.3(%rip), %xmm2             #98.21
..LN4901:
        vmovupd   .L_2il0floatpacket.4(%rip), %ymm1             #98.21
..LN4902:
	.loc    1  72  is_stmt 1
        movq      56(%rbp), %rcx                                #72.1
..LN4903:
	.loc    1  95  is_stmt 1
        movl      %eax, (%rsp)                                  #95.23
..LN4904:
        movl      %edx, 32(%rsp)                                #95.23
..LN4905:
        movl      %r15d, 232(%rsp)                              #95.23
..LN4906:
                                # LOE r8 r9 r12 r10d r11d r13d xmm2 ymm1
..B2.251:                       # Preds ..B2.269 ..B2.250
..L138:         # optimization report
                # %s was not vectorized: inner loop was already vectorized
..LN4907:
        cmpl      $0, 208(%rsp)                                 #95.34
..LN4908:
        jle       ..B2.269      # Prob 50%                      #95.34
..LN4909:
                                # LOE r8 r9 r12 r10d r11d r13d xmm2 ymm1
..B2.252:                       # Preds ..B2.251
..LN4910:
        cmpq      $4, %r8                                       #95.23
..LN4911:
        jl        ..B2.299      # Prob 10%                      #95.23
..LN4912:
                                # LOE r8 r9 r12 r10d r11d r13d xmm2 ymm1
..B2.253:                       # Preds ..B2.252
..LN4913:
	.loc    1  98  is_stmt 1
        movq      136(%rsp), %rax                               #98.45
..LN4914:
        lea       (%rax,%r12,8), %rcx                           #98.45
..LN4915:
	.loc    1  95  is_stmt 1
        cmpq      $600, %r8                                     #95.23
..LN4916:
        jl        ..B2.301      # Prob 10%                      #95.23
..LN4917:
                                # LOE rcx r8 r9 r12 r10d r11d r13d xmm2 ymm1
..B2.254:                       # Preds ..B2.253
..LN4918:
        movq      %rcx, %rdi                                    #95.23
..LN4919:
        andq      $31, %rdi                                     #95.23
..LN4920:
        testl     %edi, %edi                                    #95.23
..LN4921:
        je        ..B2.257      # Prob 50%                      #95.23
..LN4922:
                                # LOE rcx r8 r9 r12 edi r10d r11d r13d xmm2 ymm1
..B2.255:                       # Preds ..B2.254
..LN4923:
        testl     $7, %edi                                      #95.23
..LN4924:
        jne       ..B2.299      # Prob 10%                      #95.23
..LN4925:
                                # LOE rcx r8 r9 r12 edi r10d r11d r13d xmm2 ymm1
..B2.256:                       # Preds ..B2.255
..LN4926:
        negl      %edi                                          #95.23
..LN4927:
        addl      $32, %edi                                     #95.23
..LN4928:
        shrl      $3, %edi                                      #95.23
..LN4929:
                                # LOE rcx r8 r9 r12 edi r10d r11d r13d xmm2 ymm1
..B2.257:                       # Preds ..B2.256 ..B2.254
..LN4930:
        movl      %edi, %r15d                                   #95.23
..LN4931:
        lea       4(%r15), %rax                                 #95.23
..LN4932:
        cmpq      %rax, %r8                                     #95.23
..LN4933:
        jl        ..B2.299      # Prob 10%                      #95.23
..LN4934:
                                # LOE rcx r8 r9 r12 r15 edi r10d r11d r13d xmm2 ymm1
..B2.258:                       # Preds ..B2.257
..LN4935:
        movl      32(%rsp), %r14d                               #95.23
..LN4936:
        movl      %r14d, %edx                                   #95.23
..LN4937:
        subl      %edi, %edx                                    #95.23
..LN4938:
	.loc    1  98  is_stmt 1
        lea       (%r9,%r12,8), %rbx                            #98.33
..LN4939:
        movq      192(%rsp), %rax                               #98.26
..LN4940:
	.loc    1  95  is_stmt 1
        andl      $3, %edx                                      #95.23
..LN4941:
        negl      %edx                                          #95.23
..LN4942:
	.loc    1  98  is_stmt 1
        lea       (%r13,%r10), %esi                             #98.52
..LN4943:
	.loc    1  95  is_stmt 1
        addl      %r14d, %edx                                   #95.23
..LN4944:
        xorl      %r14d, %r14d                                  #95.23
..LN4945:
	.loc    1  98  is_stmt 1
        lea       (%rax,%r12,8), %rax                           #98.26
..LN4946:
	.loc    1  95  is_stmt 1
        testq     %r15, %r15                                    #95.23
..LN4947:
        jbe       ..B2.262      # Prob 10%                      #95.23
..LN4948:
                                # LOE rax rcx rbx r8 r9 r12 r14 r15 edx esi edi r10d r11d r13d xmm2 ymm1
..B2.259:                       # Preds ..B2.258
..LN4949:
        movl      %r10d, 16(%rsp)                               #
..LN4950:
        movl      %r11d, 24(%rsp)                               #
..LN4951:
        movq      %r12, 8(%rsp)                                 #
..LN4952:
        movq      56(%rbp), %r10                                #
..LN4953:
        movq      120(%rsp), %r11                               #
..LN4954:
        .align    16,0x90
..LN4955:
                                # LOE rax rcx rbx r8 r9 r10 r11 r14 r15 edx esi edi r13d xmm2 ymm1
..B2.260:                       # Preds ..B2.259 ..B2.260
..L139:         # optimization report
                # LOOP WAS UNROLLED BY 1
                # PEELED LOOP FOR VECTORIZATION
                # VECTORIZATION SPEEDUP COEFFECIENT 3.664062
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 0.203125
..LN4956:
	.loc    1  98  is_stmt 1
        vmovsd    (%rax,%r14,8), %xmm0                          #98.26
..LN4957:
        vaddsd    8(%rbx,%r14,8), %xmm0, %xmm3                  #98.33
..LN4958:
        vmulsd    %xmm3, %xmm2, %xmm4                           #98.33
..LN4959:
        vmulsd    (%rcx,%r14,8), %xmm4, %xmm7                   #98.45
..LN4960:
        lea       (%r14,%r14,2), %r12d                          #98.52
..LN4961:
        addl      %esi, %r12d                                   #98.7
..LN4962:
	.loc    1  95  is_stmt 1
        incq      %r14                                          #95.23
..LN4963:
	.loc    1  98  is_stmt 1
        movslq    %r12d, %r12                                   #98.52
..LN4964:
        vmulsd    (%r10,%r12,8), %xmm7, %xmm5                   #98.52
..LN4965:
        vmulsd    8(%r10,%r12,8), %xmm7, %xmm6                  #98.52
..LN4966:
        vmulsd    16(%r10,%r12,8), %xmm7, %xmm8                 #98.52
..LN4967:
        vmovsd    %xmm5, (%r11,%r12,8)                          #98.7
..LN4968:
        vmovsd    %xmm6, 8(%r11,%r12,8)                         #98.7
..LN4969:
        vmovsd    %xmm8, 16(%r11,%r12,8)                        #98.7
..LN4970:
	.loc    1  95  is_stmt 1
        cmpq      %r15, %r14                                    #95.23
..LN4971:
        jb        ..B2.260      # Prob 82%                      #95.23
..LN4972:
                                # LOE rax rcx rbx r8 r9 r10 r11 r14 r15 edx esi edi r13d xmm2 ymm1
..B2.261:                       # Preds ..B2.260
..LN4973:
        movq      8(%rsp), %r12                                 #
..LN4974:
        movl      16(%rsp), %r10d                               #
..LN4975:
        movl      24(%rsp), %r11d                               #
..LN4976:
                                # LOE rax rcx rbx r8 r9 r12 edx esi edi r10d r11d r13d xmm2 ymm1
..B2.262:                       # Preds ..B2.258 ..B2.261 ..B2.301
..LN4977:
        movl      %r10d, 16(%rsp)                               #95.23
..LN4978:
        lea       (%rdi,%rdi,2), %r14d                          #95.23
..LN4979:
        movl      %r11d, 24(%rsp)                               #95.23
..LN4980:
        movl      %edi, %r15d                                   #95.23
..LN4981:
        movq      %r12, 8(%rsp)                                 #95.23
..LN4982:
        movq      56(%rbp), %r10                                #95.23
..LN4983:
        movq      120(%rsp), %r11                               #95.23
..LN4984:
                                # LOE rax rcx rbx r8 r9 r10 r11 r15 edx esi edi r13d r14d xmm2 ymm1
..B2.263:                       # Preds ..B2.263 ..B2.262
..L141:         # optimization report
                # LOOP WAS COMPLETELY UNROLLED BY 3
..L140:         # optimization report
                # LOOP WAS UNROLLED BY 1
                # LOOP WAS VECTORIZED
                # VECTORIZATION HAS UNALIGNED MEMORY REFERENCES
                # VECTORIZATION SPEEDUP COEFFECIENT 3.664062
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 0.203125
                # MAIN VECTOR TYPE: 64-bits floating point
..LN4985:
	.loc    1  98  is_stmt 1
        lea       (%rsi,%r14), %r12d                            #98.7
..LN4986:
        vmovupd   (%rax,%r15,8), %ymm3                          #98.26
..LN4987:
	.loc    1  95  is_stmt 1
        addl      $4, %edi                                      #95.23
..LN4988:
	.loc    1  98  is_stmt 1
        vaddpd    8(%rbx,%r15,8), %ymm3, %ymm4                  #98.33
..LN4989:
	.loc    1  95  is_stmt 1
        addl      $12, %r14d                                    #95.23
..LN4990:
	.loc    1  98  is_stmt 1
        vmulpd    %ymm4, %ymm1, %ymm5                           #98.33
..LN4991:
        movslq    %r12d, %r12                                   #98.52
..LN4992:
        vmulpd    (%rcx,%r15,8), %ymm5, %ymm0                   #98.45
..LN4993:
	.loc    1  95  is_stmt 1
        addq      $4, %r15                                      #95.23
..LN4994:
	.loc    1  98  is_stmt 1
        vmovups   (%r10,%r12,8), %xmm6                          #98.52
..LN4995:
        vmovups   16(%r10,%r12,8), %xmm7                        #98.52
..LN4996:
        vmovups   32(%r10,%r12,8), %xmm8                        #98.52
..LN4997:
	.loc    1  95  is_stmt 1
        cmpl      %edx, %edi                                    #95.23
..LN4998:
	.loc    1  98  is_stmt 1
        vinsertf128 $1, 48(%r10,%r12,8), %ymm6, %ymm9           #98.52
..LN4999:
        vinsertf128 $1, 64(%r10,%r12,8), %ymm7, %ymm10          #98.52
..LN5000:
        vinsertf128 $1, 80(%r10,%r12,8), %ymm8, %ymm11          #98.52
..LN5001:
        vblendpd  $10, %ymm10, %ymm9, %ymm12                    #98.52
..LN5002:
        vshufpd   $5, %ymm11, %ymm9, %ymm15                     #98.52
..LN5003:
        vblendpd  $10, %ymm11, %ymm10, %ymm3                    #98.52
..LN5004:
        vmulpd    %ymm12, %ymm0, %ymm13                         #98.52
..LN5005:
        vmulpd    %ymm15, %ymm0, %ymm12                         #98.52
..LN5006:
        vmulpd    %ymm3, %ymm0, %ymm0                           #98.52
..LN5007:
        vextractf128 $1, %ymm13, %xmm14                         #98.7
..LN5008:
        vmovsd    %xmm13, (%r11,%r12,8)                         #98.7
..LN5009:
        vmovhpd   %xmm13, 24(%r11,%r12,8)                       #98.7
..LN5010:
        vextractf128 $1, %ymm12, %xmm13                         #98.7
..LN5011:
        vextractf128 $1, %ymm0, %xmm4                           #98.7
..LN5012:
        vmovsd    %xmm14, 48(%r11,%r12,8)                       #98.7
..LN5013:
        vmovhpd   %xmm14, 72(%r11,%r12,8)                       #98.7
..LN5014:
        vmovsd    %xmm12, 8(%r11,%r12,8)                        #98.7
..LN5015:
        vmovhpd   %xmm12, 32(%r11,%r12,8)                       #98.7
..LN5016:
        vmovsd    %xmm13, 56(%r11,%r12,8)                       #98.7
..LN5017:
        vmovhpd   %xmm13, 80(%r11,%r12,8)                       #98.7
..LN5018:
        vmovsd    %xmm0, 16(%r11,%r12,8)                        #98.7
..LN5019:
        vmovhpd   %xmm0, 40(%r11,%r12,8)                        #98.7
..LN5020:
        vmovsd    %xmm4, 64(%r11,%r12,8)                        #98.7
..LN5021:
        vmovhpd   %xmm4, 88(%r11,%r12,8)                        #98.7
..LN5022:
	.loc    1  95  is_stmt 1
        jb        ..B2.263      # Prob 82%                      #95.23
..LN5023:
                                # LOE rax rcx rbx r8 r9 r10 r11 r15 edx esi edi r13d r14d xmm2 ymm1
..B2.264:                       # Preds ..B2.263
..LN5024:
        movq      8(%rsp), %r12                                 #
..LN5025:
        movl      16(%rsp), %r10d                               #
..LN5026:
        movl      24(%rsp), %r11d                               #
..LN5027:
                                # LOE r8 r9 r12 edx r10d r11d r13d xmm2 ymm1
..B2.265:                       # Preds ..B2.264 ..B2.299
..LN5028:
        movslq    %edx, %rdx                                    #95.23
..LN5029:
        cmpq      %r8, %rdx                                     #95.23
..LN5030:
        jae       ..B2.269      # Prob 10%                      #95.23
..LN5031:
                                # LOE rdx r8 r9 r12 r10d r11d r13d xmm2 ymm1
..B2.266:                       # Preds ..B2.265
..LN5032:
	.loc    1  98  is_stmt 1
        movq      192(%rsp), %r14                               #98.26
..LN5033:
        lea       (%r9,%r12,8), %rsi                            #98.33
..LN5034:
        movq      136(%rsp), %rax                               #98.45
..LN5035:
        movq      120(%rsp), %rbx                               #98.52
..LN5036:
        movq      56(%rbp), %rcx                                #98.52
..LN5037:
        lea       (%r14,%r12,8), %r14                           #98.26
..LN5038:
        lea       (%rax,%r12,8), %rdi                           #98.45
..LN5039:
        lea       (%r13,%r10), %eax                             #98.52
..LN5040:
        .align    16,0x90
..LN5041:
                                # LOE rdx rcx rbx rsi rdi r8 r9 r12 r14 eax r10d r11d r13d xmm2 ymm1
..B2.267:                       # Preds ..B2.267 ..B2.266
..L142:         # optimization report
                # LOOP WAS UNROLLED BY 1
                # REMAINDER LOOP FOR VECTORIZATION
                # VECTORIZATION SPEEDUP COEFFECIENT 3.664062
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 0.203125
..LN5042:
        vmovsd    (%r14,%rdx,8), %xmm0                          #98.26
..LN5043:
        vaddsd    8(%rsi,%rdx,8), %xmm0, %xmm3                  #98.33
..LN5044:
        vmulsd    %xmm3, %xmm2, %xmm4                           #98.33
..LN5045:
        vmulsd    (%rdi,%rdx,8), %xmm4, %xmm7                   #98.45
..LN5046:
        lea       (%rdx,%rdx,2), %r15d                          #98.52
..LN5047:
        addl      %eax, %r15d                                   #98.7
..LN5048:
	.loc    1  95  is_stmt 1
        incq      %rdx                                          #95.23
..LN5049:
	.loc    1  98  is_stmt 1
        movslq    %r15d, %r15                                   #98.52
..LN5050:
        vmulsd    (%rcx,%r15,8), %xmm7, %xmm5                   #98.52
..LN5051:
        vmulsd    8(%rcx,%r15,8), %xmm7, %xmm6                  #98.52
..LN5052:
        vmulsd    16(%rcx,%r15,8), %xmm7, %xmm8                 #98.52
..LN5053:
        vmovsd    %xmm5, (%rbx,%r15,8)                          #98.7
..LN5054:
        vmovsd    %xmm6, 8(%rbx,%r15,8)                         #98.7
..LN5055:
        vmovsd    %xmm8, 16(%rbx,%r15,8)                        #98.7
..LN5056:
	.loc    1  95  is_stmt 1
        cmpq      %r8, %rdx                                     #95.23
..LN5057:
        jb        ..B2.267      # Prob 82%                      #95.23
..LN5058:
                                # LOE rdx rcx rbx rsi rdi r8 r9 r12 r14 eax r10d r11d r13d xmm2 ymm1
..B2.269:                       # Preds ..B2.267 ..B2.251 ..B2.265
..LN5059:
        movl      176(%rsp), %eax                               #95.3
..LN5060:
        incl      %r11d                                         #95.3
..LN5061:
        addq      200(%rsp), %r12                               #95.3
..LN5062:
        lea       3(%r10,%rax), %r10d                           #95.3
..LN5063:
        cmpl      184(%rsp), %r11d                              #95.3
..LN5064:
        jb        ..B2.251      # Prob 82%                      #95.3
..LN5065:
                                # LOE r8 r9 r12 r10d r11d r13d xmm2 ymm1
..B2.270:                       # Preds ..B2.269
..LN5066:
        movl      232(%rsp), %r15d                              #
..LN5067:
        cmpl      $0, 184(%rsp)                                 #95.14
..LN5068:
                                # LOE r15d
..B2.271:                       # Preds ..B2.249 ..B2.270
..LN5069:
	.loc    1  103  is_stmt 1
        movl      $0, %esi                                      #103.3
..LN5070:
        movl      %esi, %edi                                    #103.27
..LN5071:
        movl      %edi, %r8d                                    #103.27
..LN5072:
        jle       ..B2.290      # Prob 15%                      #103.14
..LN5073:
                                # LOE esi edi r8d r15d
..B2.272:                       # Preds ..B2.271
..L143:         # optimization report
                # %s was not vectorized: inner loop was already vectorized
..LN5074:
        testl     %r15d, %r15d                                  #103.34
..LN5075:
        jg        ..B2.278      # Prob 50%                      #103.34
..LN5076:
                                # LOE esi edi r8d r15d
..B2.273:                       # Preds ..B2.297 ..B2.286 ..B2.272
..LN5077:
	.loc    1  115  is_stmt 1
        movl      176(%rsp), %eax                               #115.19
..LN5078:
        movl      %eax, %r12d                                   #115.19
..LN5079:
	.loc    1  103  is_stmt 1
        xorl      %r14d, %r14d                                  #103.3
..LN5080:
	.loc    1  115  is_stmt 1
        negl      %r12d                                         #115.19
..LN5081:
	.loc    1  116  is_stmt 1
        vmovsd    .L_2il0floatpacket.10(%rip), %xmm0            #116.19
..LN5082:
	.loc    1  115  is_stmt 1
        addl      %eax, %r12d                                   #115.76
..LN5083:
	.loc    1  103  is_stmt 1
        xorl      %r10d, %r10d                                  #103.3
..LN5084:
        xorl      %r8d, %r8d                                    #103.3
..LN5085:
	.loc    1  72  is_stmt 1
        movq      80(%rbp), %r11                                #72.1
..LN5086:
        movq      88(%rbp), %r13                                #72.1
..LN5087:
                                # LOE r8 r11 r13 r10d r12d r14d r15d xmm0
..B2.274:                       # Preds ..B2.277 ..B2.288 ..B2.273
..L144:         # optimization report
                # %s was not vectorized: vector dependence prevents vectorization%s
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
..LN5088:
	.loc    1  111  is_stmt 1
        xorl      %ecx, %ecx                                    #111.23
..LN5089:
	.loc    1  112  is_stmt 1
        xorl      %edx, %edx                                    #112.5
..LN5090:
        xorl      %eax, %eax                                    #112.5
..LN5091:
	.loc    1  111  is_stmt 1
        testl     %r15d, %r15d                                  #111.34
..LN5092:
        jle       ..B2.288      # Prob 9%                       #111.34
..LN5093:
                                # LOE rax r8 r11 r13 edx ecx r10d r12d r14d r15d xmm0
..B2.275:                       # Preds ..B2.274
..LN5094:
	.loc    1  115  is_stmt 1
        movq      152(%rsp), %rsi                               #115.89
..LN5095:
        lea       (%r11,%r8,8), %rbx                            #115.5
..LN5096:
        movl      %r12d, 8(%rsp)                                #115.19
..LN5097:
	.loc    1  118  is_stmt 1
        lea       (%r13,%r8,8), %rdi                            #118.5
..LN5098:
	.loc    1  115  is_stmt 1
        movl      %r14d, (%rsp)                                 #115.19
..LN5099:
        lea       (%r12,%r10), %r9d                             #115.19
..LN5100:
        movq      72(%rbp), %r11                                #115.19
..LN5101:
        lea       (%rsi,%r8,8), %rsi                            #115.89
..LN5102:
        movq      64(%rbp), %r12                                #115.19
..LN5103:
        movq      160(%rsp), %r13                               #115.19
..LN5104:
        .align    16,0x90
..LN5105:
                                # LOE rax rbx rsi rdi r8 r11 r12 r13 edx ecx r9d r10d r15d xmm0
..B2.276:                       # Preds ..B2.276 ..B2.275
..L145:         # optimization report
                # %s was not vectorized: vector dependence prevents vectorization%s
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
..LN5106:
        lea       (%r9,%rdx), %r14d                             #115.76
..LN5107:
        movslq    %r14d, %r14                                   #115.19
..LN5108:
	.loc    1  111  is_stmt 1
        incl      %ecx                                          #111.23
..LN5109:
        addl      $3, %edx                                      #111.23
..LN5110:
	.loc    1  115  is_stmt 1
        vmovsd    8(%r13,%r14,8), %xmm4                         #115.51
..LN5111:
        vmulsd    8(%r12,%r14,8), %xmm4, %xmm1                  #115.51
..LN5112:
        vmovsd    (%r13,%r14,8), %xmm5                          #115.28
..LN5113:
	.loc    1  116  is_stmt 1
        vfmadd231sd (%r12,%r14,8), %xmm5, %xmm1                 #116.5
..LN5114:
	.loc    1  115  is_stmt 1
        vmovsd    16(%r13,%r14,8), %xmm6                        #115.76
..LN5115:
	.loc    1  116  is_stmt 1
        vfmadd231sd 16(%r12,%r14,8), %xmm6, %xmm1               #116.5
..LN5116:
	.loc    1  115  is_stmt 1
        vdivsd    (%rsi,%rax,8), %xmm1, %xmm2                   #115.89
..LN5117:
	.loc    1  116  is_stmt 1
        vmulsd    %xmm2, %xmm0, %xmm3                           #116.5
..LN5118:
        vmovsd    %xmm3, (%rbx,%rax,8)                          #116.5
..LN5119:
	.loc    1  118  is_stmt 1
        vmulsd    8(%r11,%r14,8), %xmm4, %xmm7                  #118.51
..LN5120:
	.loc    1  119  is_stmt 1
        vfmadd231sd (%r11,%r14,8), %xmm5, %xmm7                 #119.5
..LN5121:
        vfmadd231sd 16(%r11,%r14,8), %xmm6, %xmm7               #119.5
..LN5122:
	.loc    1  118  is_stmt 1
        vdivsd    (%rsi,%rax,8), %xmm7, %xmm8                   #118.90
..LN5123:
	.loc    1  119  is_stmt 1
        vmulsd    %xmm0, %xmm8, %xmm9                           #119.5
..LN5124:
        vmovsd    %xmm9, (%rdi,%rax,8)                          #119.5
..LN5125:
	.loc    1  111  is_stmt 1
        incq      %rax                                          #111.23
..LN5126:
        cmpl      %r15d, %ecx                                   #111.23
..LN5127:
        jb        ..B2.276      # Prob 82%                      #111.23
..LN5128:
                                # LOE rax rbx rsi rdi r8 r11 r12 r13 edx ecx r9d r10d r15d xmm0
..B2.277:                       # Preds ..B2.276
..LN5129:
        movl      (%rsp), %r14d                                 #
..LN5130:
        incl      %r14d                                         #111.3
..LN5131:
        addl      176(%rsp), %r10d                              #111.3
..LN5132:
        addq      144(%rsp), %r8                                #111.3
..LN5133:
        movl      8(%rsp), %r12d                                #
..LN5134:
        movq      88(%rbp), %r13                                #
..LN5135:
        movq      80(%rbp), %r11                                #
..LN5136:
        cmpl      184(%rsp), %r14d                              #111.3
..LN5137:
        jb        ..B2.274      # Prob 81%                      #111.3
..LN5138:
        jmp       ..B2.290      # Prob 100%                     #111.3
..LN5139:
                                # LOE r8 r11 r13 r10d r12d r14d r15d xmm0
..B2.278:                       # Preds ..B2.272
..LN5140:
	.loc    1  106  is_stmt 1
        movl      176(%rsp), %eax                               #106.53
..LN5141:
        movl      %eax, %r9d                                    #106.53
..LN5142:
        negl      %r9d                                          #106.53
..LN5143:
        addl      %eax, %r9d                                    #106.72
..LN5144:
	.loc    1  103  is_stmt 1
        movl      %r15d, %eax                                   #103.23
..LN5145:
        movq      160(%rsp), %r10                               #103.23
..LN5146:
        andl      $-4, %eax                                     #103.23
..LN5147:
        movl      176(%rsp), %edx                               #103.23
..LN5148:
        movl      184(%rsp), %ecx                               #103.23
..LN5149:
                                # LOE r10 eax edx ecx esi edi r8d r9d r15d
..B2.279:                       # Preds ..B2.286 ..B2.297 ..B2.278
..LN5150:
        cmpl      $4, %r15d                                     #103.23
..LN5151:
        jl        ..B2.296      # Prob 10%                      #103.23
..LN5152:
                                # LOE r10 eax edx ecx esi edi r8d r9d r15d
..B2.280:                       # Preds ..B2.279
..LN5153:
        xorl      %r12d, %r12d                                  #103.23
..LN5154:
        movl      %eax, %ebx                                    #103.23
..LN5155:
	.loc    1  104  is_stmt 1
        movl      %esi, (%rsp)                                  #104.5
..LN5156:
	.loc    1  106  is_stmt 1
        lea       (%rdx,%r8), %r13d                             #106.21
..LN5157:
	.loc    1  104  is_stmt 1
        movl      %r15d, 232(%rsp)                              #104.5
..LN5158:
	.loc    1  106  is_stmt 1
        lea       (%r9,%rdi), %r14d                             #106.53
..LN5159:
	.loc    1  104  is_stmt 1
        movq      120(%rsp), %rcx                               #104.5
..LN5160:
        xorl      %r11d, %r11d                                  #104.5
..LN5161:
        movq      128(%rsp), %rsi                               #104.5
..LN5162:
                                # LOE rcx rsi r10 eax ebx edi r8d r9d r11d r12d r13d r14d
..B2.281:                       # Preds ..B2.281 ..B2.280
..L147:         # optimization report
                # LOOP WAS COMPLETELY UNROLLED BY 3
..L146:         # optimization report
                # LOOP WAS UNROLLED BY 1
                # LOOP WAS VECTORIZED
                # VECTORIZATION SPEEDUP COEFFECIENT 2.628906
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 0.005859
                # MAIN VECTOR TYPE: 64-bits floating point
..LN5163:
	.loc    1  106  is_stmt 1
        lea       (%r13,%r11), %r15d                            #106.21
..LN5164:
        movslq    %r15d, %r15                                   #106.21
..LN5165:
        lea       (%r8,%r11), %edx                              #106.43
..LN5166:
        movslq    %edx, %rdx                                    #106.43
..LN5167:
	.loc    1  103  is_stmt 1
        addl      $4, %r12d                                     #103.23
..LN5168:
	.loc    1  106  is_stmt 1
        vmovups   (%rsi,%r15,8), %xmm8                          #106.21
..LN5169:
        vmovups   16(%rsi,%r15,8), %xmm9                        #106.21
..LN5170:
        vmovups   32(%rsi,%r15,8), %xmm10                       #106.21
..LN5171:
        vmovups   16(%rsi,%rdx,8), %xmm15                       #106.43
..LN5172:
        vmovups   32(%rsi,%rdx,8), %xmm2                        #106.43
..LN5173:
        vmovups   (%rsi,%rdx,8), %xmm14                         #106.43
..LN5174:
        vinsertf128 $1, 48(%rsi,%r15,8), %ymm8, %ymm11          #106.21
..LN5175:
        vinsertf128 $1, 64(%rsi,%r15,8), %ymm9, %ymm12          #106.21
..LN5176:
        vinsertf128 $1, 80(%rsi,%r15,8), %ymm10, %ymm13         #106.21
..LN5177:
	.loc    1  98  is_stmt 1
        lea       (%r14,%r11), %r15d                            #98.7
..LN5178:
	.loc    1  106  is_stmt 1
        movslq    %r15d, %r15                                   #106.53
..LN5179:
	.loc    1  103  is_stmt 1
        addl      $12, %r11d                                    #103.23
..LN5180:
	.loc    1  106  is_stmt 1
        vblendpd  $10, %ymm13, %ymm12, %ymm5                    #106.21
..LN5181:
	.loc    1  103  is_stmt 1
        cmpl      %eax, %r12d                                   #103.23
..LN5182:
	.loc    1  106  is_stmt 1
        vblendpd  $10, %ymm12, %ymm11, %ymm6                    #106.21
..LN5183:
        vshufpd   $5, %ymm13, %ymm11, %ymm7                     #106.21
..LN5184:
        vmovsd    16(%rcx,%r15,8), %xmm11                       #106.53
..LN5185:
        vmovsd    64(%rcx,%r15,8), %xmm12                       #106.53
..LN5186:
        vmovhpd   40(%rcx,%r15,8), %xmm11, %xmm13               #106.53
..LN5187:
        vinsertf128 $1, 64(%rsi,%rdx,8), %ymm15, %ymm3          #106.43
..LN5188:
        vinsertf128 $1, 80(%rsi,%rdx,8), %ymm2, %ymm1           #106.43
..LN5189:
        vinsertf128 $1, 48(%rsi,%rdx,8), %ymm14, %ymm0          #106.43
..LN5190:
        vblendpd  $10, %ymm1, %ymm3, %ymm9                      #106.43
..LN5191:
        vblendpd  $10, %ymm3, %ymm0, %ymm4                      #106.43
..LN5192:
        vshufpd   $5, %ymm1, %ymm0, %ymm8                       #106.43
..LN5193:
        vsubpd    %ymm9, %ymm5, %ymm2                           #106.43
..LN5194:
        vmovsd    24(%rcx,%r15,8), %xmm5                        #106.53
..LN5195:
        vmovsd    (%rcx,%r15,8), %xmm9                          #106.53
..LN5196:
        vsubpd    %ymm4, %ymm6, %ymm4                           #106.43
..LN5197:
        vmovsd    72(%rcx,%r15,8), %xmm6                        #106.53
..LN5198:
        vmovhpd   96(%rcx,%r15,8), %xmm6, %xmm10                #106.53
..LN5199:
        vsubpd    %ymm8, %ymm7, %ymm3                           #106.43
..LN5200:
        vmovhpd   48(%rcx,%r15,8), %xmm5, %xmm7                 #106.53
..LN5201:
        vmovhpd   88(%rcx,%r15,8), %xmm12, %xmm0                #106.53
..LN5202:
        vmovhpd   24(%rcx,%r15,8), %xmm9, %xmm11                #106.53
..LN5203:
        vmovsd    8(%rcx,%r15,8), %xmm5                         #106.53
..LN5204:
        vmovsd    56(%rcx,%r15,8), %xmm6                        #106.53
..LN5205:
        vmovhpd   80(%rcx,%r15,8), %xmm6, %xmm8                 #106.53
..LN5206:
        vinsertf128 $1, %xmm10, %ymm7, %ymm1                    #106.53
..LN5207:
        vmovsd    48(%rcx,%r15,8), %xmm10                       #106.53
..LN5208:
        vmovhpd   72(%rcx,%r15,8), %xmm10, %xmm12               #106.53
..LN5209:
        vmovhpd   32(%rcx,%r15,8), %xmm5, %xmm7                 #106.53
..LN5210:
        vinsertf128 $1, %xmm12, %ymm11, %ymm14                  #106.53
..LN5211:
        vsubpd    %ymm14, %ymm4, %ymm4                          #106.53
..LN5212:
        vaddpd    %ymm1, %ymm4, %ymm1                           #106.72
..LN5213:
        vinsertf128 $1, %xmm8, %ymm7, %ymm5                     #106.53
..LN5214:
        vsubpd    %ymm5, %ymm3, %ymm5                           #106.53
..LN5215:
        vmovsd    32(%rcx,%r15,8), %xmm3                        #106.72
..LN5216:
        vmovsd    %xmm1, (%r10,%rdx,8)                          #106.7
..LN5217:
        vmovhpd   %xmm1, 24(%r10,%rdx,8)                        #106.7
..LN5218:
        vextractf128 $1, %ymm1, %xmm15                          #106.7
..LN5219:
        vmovhpd   56(%rcx,%r15,8), %xmm3, %xmm1                 #106.72
..LN5220:
        vmovsd    80(%rcx,%r15,8), %xmm3                        #106.72
..LN5221:
        vmovhpd   104(%rcx,%r15,8), %xmm3, %xmm4                #106.72
..LN5222:
        vmovsd    %xmm15, 48(%r10,%rdx,8)                       #106.7
..LN5223:
        vmovhpd   %xmm15, 72(%r10,%rdx,8)                       #106.7
..LN5224:
        vinsertf128 $1, %xmm0, %ymm13, %ymm0                    #106.53
..LN5225:
        vsubpd    %ymm0, %ymm2, %ymm3                           #106.53
..LN5226:
        vmovsd    40(%rcx,%r15,8), %xmm2                        #106.72
..LN5227:
        vmovhpd   64(%rcx,%r15,8), %xmm2, %xmm0                 #106.72
..LN5228:
        vmovsd    88(%rcx,%r15,8), %xmm2                        #106.72
..LN5229:
        vinsertf128 $1, %xmm4, %ymm1, %ymm6                     #106.72
..LN5230:
        vmovhpd   112(%rcx,%r15,8), %xmm2, %xmm1                #106.72
..LN5231:
        vaddpd    %ymm6, %ymm5, %ymm7                           #106.72
..LN5232:
        vinsertf128 $1, %xmm1, %ymm0, %ymm4                     #106.72
..LN5233:
        vaddpd    %ymm4, %ymm3, %ymm5                           #106.72
..LN5234:
        vextractf128 $1, %ymm7, %xmm8                           #106.7
..LN5235:
        vextractf128 $1, %ymm5, %xmm6                           #106.7
..LN5236:
        vmovsd    %xmm7, 8(%r10,%rdx,8)                         #106.7
..LN5237:
        vmovhpd   %xmm7, 32(%r10,%rdx,8)                        #106.7
..LN5238:
        vmovsd    %xmm8, 56(%r10,%rdx,8)                        #106.7
..LN5239:
        vmovhpd   %xmm8, 80(%r10,%rdx,8)                        #106.7
..LN5240:
        vmovsd    %xmm5, 16(%r10,%rdx,8)                        #106.7
..LN5241:
        vmovhpd   %xmm5, 40(%r10,%rdx,8)                        #106.7
..LN5242:
        vmovsd    %xmm6, 64(%r10,%rdx,8)                        #106.7
..LN5243:
        vmovhpd   %xmm6, 88(%r10,%rdx,8)                        #106.7
..LN5244:
	.loc    1  103  is_stmt 1
        jb        ..B2.281      # Prob 82%                      #103.23
..LN5245:
                                # LOE rcx rsi r10 eax ebx edi r8d r9d r11d r12d r13d r14d
..B2.282:                       # Preds ..B2.281
..LN5246:
        movl      (%rsp), %esi                                  #
..LN5247:
        movl      176(%rsp), %edx                               #
..LN5248:
        movl      184(%rsp), %ecx                               #
..LN5249:
        movl      232(%rsp), %r15d                              #
..LN5250:
                                # LOE r10 eax edx ecx ebx esi edi r8d r9d r15d
..B2.283:                       # Preds ..B2.282 ..B2.296
..LN5251:
        lea       (%rbx,%rbx,2), %r13d                          #103.23
..LN5252:
        cmpl      %r15d, %ebx                                   #103.23
..LN5253:
        jae       ..B2.297      # Prob 10%                      #103.23
..LN5254:
                                # LOE r10 eax edx ecx ebx esi edi r8d r9d r13d r15d
..B2.284:                       # Preds ..B2.283
..LN5255:
	.loc    1  106  is_stmt 1
        movl      %esi, (%rsp)                                  #106.53
..LN5256:
        lea       (%rdx,%r8), %r12d                             #106.21
..LN5257:
        movq      120(%rsp), %rcx                               #106.53
..LN5258:
        lea       (%r9,%rdi), %r11d                             #106.53
..LN5259:
        movq      128(%rsp), %rsi                               #106.53
..LN5260:
                                # LOE rcx rsi r10 eax ebx edi r8d r9d r11d r12d r13d r15d
..B2.285:                       # Preds ..B2.285 ..B2.284
..L148:         # optimization report
                # LOOP WAS UNROLLED BY 1
                # REMAINDER LOOP FOR VECTORIZATION
                # VECTORIZATION SPEEDUP COEFFECIENT 2.628906
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 0.005859
..LN5261:
        lea       (%r12,%r13), %r14d                            #106.21
..LN5262:
        movslq    %r14d, %r14                                   #106.21
..LN5263:
        lea       (%r8,%r13), %edx                              #106.43
..LN5264:
        movslq    %edx, %rdx                                    #106.43
..LN5265:
	.loc    1  103  is_stmt 1
        incl      %ebx                                          #103.23
..LN5266:
	.loc    1  106  is_stmt 1
        vmovsd    (%rsi,%r14,8), %xmm0                          #106.21
..LN5267:
        vmovsd    8(%rsi,%r14,8), %xmm1                         #106.21
..LN5268:
        vmovsd    16(%rsi,%r14,8), %xmm2                        #106.21
..LN5269:
	.loc    1  98  is_stmt 1
        lea       (%r11,%r13), %r14d                            #98.7
..LN5270:
	.loc    1  106  is_stmt 1
        movslq    %r14d, %r14                                   #106.53
..LN5271:
	.loc    1  103  is_stmt 1
        addl      $3, %r13d                                     #103.23
..LN5272:
	.loc    1  106  is_stmt 1
        vsubsd    (%rsi,%rdx,8), %xmm0, %xmm3                   #106.43
..LN5273:
        vsubsd    8(%rsi,%rdx,8), %xmm1, %xmm6                  #106.43
..LN5274:
        vsubsd    16(%rsi,%rdx,8), %xmm2, %xmm9                 #106.43
..LN5275:
        vsubsd    (%rcx,%r14,8), %xmm3, %xmm4                   #106.53
..LN5276:
        vsubsd    8(%rcx,%r14,8), %xmm6, %xmm7                  #106.53
..LN5277:
        vsubsd    16(%rcx,%r14,8), %xmm9, %xmm10                #106.53
..LN5278:
        vaddsd    24(%rcx,%r14,8), %xmm4, %xmm5                 #106.72
..LN5279:
        vaddsd    32(%rcx,%r14,8), %xmm7, %xmm8                 #106.72
..LN5280:
        vaddsd    40(%rcx,%r14,8), %xmm10, %xmm11               #106.72
..LN5281:
        vmovsd    %xmm5, (%r10,%rdx,8)                          #106.7
..LN5282:
        vmovsd    %xmm8, 8(%r10,%rdx,8)                         #106.7
..LN5283:
        vmovsd    %xmm11, 16(%r10,%rdx,8)                       #106.7
..LN5284:
	.loc    1  103  is_stmt 1
        cmpl      %r15d, %ebx                                   #103.23
..LN5285:
        jb        ..B2.285      # Prob 82%                      #103.23
..LN5286:
                                # LOE rcx rsi r10 eax ebx edi r8d r9d r11d r12d r13d r15d
..B2.286:                       # Preds ..B2.285
..LN5287:
        movl      (%rsp), %esi                                  #
..LN5288:
        incl      %esi                                          #103.3
..LN5289:
        movl      176(%rsp), %edx                               #
..LN5290:
        addl      %edx, %r8d                                    #103.3
..LN5291:
        movl      184(%rsp), %ecx                               #
..LN5292:
        lea       3(%rdi,%rdx), %edi                            #103.3
..LN5293:
        cmpl      %ecx, %esi                                    #103.3
..LN5294:
        jb        ..B2.279      # Prob 82%                      #103.3
..LN5295:
        jmp       ..B2.273      # Prob 100%                     #103.3
..LN5296:
                                # LOE r10 eax edx ecx esi edi r8d r9d r15d
..B2.288:                       # Preds ..B2.274                # Infreq
..LN5297:
	.loc    1  111  is_stmt 1
        incl      %r14d                                         #111.3
..LN5298:
        addl      176(%rsp), %r10d                              #111.3
..LN5299:
        addq      144(%rsp), %r8                                #111.3
..LN5300:
        cmpl      184(%rsp), %r14d                              #111.3
..LN5301:
        jb        ..B2.274      # Prob 81%                      #111.3
..LN5302:
                                # LOE r8 r11 r13 r10d r12d r14d r15d xmm0
..B2.290:                       # Preds ..B2.277 ..B2.288 ..B2.271 # Infreq
..LN5303:
	.loc    1  122  is_stmt 1
        vzeroupper                                              #122.3
..LN5304:
        movq      192(%rsp), %rdi                               #122.3
..LN5305:
#       free(void *)
        call      free                                          #122.3
..LN5306:
                                # LOE
..B2.291:                       # Preds ..B2.290                # Infreq
..LN5307:
	.loc    1  123  is_stmt 1
        movq      128(%rsp), %rdi                               #123.3
..LN5308:
#       free(void *)
        call      free                                          #123.3
..LN5309:
                                # LOE
..B2.292:                       # Preds ..B2.291                # Infreq
..LN5310:
	.loc    1  124  is_stmt 1
        movq      120(%rsp), %rdi                               #124.3
..LN5311:
#       free(void *)
        call      free                                          #124.3
..LN5312:
                                # LOE
..B2.293:                       # Preds ..B2.292                # Infreq
..LN5313:
	.loc    1  125  is_stmt 1
        movq      160(%rsp), %rdi                               #125.3
..LN5314:
	.loc    1  125  epilogue_begin  is_stmt 1
        addq      $280, %rsp                                    #125.3
	.cfi_restore 3
..LN5315:
        popq      %rbx                                          #125.3
	.cfi_restore 15
..LN5316:
        popq      %r15                                          #125.3
	.cfi_restore 14
..LN5317:
        popq      %r14                                          #125.3
	.cfi_restore 13
..LN5318:
        popq      %r13                                          #125.3
	.cfi_restore 12
..LN5319:
        popq      %r12                                          #125.3
..LN5320:
        movq      %rbp, %rsp                                    #125.3
..LN5321:
        popq      %rbp                                          #125.3
	.cfi_def_cfa 7, 8
	.cfi_restore 6
..LN5322:
#       free(void *)
        jmp       free                                          #125.3
	.cfi_def_cfa 6, 16
	.cfi_escape 0x10, 0x03, 0x0e, 0x38, 0x1c, 0x0d, 0xe0, 0xff, 0xff, 0xff, 0x1a, 0x0d, 0xd8, 0xff, 0xff, 0xff, 0x22
	.cfi_offset 6, -16
	.cfi_escape 0x10, 0x0c, 0x0e, 0x38, 0x1c, 0x0d, 0xe0, 0xff, 0xff, 0xff, 0x1a, 0x0d, 0xf8, 0xff, 0xff, 0xff, 0x22
	.cfi_escape 0x10, 0x0d, 0x0e, 0x38, 0x1c, 0x0d, 0xe0, 0xff, 0xff, 0xff, 0x1a, 0x0d, 0xf0, 0xff, 0xff, 0xff, 0x22
	.cfi_escape 0x10, 0x0e, 0x0e, 0x38, 0x1c, 0x0d, 0xe0, 0xff, 0xff, 0xff, 0x1a, 0x0d, 0xe8, 0xff, 0xff, 0xff, 0x22
	.cfi_escape 0x10, 0x0f, 0x0e, 0x38, 0x1c, 0x0d, 0xe0, 0xff, 0xff, 0xff, 0x1a, 0x0d, 0xe0, 0xff, 0xff, 0xff, 0x22
..LN5323:
                                # LOE
..B2.296:                       # Preds ..B2.279                # Infreq
..LN5324:
	.loc    1  103  is_stmt 1
        xorl      %ebx, %ebx                                    #103.23
..LN5325:
        jmp       ..B2.283      # Prob 100%                     #103.23
..LN5326:
                                # LOE r10 eax edx ecx ebx esi edi r8d r9d r15d
..B2.297:                       # Preds ..B2.283                # Infreq
..LN5327:
        incl      %esi                                          #103.3
..LN5328:
        addl      %edx, %r8d                                    #103.3
..LN5329:
        lea       3(%rdi,%rdx), %edi                            #103.3
..LN5330:
        cmpl      %ecx, %esi                                    #103.3
..LN5331:
        jb        ..B2.279      # Prob 82%                      #103.3
..LN5332:
        jmp       ..B2.273      # Prob 100%                     #103.3
..LN5333:
                                # LOE r10 eax edx ecx esi edi r8d r9d r15d
..B2.299:                       # Preds ..B2.252 ..B2.255 ..B2.257 # Infreq
..LN5334:
	.loc    1  95  is_stmt 1
        xorl      %edx, %edx                                    #95.23
..LN5335:
        jmp       ..B2.265      # Prob 100%                     #95.23
..LN5336:
                                # LOE r8 r9 r12 edx r10d r11d r13d xmm2 ymm1
..B2.301:                       # Preds ..B2.253                # Infreq
..LN5337:
	.loc    1  98  is_stmt 1
        movq      192(%rsp), %rax                               #98.26
..LN5338:
	.loc    1  95  is_stmt 1
        xorl      %edi, %edi                                    #95.23
..LN5339:
        movl      (%rsp), %edx                                  #95.23
..LN5340:
	.loc    1  98  is_stmt 1
        lea       (%r9,%r12,8), %rbx                            #98.33
..LN5341:
        lea       (%r13,%r10), %esi                             #98.52
..LN5342:
        lea       (%rax,%r12,8), %rax                           #98.26
..LN5343:
        jmp       ..B2.262      # Prob 100%                     #98.26
..LN5344:
                                # LOE rax rcx rbx r8 r9 r12 edx esi edi r10d r11d r13d xmm2 ymm1
..B2.303:                       # Preds ..B2.230 ..B2.233 ..B2.235 # Infreq
..LN5345:
	.loc    1  87  is_stmt 1
        xorl      %ebx, %ebx                                    #87.24
..LN5346:
        jmp       ..B2.243      # Prob 100%                     #87.24
..LN5347:
                                # LOE rcx rsi r8 edx ebx edi r11d r15d xmm2 ymm1
..B2.305:                       # Preds ..B2.231                # Infreq
..LN5348:
	.loc    1  91  is_stmt 1
        movq      216(%rsp), %rax                               #91.43
..LN5349:
	.loc    1  87  is_stmt 1
        xorl      %r12d, %r12d                                  #87.24
..LN5350:
        movl      (%rsp), %ebx                                  #87.24
..LN5351:
	.loc    1  91  is_stmt 1
        lea       (%rdx,%r11), %r10d                            #91.50
..LN5352:
        lea       (%rax,%rsi,8), %rax                           #91.43
..LN5353:
        jmp       ..B2.240      # Prob 100%                     #91.43
..LN5354:
                                # LOE rax rcx rsi r8 r9 edx ebx edi r10d r11d r12d r15d xmm2 ymm1
..B2.307:                       # Preds ..B2.219                # Infreq
..LN5355:
	.loc    1  198  is_stmt 1
        xorl      %ebx, %ebx                                    #198.6
..LN5356:
        jmp       ..B2.223      # Prob 100%                     #198.6
..LN5357:
                                # LOE rax rbx rsi r8 r14 ecx r15d
..B2.308:                       # Preds ..B2.205 ..B2.208 ..B2.210 # Infreq
..LN5358:
        xorl      %ecx, %ecx                                    #198.6
..LN5359:
        jmp       ..B2.218      # Prob 100%                     #198.6
..LN5360:
                                # LOE rsi r8 r14 eax ecx r15d
..B2.310:                       # Preds ..B2.206                # Infreq
..LN5361:
        movl      184(%rsp), %edx                               #198.41
..LN5362:
        movl      %eax, %ecx                                    #198.6
..LN5363:
        imull     208(%rsp), %edx                               #198.41
..LN5364:
        andl      $-16, %ecx                                    #198.6
..LN5365:
        movslq    %edx, %rdx                                    #198.33
..LN5366:
        xorl      %ebx, %ebx                                    #198.6
..LN5367:
        movq      192(%rsp), %r9                                #198.33
..LN5368:
        lea       (%r9,%rdx,8), %r10                            #198.33
..LN5369:
        lea       (%r10,%rsi,8), %r10                           #198.33
..LN5370:
        lea       (%r14,%rsi,8), %r9                            #198.60
..LN5371:
        jmp       ..B2.215      # Prob 100%                     #198.60
..LN5372:
                                # LOE rbx rsi rdi r8 r9 r10 r14 eax ecx r15d
..B2.312:                       # Preds ..B2.196                # Infreq
..LN5373:
	.loc    1  197  is_stmt 1
        xorl      %ecx, %ecx                                    #197.6
..LN5374:
        jmp       ..B2.200      # Prob 100%                     #197.6
..LN5375:
                                # LOE rcx rbx rsi r12 r14 eax edx r15d
..B2.313:                       # Preds ..B2.183 ..B2.185 ..B2.187 # Infreq
..LN5376:
        xorl      %edx, %edx                                    #197.6
..LN5377:
        jmp       ..B2.195      # Prob 100%                     #197.6
..LN5378:
                                # LOE rsi r12 r14 eax edx ebx r15d
..B2.316:                       # Preds ..B2.173                # Infreq
..LN5379:
	.loc    1  192  is_stmt 1
        xorl      %r9d, %r9d                                    #192.5
..LN5380:
        jmp       ..B2.177      # Prob 100%                     #192.5
..LN5381:
                                # LOE rdx r8 r9 r12 r14 eax ecx r15d
..B2.317:                       # Preds ..B2.159 ..B2.162 ..B2.164 # Infreq
..LN5382:
        xorl      %ecx, %ecx                                    #192.5
..LN5383:
        jmp       ..B2.172      # Prob 100%                     #192.5
..LN5384:
                                # LOE rdx r12 r14 eax ecx r8d r15d
..B2.319:                       # Preds ..B2.160                # Infreq
..LN5385:
        movq      192(%rsp), %rsi                               #192.32
..LN5386:
        movl      %r8d, %ecx                                    #192.5
..LN5387:
        andl      $-16, %ecx                                    #192.5
..LN5388:
        xorl      %r9d, %r9d                                    #192.5
..LN5389:
        lea       (%rsi,%rdx,8), %rdi                           #192.32
..LN5390:
        lea       (%r14,%rdx,8), %rsi                           #192.52
..LN5391:
        jmp       ..B2.169      # Prob 100%                     #192.52
..LN5392:
                                # LOE rdx rbx rsi rdi r9 r12 r14 eax ecx r8d r15d
..B2.321:                       # Preds ..B2.150                # Infreq
..LN5393:
	.loc    1  191  is_stmt 1
        xorl      %r8d, %r8d                                    #191.5
..LN5394:
        jmp       ..B2.154      # Prob 100%                     #191.5
..LN5395:
                                # LOE rdx rdi r8 r12 r14 eax ebx r15d
..B2.322:                       # Preds ..B2.137 ..B2.139 ..B2.141 # Infreq
..LN5396:
        xorl      %ebx, %ebx                                    #191.5
..LN5397:
        jmp       ..B2.149      # Prob 100%                     #191.5
..LN5398:
                                # LOE rdx r12 r14 eax ebx edi r15d
..B2.325:                       # Preds ..B2.127                # Infreq
..LN5399:
	.loc    1  186  is_stmt 1
        xorl      %edi, %edi                                    #186.5
..LN5400:
        jmp       ..B2.131      # Prob 100%                     #186.5
..LN5401:
                                # LOE rcx rsi rdi r9 r12 r14 eax edx ebx r15d
..B2.326:                       # Preds ..B2.113 ..B2.116 ..B2.118 # Infreq
..LN5402:
        xorl      %ebx, %ebx                                    #186.5
..LN5403:
        jmp       ..B2.126      # Prob 100%                     #186.5
..LN5404:
                                # LOE rcx r9 r12 r14 eax edx ebx esi r15d
..B2.328:                       # Preds ..B2.114                # Infreq
..LN5405:
        movl      %esi, %ebx                                    #186.5
..LN5406:
        lea       -1(%rdx), %r10d                               #186.32
..LN5407:
        imull     208(%rsp), %r10d                              #186.32
..LN5408:
        lea       (%rcx,%r9,8), %r8                             #186.59
..LN5409:
        movq      %r8, (%rsp)                                   #186.59
..LN5410:
	.loc    1  142  is_stmt 1
        lea       (%r10,%r15,2), %edi                           #142.12
..LN5411:
        movl      %edi, 8(%rsp)                                 #142.12
..LN5412:
	.loc    1  186  is_stmt 1
        andl      $-16, %ebx                                    #186.5
..LN5413:
        xorl      %r8d, %r8d                                    #186.5
..LN5414:
        jmp       ..B2.123      # Prob 100%                     #186.5
..LN5415:
                                # LOE rcx r8 r9 r11 r12 r14 eax edx ebx esi r10d r15d
..B2.330:                       # Preds ..B2.104                # Infreq
..LN5416:
	.loc    1  185  is_stmt 1
        xorl      %r8d, %r8d                                    #185.5
..LN5417:
        jmp       ..B2.108      # Prob 100%                     #185.5
..LN5418:
                                # LOE rcx r9 r12 r14 eax edx ebx esi edi r8d r15d
..B2.331:                       # Preds ..B2.93 ..B2.95         # Infreq
..LN5419:
        xorl      %ebx, %ebx                                    #185.5
..LN5420:
        jmp       ..B2.103      # Prob 100%                     #185.5
..LN5421:
                                # LOE rcx r9 r12 r14 eax edx ebx esi edi r15d
..B2.333:                       # Preds ..B2.91                 # Infreq
..LN5422:
        movl      %edx, %r9d                                    #185.5
..LN5423:
        xorl      %ebx, %ebx                                    #185.5
..LN5424:
        jmp       ..B2.103      # Prob 100%                     #185.5
..LN5425:
                                # LOE rcx r9 r12 r14 eax edx ebx esi edi r15d
..B2.334:                       # Preds ..B2.81                 # Infreq
..LN5426:
	.loc    1  180  is_stmt 1
        xorl      %r9d, %r9d                                    #180.5
..LN5427:
        jmp       ..B2.85       # Prob 100%                     #180.5
..LN5428:
                                # LOE rcx r8 r9 r10 r12 r14 eax edx ebx esi r13d r15d
..B2.335:                       # Preds ..B2.67 ..B2.70 ..B2.72 # Infreq
..LN5429:
        xorl      %ebx, %ebx                                    #180.5
..LN5430:
        jmp       ..B2.80       # Prob 100%                     #180.5
..LN5431:
                                # LOE rcx r10 r12 r14 eax edx ebx esi r8d r13d r15d
..B2.337:                       # Preds ..B2.68                 # Infreq
..LN5432:
        movl      %r8d, %ebx                                    #180.5
..LN5433:
        lea       -1(%rdx), %edi                                #180.32
..LN5434:
        imull     208(%rsp), %edi                               #180.32
..LN5435:
        lea       (%rcx,%r10,8), %r11                           #180.56
..LN5436:
        movq      %r11, 32(%rsp)                                #180.56
..LN5437:
        lea       (%r15,%rdi), %r9d                             #180.32
..LN5438:
        movl      %r9d, 40(%rsp)                                #180.32
..LN5439:
        andl      $-16, %ebx                                    #180.5
..LN5440:
        movq      $0, 56(%rsp)                                  #180.5
..LN5441:
        jmp       ..B2.77       # Prob 100%                     #180.5
..LN5442:
                                # LOE rcx r10 r12 r14 eax edx ebx esi edi r8d r13d r15d
..B2.339:                       # Preds ..B2.58                 # Infreq
..LN5443:
	.loc    1  179  is_stmt 1
        xorl      %r8d, %r8d                                    #179.5
..LN5444:
        jmp       ..B2.62       # Prob 100%                     #179.5
..LN5445:
                                # LOE rcx r10 r12 r14 eax edx ebx esi edi r8d r13d r15d
..B2.340:                       # Preds ..B2.47 ..B2.49         # Infreq
..LN5446:
        xorl      %ebx, %ebx                                    #179.5
..LN5447:
        jmp       ..B2.57       # Prob 100%                     #179.5
..LN5448:
                                # LOE rcx r10 r12 r14 eax edx ebx esi edi r13d r15d
..B2.342:                       # Preds ..B2.45                 # Infreq
..LN5449:
        movl      %edx, %r10d                                   #179.5
..LN5450:
        xorl      %ebx, %ebx                                    #179.5
..LN5451:
        jmp       ..B2.57       # Prob 100%                     #179.5
..LN5452:
                                # LOE rcx r10 r12 r14 eax edx ebx esi edi r13d r15d
..B2.343:                       # Preds ..B2.23                 # Infreq
..LN5453:
	.loc    1  166  is_stmt 1
        xorl      %r11d, %r11d                                  #166.30
..LN5454:
        jmp       ..B2.27       # Prob 100%                     #166.30
..LN5455:
                                # LOE rdx rbx r11 r12 eax ecx esi edi r8d r9d r10d xmm0 ymm1
..B2.344:                       # Preds ..B2.10 ..B2.12 ..B2.14 # Infreq
..LN5456:
        xorl      %eax, %eax                                    #166.30
..LN5457:
        jmp       ..B2.22       # Prob 100%                     #166.30
..LN5458:
                                # LOE rbx r12 eax ecx esi edi r8d r9d r10d xmm0 ymm1
..B2.355:                       # Preds ..B2.103 ..B2.108       # Infreq
..LN5459:
        cmpl      %esi, %edx                                    #166.19
..LN5460:
        jl        ..B2.113      # Prob 50%                      #166.19
..LN5461:
        jmp       ..B2.135      # Prob 100%                     #166.19
..LN5462:
                                # LOE rcx r9 r12 r14 eax edx esi r15d
..B2.357:                       # Preds ..B2.57 ..B2.62         # Infreq
..LN5463:
        cmpl      %esi, %edx                                    #166.19
..LN5464:
        jl        ..B2.67       # Prob 50%                      #166.19
..LN5465:
        jmp       ..B2.89       # Prob 100%                     #166.19
..LN5466:
                                # LOE rcx r10 r12 r14 eax edx esi r13d r15d
..B2.359:                       # Preds ..B2.195 ..B2.200       # Infreq
..LN5467:
        movl      240(%rsp), %edx                               #166.46
..LN5468:
        cmpl      %eax, %edx                                    #166.46
..LN5469:
        jl        ..B2.205      # Prob 50%                      #166.46
..LN5470:
        jmp       ..B2.227      # Prob 100%                     #166.46
..LN5471:
                                # LOE rsi r14 eax r15d
..B2.361:                       # Preds ..B2.149 ..B2.154       # Infreq
..LN5472:
        movl      240(%rsp), %ecx                               #166.46
..LN5473:
        cmpl      %eax, %ecx                                    #166.46
..LN5474:
        jl        ..B2.159      # Prob 50%                      #166.46
..LN5475:
        jmp       ..B2.181      # Prob 100%                     #166.46
..LN5476:
                                # LOE rdx r12 r14 eax r15d
..B2.364:                       # Preds ..B2.90                 # Infreq
..LN5477:
	.loc    1  179  is_stmt 1
        movl      %edx, %r9d                                    #179.33
..LN5478:
        jl        ..B2.113      # Prob 50%                      #179.33
..LN5479:
        jmp       ..B2.135      # Prob 100%                     #179.33
..LN5480:
                                # LOE rcx r9 r12 r14 eax edx esi r15d
..B2.365:                       # Preds ..B2.44                 # Infreq
..LN5481:
        movl      %edx, %r10d                                   #179.33
..LN5482:
        jl        ..B2.67       # Prob 50%                      #179.33
..LN5483:
        jmp       ..B2.89       # Prob 100%                     #179.33
..LN5484:
        .align    16,0x90
	.cfi_endproc
..LN5485:
                                # LOE rcx r10 r12 r14 eax edx esi r13d r15d
..LN5486:
# mark_end;
	.type	grad_c2l,@function
	.size	grad_c2l,.-grad_c2l
..LNgrad_c2l.5487:
.LNgrad_c2l:
	.data
# -- End  grad_c2l
	.text
.L_2__routine_start_a2b_ord2_2:
# -- Begin  a2b_ord2
	.text
# mark_begin;
       .align    16,0x90
	.globl a2b_ord2
# --- a2b_ord2(int, int, const double *, const double *, const double *, const double *, const double *, double *, int, int, int, int)
a2b_ord2:
# parameter 1(nx): %edi
# parameter 2(ny): %esi
# parameter 3(qin): %rdx
# parameter 4(edge_w): %rcx
# parameter 5(edge_e): %r8
# parameter 6(edge_s): %r9
# parameter 7(edge_n): 16 + %rbp
# parameter 8(qout): 24 + %rbp
# parameter 9(on_west_edge): 32 + %rbp
# parameter 10(on_east_edge): 40 + %rbp
# parameter 11(on_south_edge): 48 + %rbp
# parameter 12(on_north_edge): 56 + %rbp
..B3.1:                         # Preds ..B3.0
	.cfi_startproc
..___tag_value_a2b_ord2.168:
..L169:
                                                        #136.1
..LN5488:
	.loc    1  136  is_stmt 1
        pushq     %rbp                                          #136.1
	.cfi_def_cfa_offset 16
..LN5489:
        movq      %rsp, %rbp                                    #136.1
	.cfi_def_cfa 6, 16
	.cfi_offset 6, -16
..LN5490:
        andq      $-32, %rsp                                    #136.1
..LN5491:
        pushq     %r12                                          #136.1
..LN5492:
        pushq     %r13                                          #136.1
..LN5493:
        pushq     %r14                                          #136.1
..LN5494:
        pushq     %r15                                          #136.1
..LN5495:
        pushq     %rbx                                          #136.1
..LN5496:
        subq      $184, %rsp                                    #136.1
	.cfi_escape 0x10, 0x03, 0x0e, 0x38, 0x1c, 0x0d, 0xe0, 0xff, 0xff, 0xff, 0x1a, 0x0d, 0xd8, 0xff, 0xff, 0xff, 0x22
	.cfi_escape 0x10, 0x0c, 0x0e, 0x38, 0x1c, 0x0d, 0xe0, 0xff, 0xff, 0xff, 0x1a, 0x0d, 0xf8, 0xff, 0xff, 0xff, 0x22
	.cfi_escape 0x10, 0x0d, 0x0e, 0x38, 0x1c, 0x0d, 0xe0, 0xff, 0xff, 0xff, 0x1a, 0x0d, 0xf0, 0xff, 0xff, 0xff, 0x22
	.cfi_escape 0x10, 0x0e, 0x0e, 0x38, 0x1c, 0x0d, 0xe0, 0xff, 0xff, 0xff, 0x1a, 0x0d, 0xe8, 0xff, 0xff, 0xff, 0x22
	.cfi_escape 0x10, 0x0f, 0x0e, 0x38, 0x1c, 0x0d, 0xe0, 0xff, 0xff, 0xff, 0x1a, 0x0d, 0xe0, 0xff, 0xff, 0xff, 0x22
..LN5497:
        movl      %edi, %r12d                                   #136.1
..LN5498:
	.loc    1  144  prologue_end  is_stmt 1
        movslq    %r12d, %r12                                   #144.29
..LN5499:
	.loc    1  136  is_stmt 1
        movq      %rdx, %r13                                    #136.1
..LN5500:
        movq      %r9, 120(%rsp)                                #136.1
..LN5501:
        movl      %esi, %ebx                                    #136.1
..LN5502:
        movq      %r8, 136(%rsp)                                #136.1
..LN5503:
        movq      %rcx, 64(%rsp)                                #136.1
..LN5504:
	.loc    1  144  is_stmt 1
        movq      %r12, 128(%rsp)                               #144.29
..LN5505:
        lea       16(,%r12,8), %rdi                             #144.18
..LN5506:
        lea       (,%r12,8), %rax                               #144.32
..LN5507:
        movq      %rax, (%rsp)                                  #144.32
..LN5508:
#       malloc(size_t)
        call      malloc                                        #144.18
..LN5509:
                                # LOE rax r12 r13 ebx r12d r12b
..B3.299:                       # Preds ..B3.1
..LN5510:
        movq      %rax, 112(%rsp)                               #144.18
..LN5511:
                                # LOE r12 r13 ebx r12d r12b
..B3.2:                         # Preds ..B3.299
..LN5512:
	.loc    1  145  is_stmt 1
        movslq    %ebx, %rbx                                    #145.18
..LN5513:
        lea       16(,%rbx,8), %rdi                             #145.18
..LN5514:
#       malloc(size_t)
        call      malloc                                        #145.18
..LN5515:
                                # LOE rax r12 r13 ebx r12d r12b
..B3.300:                       # Preds ..B3.2
..LN5516:
        movq      %rax, %r11                                    #145.18
..LN5517:
                                # LOE r11 r12 r13 ebx r12d r12b
..B3.3:                         # Preds ..B3.300
..LN5518:
	.loc    1  136  is_stmt 1
        movl      32(%rbp), %r14d                               #136.1
..LN5519:
	.loc    1  151  is_stmt 1
        movl      $1, %eax                                      #151.5
..LN5520:
        testl     %r14d, %r14d                                  #151.5
..LN5521:
	.loc    1  142  is_stmt 1
        lea       1(%r12), %r10d                                #142.12
..LN5522:
	.loc    1  151  is_stmt 1
        cmovne    %eax, %r14d                                   #151.5
..LN5523:
	.loc    1  143  is_stmt 1
        lea       1(%rbx), %r15d                                #143.12
..LN5524:
	.loc    1  155  is_stmt 1
        cmpl      $0, 40(%rbp)                                  #155.5
..LN5525:
	.loc    1  136  is_stmt 1
        movl      48(%rbp), %r9d                                #136.1
..LN5526:
	.loc    1  155  is_stmt 1
        cmovne    %r12d, %r10d                                  #155.5
..LN5527:
        xorl      %edi, %edi                                    #155.5
..LN5528:
	.loc    1  159  is_stmt 1
        testl     %r9d, %r9d                                    #159.5
..LN5529:
        cmovne    %eax, %r9d                                    #159.5
..LN5530:
	.loc    1  163  is_stmt 1
        cmpl      $0, 56(%rbp)                                  #163.5
..LN5531:
        cmovne    %ebx, %r15d                                   #163.5
..LN5532:
	.loc    1  166  is_stmt 1
        cmpl      %r15d, %r9d                                   #166.19
..LN5533:
        jge       ..B3.16       # Prob 9%                       #166.19
..LN5534:
                                # LOE r9 r11 r12 r13 r14 ebx edi r10d r12d r15d r12b
..B3.4:                         # Preds ..B3.3
..LN5535:
        movl      %r10d, %esi                                   #166.30
..LN5536:
	.loc    1  142  is_stmt 1
        lea       1(%r12), %ecx                                 #142.12
..LN5537:
	.loc    1  166  is_stmt 1
        subl      %r14d, %esi                                   #166.30
..LN5538:
	.loc    1  167  is_stmt 1
        lea       2(%r12), %r8d                                 #167.37
..LN5539:
	.loc    1  166  is_stmt 1
        sarl      $1, %esi                                      #166.30
..LN5540:
        movl      %r15d, %eax                                   #166.7
..LN5541:
        shrl      $30, %esi                                     #166.30
..LN5542:
        subl      %r9d, %eax                                    #166.7
..LN5543:
        movslq    %r10d, %rdx                                   #166.30
..LN5544:
        subl      %r14d, %esi                                   #166.30
..LN5545:
        addl      %r10d, %esi                                   #166.30
..LN5546:
	.loc    1  156  is_stmt 1
        subq      %r14, %rdx                                    #156.3
..LN5547:
        movq      %rdx, 32(%rsp)                                #156.3
..LN5548:
        lea       -1(%r9), %edx                                 #
..LN5549:
	.loc    1  167  is_stmt 1
        imull     %edx, %ecx                                    #167.5
..LN5550:
        imull     %r8d, %edx                                    #167.5
..LN5551:
        imull     %r9d, %r8d                                    #167.5
..LN5552:
        vmovsd    .L_2il0floatpacket.1(%rip), %xmm0             #167.21
..LN5553:
	.loc    1  166  is_stmt 1
        movl      %eax, 24(%rsp)                                #166.7
..LN5554:
	.loc    1  167  is_stmt 1
        lea       (%r12,%r14), %eax                             #167.27
..LN5555:
        addl      %eax, %ecx                                    #167.5
..LN5556:
        addl      %eax, %edx                                    #167.45
..LN5557:
	.loc    1  168  is_stmt 1
        addl      %r8d, %eax                                    #168.28
..LN5558:
	.loc    1  166  is_stmt 1
        xorl      %r8d, %r8d                                    #166.34
..LN5559:
        movl      %ebx, 88(%rsp)                                #166.34
..LN5560:
        movl      %r9d, 104(%rsp)                               #166.34
..LN5561:
        sarl      $2, %esi                                      #166.30
..LN5562:
        movl      %r10d, 168(%rsp)                              #166.34
..LN5563:
        movl      %r15d, 96(%rsp)                               #166.34
..LN5564:
        movl      %r14d, 160(%rsp)                              #166.34
..LN5565:
        movq      %r11, 80(%rsp)                                #166.34
..LN5566:
        movl      %r8d, %r9d                                    #166.34
..LN5567:
        movq      24(%rbp), %rbx                                #166.34
..LN5568:
                                # LOE rbx r13 eax edx ecx esi edi r8d r9d r12d xmm0
..B3.5:                         # Preds ..B3.14 ..B3.4
..L179:         # optimization report
                # %s was not vectorized: vector dependence prevents vectorization%s
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
..LN5569:
        movl      160(%rsp), %r10d                              #166.46
..LN5570:
        cmpl      168(%rsp), %r10d                              #166.46
..LN5571:
        jge       ..B3.14       # Prob 50%                      #166.46
..LN5572:
                                # LOE rbx r13 eax edx ecx esi edi r8d r9d r12d xmm0
..B3.6:                         # Preds ..B3.5
..LN5573:
        movl      $1, %r11d                                     #166.30
..LN5574:
        xorl      %r10d, %r10d                                  #166.30
..LN5575:
        testl     %esi, %esi                                    #166.30
..LN5576:
        jbe       ..B3.10       # Prob 10%                      #166.30
..LN5577:
                                # LOE rbx r11 r13 eax edx ecx esi edi r8d r9d r10d r12d xmm0
..B3.7:                         # Preds ..B3.6
..LN5578:
	.loc    1  168  is_stmt 1
        movl      %ecx, 16(%rsp)                                #168.6
..LN5579:
	.loc    1  167  is_stmt 1
        lea       (%rcx,%r8), %r14d                             #167.5
..LN5580:
	.loc    1  168  is_stmt 1
        movl      %edi, 8(%rsp)                                 #168.6
..LN5581:
	.loc    1  167  is_stmt 1
        lea       (%rdx,%r9), %r15d                             #167.27
..LN5582:
	.loc    1  168  is_stmt 1
        movl      %r12d, 152(%rsp)                              #168.6
..LN5583:
        lea       (%rax,%r9), %r11d                             #168.6
..LN5584:
                                # LOE rbx r13 eax edx esi r8d r9d r10d r11d r14d r15d xmm0
..B3.8:                         # Preds ..B3.8 ..B3.7
..L180:         # optimization report
                # LOOP WAS UNROLLED BY 4
                # %s was not vectorized: vector dependence prevents vectorization%s
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
..LN5585:
	.loc    1  167  is_stmt 1
        lea       (%r15,%r10,4), %ecx                           #167.37
..LN5586:
        movslq    %ecx, %rcx                                    #167.27
..LN5587:
        lea       (%r11,%r10,4), %r12d                          #167.37
..LN5588:
	.loc    1  168  is_stmt 1
        movslq    %r12d, %r12                                   #168.6
..LN5589:
	.loc    1  142  is_stmt 1
        lea       (%r14,%r10,4), %edi                           #142.12
..LN5590:
	.loc    1  167  is_stmt 1
        movslq    %edi, %rdi                                    #167.5
..LN5591:
	.loc    1  166  is_stmt 1
        incl      %r10d                                         #166.30
..LN5592:
	.loc    1  167  is_stmt 1
        vmovsd    16(%r13,%rcx,8), %xmm1                        #167.27
..LN5593:
        vaddsd    24(%r13,%rcx,8), %xmm1, %xmm2                 #167.45
..LN5594:
	.loc    1  168  is_stmt 1
        vaddsd    16(%r13,%r12,8), %xmm2, %xmm3                 #168.6
..LN5595:
        vaddsd    24(%r13,%r12,8), %xmm3, %xmm4                 #168.28
..LN5596:
        vmulsd    %xmm4, %xmm0, %xmm5                           #168.28
..LN5597:
	.loc    1  167  is_stmt 1
        vmovsd    %xmm5, 8(%rbx,%rdi,8)                         #167.5
..LN5598:
        vmovsd    24(%r13,%rcx,8), %xmm6                        #167.27
..LN5599:
        vaddsd    32(%r13,%rcx,8), %xmm6, %xmm7                 #167.45
..LN5600:
	.loc    1  168  is_stmt 1
        vaddsd    24(%r13,%r12,8), %xmm7, %xmm8                 #168.6
..LN5601:
        vaddsd    32(%r13,%r12,8), %xmm8, %xmm9                 #168.28
..LN5602:
        vmulsd    %xmm9, %xmm0, %xmm10                          #168.28
..LN5603:
	.loc    1  167  is_stmt 1
        vmovsd    %xmm10, 16(%rbx,%rdi,8)                       #167.5
..LN5604:
        vmovsd    32(%r13,%rcx,8), %xmm11                       #167.27
..LN5605:
        vaddsd    40(%r13,%rcx,8), %xmm11, %xmm12               #167.45
..LN5606:
	.loc    1  168  is_stmt 1
        vaddsd    32(%r13,%r12,8), %xmm12, %xmm13               #168.6
..LN5607:
        vaddsd    40(%r13,%r12,8), %xmm13, %xmm14               #168.28
..LN5608:
        vmulsd    %xmm14, %xmm0, %xmm15                         #168.28
..LN5609:
	.loc    1  167  is_stmt 1
        vmovsd    %xmm15, 24(%rbx,%rdi,8)                       #167.5
..LN5610:
        vmovsd    40(%r13,%rcx,8), %xmm1                        #167.27
..LN5611:
        vaddsd    48(%r13,%rcx,8), %xmm1, %xmm2                 #167.45
..LN5612:
	.loc    1  168  is_stmt 1
        vaddsd    40(%r13,%r12,8), %xmm2, %xmm3                 #168.6
..LN5613:
        vaddsd    48(%r13,%r12,8), %xmm3, %xmm4                 #168.28
..LN5614:
        vmulsd    %xmm4, %xmm0, %xmm5                           #168.28
..LN5615:
	.loc    1  167  is_stmt 1
        vmovsd    %xmm5, 32(%rbx,%rdi,8)                        #167.5
..LN5616:
	.loc    1  166  is_stmt 1
        cmpl      %esi, %r10d                                   #166.30
..LN5617:
        jb        ..B3.8        # Prob 27%                      #166.30
..LN5618:
                                # LOE rbx r13 eax edx esi r8d r9d r10d r11d r14d r15d xmm0
..B3.9:                         # Preds ..B3.8
..LN5619:
        movl      16(%rsp), %ecx                                #
..LN5620:
	.loc    1  167  is_stmt 1
        lea       1(,%r10,4), %r11d                             #167.5
..LN5621:
        movl      8(%rsp), %edi                                 #
..LN5622:
        movl      152(%rsp), %r12d                              #
..LN5623:
	.loc    1  166  is_stmt 1
        movslq    %r11d, %r11                                   #166.30
..LN5624:
                                # LOE rbx r11 r13 eax edx ecx esi edi r8d r9d r12d xmm0
..B3.10:                        # Preds ..B3.9 ..B3.6
..LN5625:
	.loc    1  167  is_stmt 1
        decq      %r11                                          #167.5
..LN5626:
	.loc    1  166  is_stmt 1
        cmpq      32(%rsp), %r11                                #166.30
..LN5627:
        jae       ..B3.14       # Prob 10%                      #166.30
..LN5628:
                                # LOE rbx r11 r13 eax edx ecx esi edi r8d r9d r12d xmm0
..B3.11:                        # Preds ..B3.10
..LN5629:
	.loc    1  168  is_stmt 1
        movq      %r13, 144(%rsp)                               #168.28
..LN5630:
	.loc    1  167  is_stmt 1
        lea       (%rcx,%r8), %r10d                             #167.5
..LN5631:
        movslq    %r10d, %r10                                   #167.5
..LN5632:
        lea       (%rdx,%r9), %r14d                             #167.27
..LN5633:
        movslq    %r14d, %r14                                   #167.45
..LN5634:
	.loc    1  168  is_stmt 1
        lea       (%rax,%r9), %r15d                             #168.6
..LN5635:
        movslq    %r15d, %r15                                   #168.28
..LN5636:
	.loc    1  167  is_stmt 1
        lea       (%rbx,%r10,8), %r10                           #167.5
..LN5637:
        lea       (%r13,%r14,8), %r14                           #167.45
..LN5638:
	.loc    1  168  is_stmt 1
        lea       (%r13,%r15,8), %r15                           #168.28
..LN5639:
        movq      32(%rsp), %r13                                #168.28
..LN5640:
                                # LOE rbx r10 r11 r13 r14 r15 eax edx ecx esi edi r8d r9d r12d xmm0
..B3.12:                        # Preds ..B3.12 ..B3.11
..L181:         # optimization report
                # REMAINDER LOOP
                # %s was not vectorized: vector dependence prevents vectorization%s
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
..LN5641:
	.loc    1  167  is_stmt 1
        vmovsd    16(%r14,%r11,8), %xmm1                        #167.27
..LN5642:
        vaddsd    24(%r14,%r11,8), %xmm1, %xmm2                 #167.45
..LN5643:
	.loc    1  168  is_stmt 1
        vaddsd    16(%r15,%r11,8), %xmm2, %xmm3                 #168.6
..LN5644:
        vaddsd    24(%r15,%r11,8), %xmm3, %xmm4                 #168.28
..LN5645:
        vmulsd    %xmm4, %xmm0, %xmm5                           #168.28
..LN5646:
	.loc    1  167  is_stmt 1
        vmovsd    %xmm5, 8(%r10,%r11,8)                         #167.5
..LN5647:
	.loc    1  166  is_stmt 1
        incq      %r11                                          #166.30
..LN5648:
        cmpq      %r13, %r11                                    #166.30
..LN5649:
        jb        ..B3.12       # Prob 66%                      #166.30
..LN5650:
                                # LOE rbx r10 r11 r13 r14 r15 eax edx ecx esi edi r8d r9d r12d xmm0
..B3.13:                        # Preds ..B3.12
..LN5651:
        movq      144(%rsp), %r13                               #
..LN5652:
                                # LOE rbx r13 eax edx ecx esi edi r8d r9d r12d xmm0
..B3.14:                        # Preds ..B3.5 ..B3.10 ..B3.13
..LN5653:
        incl      %edi                                          #166.3
..LN5654:
        lea       1(%r8,%r12), %r8d                             #166.3
..LN5655:
        lea       2(%r9,%r12), %r9d                             #166.3
..LN5656:
        cmpl      24(%rsp), %edi                                #166.3
..LN5657:
        jb        ..B3.5        # Prob 82%                      #166.3
..LN5658:
                                # LOE rbx r13 eax edx ecx esi edi r8d r9d r12d xmm0
..B3.15:                        # Preds ..B3.14
..LN5659:
        movl      168(%rsp), %r10d                              #
..LN5660:
        movl      88(%rsp), %ebx                                #
..LN5661:
        movl      96(%rsp), %r15d                               #
..LN5662:
        movl      104(%rsp), %r9d                               #
..LN5663:
        movl      160(%rsp), %r14d                              #
..LN5664:
        movq      80(%rsp), %r11                                #
..LN5665:
                                # LOE r9 r11 r13 ebx r10d r12d r14d r15d
..B3.16:                        # Preds ..B3.3 ..B3.15
..LN5666:
	.loc    1  172  is_stmt 1
        cmpl      $0, 32(%rbp)                                  #172.6
..LN5667:
        je        ..B3.19       # Prob 50%                      #172.6
..LN5668:
                                # LOE r9 r11 r13 r14 ebx r10d r12d r15d
..B3.17:                        # Preds ..B3.16
..LN5669:
        cmpl      $0, 48(%rbp)                                  #172.22
..LN5670:
        je        ..B3.19       # Prob 50%                      #172.22
..LN5671:
                                # LOE r9 r11 r13 r14 ebx r10d r12d r15d
..B3.18:                        # Preds ..B3.17
..LN5672:
        movq      (%rsp), %rax                                  #172.58
..LN5673:
        movq      24(%rbp), %rdx                                #172.36
..LN5674:
        vmovsd    24(%r13,%rax), %xmm0                          #172.58
..LN5675:
        vaddsd    16(%r13,%rax), %xmm0, %xmm1                   #172.76
..LN5676:
        vaddsd    8(%r13), %xmm1, %xmm2                         #172.95
..LN5677:
        vmulsd    .L_2il0floatpacket.2(%rip), %xmm2, %xmm3      #172.95
..LN5678:
        vmovsd    %xmm3, (%rdx)                                 #172.36
..LN5679:
                                # LOE r9 r11 r13 r14 ebx r10d r12d r15d
..B3.19:                        # Preds ..B3.16 ..B3.17 ..B3.18
..LN5680:
	.loc    1  173  is_stmt 1
        cmpl      $0, 40(%rbp)                                  #173.6
..LN5681:
        je        ..B3.24       # Prob 50%                      #173.6
..LN5682:
                                # LOE r9 r11 r13 r14 ebx r10d r12d r15d
..B3.20:                        # Preds ..B3.19
..LN5683:
        cmpl      $0, 48(%rbp)                                  #173.22
..LN5684:
        je        ..B3.22       # Prob 50%                      #173.22
..LN5685:
                                # LOE r9 r11 r13 r14 ebx r10d r12d r15d
..B3.21:                        # Preds ..B3.20
..LN5686:
        movq      128(%rsp), %rax                               #173.58
..LN5687:
        shlq      $4, %rax                                      #173.58
..LN5688:
        movq      (%rsp), %rcx                                  #173.76
..LN5689:
        movq      24(%rbp), %rdx                                #173.36
..LN5690:
        vmovsd    16(%r13,%rax), %xmm0                          #173.58
..LN5691:
        vaddsd    (%r13,%rcx), %xmm0, %xmm1                     #173.76
..LN5692:
        vaddsd    24(%r13,%rax), %xmm1, %xmm2                   #173.95
..LN5693:
        vmulsd    .L_2il0floatpacket.2(%rip), %xmm2, %xmm3      #173.95
..LN5694:
        vmovsd    %xmm3, (%rdx,%rcx)                            #173.36
..LN5695:
                                # LOE r9 r11 r13 r14 ebx r10d r12d r15d
..B3.22:                        # Preds ..B3.20 ..B3.21
..LN5696:
	.loc    1  174  is_stmt 1
        cmpl      $0, 56(%rbp)                                  #174.22
..LN5697:
        je        ..B3.24       # Prob 50%                      #174.22
..LN5698:
                                # LOE r9 r11 r13 r14 ebx r10d r12d r15d
..B3.23:                        # Preds ..B3.22
..LN5699:
        movl      %ebx, %edx                                    #174.87
..LN5700:
        lea       2(%r12), %esi                                 #174.69
..LN5701:
        imull     %esi, %edx                                    #174.87
..LN5702:
	.loc    1  143  is_stmt 1
        lea       1(%rbx), %ecx                                 #143.12
..LN5703:
	.loc    1  174  is_stmt 1
        imull     %ecx, %esi                                    #174.107
..LN5704:
        movslq    %edx, %rdx                                    #174.58
..LN5705:
	.loc    1  142  is_stmt 1
        lea       1(%r12), %edi                                 #142.12
..LN5706:
	.loc    1  174  is_stmt 1
        movq      128(%rsp), %rax                               #174.90
..LN5707:
        addq      %rax, %rdx                                    #174.90
..LN5708:
        movslq    %esi, %rsi                                    #174.95
..LN5709:
        movq      24(%rbp), %r8                                 #174.36
..LN5710:
        addq      %rax, %rsi                                    #174.110
..LN5711:
        imull     %ebx, %edi                                    #174.44
..LN5712:
        vmovsd    (%r13,%rdx,8), %xmm0                          #174.58
..LN5713:
        vaddsd    8(%r13,%rdx,8), %xmm0, %xmm1                  #174.76
..LN5714:
        movslq    %edi, %rdi                                    #174.36
..LN5715:
        vaddsd    (%r13,%rsi,8), %xmm1, %xmm2                   #174.95
..LN5716:
        vmulsd    .L_2il0floatpacket.2(%rip), %xmm2, %xmm3      #174.95
..LN5717:
        addq      %rax, %rdi                                    #174.48
..LN5718:
        vmovsd    %xmm3, (%r8,%rdi,8)                           #174.36
..LN5719:
                                # LOE r9 r11 r13 r14 ebx r10d r12d r15d
..B3.24:                        # Preds ..B3.19 ..B3.22 ..B3.23
..LN5720:
	.loc    1  175  is_stmt 1
        cmpl      $0, 32(%rbp)                                  #175.6
..LN5721:
        je        ..B3.85       # Prob 50%                      #175.6
..LN5722:
                                # LOE r9 r11 r13 r14 ebx r10d r12d r15d
..B3.25:                        # Preds ..B3.24
..LN5723:
        cmpl      $0, 56(%rbp)                                  #175.22
..LN5724:
        je        ..B3.27       # Prob 50%                      #175.22
..LN5725:
                                # LOE r9 r11 r13 r14 ebx r10d r12d r15d
..B3.26:                        # Preds ..B3.25
..LN5726:
        movl      %ebx, %eax                                    #175.87
..LN5727:
        lea       2(%r12), %ecx                                 #175.69
..LN5728:
        imull     %ecx, %eax                                    #175.87
..LN5729:
	.loc    1  143  is_stmt 1
        lea       1(%rbx), %edx                                 #143.12
..LN5730:
	.loc    1  175  is_stmt 1
        imull     %edx, %ecx                                    #175.107
..LN5731:
        movslq    %eax, %rax                                    #175.58
..LN5732:
	.loc    1  142  is_stmt 1
        lea       1(%r12), %esi                                 #142.12
..LN5733:
	.loc    1  175  is_stmt 1
        movslq    %ecx, %rcx                                    #175.95
..LN5734:
        movq      24(%rbp), %rdi                                #175.36
..LN5735:
        imull     %ebx, %esi                                    #175.44
..LN5736:
        vmovsd    8(%r13,%rax,8), %xmm0                         #175.58
..LN5737:
        vaddsd    (%r13,%rax,8), %xmm0, %xmm1                   #175.76
..LN5738:
        movslq    %esi, %rsi                                    #175.36
..LN5739:
        vaddsd    8(%r13,%rcx,8), %xmm1, %xmm2                  #175.95
..LN5740:
        vmulsd    .L_2il0floatpacket.2(%rip), %xmm2, %xmm3      #175.95
..LN5741:
        vmovsd    %xmm3, (%rdi,%rsi,8)                          #175.36
..LN5742:
                                # LOE r9 r11 r13 r14 ebx r10d r12d r15d
..B3.27:                        # Preds ..B3.25 ..B3.26
..LN5743:
	.loc    1  179  is_stmt 1
        cmpl      %r15d, %r9d                                   #179.22
..LN5744:
        jg        ..B3.49       # Prob 50%                      #179.22
..LN5745:
                                # LOE r9 r11 r13 r14 ebx r10d r12d r15d
..B3.28:                        # Preds ..B3.27
..LN5746:
        movl      %r15d, %ecx                                   #179.5
..LN5747:
        subl      %r9d, %ecx                                    #179.5
..LN5748:
        incl      %ecx                                          #179.5
..LN5749:
        cmpl      $8, %ecx                                      #179.5
..LN5750:
        jl        ..B3.294      # Prob 10%                      #179.5
..LN5751:
                                # LOE r9 r11 r13 r14 ecx ebx r10d r12d r15d
..B3.29:                        # Preds ..B3.28
..LN5752:
        lea       (%r11,%r9,8), %rdi                            #179.33
..LN5753:
        movq      %rdi, (%rsp)                                  #179.33
..LN5754:
        andq      $15, %rdi                                     #179.5
..LN5755:
        movl      %edi, %edi                                    #179.5
..LN5756:
        testl     %edi, %edi                                    #179.5
..LN5757:
        je        ..B3.32       # Prob 50%                      #179.5
..LN5758:
                                # LOE rdi r11 r13 r14 ecx ebx r9d r10d r12d r15d
..B3.30:                        # Preds ..B3.29
..LN5759:
        testl     $7, %edi                                      #179.5
..LN5760:
        jne       ..B3.294      # Prob 10%                      #179.5
..LN5761:
                                # LOE r11 r13 r14 ecx ebx r9d r10d r12d r15d
..B3.31:                        # Preds ..B3.30
..LN5762:
        movl      $1, %edi                                      #179.5
..LN5763:
                                # LOE rdi r11 r13 r14 ecx ebx r9d r10d r12d r15d
..B3.32:                        # Preds ..B3.31 ..B3.29
..LN5764:
        lea       8(%rdi), %eax                                 #179.5
..LN5765:
        cmpl      %eax, %ecx                                    #179.5
..LN5766:
        jl        ..B3.294      # Prob 10%                      #179.5
..LN5767:
                                # LOE rdi r11 r13 r14 ecx ebx r9d r10d r12d r15d
..B3.33:                        # Preds ..B3.32
..LN5768:
        movl      %ecx, %edx                                    #179.5
..LN5769:
	.loc    1  167  is_stmt 1
        lea       2(%r12), %eax                                 #167.37
..LN5770:
	.loc    1  179  is_stmt 1
        subl      %edi, %edx                                    #179.5
..LN5771:
        lea       -1(%r9), %esi                                 #179.33
..LN5772:
        imull     %eax, %esi                                    #179.33
..LN5773:
        andl      $7, %edx                                      #179.5
..LN5774:
        negl      %edx                                          #179.5
..LN5775:
        lea       (%r12,%rsi), %r8d                             #179.46
..LN5776:
        addl      %ecx, %edx                                    #179.5
..LN5777:
        movl      $0, 48(%rsp)                                  #179.5
..LN5778:
        movq      $0, 32(%rsp)                                  #179.33
..LN5779:
        movl      %r8d, 40(%rsp)                                #179.46
..LN5780:
        testl     %edi, %edi                                    #179.5
..LN5781:
        jbe       ..B3.37       # Prob 15%                      #179.5
..LN5782:
                                # LOE rdi r8 r11 r13 r14 eax edx ecx ebx esi r8d r9d r10d r12d r15d r8b
..B3.34:                        # Preds ..B3.33
..LN5783:
        movl      $0, 24(%rsp)                                  #179.33
..LN5784:
        movl      %esi, 8(%rsp)                                 #179.33
..LN5785:
        movl      %eax, 16(%rsp)                                #179.33
..LN5786:
        movl      %r9d, 104(%rsp)                               #179.33
..LN5787:
        movq      %r11, 80(%rsp)                                #179.33
..LN5788:
        vmovsd    .L_2il0floatpacket.3(%rip), %xmm0             #179.41
..LN5789:
        movl      %r14d, 160(%rsp)                              #179.33
..LN5790:
        movl      24(%rsp), %r11d                               #179.33
..LN5791:
        movq      32(%rsp), %r9                                 #179.33
..LN5792:
        movl      48(%rsp), %esi                                #179.33
..LN5793:
        movq      (%rsp), %rax                                  #179.33
..LN5794:
                                # LOE rax rdi r9 r13 edx ecx ebx esi r8d r10d r11d r12d r15d xmm0
..B3.35:                        # Preds ..B3.35 ..B3.34
..L182:         # optimization report
                # LOOP WAS UNROLLED BY 4
                # PEELED LOOP FOR VECTORIZATION
                # VECTORIZATION SPEEDUP COEFFECIENT 3.158203
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 2
                # NORMALIZED VECTORIZATION OVERHEAD 0.234375
..LN5795:
	.loc    1  167  is_stmt 1
        lea       (%r8,%r11), %r14d                             #167.37
..LN5796:
	.loc    1  179  is_stmt 1
        movslq    %r14d, %r14                                   #179.46
..LN5797:
        incl      %esi                                          #179.5
..LN5798:
        lea       2(%r11,%r12), %r11d                           #179.5
..LN5799:
        vmovsd    16(%r13,%r14,8), %xmm1                        #179.46
..LN5800:
        vaddsd    24(%r13,%r14,8), %xmm1, %xmm2                 #179.62
..LN5801:
        vmulsd    %xmm2, %xmm0, %xmm3                           #179.62
..LN5802:
        vmovsd    %xmm3, (%rax,%r9,8)                           #179.33
..LN5803:
        incq      %r9                                           #179.5
..LN5804:
        cmpl      %edi, %esi                                    #179.5
..LN5805:
        jb        ..B3.35       # Prob 82%                      #179.5
..LN5806:
                                # LOE rax rdi r9 r13 edx ecx ebx esi r8d r10d r11d r12d r15d xmm0
..B3.36:                        # Preds ..B3.35
..LN5807:
        movl      8(%rsp), %esi                                 #
..LN5808:
        movl      16(%rsp), %eax                                #
..LN5809:
        movl      104(%rsp), %r9d                               #
..LN5810:
        movl      160(%rsp), %r14d                              #
..LN5811:
        movq      80(%rsp), %r11                                #
..LN5812:
                                # LOE rdi r11 r13 eax edx ecx ebx esi r9d r10d r12d r14d r15d
..B3.37:                        # Preds ..B3.33 ..B3.36
..LN5813:
        imull     %edi, %eax                                    #179.5
..LN5814:
        lea       16(,%r12,8), %r8d                             #179.5
..LN5815:
        vmovupd   .L_2il0floatpacket.6(%rip), %xmm0             #179.41
..LN5816:
        movl      %r8d, 8(%rsp)                                 #179.5
..LN5817:
        lea       (%r12,%r12,2), %r8d                           #179.46
..LN5818:
        addl      %esi, %r8d                                    #179.46
..LN5819:
        movl      %r8d, 24(%rsp)                                #179.46
..LN5820:
        lea       (%r12,%r12,4), %r8d                           #179.46
..LN5821:
        addl      %esi, %r8d                                    #179.46
..LN5822:
        movl      %r8d, 16(%rsp)                                #179.46
..LN5823:
        lea       (,%r12,8), %r8d                               #179.46
..LN5824:
        subl      %r12d, %r8d                                   #179.46
..LN5825:
        addl      %r8d, %esi                                    #179.46
..LN5826:
        movl      %r10d, 168(%rsp)                              #179.46
..LN5827:
        movl      %ebx, 88(%rsp)                                #179.46
..LN5828:
        movl      %ecx, 32(%rsp)                                #179.46
..LN5829:
        movl      %r9d, 104(%rsp)                               #179.46
..LN5830:
        movq      %r11, 80(%rsp)                                #179.46
..LN5831:
        movl      %r12d, 152(%rsp)                              #179.46
..LN5832:
        movl      %r15d, 96(%rsp)                               #179.46
..LN5833:
        movl      %r14d, 160(%rsp)                              #179.46
..LN5834:
        movl      16(%rsp), %r10d                               #179.46
..LN5835:
        movl      24(%rsp), %r12d                               #179.46
..LN5836:
        movq      %rdi, %r11                                    #179.46
..LN5837:
        movl      8(%rsp), %r9d                                 #179.46
..LN5838:
        movl      40(%rsp), %ecx                                #179.46
..LN5839:
        movq      (%rsp), %rbx                                  #179.46
..LN5840:
        movq      128(%rsp), %r8                                #179.46
..LN5841:
                                # LOE rbx r8 r11 r13 eax edx ecx esi edi r9d r10d r12d xmm0
..B3.38:                        # Preds ..B3.38 ..B3.37
..L183:         # optimization report
                # LOOP WAS UNROLLED BY 4
                # LOOP WAS VECTORIZED
                # VECTORIZATION SPEEDUP COEFFECIENT 3.158203
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 2
                # NORMALIZED VECTORIZATION OVERHEAD 0.234375
                # MAIN VECTOR TYPE: 64-bits floating point
..LN5842:
	.loc    1  167  is_stmt 1
        lea       (%rcx,%rax), %r14d                            #167.37
..LN5843:
	.loc    1  179  is_stmt 1
        movslq    %r14d, %r14                                   #179.46
..LN5844:
        addl      $8, %edi                                      #179.5
..LN5845:
        lea       16(%r13,%r14,8), %r15                         #179.46
..LN5846:
        vmovsd    (%r15), %xmm1                                 #179.46
..LN5847:
        vmovhpd   16(%r15,%r8,8), %xmm1, %xmm3                  #179.46
..LN5848:
        lea       24(%r13,%r14,8), %r15                         #179.62
..LN5849:
        vmovsd    (%r15), %xmm2                                 #179.62
..LN5850:
        lea       (%r12,%rax), %r14d                            #179.46
..LN5851:
        movslq    %r14d, %r14                                   #179.46
..LN5852:
        vmovhpd   16(%r15,%r8,8), %xmm2, %xmm4                  #179.62
..LN5853:
        vaddpd    %xmm4, %xmm3, %xmm5                           #179.62
..LN5854:
        vmulpd    %xmm5, %xmm0, %xmm6                           #179.62
..LN5855:
        vmovupd   %xmm6, (%rbx,%r11,8)                          #179.33
..LN5856:
        lea       48(%r13,%r14,8), %r15                         #179.46
..LN5857:
        vmovsd    (%r15), %xmm7                                 #179.46
..LN5858:
        vmovhpd   16(%r15,%r8,8), %xmm7, %xmm9                  #179.46
..LN5859:
        lea       56(%r13,%r14,8), %r15                         #179.62
..LN5860:
        vmovsd    (%r15), %xmm8                                 #179.62
..LN5861:
        lea       (%r10,%rax), %r14d                            #179.46
..LN5862:
        movslq    %r14d, %r14                                   #179.46
..LN5863:
        vmovhpd   16(%r15,%r8,8), %xmm8, %xmm10                 #179.62
..LN5864:
        vaddpd    %xmm10, %xmm9, %xmm11                         #179.62
..LN5865:
        vmulpd    %xmm11, %xmm0, %xmm12                         #179.62
..LN5866:
        vmovupd   %xmm12, 16(%rbx,%r11,8)                       #179.33
..LN5867:
        lea       80(%r13,%r14,8), %r15                         #179.46
..LN5868:
        vmovsd    (%r15), %xmm13                                #179.46
..LN5869:
        vmovhpd   16(%r15,%r8,8), %xmm13, %xmm15                #179.46
..LN5870:
        lea       88(%r13,%r14,8), %r15                         #179.62
..LN5871:
        vmovsd    (%r15), %xmm14                                #179.62
..LN5872:
        lea       (%rsi,%rax), %r14d                            #179.46
..LN5873:
        movslq    %r14d, %r14                                   #179.46
..LN5874:
        addl      %r9d, %eax                                    #179.5
..LN5875:
        vmovhpd   16(%r15,%r8,8), %xmm14, %xmm1                 #179.62
..LN5876:
        vaddpd    %xmm1, %xmm15, %xmm2                          #179.62
..LN5877:
        vmulpd    %xmm2, %xmm0, %xmm3                           #179.62
..LN5878:
        vmovupd   %xmm3, 32(%rbx,%r11,8)                        #179.33
..LN5879:
        lea       112(%r13,%r14,8), %r15                        #179.46
..LN5880:
        vmovsd    (%r15), %xmm4                                 #179.46
..LN5881:
        vmovhpd   16(%r15,%r8,8), %xmm4, %xmm6                  #179.46
..LN5882:
        lea       120(%r13,%r14,8), %r15                        #179.62
..LN5883:
        vmovsd    (%r15), %xmm5                                 #179.62
..LN5884:
        vmovhpd   16(%r15,%r8,8), %xmm5, %xmm7                  #179.62
..LN5885:
        vaddpd    %xmm7, %xmm6, %xmm8                           #179.62
..LN5886:
        vmulpd    %xmm8, %xmm0, %xmm9                           #179.62
..LN5887:
        vmovupd   %xmm9, 48(%rbx,%r11,8)                        #179.33
..LN5888:
        addq      $8, %r11                                      #179.5
..LN5889:
        cmpl      %edx, %edi                                    #179.5
..LN5890:
        jb        ..B3.38       # Prob 82%                      #179.5
..LN5891:
                                # LOE rbx r8 r11 r13 eax edx ecx esi edi r9d r10d r12d xmm0
..B3.39:                        # Preds ..B3.38
..LN5892:
        movl      168(%rsp), %r10d                              #
..LN5893:
        movl      88(%rsp), %ebx                                #
..LN5894:
        movl      96(%rsp), %r15d                               #
..LN5895:
        movl      32(%rsp), %ecx                                #
..LN5896:
        movl      104(%rsp), %r9d                               #
..LN5897:
        movl      160(%rsp), %r14d                              #
..LN5898:
        movq      80(%rsp), %r11                                #
..LN5899:
        movl      152(%rsp), %r12d                              #
..LN5900:
                                # LOE r11 r13 edx ecx ebx r9d r10d r12d r14d r15d
..B3.40:                        # Preds ..B3.39 ..B3.294
..LN5901:
        lea       1(%rdx), %eax                                 #179.5
..LN5902:
        cmpl      %eax, %ecx                                    #179.5
..LN5903:
        jb        ..B3.303      # Prob 50%                      #179.5
..LN5904:
                                # LOE r9 r11 r13 r14 edx ecx ebx r10d r12d r15d
..B3.41:                        # Preds ..B3.40
..LN5905:
        subl      %edx, %ecx                                    #179.5
..LN5906:
        cmpl      $2, %ecx                                      #179.5
..LN5907:
        jl        ..B3.293      # Prob 10%                      #179.5
..LN5908:
                                # LOE r9 r11 r13 r14 edx ecx ebx r10d r12d r15d
..B3.42:                        # Preds ..B3.41
..LN5909:
        xorl      %esi, %esi                                    #179.5
..LN5910:
        lea       4(%r12,%r12), %r8d                            #179.5
..LN5911:
        movl      %r8d, 8(%rsp)                                 #179.5
..LN5912:
	.loc    1  167  is_stmt 1
        lea       2(%r12), %edi                                 #167.37
..LN5913:
        lea       -1(%rdx,%r9), %r8d                            #167.37
..LN5914:
        imull     %edi, %r8d                                    #167.37
..LN5915:
	.loc    1  179  is_stmt 1
        movl      %ecx, %eax                                    #179.5
..LN5916:
        vmovupd   .L_2il0floatpacket.5(%rip), %xmm0             #179.41
..LN5917:
        movl      %r9d, %edi                                    #179.33
..LN5918:
        andl      $-2, %eax                                     #179.5
..LN5919:
        movslq    %edx, %rdx                                    #179.33
..LN5920:
	.loc    1  167  is_stmt 1
        addl      %r12d, %r8d                                   #167.37
..LN5921:
	.loc    1  179  is_stmt 1
        addq      %rdx, %rdi                                    #179.33
..LN5922:
        movl      %edx, (%rsp)                                  #179.5
..LN5923:
        movl      %r9d, 104(%rsp)                               #179.5
..LN5924:
        movq      %r11, 80(%rsp)                                #179.5
..LN5925:
        movl      %r12d, 152(%rsp)                              #179.5
..LN5926:
        lea       (%r11,%rdi,8), %rdi                           #179.33
..LN5927:
        movq      %rdi, 16(%rsp)                                #179.33
..LN5928:
        xorl      %edi, %edi                                    #179.5
..LN5929:
        movl      %r14d, 160(%rsp)                              #179.5
..LN5930:
        movl      %esi, %r12d                                   #179.5
..LN5931:
        movq      16(%rsp), %r11                                #179.5
..LN5932:
        movl      8(%rsp), %edx                                 #179.5
..LN5933:
        movq      128(%rsp), %r9                                #179.5
..LN5934:
        .align    16,0x90
..LN5935:
                                # LOE rdi r9 r11 r13 eax edx ecx ebx esi r8d r10d r12d r15d xmm0
..B3.43:                        # Preds ..B3.43 ..B3.42
..L184:         # optimization report
                # LOOP WAS VECTORIZED
                # REMAINDER LOOP FOR VECTORIZATION
                # VECTORIZATION HAS UNALIGNED MEMORY REFERENCES
                # VECTORIZATION SPEEDUP COEFFECIENT 1.726562
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 2
                # NORMALIZED VECTORIZATION OVERHEAD 0.937500
                # MAIN VECTOR TYPE: 64-bits floating point
..LN5936:
        lea       (%r8,%r12), %r14d                             #179.46
..LN5937:
        movslq    %r14d, %r14                                   #179.46
..LN5938:
        addl      $2, %esi                                      #179.5
..LN5939:
        addl      %edx, %r12d                                   #179.5
..LN5940:
        lea       (%r13,%r14,8), %r14                           #179.46
..LN5941:
        vmovsd    16(%r14), %xmm1                               #179.46
..LN5942:
        vmovsd    24(%r14), %xmm2                               #179.62
..LN5943:
        vmovhpd   32(%r14,%r9,8), %xmm1, %xmm3                  #179.46
..LN5944:
        vmovhpd   40(%r14,%r9,8), %xmm2, %xmm4                  #179.62
..LN5945:
        vaddpd    %xmm4, %xmm3, %xmm5                           #179.62
..LN5946:
        vmulpd    %xmm5, %xmm0, %xmm6                           #179.62
..LN5947:
        vmovupd   %xmm6, (%r11,%rdi,8)                          #179.33
..LN5948:
        addq      $2, %rdi                                      #179.5
..LN5949:
        cmpl      %eax, %esi                                    #179.5
..LN5950:
        jb        ..B3.43       # Prob 82%                      #179.5
..LN5951:
                                # LOE rdi r9 r11 r13 eax edx ecx ebx esi r8d r10d r12d r15d xmm0
..B3.44:                        # Preds ..B3.43
..LN5952:
        movl      (%rsp), %edx                                  #
..LN5953:
        movl      104(%rsp), %r9d                               #
..LN5954:
        movl      160(%rsp), %r14d                              #
..LN5955:
        movq      80(%rsp), %r11                                #
..LN5956:
        movl      152(%rsp), %r12d                              #
..LN5957:
                                # LOE r11 r13 eax edx ecx ebx r9d r10d r12d r14d r15d
..B3.45:                        # Preds ..B3.44 ..B3.293
..LN5958:
        movslq    %eax, %rdi                                    #179.5
..LN5959:
        cmpl      %ecx, %eax                                    #179.5
..LN5960:
        jae       ..B3.303      # Prob 15%                      #179.5
..LN5961:
                                # LOE rdi r9 r11 r13 r14 eax edx ecx ebx r10d r12d r15d
..B3.46:                        # Preds ..B3.45
..LN5962:
        movl      %eax, %esi                                    #179.5
..LN5963:
	.loc    1  167  is_stmt 1
        lea       2(%r12), %r8d                                 #167.37
..LN5964:
	.loc    1  179  is_stmt 1
        imull     %r8d, %esi                                    #179.5
..LN5965:
        vmovsd    .L_2il0floatpacket.3(%rip), %xmm0             #179.41
..LN5966:
        movl      %esi, (%rsp)                                  #179.5
..LN5967:
	.loc    1  167  is_stmt 1
        lea       -1(%rdx,%r9), %esi                            #167.37
..LN5968:
        imull     %r8d, %esi                                    #167.37
..LN5969:
	.loc    1  179  is_stmt 1
        movslq    %edx, %rdx                                    #179.33
..LN5970:
	.loc    1  167  is_stmt 1
        addl      %r12d, %esi                                   #167.37
..LN5971:
	.loc    1  179  is_stmt 1
        movl      %r9d, %r8d                                    #179.33
..LN5972:
        addq      %rdx, %r8                                     #179.33
..LN5973:
        movq      %r11, 80(%rsp)                                #179.33
..LN5974:
        movl      (%rsp), %edx                                  #179.33
..LN5975:
        lea       (%r11,%r8,8), %r8                             #179.33
..LN5976:
                                # LOE rdi r8 r9 r13 r14 eax edx ecx ebx esi r10d r12d r15d xmm0
..B3.47:                        # Preds ..B3.47 ..B3.46
..L185:         # optimization report
                # REMAINDER LOOP FOR VECTORIZATION
                # VECTORIZATION SPEEDUP COEFFECIENT 1.726562
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 2
                # NORMALIZED VECTORIZATION OVERHEAD 0.937500
..LN5977:
        lea       (%rsi,%rdx), %r11d                            #179.46
..LN5978:
        movslq    %r11d, %r11                                   #179.62
..LN5979:
        incl      %eax                                          #179.5
..LN5980:
        lea       2(%rdx,%r12), %edx                            #179.5
..LN5981:
        vmovsd    16(%r13,%r11,8), %xmm1                        #179.46
..LN5982:
        vaddsd    24(%r13,%r11,8), %xmm1, %xmm2                 #179.62
..LN5983:
        vmulsd    %xmm2, %xmm0, %xmm3                           #179.62
..LN5984:
        vmovsd    %xmm3, (%r8,%rdi,8)                           #179.33
..LN5985:
        incq      %rdi                                          #179.5
..LN5986:
        cmpl      %ecx, %eax                                    #179.5
..LN5987:
        jb        ..B3.47       # Prob 82%                      #179.5
..LN5988:
                                # LOE rdi r8 r9 r13 r14 eax edx ecx ebx esi r10d r12d r15d xmm0
..B3.48:                        # Preds ..B3.47
..LN5989:
        movq      80(%rsp), %r11                                #
..LN5990:
	.loc    1  166  is_stmt 1
        cmpl      %r15d, %r9d                                   #166.19
..LN5991:
                                # LOE r9 r11 r13 r14 ebx r10d r12d r15d
..B3.49:                        # Preds ..B3.27 ..B3.48
..LN5992:
	.loc    1  180  is_stmt 1
        jge       ..B3.85       # Prob 50%                      #180.21
..LN5993:
                                # LOE r9 r11 r13 r14 ebx r10d r12d r15d
..B3.50:                        # Preds ..B3.303 ..B3.49
..LN5994:
        movl      %r9d, %eax                                    #180.46
..LN5995:
	.loc    1  142  is_stmt 1
        lea       1(%r12), %esi                                 #142.12
..LN5996:
	.loc    1  180  is_stmt 1
        movq      64(%rsp), %rdx                                #180.46
..LN5997:
        movq      24(%rbp), %rdi                                #180.32
..LN5998:
	.loc    1  142  is_stmt 1
        movl      %esi, 48(%rsp)                                #142.12
..LN5999:
	.loc    1  180  is_stmt 1
        lea       (%rdx,%rax,8), %rcx                           #180.46
..LN6000:
        movq      %rcx, 56(%rsp)                                #180.46
..LN6001:
        lea       -1(%r9), %edx                                 #180.32
..LN6002:
        imull     %esi, %edx                                    #180.32
..LN6003:
        lea       (,%r12,8), %esi                               #180.32
..LN6004:
        movslq    %edx, %r8                                     #180.32
..LN6005:
	.loc    1  142  is_stmt 1
        addq      128(%rsp), %r8                                #142.12
..LN6006:
	.loc    1  180  is_stmt 1
        movl      %esi, (%rsp)                                  #180.32
..LN6007:
        lea       8(%rdi,%r8,8), %rcx                           #180.32
..LN6008:
        movq      %rcx, 8(%rsp)                                 #180.32
..LN6009:
        lea       8(,%r12,8), %edi                              #180.32
..LN6010:
        testl     %edi, %edi                                    #180.46
..LN6011:
        jle       ..B3.314      # Prob 50%                      #180.46
..LN6012:
                                # LOE rax r9 r11 r13 r14 edx ebx r10d r12d r15d
..B3.51:                        # Preds ..B3.50
..LN6013:
        movq      56(%rsp), %rcx                                #180.46
..LN6014:
        cmpq      8(%rsp), %rcx                                 #180.46
..LN6015:
        jae       ..B3.313      # Prob 50%                      #180.46
..LN6016:
                                # LOE rax r9 r11 r13 r14 edx ebx r10d r12d r15d
..B3.52:                        # Preds ..B3.51
..LN6017:
        movslq    %r15d, %rcx                                   #180.5
..LN6018:
        movq      %rcx, %rdi                                    #180.5
..LN6019:
        movq      8(%rsp), %rsi                                 #180.46
..LN6020:
        subq      %rax, %rdi                                    #180.5
..LN6021:
        subq      56(%rsp), %rsi                                #180.46
..LN6022:
        shlq      $3, %rdi                                      #180.46
..LN6023:
        cmpq      %rdi, %rsi                                    #180.46
..LN6024:
        jge       ..B3.55       # Prob 50%                      #180.46
..LN6025:
        jmp       ..B3.53       # Prob 100%                     #180.46
..LN6026:
                                # LOE rax rcx r9 r11 r13 r14 edx ebx r10d r12d r15d
..B3.313:                       # Preds ..B3.51
..LN6027:
        movslq    %r15d, %rcx                                   #180.5
..LN6028:
                                # LOE rax rcx r9 r11 r13 r14 edx ebx r10d r12d r15d
..B3.53:                        # Preds ..B3.313 ..B3.52
..LN6029:
        movq      56(%rsp), %rsi                                #180.46
..LN6030:
        cmpq      8(%rsp), %rsi                                 #180.46
..LN6031:
        jbe       ..B3.77       # Prob 50%                      #180.46
..LN6032:
                                # LOE rax rcx r9 r11 r13 r14 edx ebx r10d r12d r15d
..B3.54:                        # Preds ..B3.53
..LN6033:
        movq      %rcx, %rsi                                    #180.5
..LN6034:
        subq      %rax, %rsi                                    #180.5
..LN6035:
        movslq    (%rsp), %r8                                   #180.32
..LN6036:
        decq      %rsi                                          #180.32
..LN6037:
        addq      $8, %r8                                       #180.32
..LN6038:
        imulq     %rsi, %r8                                     #180.32
..LN6039:
        movq      8(%rsp), %rdi                                 #180.46
..LN6040:
        addq      $8, %r8                                       #180.32
..LN6041:
        negq      %rdi                                          #180.46
..LN6042:
        addq      56(%rsp), %rdi                                #180.46
..LN6043:
        cmpq      %r8, %rdi                                     #180.46
..LN6044:
        jl        ..B3.77       # Prob 50%                      #180.46
..LN6045:
                                # LOE rax rcx r9 r11 r13 r14 edx ebx r10d r12d r15d
..B3.55:                        # Preds ..B3.52 ..B3.54
..LN6046:
        movl      %r15d, %esi                                   #180.5
..LN6047:
        subl      %r9d, %esi                                    #180.5
..LN6048:
        cmpl      $16, %esi                                     #180.5
..LN6049:
        jl        ..B3.262      # Prob 10%                      #180.5
..LN6050:
                                # LOE rax r9 r11 r13 r14 edx ebx esi r10d r12d r15d
..B3.56:                        # Preds ..B3.55
..LN6051:
        cmpl      $29, %esi                                     #180.5
..LN6052:
        jl        ..B3.264      # Prob 10%                      #180.5
..LN6053:
                                # LOE rax r9 r11 r13 r14 edx ebx esi r10d r12d r15d
..B3.57:                        # Preds ..B3.56
..LN6054:
        movq      56(%rsp), %rcx                                #180.5
..LN6055:
        andq      $31, %rcx                                     #180.5
..LN6056:
        movl      %ecx, %ecx                                    #180.5
..LN6057:
        testl     %ecx, %ecx                                    #180.5
..LN6058:
        je        ..B3.60       # Prob 50%                      #180.5
..LN6059:
                                # LOE rax rcx r9 r11 r13 r14 edx ebx esi r10d r12d r15d
..B3.58:                        # Preds ..B3.57
..LN6060:
        testb     $7, %cl                                       #180.5
..LN6061:
        jne       ..B3.262      # Prob 10%                      #180.5
..LN6062:
                                # LOE rax rcx r9 r11 r13 r14 edx ebx esi r10d r12d r15d
..B3.59:                        # Preds ..B3.58
..LN6063:
        negl      %ecx                                          #180.5
..LN6064:
        addl      $32, %ecx                                     #180.5
..LN6065:
        shrl      $3, %ecx                                      #180.5
..LN6066:
                                # LOE rax rcx r9 r11 r13 r14 edx ebx esi r10d r12d r15d
..B3.60:                        # Preds ..B3.59 ..B3.57
..LN6067:
        lea       16(%rcx), %edi                                #180.5
..LN6068:
        cmpl      %edi, %esi                                    #180.5
..LN6069:
        jl        ..B3.262      # Prob 10%                      #180.5
..LN6070:
                                # LOE rax rcx r9 r11 r13 r14 edx ebx esi r10d r12d r15d
..B3.61:                        # Preds ..B3.60
..LN6071:
        movl      %esi, %edi                                    #180.5
..LN6072:
        lea       (%r11,%rax,8), %r8                            #180.56
..LN6073:
        subl      %ecx, %edi                                    #180.5
..LN6074:
        andl      $15, %edi                                     #180.5
..LN6075:
        negl      %edi                                          #180.5
..LN6076:
        addl      %esi, %edi                                    #180.5
..LN6077:
        movq      %r8, 72(%rsp)                                 #180.56
..LN6078:
        lea       (%r12,%rdx), %r8d                             #180.32
..LN6079:
        movq      $0, (%rsp)                                    #180.5
..LN6080:
        movl      %r8d, 40(%rsp)                                #180.32
..LN6081:
        testq     %rcx, %rcx                                    #180.5
..LN6082:
        jbe       ..B3.65       # Prob 9%                       #180.5
..LN6083:
                                # LOE rax rcx r8 r9 r11 r13 r14 edx ebx esi edi r8d r10d r12d r15d r8b
..B3.62:                        # Preds ..B3.61
..LN6084:
        movq      %rax, 64(%rsp)                                #
..LN6085:
        movl      %r9d, 104(%rsp)                               #
..LN6086:
        movq      %r11, 80(%rsp)                                #
..LN6087:
        movl      %r12d, 152(%rsp)                              #
..LN6088:
        movq      %r13, 144(%rsp)                               #
..LN6089:
        movl      %r14d, 160(%rsp)                              #
..LN6090:
        movq      72(%rsp), %r11                                #
..LN6091:
        movl      %r8d, %r9d                                    #
..LN6092:
        movq      (%rsp), %r12                                  #
..LN6093:
        movl      48(%rsp), %r13d                               #
..LN6094:
        movq      56(%rsp), %rax                                #
..LN6095:
        movq      24(%rbp), %r8                                 #
..LN6096:
                                # LOE rax rcx r8 r11 r12 edx ebx esi edi r9d r10d r13d r15d
..B3.63:                        # Preds ..B3.63 ..B3.62
..L186:         # optimization report
                # MULTIVERSIONED FOR DATA DEPENDENCE, VER 1
                # LOOP WAS UNROLLED BY 2
                # PEELED LOOP FOR VECTORIZATION
                # VECTORIZATION SPEEDUP COEFFECIENT 3.888672
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 8
                # NORMALIZED VECTORIZATION OVERHEAD 0.187500
..LN6097:
        movl      %r12d, %r14d                                  #180.32
..LN6098:
        vmovsd    8(%r11,%r12,8), %xmm0                         #180.78
..LN6099:
        imull     %r13d, %r14d                                  #180.32
..LN6100:
        vsubsd    (%r11,%r12,8), %xmm0, %xmm1                   #180.32
..LN6101:
	.loc    1  142  is_stmt 1
        addl      %r9d, %r14d                                   #142.12
..LN6102:
	.loc    1  180  is_stmt 1
        vfnmadd132sd (%rax,%r12,8), %xmm0, %xmm1                #180.32
..LN6103:
        incq      %r12                                          #180.5
..LN6104:
        movslq    %r14d, %r14                                   #180.32
..LN6105:
        vmovsd    %xmm1, 8(%r8,%r14,8)                          #180.32
..LN6106:
        cmpq      %rcx, %r12                                    #180.5
..LN6107:
        jb        ..B3.63       # Prob 81%                      #180.5
..LN6108:
                                # LOE rax rcx r8 r11 r12 edx ebx esi edi r9d r10d r13d r15d
..B3.64:                        # Preds ..B3.63
..LN6109:
        movq      64(%rsp), %rax                                #
..LN6110:
        movl      104(%rsp), %r9d                               #
..LN6111:
        movl      160(%rsp), %r14d                              #
..LN6112:
        movq      80(%rsp), %r11                                #
..LN6113:
        movl      152(%rsp), %r12d                              #
..LN6114:
        movq      144(%rsp), %r13                               #
..LN6115:
                                # LOE rax rcx r11 r13 edx ebx esi edi r9d r10d r12d r14d r15d
..B3.65:                        # Preds ..B3.61 ..B3.64 ..B3.264
..LN6116:
        movl      %r10d, 168(%rsp)                              #
..LN6117:
        movq      128(%rsp), %r10                               #180.32
..LN6118:
        movslq    %edi, %rdi                                    #180.5
..LN6119:
        movl      %edx, 8(%rsp)                                 #180.32
..LN6120:
        lea       8(,%r10,8), %r8                               #180.32
..LN6121:
        movq      %r8, 32(%rsp)                                 #180.32
..LN6122:
        lea       (%r12,%r12,8), %r10d                          #180.32
..LN6123:
        addl      %edx, %r10d                                   #180.32
..LN6124:
        lea       (%r8,%r8,2), %r8                              #180.32
..LN6125:
        movl      %r10d, 24(%rsp)                               #180.32
..LN6126:
        movl      %edi, (%rsp)                                  #180.32
..LN6127:
        movl      %esi, 16(%rsp)                                #180.32
..LN6128:
        movq      %rax, 64(%rsp)                                #180.32
..LN6129:
        movl      %r9d, 104(%rsp)                               #180.32
..LN6130:
        movl      %r14d, 160(%rsp)                              #180.32
..LN6131:
        movq      %r11, 80(%rsp)                                #180.32
..LN6132:
        movl      %r12d, 152(%rsp)                              #180.32
..LN6133:
        vmovupd   .L_2il0floatpacket.7(%rip), %ymm0             #180.65
..LN6134:
        movl      168(%rsp), %r10d                              #180.32
..LN6135:
        movq      72(%rsp), %r12                                #180.32
..LN6136:
        movl      40(%rsp), %r11d                               #180.32
..LN6137:
        movq      %r8, %r14                                     #180.32
..LN6138:
        movq      %rdi, %rax                                    #180.32
..LN6139:
        movl      24(%rsp), %edx                                #180.32
..LN6140:
        movq      32(%rsp), %rsi                                #180.32
..LN6141:
        movl      48(%rsp), %edi                                #180.32
..LN6142:
        movq      56(%rsp), %r8                                 #180.32
..LN6143:
        movl      %r15d, 96(%rsp)                               #180.32
..LN6144:
        movq      %r13, 144(%rsp)                               #180.32
..LN6145:
        movq      24(%rbp), %r9                                 #180.32
..LN6146:
                                # LOE rax rcx rsi r8 r9 r12 r14 edx ebx edi r10d r11d ymm0
..B3.66:                        # Preds ..B3.66 ..B3.65
..L187:         # optimization report
                # MULTIVERSIONED FOR DATA DEPENDENCE, VER 1
                # LOOP WAS UNROLLED BY 2
                # LOOP WAS VECTORIZED
                # VECTORIZATION HAS UNALIGNED MEMORY REFERENCES
                # VECTORIZATION SPEEDUP COEFFECIENT 3.888672
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 8
                # NORMALIZED VECTORIZATION OVERHEAD 0.187500
                # MAIN VECTOR TYPE: 64-bits floating point
..LN6147:
        movl      %ecx, %r13d                                   #180.32
..LN6148:
        vmovupd   (%r8,%rcx,8), %ymm5                           #180.46
..LN6149:
        vmovupd   32(%r8,%rcx,8), %ymm6                         #180.46
..LN6150:
        imull     %edi, %r13d                                   #180.32
..LN6151:
        vsubpd    %ymm5, %ymm0, %ymm1                           #180.67
..LN6152:
        vsubpd    %ymm6, %ymm0, %ymm2                           #180.67
..LN6153:
        vmulpd    8(%r12,%rcx,8), %ymm1, %ymm3                  #180.78
..LN6154:
        vmulpd    40(%r12,%rcx,8), %ymm2, %ymm4                 #180.78
..LN6155:
        vfmadd132pd (%r12,%rcx,8), %ymm3, %ymm5                 #180.78
..LN6156:
        vfmadd132pd 32(%r12,%rcx,8), %ymm4, %ymm6               #180.78
..LN6157:
	.loc    1  142  is_stmt 1
        lea       (%r11,%r13), %r15d                            #142.12
..LN6158:
	.loc    1  180  is_stmt 1
        addl      %edx, %r13d                                   #180.32
..LN6159:
        movslq    %r15d, %r15                                   #180.32
..LN6160:
        movslq    %r13d, %r13                                   #180.32
..LN6161:
        vextractf128 $1, %ymm5, %xmm7                           #180.32
..LN6162:
        lea       (%r9,%r15,8), %r15                            #180.32
..LN6163:
        vmovsd    %xmm5, 8(%r15)                                #180.32
..LN6164:
        vmovhpd   %xmm5, 8(%rsi,%r15)                           #180.32
..LN6165:
        vmovsd    %xmm7, 8(%r15,%rsi,2)                         #180.32
..LN6166:
        lea       (%r9,%r13,8), %r13                            #180.32
..LN6167:
        vmovhpd   %xmm7, 8(%r14,%r15)                           #180.32
..LN6168:
        lea       8(%r15,%rsi,4), %r15                          #180.32
..LN6169:
        vextractf128 $1, %ymm6, %xmm8                           #180.32
..LN6170:
        vmovsd    %xmm6, (%r15)                                 #180.32
..LN6171:
        vmovhpd   %xmm6, (%rsi,%r15)                            #180.32
..LN6172:
        vmovsd    %xmm8, (%r15,%rsi,2)                          #180.32
..LN6173:
        vmovhpd   %xmm8, (%r14,%r15)                            #180.32
..LN6174:
        lea       72(%r13,%rsi,4), %r15                         #180.32
..LN6175:
        vmovupd   64(%r8,%rcx,8), %ymm13                        #180.46
..LN6176:
        vmovupd   96(%r8,%rcx,8), %ymm15                        #180.46
..LN6177:
        vsubpd    %ymm13, %ymm0, %ymm9                          #180.67
..LN6178:
        vsubpd    %ymm15, %ymm0, %ymm10                         #180.67
..LN6179:
        vmulpd    72(%r12,%rcx,8), %ymm9, %ymm11                #180.78
..LN6180:
        vmulpd    104(%r12,%rcx,8), %ymm10, %ymm12              #180.78
..LN6181:
        vfmadd132pd 64(%r12,%rcx,8), %ymm11, %ymm13             #180.78
..LN6182:
        vfmadd132pd 96(%r12,%rcx,8), %ymm12, %ymm15             #180.78
..LN6183:
        addq      $16, %rcx                                     #180.5
..LN6184:
        vextractf128 $1, %ymm13, %xmm14                         #180.32
..LN6185:
        vmovsd    %xmm13, 72(%r13)                              #180.32
..LN6186:
        vmovhpd   %xmm13, 72(%rsi,%r13)                         #180.32
..LN6187:
        vmovsd    %xmm14, 72(%r13,%rsi,2)                       #180.32
..LN6188:
        vmovhpd   %xmm14, 72(%r14,%r13)                         #180.32
..LN6189:
        vextractf128 $1, %ymm15, %xmm1                          #180.32
..LN6190:
        vmovsd    %xmm15, (%r15)                                #180.32
..LN6191:
        vmovhpd   %xmm15, (%rsi,%r15)                           #180.32
..LN6192:
        vmovsd    %xmm1, (%r15,%rsi,2)                          #180.32
..LN6193:
        vmovhpd   %xmm1, (%r14,%r15)                            #180.32
..LN6194:
        cmpq      %rax, %rcx                                    #180.5
..LN6195:
        jb        ..B3.66       # Prob 81%                      #180.5
..LN6196:
                                # LOE rax rcx rsi r8 r9 r12 r14 edx ebx edi r10d r11d ymm0
..B3.67:                        # Preds ..B3.66
..LN6197:
        movl      96(%rsp), %r15d                               #
..LN6198:
        movl      8(%rsp), %edx                                 #
..LN6199:
        movl      (%rsp), %edi                                  #
..LN6200:
        movl      16(%rsp), %esi                                #
..LN6201:
        movq      64(%rsp), %rax                                #
..LN6202:
        movl      104(%rsp), %r9d                               #
..LN6203:
        movl      160(%rsp), %r14d                              #
..LN6204:
        movq      80(%rsp), %r11                                #
..LN6205:
        movl      152(%rsp), %r12d                              #
..LN6206:
        movq      144(%rsp), %r13                               #
..LN6207:
                                # LOE rax r11 r13 edx ebx esi edi r9d r10d r12d r14d r15d
..B3.68:                        # Preds ..B3.67 ..B3.262
..LN6208:
        lea       1(%rdi), %ecx                                 #180.5
..LN6209:
        cmpl      %ecx, %esi                                    #180.5
..LN6210:
        jb        ..B3.85       # Prob 50%                      #180.5
..LN6211:
                                # LOE rax r9 r11 r13 r14 edx ebx esi edi r10d r12d r15d
..B3.69:                        # Preds ..B3.68
..LN6212:
        movslq    %esi, %rsi                                    #180.5
..LN6213:
        movslq    %edi, %rdi                                    #180.5
..LN6214:
        subq      %rdi, %rsi                                    #180.5
..LN6215:
        cmpq      $4, %rsi                                      #180.5
..LN6216:
        jl        ..B3.261      # Prob 10%                      #180.5
..LN6217:
                                # LOE rax rsi r9 r11 r13 r14 edx ebx edi r10d r12d r15d
..B3.70:                        # Preds ..B3.69
..LN6218:
        movl      %edi, %r8d                                    #180.5
..LN6219:
        movl      %esi, %ecx                                    #180.5
..LN6220:
        imull     48(%rsp), %r8d                                #180.5
..LN6221:
        andl      $-4, %ecx                                     #180.5
..LN6222:
        vmovupd   .L_2il0floatpacket.8(%rip), %ymm0             #180.65
..LN6223:
        movslq    %ecx, %rcx                                    #180.5
..LN6224:
        movq      %rcx, 72(%rsp)                                #180.5
..LN6225:
        lea       (%r12,%rdx), %ecx                             #180.32
..LN6226:
	.loc    1  142  is_stmt 1
        addl      %r8d, %ecx                                    #142.12
..LN6227:
	.loc    1  180  is_stmt 1
        movq      128(%rsp), %r8                                #180.32
..LN6228:
        movslq    %edi, %rdi                                    #180.46
..LN6229:
	.loc    1  142  is_stmt 1
        movl      %ecx, 24(%rsp)                                #142.12
..LN6230:
	.loc    1  180  is_stmt 1
        movq      $0, 16(%rsp)                                  #180.5
..LN6231:
        lea       8(,%r8,8), %rcx                               #180.32
..LN6232:
        movq      %rcx, 40(%rsp)                                #180.32
..LN6233:
        lea       (%r11,%rax,8), %r8                            #180.56
..LN6234:
        movq      %rsi, 8(%rsp)                                 #180.32
..LN6235:
        lea       (%r8,%rdi,8), %r8                             #180.56
..LN6236:
        movq      %r8, 32(%rsp)                                 #180.56
..LN6237:
        lea       (%rcx,%rcx,2), %rcx                           #180.32
..LN6238:
        movq      56(%rsp), %r8                                 #180.46
..LN6239:
        movl      %edi, (%rsp)                                  #180.32
..LN6240:
        movq      %rax, 64(%rsp)                                #180.32
..LN6241:
        lea       (%r8,%rdi,8), %r8                             #180.46
..LN6242:
        movl      %r9d, 104(%rsp)                               #180.32
..LN6243:
        movq      %r11, 80(%rsp)                                #180.32
..LN6244:
        movl      %r12d, 152(%rsp)                              #180.32
..LN6245:
        movq      %r13, 144(%rsp)                               #180.32
..LN6246:
        movl      %r14d, 160(%rsp)                              #180.32
..LN6247:
        movq      72(%rsp), %r11                                #180.32
..LN6248:
        movq      %rcx, %r9                                     #180.32
..LN6249:
        movq      32(%rsp), %r13                                #180.32
..LN6250:
        movq      40(%rsp), %rax                                #180.32
..LN6251:
        movl      24(%rsp), %ecx                                #180.32
..LN6252:
        movq      16(%rsp), %r12                                #180.32
..LN6253:
        movl      48(%rsp), %esi                                #180.32
..LN6254:
        movq      24(%rbp), %rdi                                #180.32
        .align    16,0x90
..LN6255:
                                # LOE rax rdi r8 r9 r11 r12 r13 edx ecx ebx esi r10d r15d ymm0
..B3.71:                        # Preds ..B3.71 ..B3.70
..L188:         # optimization report
                # MULTIVERSIONED FOR DATA DEPENDENCE, VER 1
                # LOOP WAS VECTORIZED
                # REMAINDER LOOP FOR VECTORIZATION
                # VECTORIZATION HAS UNALIGNED MEMORY REFERENCES
                # VECTORIZATION SPEEDUP COEFFECIENT 2.250000
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 0.812500
                # MAIN VECTOR TYPE: 64-bits floating point
..LN6256:
        movl      %r12d, %r14d                                  #180.32
..LN6257:
        vmovupd   (%r8,%r12,8), %ymm3                           #180.46
..LN6258:
        imull     %esi, %r14d                                   #180.32
..LN6259:
        vsubpd    %ymm3, %ymm0, %ymm1                           #180.67
..LN6260:
        vmulpd    8(%r13,%r12,8), %ymm1, %ymm2                  #180.78
..LN6261:
        addl      %ecx, %r14d                                   #180.32
..LN6262:
        vfmadd132pd (%r13,%r12,8), %ymm2, %ymm3                 #180.78
..LN6263:
        addq      $4, %r12                                      #180.5
..LN6264:
        movslq    %r14d, %r14                                   #180.32
..LN6265:
        vextractf128 $1, %ymm3, %xmm4                           #180.32
..LN6266:
        lea       8(%rdi,%r14,8), %r14                          #180.32
..LN6267:
        vmovsd    %xmm3, (%r14)                                 #180.32
..LN6268:
        vmovhpd   %xmm3, (%rax,%r14)                            #180.32
..LN6269:
        vmovsd    %xmm4, (%r14,%rax,2)                          #180.32
..LN6270:
        vmovhpd   %xmm4, (%r9,%r14)                             #180.32
..LN6271:
        cmpq      %r11, %r12                                    #180.5
..LN6272:
        jb        ..B3.71       # Prob 81%                      #180.5
..LN6273:
                                # LOE rax rdi r8 r9 r11 r12 r13 edx ecx ebx esi r10d r15d ymm0
..B3.72:                        # Preds ..B3.71
..LN6274:
        movq      %r11, 72(%rsp)                                #
..LN6275:
        movq      8(%rsp), %rsi                                 #
..LN6276:
        movl      (%rsp), %edi                                  #
..LN6277:
        movq      64(%rsp), %rax                                #
..LN6278:
        movl      104(%rsp), %r9d                               #
..LN6279:
        movl      160(%rsp), %r14d                              #
..LN6280:
        movq      80(%rsp), %r11                                #
..LN6281:
        movl      152(%rsp), %r12d                              #
..LN6282:
        movq      144(%rsp), %r13                               #
..LN6283:
                                # LOE rax rsi r11 r13 edx ebx edi r9d r10d r12d r14d r15d
..B3.73:                        # Preds ..B3.72 ..B3.261
..LN6284:
        cmpq      72(%rsp), %rsi                                #180.5
..LN6285:
        jbe       ..B3.85       # Prob 9%                       #180.5
..LN6286:
                                # LOE rax rsi r9 r11 r13 r14 edx ebx edi r10d r12d r15d
..B3.74:                        # Preds ..B3.73
..LN6287:
        movq      56(%rsp), %r8                                 #180.46
..LN6288:
        lea       (%r11,%rax,8), %rcx                           #180.56
..LN6289:
        movl      %edi, %eax                                    #180.5
..LN6290:
        addl      %r12d, %edx                                   #180.32
..LN6291:
        imull     48(%rsp), %eax                                #180.5
..LN6292:
        movslq    %edi, %rdi                                    #180.46
..LN6293:
	.loc    1  142  is_stmt 1
        addl      %eax, %edx                                    #142.12
..LN6294:
	.loc    1  180  is_stmt 1
        movl      %r12d, 152(%rsp)                              #180.46
..LN6295:
        movq      %r13, 144(%rsp)                               #180.46
..LN6296:
        movq      72(%rsp), %r12                                #180.46
..LN6297:
        lea       (%rcx,%rdi,8), %rax                           #180.56
..LN6298:
        lea       (%r8,%rdi,8), %rcx                            #180.46
..LN6299:
        movl      48(%rsp), %edi                                #180.46
..LN6300:
        movq      24(%rbp), %r8                                 #180.46
..LN6301:
                                # LOE rax rcx rsi r8 r9 r11 r12 r14 edx ebx edi r10d r15d
..B3.75:                        # Preds ..B3.75 ..B3.74
..L189:         # optimization report
                # MULTIVERSIONED FOR DATA DEPENDENCE, VER 1
                # REMAINDER LOOP FOR VECTORIZATION
                # VECTORIZATION SPEEDUP COEFFECIENT 2.250000
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 0.812500
..LN6302:
        movl      %r12d, %r13d                                  #180.32
..LN6303:
        vmovsd    8(%rax,%r12,8), %xmm0                         #180.78
..LN6304:
        imull     %edi, %r13d                                   #180.32
..LN6305:
        vsubsd    (%rax,%r12,8), %xmm0, %xmm1                   #180.32
..LN6306:
        addl      %edx, %r13d                                   #180.32
..LN6307:
        vfnmadd132sd (%rcx,%r12,8), %xmm0, %xmm1                #180.32
..LN6308:
        incq      %r12                                          #180.5
..LN6309:
        movslq    %r13d, %r13                                   #180.32
..LN6310:
        vmovsd    %xmm1, 8(%r8,%r13,8)                          #180.32
..LN6311:
        cmpq      %rsi, %r12                                    #180.5
..LN6312:
        jb        ..B3.75       # Prob 81%                      #180.5
..LN6313:
        jmp       ..B3.84       # Prob 100%                     #180.5
..LN6314:
                                # LOE rax rcx rsi r8 r9 r11 r12 r14 edx ebx edi r10d r15d
..B3.314:                       # Preds ..B3.50
..LN6315:
        movslq    %r15d, %rcx                                   #180.5
..LN6316:
                                # LOE rax rcx r9 r11 r13 r14 edx ebx r10d r12d r15d
..B3.77:                        # Preds ..B3.314 ..B3.53 ..B3.54
..LN6317:
        movl      %r15d, %edi                                   #180.5
..LN6318:
        movl      $1, %esi                                      #180.5
..LN6319:
        subl      %r9d, %edi                                    #180.5
..LN6320:
        sarl      $1, %edi                                      #180.5
..LN6321:
        shrl      $30, %edi                                     #180.5
..LN6322:
        addl      %r15d, %edi                                   #180.5
..LN6323:
        subl      %r9d, %edi                                    #180.5
..LN6324:
        sarl      $2, %edi                                      #180.5
..LN6325:
        movl      $0, 16(%rsp)                                  #180.5
..LN6326:
        movl      %edi, 8(%rsp)                                 #180.5
..LN6327:
        testl     %edi, %edi                                    #180.5
..LN6328:
        jbe       ..B3.81       # Prob 9%                       #180.5
..LN6329:
                                # LOE rax rcx rsi r9 r11 r13 r14 edx ebx r10d r12d r15d
..B3.78:                        # Preds ..B3.77
..LN6330:
        movl      %r10d, 168(%rsp)                              #180.32
..LN6331:
	.loc    1  142  is_stmt 1
        lea       (,%r12,4), %edi                               #142.12
..LN6332:
        movl      %edi, 24(%rsp)                                #142.12
..LN6333:
	.loc    1  180  is_stmt 1
        lea       (%r12,%r12,2), %r8d                           #180.32
..LN6334:
        negl      %r8d                                          #180.32
..LN6335:
	.loc    1  142  is_stmt 1
        lea       (%rdx,%r12,4), %edi                           #142.12
..LN6336:
        movl      %edi, 32(%rsp)                                #142.12
..LN6337:
	.loc    1  180  is_stmt 1
        lea       (%r12,%r12), %edi                             #180.32
..LN6338:
        negl      %edi                                          #180.32
..LN6339:
        lea       (%r11,%rax,8), %rsi                           #180.56
..LN6340:
        movq      %rsi, 40(%rsp)                                #180.56
..LN6341:
        movl      %ebx, 88(%rsp)                                #180.32
..LN6342:
        lea       (%r8,%r12,4), %esi                            #180.32
..LN6343:
        movq      %rcx, (%rsp)                                  #180.32
..LN6344:
	.loc    1  142  is_stmt 1
        lea       4(,%r12,4), %r8d                              #142.12
..LN6345:
        movl      %r8d, 72(%rsp)                                #142.12
..LN6346:
	.loc    1  180  is_stmt 1
        lea       (%rdi,%r12,4), %r8d                           #180.32
..LN6347:
        movl      %r9d, 104(%rsp)                               #180.32
..LN6348:
        addl      %edx, %esi                                    #180.32
..LN6349:
        movl      %r14d, 160(%rsp)                              #180.32
..LN6350:
        addl      %edx, %r8d                                    #180.32
..LN6351:
        movq      %r11, 80(%rsp)                                #180.32
..LN6352:
        xorl      %edi, %edi                                    #180.32
..LN6353:
        movq      %r13, 144(%rsp)                               #180.32
..LN6354:
        movl      %r15d, 96(%rsp)                               #180.32
..LN6355:
        movq      %rax, 64(%rsp)                                #180.32
..LN6356:
        movl      32(%rsp), %r14d                               #180.32
..LN6357:
        movl      24(%rsp), %r13d                               #180.32
..LN6358:
        movq      40(%rsp), %rcx                                #180.32
..LN6359:
        movl      8(%rsp), %ebx                                 #180.32
..LN6360:
        movl      16(%rsp), %r9d                                #180.32
..LN6361:
        movq      56(%rsp), %r10                                #180.32
..LN6362:
        movq      24(%rbp), %r11                                #180.32
..LN6363:
                                # LOE rcx r10 r11 edx ebx esi edi r8d r9d r12d r13d r14d
..B3.79:                        # Preds ..B3.79 ..B3.78
..L190:         # optimization report
                # MULTIVERSIONED FOR DATA DEPENDENCE, VER 2
                # LOOP WAS UNROLLED BY 4
                # %s was not vectorized: non-vectorizable loop instance from multiversioning
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
..LN6364:
        lea       (,%r9,4), %eax                                #180.46
..LN6365:
        movslq    %eax, %rax                                    #180.78
..LN6366:
	.loc    1  142  is_stmt 1
        lea       (%rsi,%rdi), %r15d                            #142.12
..LN6367:
	.loc    1  180  is_stmt 1
        movslq    %r15d, %r15                                   #180.32
..LN6368:
        incl      %r9d                                          #180.5
..LN6369:
        vmovsd    8(%rcx,%rax,8), %xmm0                         #180.78
..LN6370:
        vmovsd    16(%rcx,%rax,8), %xmm2                        #180.78
..LN6371:
        vmovsd    24(%rcx,%rax,8), %xmm4                        #180.78
..LN6372:
        vsubsd    %xmm2, %xmm0, %xmm3                           #180.32
..LN6373:
        vsubsd    (%rcx,%rax,8), %xmm0, %xmm1                   #180.32
..LN6374:
        vsubsd    %xmm4, %xmm2, %xmm5                           #180.32
..LN6375:
        vfnmadd132sd (%r10,%rax,8), %xmm0, %xmm1                #180.32
..LN6376:
        vmovsd    32(%rcx,%rax,8), %xmm6                        #180.78
..LN6377:
        vsubsd    %xmm6, %xmm4, %xmm7                           #180.32
..LN6378:
        vmovsd    %xmm1, 8(%r11,%r15,8)                         #180.32
..LN6379:
	.loc    1  142  is_stmt 1
        lea       (%r8,%rdi), %r15d                             #142.12
..LN6380:
	.loc    1  180  is_stmt 1
        vfmadd132sd 8(%r10,%rax,8), %xmm2, %xmm3                #180.32
..LN6381:
        movslq    %r15d, %r15                                   #180.32
..LN6382:
        vmovsd    %xmm3, 16(%r11,%r15,8)                        #180.32
..LN6383:
	.loc    1  142  is_stmt 1
        movl      %r13d, %r15d                                  #142.12
..LN6384:
        subl      %r12d, %r15d                                  #142.12
..LN6385:
        addl      %edx, %r15d                                   #142.12
..LN6386:
	.loc    1  180  is_stmt 1
        addl      %edi, %r15d                                   #180.32
..LN6387:
        vfmadd132sd 16(%r10,%rax,8), %xmm4, %xmm5               #180.32
..LN6388:
        movslq    %r15d, %r15                                   #180.32
..LN6389:
        vmovsd    %xmm5, 24(%r11,%r15,8)                        #180.32
..LN6390:
        vfmadd132sd 24(%r10,%rax,8), %xmm6, %xmm7               #180.32
..LN6391:
        lea       (%r14,%rdi), %eax                             #180.32
..LN6392:
        movslq    %eax, %rax                                    #180.32
..LN6393:
        addl      72(%rsp), %edi                                #180.5
..LN6394:
        vmovsd    %xmm7, 32(%r11,%rax,8)                        #180.32
..LN6395:
        cmpl      %ebx, %r9d                                    #180.5
..LN6396:
        jb        ..B3.79       # Prob 27%                      #180.5
..LN6397:
                                # LOE rcx r10 r11 edx ebx esi edi r8d r9d r12d r13d r14d
..B3.80:                        # Preds ..B3.79
..LN6398:
        movl      %r9d, 16(%rsp)                                #
..LN6399:
        movl      %r9d, %esi                                    #180.32
..LN6400:
        movl      168(%rsp), %r10d                              #
..LN6401:
        movl      88(%rsp), %ebx                                #
..LN6402:
        movl      96(%rsp), %r15d                               #
..LN6403:
        lea       1(,%rsi,4), %esi                              #180.32
..LN6404:
        movq      (%rsp), %rcx                                  #
..LN6405:
        movq      64(%rsp), %rax                                #
..LN6406:
        movl      104(%rsp), %r9d                               #
..LN6407:
        movl      160(%rsp), %r14d                              #
..LN6408:
        movq      80(%rsp), %r11                                #
..LN6409:
        movq      144(%rsp), %r13                               #
..LN6410:
        movslq    %esi, %rsi                                    #180.5
..LN6411:
                                # LOE rax rcx rsi r11 r13 edx ebx r9d r10d r12d r14d r15d
..B3.81:                        # Preds ..B3.80 ..B3.77
..LN6412:
        decq      %rsi                                          #180.32
..LN6413:
	.loc    1  166  is_stmt 1
        subq      %rax, %rcx                                    #166.7
..LN6414:
	.loc    1  180  is_stmt 1
        cmpq      %rcx, %rsi                                    #180.5
..LN6415:
        jae       ..B3.85       # Prob 9%                       #180.5
..LN6416:
                                # LOE rax rcx rsi r9 r11 r13 r14 edx ebx r10d r12d r15d
..B3.82:                        # Preds ..B3.81
..LN6417:
        movl      %r12d, 152(%rsp)                              #180.32
..LN6418:
        lea       (%r11,%rax,8), %rax                           #180.56
..LN6419:
        movq      %r13, 144(%rsp)                               #180.32
..LN6420:
        addl      %r12d, %edx                                   #180.32
..LN6421:
        movl      48(%rsp), %r12d                               #180.32
..LN6422:
        movq      56(%rsp), %rdi                                #180.32
..LN6423:
        movq      24(%rbp), %r8                                 #180.32
..LN6424:
                                # LOE rax rcx rsi rdi r8 r9 r11 r14 edx ebx r10d r12d r15d
..B3.83:                        # Preds ..B3.83 ..B3.82
..L191:         # optimization report
                # REMAINDER LOOP
                # MULTIVERSIONED FOR DATA DEPENDENCE, VER 2
                # %s was not vectorized: non-vectorizable loop instance from multiversioning
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
..LN6425:
        movl      %esi, %r13d                                   #180.32
..LN6426:
        vmovsd    8(%rax,%rsi,8), %xmm0                         #180.78
..LN6427:
        imull     %r12d, %r13d                                  #180.32
..LN6428:
        vsubsd    (%rax,%rsi,8), %xmm0, %xmm1                   #180.32
..LN6429:
	.loc    1  142  is_stmt 1
        addl      %edx, %r13d                                   #142.12
..LN6430:
	.loc    1  180  is_stmt 1
        vfnmadd132sd (%rdi,%rsi,8), %xmm0, %xmm1                #180.32
..LN6431:
        incq      %rsi                                          #180.5
..LN6432:
        movslq    %r13d, %r13                                   #180.32
..LN6433:
        vmovsd    %xmm1, 8(%r8,%r13,8)                          #180.32
..LN6434:
        cmpq      %rcx, %rsi                                    #180.5
..LN6435:
        jb        ..B3.83       # Prob 66%                      #180.5
..LN6436:
                                # LOE rax rcx rsi rdi r8 r9 r11 r14 edx ebx r10d r12d r15d
..B3.84:                        # Preds ..B3.75 ..B3.83
..LN6437:
        movl      152(%rsp), %r12d                              #
..LN6438:
        movq      144(%rsp), %r13                               #
..LN6439:
                                # LOE r9 r11 r13 r14 ebx r10d r12d r15d
..B3.85:                        # Preds ..B3.303 ..B3.24 ..B3.49 ..B3.68 ..B3.73
                                #       ..B3.81 ..B3.84
..LN6440:
	.loc    1  184  is_stmt 1
        cmpl      $0, 40(%rbp)                                  #184.6
..LN6441:
        je        ..B3.144      # Prob 50%                      #184.6
..LN6442:
                                # LOE r9 r11 r13 r14 ebx r10d r12d r15d
..B3.86:                        # Preds ..B3.85
..LN6443:
	.loc    1  185  is_stmt 1
        cmpl      %r15d, %r9d                                   #185.22
..LN6444:
        jg        ..B3.108      # Prob 50%                      #185.22
..LN6445:
                                # LOE r9 r11 r13 r14 ebx r10d r12d r15d
..B3.87:                        # Preds ..B3.86
..LN6446:
        movl      %r15d, %ecx                                   #185.5
..LN6447:
        subl      %r9d, %ecx                                    #185.5
..LN6448:
        incl      %ecx                                          #185.5
..LN6449:
        cmpl      $8, %ecx                                      #185.5
..LN6450:
        jl        ..B3.290      # Prob 10%                      #185.5
..LN6451:
                                # LOE r9 r11 r13 r14 ecx ebx r10d r12d r15d
..B3.88:                        # Preds ..B3.87
..LN6452:
        movl      %r9d, %r9d                                    #185.32
..LN6453:
        lea       (%r11,%r9,8), %rdi                            #185.32
..LN6454:
        movq      %rdi, (%rsp)                                  #185.32
..LN6455:
        andq      $15, %rdi                                     #185.5
..LN6456:
        movl      %edi, %edi                                    #185.5
..LN6457:
        testl     %edi, %edi                                    #185.5
..LN6458:
        je        ..B3.91       # Prob 50%                      #185.5
..LN6459:
                                # LOE rdi r11 r13 r14 ecx ebx r9d r10d r12d r15d
..B3.89:                        # Preds ..B3.88
..LN6460:
        testl     $7, %edi                                      #185.5
..LN6461:
        jne       ..B3.290      # Prob 10%                      #185.5
..LN6462:
                                # LOE r11 r13 r14 ecx ebx r9d r10d r12d r15d
..B3.90:                        # Preds ..B3.89
..LN6463:
        movl      $1, %edi                                      #185.5
..LN6464:
                                # LOE rdi r11 r13 r14 ecx ebx r9d r10d r12d r15d
..B3.91:                        # Preds ..B3.90 ..B3.88
..LN6465:
        lea       8(%rdi), %eax                                 #185.5
..LN6466:
        cmpl      %eax, %ecx                                    #185.5
..LN6467:
        jl        ..B3.290      # Prob 10%                      #185.5
..LN6468:
                                # LOE rdi r11 r13 r14 ecx ebx r9d r10d r12d r15d
..B3.92:                        # Preds ..B3.91
..LN6469:
        movl      %ecx, %edx                                    #185.5
..LN6470:
	.loc    1  167  is_stmt 1
        lea       2(%r12), %eax                                 #167.37
..LN6471:
	.loc    1  185  is_stmt 1
        subl      %edi, %edx                                    #185.5
..LN6472:
        lea       -1(%r9), %esi                                 #185.32
..LN6473:
        imull     %eax, %esi                                    #185.32
..LN6474:
        andl      $7, %edx                                      #185.5
..LN6475:
        negl      %edx                                          #185.5
..LN6476:
        lea       (%rsi,%r12,2), %r8d                           #185.45
..LN6477:
        addl      %ecx, %edx                                    #185.5
..LN6478:
        movl      $0, 48(%rsp)                                  #185.5
..LN6479:
        movq      $0, 40(%rsp)                                  #185.32
..LN6480:
        movl      %r8d, 32(%rsp)                                #185.45
..LN6481:
        testl     %edi, %edi                                    #185.5
..LN6482:
        jbe       ..B3.96       # Prob 15%                      #185.5
..LN6483:
                                # LOE rdi r8 r11 r13 r14 eax edx ecx ebx esi r8d r9d r10d r12d r15d r8b
..B3.93:                        # Preds ..B3.92
..LN6484:
        movl      $0, 24(%rsp)                                  #185.32
..LN6485:
        movl      %eax, 8(%rsp)                                 #185.32
..LN6486:
        movl      %esi, 16(%rsp)                                #185.32
..LN6487:
        movl      %r9d, 104(%rsp)                               #185.32
..LN6488:
        movq      %r11, 80(%rsp)                                #185.32
..LN6489:
        vmovsd    .L_2il0floatpacket.3(%rip), %xmm0             #185.40
..LN6490:
        movl      %r14d, 160(%rsp)                              #185.32
..LN6491:
        movl      24(%rsp), %r11d                               #185.32
..LN6492:
        movq      40(%rsp), %r9                                 #185.32
..LN6493:
        movl      48(%rsp), %esi                                #185.32
..LN6494:
        movq      (%rsp), %rax                                  #185.32
..LN6495:
                                # LOE rax rdi r9 r13 edx ecx ebx esi r8d r10d r11d r12d r15d xmm0
..B3.94:                        # Preds ..B3.94 ..B3.93
..L192:         # optimization report
                # LOOP WAS UNROLLED BY 4
                # PEELED LOOP FOR VECTORIZATION
                # VECTORIZATION SPEEDUP COEFFECIENT 3.494141
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 2
                # NORMALIZED VECTORIZATION OVERHEAD 0.234375
..LN6496:
	.loc    1  167  is_stmt 1
        lea       (%r8,%r11), %r14d                             #167.37
..LN6497:
	.loc    1  185  is_stmt 1
        movslq    %r14d, %r14                                   #185.45
..LN6498:
        incl      %esi                                          #185.5
..LN6499:
        lea       2(%r11,%r12), %r11d                           #185.5
..LN6500:
        vmovsd    16(%r13,%r14,8), %xmm1                        #185.45
..LN6501:
        vaddsd    24(%r13,%r14,8), %xmm1, %xmm2                 #185.64
..LN6502:
        vmulsd    %xmm2, %xmm0, %xmm3                           #185.64
..LN6503:
        vmovsd    %xmm3, (%rax,%r9,8)                           #185.32
..LN6504:
        incq      %r9                                           #185.5
..LN6505:
        cmpl      %edi, %esi                                    #185.5
..LN6506:
        jb        ..B3.94       # Prob 82%                      #185.5
..LN6507:
                                # LOE rax rdi r9 r13 edx ecx ebx esi r8d r10d r11d r12d r15d xmm0
..B3.95:                        # Preds ..B3.94
..LN6508:
        movl      8(%rsp), %eax                                 #
..LN6509:
        movl      16(%rsp), %esi                                #
..LN6510:
        movl      104(%rsp), %r9d                               #
..LN6511:
        movl      160(%rsp), %r14d                              #
..LN6512:
        movq      80(%rsp), %r11                                #
..LN6513:
                                # LOE rdi r11 r13 eax edx ecx ebx esi r9d r10d r12d r14d r15d
..B3.96:                        # Preds ..B3.92 ..B3.95
..LN6514:
        imull     %edi, %eax                                    #185.5
..LN6515:
        lea       16(,%r12,8), %r8d                             #185.5
..LN6516:
        vmovupd   .L_2il0floatpacket.6(%rip), %xmm0             #185.40
..LN6517:
        movl      %r8d, 8(%rsp)                                 #185.5
..LN6518:
        lea       (%r12,%r12,2), %r8d                           #185.45
..LN6519:
        addl      %r12d, %r8d                                   #185.45
..LN6520:
        addl      %esi, %r8d                                    #185.45
..LN6521:
        movl      %r8d, 16(%rsp)                                #185.45
..LN6522:
        lea       (%r12,%r12,4), %r8d                           #185.45
..LN6523:
        addl      %r12d, %r8d                                   #185.45
..LN6524:
        addl      %esi, %r8d                                    #185.45
..LN6525:
        lea       (%rsi,%r12,8), %esi                           #185.45
..LN6526:
        movl      %r10d, 168(%rsp)                              #185.45
..LN6527:
        movl      %ebx, 88(%rsp)                                #185.45
..LN6528:
        movl      %ecx, 24(%rsp)                                #185.45
..LN6529:
        movl      %r9d, 104(%rsp)                               #185.45
..LN6530:
        movq      %r11, 80(%rsp)                                #185.45
..LN6531:
        movl      %r12d, 152(%rsp)                              #185.45
..LN6532:
        movl      %r15d, 96(%rsp)                               #185.45
..LN6533:
        movl      %r14d, 160(%rsp)                              #185.45
..LN6534:
        movl      %r8d, %r10d                                   #185.45
..LN6535:
        movl      16(%rsp), %r12d                               #185.45
..LN6536:
        movq      %rdi, %r11                                    #185.45
..LN6537:
        movl      8(%rsp), %r9d                                 #185.45
..LN6538:
        movl      32(%rsp), %ecx                                #185.45
..LN6539:
        movq      (%rsp), %rbx                                  #185.45
..LN6540:
        movq      128(%rsp), %r8                                #185.45
..LN6541:
                                # LOE rbx r8 r11 r13 eax edx ecx esi edi r9d r10d r12d xmm0
..B3.97:                        # Preds ..B3.97 ..B3.96
..L193:         # optimization report
                # LOOP WAS UNROLLED BY 4
                # LOOP WAS VECTORIZED
                # VECTORIZATION SPEEDUP COEFFECIENT 3.494141
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 2
                # NORMALIZED VECTORIZATION OVERHEAD 0.234375
                # MAIN VECTOR TYPE: 64-bits floating point
..LN6542:
	.loc    1  167  is_stmt 1
        lea       (%rcx,%rax), %r14d                            #167.37
..LN6543:
	.loc    1  185  is_stmt 1
        movslq    %r14d, %r14                                   #185.45
..LN6544:
        addl      $8, %edi                                      #185.5
..LN6545:
        lea       16(%r13,%r14,8), %r15                         #185.45
..LN6546:
        vmovsd    (%r15), %xmm1                                 #185.45
..LN6547:
        vmovhpd   16(%r15,%r8,8), %xmm1, %xmm3                  #185.45
..LN6548:
        lea       24(%r13,%r14,8), %r15                         #185.64
..LN6549:
        vmovsd    (%r15), %xmm2                                 #185.64
..LN6550:
        lea       (%r12,%rax), %r14d                            #185.45
..LN6551:
        movslq    %r14d, %r14                                   #185.45
..LN6552:
        vmovhpd   16(%r15,%r8,8), %xmm2, %xmm4                  #185.64
..LN6553:
        vaddpd    %xmm4, %xmm3, %xmm5                           #185.64
..LN6554:
        vmulpd    %xmm5, %xmm0, %xmm6                           #185.64
..LN6555:
        vmovupd   %xmm6, (%rbx,%r11,8)                          #185.32
..LN6556:
        lea       48(%r13,%r14,8), %r15                         #185.45
..LN6557:
        vmovsd    (%r15), %xmm7                                 #185.45
..LN6558:
        vmovhpd   16(%r15,%r8,8), %xmm7, %xmm9                  #185.45
..LN6559:
        lea       56(%r13,%r14,8), %r15                         #185.64
..LN6560:
        vmovsd    (%r15), %xmm8                                 #185.64
..LN6561:
        lea       (%r10,%rax), %r14d                            #185.45
..LN6562:
        movslq    %r14d, %r14                                   #185.45
..LN6563:
        vmovhpd   16(%r15,%r8,8), %xmm8, %xmm10                 #185.64
..LN6564:
        vaddpd    %xmm10, %xmm9, %xmm11                         #185.64
..LN6565:
        vmulpd    %xmm11, %xmm0, %xmm12                         #185.64
..LN6566:
        vmovupd   %xmm12, 16(%rbx,%r11,8)                       #185.32
..LN6567:
        lea       80(%r13,%r14,8), %r15                         #185.45
..LN6568:
        vmovsd    (%r15), %xmm13                                #185.45
..LN6569:
        vmovhpd   16(%r15,%r8,8), %xmm13, %xmm15                #185.45
..LN6570:
        lea       88(%r13,%r14,8), %r15                         #185.64
..LN6571:
        vmovsd    (%r15), %xmm14                                #185.64
..LN6572:
        lea       (%rsi,%rax), %r14d                            #185.45
..LN6573:
        movslq    %r14d, %r14                                   #185.45
..LN6574:
        addl      %r9d, %eax                                    #185.5
..LN6575:
        vmovhpd   16(%r15,%r8,8), %xmm14, %xmm1                 #185.64
..LN6576:
        vaddpd    %xmm1, %xmm15, %xmm2                          #185.64
..LN6577:
        vmulpd    %xmm2, %xmm0, %xmm3                           #185.64
..LN6578:
        vmovupd   %xmm3, 32(%rbx,%r11,8)                        #185.32
..LN6579:
        lea       112(%r13,%r14,8), %r15                        #185.45
..LN6580:
        vmovsd    (%r15), %xmm4                                 #185.45
..LN6581:
        vmovhpd   16(%r15,%r8,8), %xmm4, %xmm6                  #185.45
..LN6582:
        lea       120(%r13,%r14,8), %r15                        #185.64
..LN6583:
        vmovsd    (%r15), %xmm5                                 #185.64
..LN6584:
        vmovhpd   16(%r15,%r8,8), %xmm5, %xmm7                  #185.64
..LN6585:
        vaddpd    %xmm7, %xmm6, %xmm8                           #185.64
..LN6586:
        vmulpd    %xmm8, %xmm0, %xmm9                           #185.64
..LN6587:
        vmovupd   %xmm9, 48(%rbx,%r11,8)                        #185.32
..LN6588:
        addq      $8, %r11                                      #185.5
..LN6589:
        cmpl      %edx, %edi                                    #185.5
..LN6590:
        jb        ..B3.97       # Prob 82%                      #185.5
..LN6591:
                                # LOE rbx r8 r11 r13 eax edx ecx esi edi r9d r10d r12d xmm0
..B3.98:                        # Preds ..B3.97
..LN6592:
        movl      168(%rsp), %r10d                              #
..LN6593:
        movl      88(%rsp), %ebx                                #
..LN6594:
        movl      96(%rsp), %r15d                               #
..LN6595:
        movl      24(%rsp), %ecx                                #
..LN6596:
        movl      104(%rsp), %r9d                               #
..LN6597:
        movl      160(%rsp), %r14d                              #
..LN6598:
        movq      80(%rsp), %r11                                #
..LN6599:
        movl      152(%rsp), %r12d                              #
..LN6600:
                                # LOE r11 r13 edx ecx ebx r9d r10d r12d r14d r15d
..B3.99:                        # Preds ..B3.98 ..B3.290
..LN6601:
        lea       1(%rdx), %eax                                 #185.5
..LN6602:
        cmpl      %eax, %ecx                                    #185.5
..LN6603:
        jb        ..B3.301      # Prob 50%                      #185.5
..LN6604:
                                # LOE r9 r11 r13 r14 edx ecx ebx r10d r12d r15d
..B3.100:                       # Preds ..B3.99
..LN6605:
        subl      %edx, %ecx                                    #185.5
..LN6606:
        cmpl      $2, %ecx                                      #185.5
..LN6607:
        jl        ..B3.289      # Prob 10%                      #185.5
..LN6608:
                                # LOE r9 r11 r13 r14 edx ecx ebx r10d r12d r15d
..B3.101:                       # Preds ..B3.100
..LN6609:
        xorl      %esi, %esi                                    #185.5
..LN6610:
        lea       4(%r12,%r12), %r8d                            #185.5
..LN6611:
        movl      %r8d, 8(%rsp)                                 #185.5
..LN6612:
	.loc    1  167  is_stmt 1
        lea       2(%r12), %edi                                 #167.37
..LN6613:
        lea       -1(%rdx,%r9), %r8d                            #167.37
..LN6614:
        imull     %edi, %r8d                                    #167.37
..LN6615:
	.loc    1  185  is_stmt 1
        movl      %ecx, %eax                                    #185.5
..LN6616:
        vmovupd   .L_2il0floatpacket.5(%rip), %xmm0             #185.40
..LN6617:
        movslq    %edx, %rdx                                    #185.32
..LN6618:
	.loc    1  167  is_stmt 1
        lea       (%r8,%r12,2), %edi                            #167.37
..LN6619:
	.loc    1  185  is_stmt 1
        movl      %r9d, %r8d                                    #185.32
..LN6620:
        andl      $-2, %eax                                     #185.5
..LN6621:
        addq      %rdx, %r8                                     #185.32
..LN6622:
	.loc    1  167  is_stmt 1
        movl      %edi, 16(%rsp)                                #167.37
..LN6623:
	.loc    1  185  is_stmt 1
        xorl      %edi, %edi                                    #185.5
..LN6624:
        movl      %edx, (%rsp)                                  #185.5
..LN6625:
        movl      %r9d, 104(%rsp)                               #185.5
..LN6626:
        movq      %r11, 80(%rsp)                                #185.5
..LN6627:
        lea       (%r11,%r8,8), %r8                             #185.32
..LN6628:
        movl      %r12d, 152(%rsp)                              #185.5
..LN6629:
        movl      %r14d, 160(%rsp)                              #185.5
..LN6630:
        movl      %esi, %r11d                                   #185.5
..LN6631:
        movl      16(%rsp), %r12d                               #185.5
..LN6632:
        movl      8(%rsp), %edx                                 #185.5
..LN6633:
        movq      128(%rsp), %r9                                #185.5
..LN6634:
        .align    16,0x90
..LN6635:
                                # LOE rdi r8 r9 r13 eax edx ecx ebx esi r10d r11d r12d r15d xmm0
..B3.102:                       # Preds ..B3.102 ..B3.101
..L194:         # optimization report
                # LOOP WAS VECTORIZED
                # REMAINDER LOOP FOR VECTORIZATION
                # VECTORIZATION HAS UNALIGNED MEMORY REFERENCES
                # VECTORIZATION SPEEDUP COEFFECIENT 1.867188
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 2
                # NORMALIZED VECTORIZATION OVERHEAD 0.937500
                # MAIN VECTOR TYPE: 64-bits floating point
..LN6636:
        lea       (%r12,%r11), %r14d                            #185.45
..LN6637:
        movslq    %r14d, %r14                                   #185.45
..LN6638:
        addl      $2, %esi                                      #185.5
..LN6639:
        addl      %edx, %r11d                                   #185.5
..LN6640:
        lea       (%r13,%r14,8), %r14                           #185.45
..LN6641:
        vmovsd    16(%r14), %xmm1                               #185.45
..LN6642:
        vmovsd    24(%r14), %xmm2                               #185.64
..LN6643:
        vmovhpd   32(%r14,%r9,8), %xmm1, %xmm3                  #185.45
..LN6644:
        vmovhpd   40(%r14,%r9,8), %xmm2, %xmm4                  #185.64
..LN6645:
        vaddpd    %xmm4, %xmm3, %xmm5                           #185.64
..LN6646:
        vmulpd    %xmm5, %xmm0, %xmm6                           #185.64
..LN6647:
        vmovupd   %xmm6, (%r8,%rdi,8)                           #185.32
..LN6648:
        addq      $2, %rdi                                      #185.5
..LN6649:
        cmpl      %eax, %esi                                    #185.5
..LN6650:
        jb        ..B3.102      # Prob 82%                      #185.5
..LN6651:
                                # LOE rdi r8 r9 r13 eax edx ecx ebx esi r10d r11d r12d r15d xmm0
..B3.103:                       # Preds ..B3.102
..LN6652:
        movl      (%rsp), %edx                                  #
..LN6653:
        movl      104(%rsp), %r9d                               #
..LN6654:
        movl      160(%rsp), %r14d                              #
..LN6655:
        movq      80(%rsp), %r11                                #
..LN6656:
        movl      152(%rsp), %r12d                              #
..LN6657:
                                # LOE r11 r13 eax edx ecx ebx r9d r10d r12d r14d r15d
..B3.104:                       # Preds ..B3.103 ..B3.289
..LN6658:
        movslq    %eax, %rdi                                    #185.5
..LN6659:
        cmpl      %ecx, %eax                                    #185.5
..LN6660:
        jae       ..B3.301      # Prob 15%                      #185.5
..LN6661:
                                # LOE rdi r9 r11 r13 r14 eax edx ecx ebx r10d r12d r15d
..B3.105:                       # Preds ..B3.104
..LN6662:
        movl      %eax, %r8d                                    #185.5
..LN6663:
	.loc    1  167  is_stmt 1
        lea       2(%r12), %esi                                 #167.37
..LN6664:
	.loc    1  185  is_stmt 1
        imull     %esi, %r8d                                    #185.5
..LN6665:
        vmovsd    .L_2il0floatpacket.3(%rip), %xmm0             #185.40
..LN6666:
        movl      %r8d, (%rsp)                                  #185.5
..LN6667:
	.loc    1  167  is_stmt 1
        lea       -1(%rdx,%r9), %r8d                            #167.37
..LN6668:
        imull     %esi, %r8d                                    #167.37
..LN6669:
	.loc    1  185  is_stmt 1
        movslq    %edx, %rdx                                    #185.32
..LN6670:
	.loc    1  167  is_stmt 1
        lea       (%r8,%r12,2), %esi                            #167.37
..LN6671:
	.loc    1  185  is_stmt 1
        movl      %r9d, %r8d                                    #185.32
..LN6672:
        addq      %rdx, %r8                                     #185.32
..LN6673:
        movq      %r11, 80(%rsp)                                #185.32
..LN6674:
        movl      (%rsp), %edx                                  #185.32
..LN6675:
        lea       (%r11,%r8,8), %r8                             #185.32
..LN6676:
                                # LOE rdi r8 r9 r13 r14 eax edx ecx ebx esi r10d r12d r15d xmm0
..B3.106:                       # Preds ..B3.106 ..B3.105
..L195:         # optimization report
                # REMAINDER LOOP FOR VECTORIZATION
                # VECTORIZATION SPEEDUP COEFFECIENT 1.867188
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 2
                # NORMALIZED VECTORIZATION OVERHEAD 0.937500
..LN6677:
        lea       (%rsi,%rdx), %r11d                            #185.45
..LN6678:
        movslq    %r11d, %r11                                   #185.64
..LN6679:
        incl      %eax                                          #185.5
..LN6680:
        lea       2(%rdx,%r12), %edx                            #185.5
..LN6681:
        vmovsd    16(%r13,%r11,8), %xmm1                        #185.45
..LN6682:
        vaddsd    24(%r13,%r11,8), %xmm1, %xmm2                 #185.64
..LN6683:
        vmulsd    %xmm2, %xmm0, %xmm3                           #185.64
..LN6684:
        vmovsd    %xmm3, (%r8,%rdi,8)                           #185.32
..LN6685:
        incq      %rdi                                          #185.5
..LN6686:
        cmpl      %ecx, %eax                                    #185.5
..LN6687:
        jb        ..B3.106      # Prob 82%                      #185.5
..LN6688:
                                # LOE rdi r8 r9 r13 r14 eax edx ecx ebx esi r10d r12d r15d xmm0
..B3.107:                       # Preds ..B3.106
..LN6689:
        movq      80(%rsp), %r11                                #
..LN6690:
	.loc    1  166  is_stmt 1
        cmpl      %r15d, %r9d                                   #166.19
..LN6691:
                                # LOE r9 r11 r13 r14 ebx r10d r12d r15d
..B3.108:                       # Preds ..B3.86 ..B3.107
..LN6692:
	.loc    1  186  is_stmt 1
        jge       ..B3.144      # Prob 50%                      #186.21
..LN6693:
                                # LOE r9 r11 r13 r14 ebx r10d r12d r15d
..B3.109:                       # Preds ..B3.301 ..B3.108
..LN6694:
        movl      %r9d, %edi                                    #186.49
..LN6695:
	.loc    1  142  is_stmt 1
        lea       1(%r12), %edx                                 #142.12
..LN6696:
	.loc    1  186  is_stmt 1
        movq      136(%rsp), %rsi                               #186.49
..LN6697:
        movq      24(%rbp), %r8                                 #186.32
..LN6698:
	.loc    1  142  is_stmt 1
        movl      %edx, 48(%rsp)                                #142.12
..LN6699:
	.loc    1  186  is_stmt 1
        lea       (%rsi,%rdi,8), %rax                           #186.49
..LN6700:
        movq      %rax, 56(%rsp)                                #186.49
..LN6701:
        lea       -1(%r9), %esi                                 #186.32
..LN6702:
        imull     %edx, %esi                                    #186.32
..LN6703:
        lea       (,%r12,8), %edx                               #186.32
..LN6704:
        movl      %edx, (%rsp)                                  #186.32
..LN6705:
        lea       (%rsi,%r12,2), %ecx                           #186.32
..LN6706:
        movl      %ecx, 40(%rsp)                                #186.32
..LN6707:
        movslq    %ecx, %rcx                                    #186.32
..LN6708:
        lea       8(%r8,%rcx,8), %rax                           #186.32
..LN6709:
        movq      %rax, 8(%rsp)                                 #186.32
..LN6710:
        lea       8(,%r12,8), %r8d                              #186.32
..LN6711:
        testl     %r8d, %r8d                                    #186.49
..LN6712:
        jle       ..B3.312      # Prob 50%                      #186.49
..LN6713:
                                # LOE rdi r9 r11 r13 r14 ebx esi r10d r12d r15d
..B3.110:                       # Preds ..B3.109
..LN6714:
        movq      56(%rsp), %rax                                #186.49
..LN6715:
        cmpq      8(%rsp), %rax                                 #186.49
..LN6716:
        jae       ..B3.311      # Prob 50%                      #186.49
..LN6717:
                                # LOE rdi r9 r11 r13 r14 ebx esi r10d r12d r15d
..B3.111:                       # Preds ..B3.110
..LN6718:
        movslq    %r15d, %rax                                   #186.5
..LN6719:
        movq      %rax, %rcx                                    #186.5
..LN6720:
        movq      8(%rsp), %rdx                                 #186.49
..LN6721:
        subq      %rdi, %rcx                                    #186.5
..LN6722:
        subq      56(%rsp), %rdx                                #186.49
..LN6723:
        shlq      $3, %rcx                                      #186.49
..LN6724:
        cmpq      %rcx, %rdx                                    #186.49
..LN6725:
        jge       ..B3.114      # Prob 50%                      #186.49
..LN6726:
        jmp       ..B3.112      # Prob 100%                     #186.49
..LN6727:
                                # LOE rax rdi r9 r11 r13 r14 ebx esi r10d r12d r15d
..B3.311:                       # Preds ..B3.110
..LN6728:
	.loc    1  180  is_stmt 1
        movslq    %r15d, %rax                                   #180.5
..LN6729:
                                # LOE rax rdi r9 r11 r13 r14 ebx esi r10d r12d r15d
..B3.112:                       # Preds ..B3.311 ..B3.111
..LN6730:
	.loc    1  186  is_stmt 1
        movq      56(%rsp), %rdx                                #186.49
..LN6731:
        cmpq      8(%rsp), %rdx                                 #186.49
..LN6732:
        jbe       ..B3.136      # Prob 50%                      #186.49
..LN6733:
                                # LOE rax rdi r9 r11 r13 r14 ebx esi r10d r12d r15d
..B3.113:                       # Preds ..B3.112
..LN6734:
        movq      %rax, %rdx                                    #186.5
..LN6735:
        subq      %rdi, %rdx                                    #186.5
..LN6736:
        movslq    (%rsp), %r8                                   #186.32
..LN6737:
        decq      %rdx                                          #186.32
..LN6738:
        addq      $8, %r8                                       #186.32
..LN6739:
        imulq     %rdx, %r8                                     #186.32
..LN6740:
        movq      8(%rsp), %rcx                                 #186.49
..LN6741:
        addq      $8, %r8                                       #186.32
..LN6742:
        negq      %rcx                                          #186.49
..LN6743:
        addq      56(%rsp), %rcx                                #186.49
..LN6744:
        cmpq      %r8, %rcx                                     #186.49
..LN6745:
        jl        ..B3.136      # Prob 50%                      #186.49
..LN6746:
                                # LOE rax rdi r9 r11 r13 r14 ebx esi r10d r12d r15d
..B3.114:                       # Preds ..B3.111 ..B3.113
..LN6747:
        subl      %r9d, %r15d                                   #186.5
..LN6748:
        cmpl      $16, %r15d                                    #186.5
..LN6749:
        jl        ..B3.267      # Prob 10%                      #186.5
..LN6750:
                                # LOE rdi r11 r13 r14 ebx esi r10d r12d r15d
..B3.115:                       # Preds ..B3.114
..LN6751:
        cmpl      $29, %r15d                                    #186.5
..LN6752:
        jl        ..B3.269      # Prob 10%                      #186.5
..LN6753:
                                # LOE rdi r11 r13 r14 ebx esi r10d r12d r15d
..B3.116:                       # Preds ..B3.115
..LN6754:
        movq      56(%rsp), %rdx                                #186.5
..LN6755:
        andq      $31, %rdx                                     #186.5
..LN6756:
        movl      %edx, %edx                                    #186.5
..LN6757:
        testl     %edx, %edx                                    #186.5
..LN6758:
        je        ..B3.119      # Prob 50%                      #186.5
..LN6759:
                                # LOE rdx rdi r11 r13 r14 ebx esi r10d r12d r15d
..B3.117:                       # Preds ..B3.116
..LN6760:
        testb     $7, %dl                                       #186.5
..LN6761:
        jne       ..B3.267      # Prob 10%                      #186.5
..LN6762:
                                # LOE rdx rdi r11 r13 r14 ebx esi r10d r12d r15d
..B3.118:                       # Preds ..B3.117
..LN6763:
        negl      %edx                                          #186.5
..LN6764:
        addl      $32, %edx                                     #186.5
..LN6765:
        shrl      $3, %edx                                      #186.5
..LN6766:
                                # LOE rdx rdi r11 r13 r14 ebx esi r10d r12d r15d
..B3.119:                       # Preds ..B3.118 ..B3.116
..LN6767:
        lea       16(%rdx), %eax                                #186.5
..LN6768:
        cmpl      %eax, %r15d                                   #186.5
..LN6769:
        jl        ..B3.267      # Prob 10%                      #186.5
..LN6770:
                                # LOE rdx rdi r11 r13 r14 ebx esi r10d r12d r15d
..B3.120:                       # Preds ..B3.119
..LN6771:
        movl      %r15d, %ecx                                   #186.5
..LN6772:
        xorl      %r8d, %r8d                                    #186.5
..LN6773:
        subl      %edx, %ecx                                    #186.5
..LN6774:
        lea       (%r11,%rdi,8), %rax                           #186.59
..LN6775:
        andl      $15, %ecx                                     #186.5
..LN6776:
        negl      %ecx                                          #186.5
..LN6777:
        addl      %r15d, %ecx                                   #186.5
..LN6778:
        testq     %rdx, %rdx                                    #186.5
..LN6779:
        jbe       ..B3.124      # Prob 9%                       #186.5
..LN6780:
                                # LOE rax rdx rdi r8 r11 r13 r14 ecx ebx esi r10d r12d r15d
..B3.121:                       # Preds ..B3.120
..LN6781:
        movq      %r11, 80(%rsp)                                #
..LN6782:
        movl      %r12d, 152(%rsp)                              #
..LN6783:
        movq      %r13, 144(%rsp)                               #
..LN6784:
        movl      %r14d, 160(%rsp)                              #
..LN6785:
        movl      40(%rsp), %r12d                               #
..LN6786:
        movl      48(%rsp), %r13d                               #
..LN6787:
        movq      56(%rsp), %r9                                 #
..LN6788:
        movq      24(%rbp), %r11                                #
..LN6789:
                                # LOE rax rdx rdi r8 r9 r11 ecx ebx esi r10d r12d r13d r15d
..B3.122:                       # Preds ..B3.122 ..B3.121
..L196:         # optimization report
                # MULTIVERSIONED FOR DATA DEPENDENCE, VER 1
                # LOOP WAS UNROLLED BY 2
                # PEELED LOOP FOR VECTORIZATION
                # VECTORIZATION SPEEDUP COEFFECIENT 4.027344
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 8
                # NORMALIZED VECTORIZATION OVERHEAD 0.187500
..LN6790:
        movl      %r8d, %r14d                                   #186.32
..LN6791:
        vmovsd    8(%rax,%r8,8), %xmm0                          #186.81
..LN6792:
        imull     %r13d, %r14d                                  #186.32
..LN6793:
        vsubsd    (%rax,%r8,8), %xmm0, %xmm1                    #186.32
..LN6794:
        addl      %r12d, %r14d                                  #186.32
..LN6795:
        vfnmadd132sd (%r9,%r8,8), %xmm0, %xmm1                  #186.32
..LN6796:
        incq      %r8                                           #186.5
..LN6797:
        movslq    %r14d, %r14                                   #186.32
..LN6798:
        vmovsd    %xmm1, 8(%r11,%r14,8)                         #186.32
..LN6799:
        cmpq      %rdx, %r8                                     #186.5
..LN6800:
        jb        ..B3.122      # Prob 81%                      #186.5
..LN6801:
                                # LOE rax rdx rdi r8 r9 r11 ecx ebx esi r10d r12d r13d r15d
..B3.123:                       # Preds ..B3.122
..LN6802:
        movl      160(%rsp), %r14d                              #
..LN6803:
        movq      80(%rsp), %r11                                #
..LN6804:
        movl      152(%rsp), %r12d                              #
..LN6805:
        movq      144(%rsp), %r13                               #
..LN6806:
                                # LOE rax rdx rdi r11 r13 ecx ebx esi r10d r12d r14d r15d
..B3.124:                       # Preds ..B3.120 ..B3.123 ..B3.269
..LN6807:
        movq      128(%rsp), %r9                                #186.32
..LN6808:
        lea       (%r12,%r12,8), %r8d                           #186.32
..LN6809:
        movslq    %ecx, %rcx                                    #186.5
..LN6810:
        addl      %r12d, %r8d                                   #186.32
..LN6811:
        addl      %r8d, %esi                                    #186.32
..LN6812:
        movl      %ecx, (%rsp)                                  #186.32
..LN6813:
        lea       8(,%r9,8), %r9                                #186.32
..LN6814:
        movq      %rdi, 64(%rsp)                                #186.32
..LN6815:
        lea       (%r9,%r9,2), %r8                              #186.32
..LN6816:
        movq      %r11, 80(%rsp)                                #186.32
..LN6817:
        movl      %r12d, 152(%rsp)                              #186.32
..LN6818:
        movq      %r13, 144(%rsp)                               #186.32
..LN6819:
        vmovupd   .L_2il0floatpacket.7(%rip), %ymm0             #186.68
..LN6820:
        movl      %r15d, 96(%rsp)                               #186.32
..LN6821:
        movl      %r14d, 160(%rsp)                              #186.32
..LN6822:
        movl      40(%rsp), %r13d                               #186.32
..LN6823:
        movl      48(%rsp), %edi                                #186.32
..LN6824:
        movq      56(%rsp), %r11                                #186.32
..LN6825:
        movq      24(%rbp), %r12                                #186.32
..LN6826:
                                # LOE rax rdx rcx r8 r9 r11 r12 ebx esi edi r10d r13d ymm0
..B3.125:                       # Preds ..B3.125 ..B3.124
..L197:         # optimization report
                # MULTIVERSIONED FOR DATA DEPENDENCE, VER 1
                # LOOP WAS UNROLLED BY 2
                # LOOP WAS VECTORIZED
                # VECTORIZATION HAS UNALIGNED MEMORY REFERENCES
                # VECTORIZATION SPEEDUP COEFFECIENT 4.027344
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 8
                # NORMALIZED VECTORIZATION OVERHEAD 0.187500
                # MAIN VECTOR TYPE: 64-bits floating point
..LN6827:
        movl      %edx, %r14d                                   #186.32
..LN6828:
        vmovupd   (%r11,%rdx,8), %ymm5                          #186.49
..LN6829:
        vmovupd   32(%r11,%rdx,8), %ymm6                        #186.49
..LN6830:
        imull     %edi, %r14d                                   #186.32
..LN6831:
        vsubpd    %ymm5, %ymm0, %ymm1                           #186.70
..LN6832:
        vsubpd    %ymm6, %ymm0, %ymm2                           #186.70
..LN6833:
        vmulpd    8(%rax,%rdx,8), %ymm1, %ymm3                  #186.81
..LN6834:
        vmulpd    40(%rax,%rdx,8), %ymm2, %ymm4                 #186.81
..LN6835:
        vfmadd132pd (%rax,%rdx,8), %ymm3, %ymm5                 #186.81
..LN6836:
        vfmadd132pd 32(%rax,%rdx,8), %ymm4, %ymm6               #186.81
..LN6837:
        lea       (%r13,%r14), %r15d                            #186.32
..LN6838:
        addl      %esi, %r14d                                   #186.32
..LN6839:
        movslq    %r15d, %r15                                   #186.32
..LN6840:
        movslq    %r14d, %r14                                   #186.32
..LN6841:
        vextractf128 $1, %ymm5, %xmm7                           #186.32
..LN6842:
        lea       (%r12,%r15,8), %r15                           #186.32
..LN6843:
        vmovsd    %xmm5, 8(%r15)                                #186.32
..LN6844:
        vmovhpd   %xmm5, 8(%r9,%r15)                            #186.32
..LN6845:
        vmovsd    %xmm7, 8(%r15,%r9,2)                          #186.32
..LN6846:
        lea       (%r12,%r14,8), %r14                           #186.32
..LN6847:
        vmovhpd   %xmm7, 8(%r8,%r15)                            #186.32
..LN6848:
        lea       8(%r15,%r9,4), %r15                           #186.32
..LN6849:
        vextractf128 $1, %ymm6, %xmm8                           #186.32
..LN6850:
        vmovsd    %xmm6, (%r15)                                 #186.32
..LN6851:
        vmovhpd   %xmm6, (%r9,%r15)                             #186.32
..LN6852:
        vmovsd    %xmm8, (%r15,%r9,2)                           #186.32
..LN6853:
        vmovhpd   %xmm8, (%r8,%r15)                             #186.32
..LN6854:
        lea       72(%r14,%r9,4), %r15                          #186.32
..LN6855:
        vmovupd   64(%r11,%rdx,8), %ymm13                       #186.49
..LN6856:
        vmovupd   96(%r11,%rdx,8), %ymm15                       #186.49
..LN6857:
        vsubpd    %ymm13, %ymm0, %ymm9                          #186.70
..LN6858:
        vsubpd    %ymm15, %ymm0, %ymm10                         #186.70
..LN6859:
        vmulpd    72(%rax,%rdx,8), %ymm9, %ymm11                #186.81
..LN6860:
        vmulpd    104(%rax,%rdx,8), %ymm10, %ymm12              #186.81
..LN6861:
        vfmadd132pd 64(%rax,%rdx,8), %ymm11, %ymm13             #186.81
..LN6862:
        vfmadd132pd 96(%rax,%rdx,8), %ymm12, %ymm15             #186.81
..LN6863:
        addq      $16, %rdx                                     #186.5
..LN6864:
        vextractf128 $1, %ymm13, %xmm14                         #186.32
..LN6865:
        vmovsd    %xmm13, 72(%r14)                              #186.32
..LN6866:
        vmovhpd   %xmm13, 72(%r9,%r14)                          #186.32
..LN6867:
        vmovsd    %xmm14, 72(%r14,%r9,2)                        #186.32
..LN6868:
        vmovhpd   %xmm14, 72(%r8,%r14)                          #186.32
..LN6869:
        vextractf128 $1, %ymm15, %xmm1                          #186.32
..LN6870:
        vmovsd    %xmm15, (%r15)                                #186.32
..LN6871:
        vmovhpd   %xmm15, (%r9,%r15)                            #186.32
..LN6872:
        vmovsd    %xmm1, (%r15,%r9,2)                           #186.32
..LN6873:
        vmovhpd   %xmm1, (%r8,%r15)                             #186.32
..LN6874:
        cmpq      %rcx, %rdx                                    #186.5
..LN6875:
        jb        ..B3.125      # Prob 81%                      #186.5
..LN6876:
                                # LOE rax rdx rcx r8 r9 r11 r12 ebx esi edi r10d r13d ymm0
..B3.126:                       # Preds ..B3.125
..LN6877:
        movl      96(%rsp), %r15d                               #
..LN6878:
        movl      (%rsp), %ecx                                  #
..LN6879:
        movq      64(%rsp), %rdi                                #
..LN6880:
        movl      160(%rsp), %r14d                              #
..LN6881:
        movq      80(%rsp), %r11                                #
..LN6882:
        movl      152(%rsp), %r12d                              #
..LN6883:
        movq      144(%rsp), %r13                               #
..LN6884:
                                # LOE rdi r11 r13 ecx ebx r10d r12d r14d r15d
..B3.127:                       # Preds ..B3.126 ..B3.267
..LN6885:
        lea       1(%rcx), %eax                                 #186.5
..LN6886:
        cmpl      %eax, %r15d                                   #186.5
..LN6887:
        jb        ..B3.144      # Prob 50%                      #186.5
..LN6888:
                                # LOE rdi r11 r13 r14 ecx ebx r10d r12d r15d
..B3.128:                       # Preds ..B3.127
..LN6889:
        movslq    %r15d, %r15                                   #186.5
..LN6890:
        movslq    %ecx, %rcx                                    #186.5
..LN6891:
        subq      %rcx, %r15                                    #186.5
..LN6892:
        cmpq      $4, %r15                                      #186.5
..LN6893:
        jl        ..B3.266      # Prob 10%                      #186.5
..LN6894:
                                # LOE rdi r11 r13 r14 r15 ecx ebx r10d r12d
..B3.129:                       # Preds ..B3.128
..LN6895:
        movl      %ecx, %edx                                    #186.5
..LN6896:
        movl      %r15d, %eax                                   #186.5
..LN6897:
        imull     48(%rsp), %edx                                #186.5
..LN6898:
        andl      $-4, %eax                                     #186.5
..LN6899:
        vmovupd   .L_2il0floatpacket.8(%rip), %ymm0             #186.68
..LN6900:
        movq      128(%rsp), %rsi                               #186.32
..LN6901:
        lea       (%r11,%rdi,8), %r8                            #186.59
..LN6902:
        movslq    %ecx, %rcx                                    #186.49
..LN6903:
        movq      56(%rsp), %r9                                 #186.49
..LN6904:
        addl      40(%rsp), %edx                                #186.32
..LN6905:
        movq      $0, (%rsp)                                    #186.5
..LN6906:
        movl      %edx, 8(%rsp)                                 #186.32
..LN6907:
        lea       8(,%rsi,8), %rdx                              #186.32
..LN6908:
        movq      %rdi, 64(%rsp)                                #186.32
..LN6909:
        lea       (%r8,%rcx,8), %rsi                            #186.59
..LN6910:
        movq      %r11, 80(%rsp)                                #186.32
..LN6911:
        lea       (%r9,%rcx,8), %r8                             #186.49
..LN6912:
        movl      %r12d, 152(%rsp)                              #186.32
..LN6913:
        lea       (%rdx,%rdx,2), %r9                            #186.32
..LN6914:
        movq      %r13, 144(%rsp)                               #186.32
..LN6915:
        movslq    %eax, %rax                                    #186.5
..LN6916:
        movl      %r14d, 160(%rsp)                              #186.32
..LN6917:
        movl      8(%rsp), %edi                                 #186.32
..LN6918:
        movq      (%rsp), %r13                                  #186.32
..LN6919:
        movl      48(%rsp), %r11d                               #186.32
..LN6920:
        movq      24(%rbp), %r12                                #186.32
..LN6921:
        .align    16,0x90
..LN6922:
                                # LOE rax rdx rsi r8 r9 r12 r13 r15 ecx ebx edi r10d r11d ymm0
..B3.130:                       # Preds ..B3.130 ..B3.129
..L198:         # optimization report
                # MULTIVERSIONED FOR DATA DEPENDENCE, VER 1
                # LOOP WAS VECTORIZED
                # REMAINDER LOOP FOR VECTORIZATION
                # VECTORIZATION HAS UNALIGNED MEMORY REFERENCES
                # VECTORIZATION SPEEDUP COEFFECIENT 2.300781
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 0.812500
                # MAIN VECTOR TYPE: 64-bits floating point
..LN6923:
        movl      %r13d, %r14d                                  #186.32
..LN6924:
        vmovupd   (%r8,%r13,8), %ymm3                           #186.49
..LN6925:
        imull     %r11d, %r14d                                  #186.32
..LN6926:
        vsubpd    %ymm3, %ymm0, %ymm1                           #186.70
..LN6927:
        vmulpd    8(%rsi,%r13,8), %ymm1, %ymm2                  #186.81
..LN6928:
        addl      %edi, %r14d                                   #186.32
..LN6929:
        vfmadd132pd (%rsi,%r13,8), %ymm2, %ymm3                 #186.81
..LN6930:
        addq      $4, %r13                                      #186.5
..LN6931:
        movslq    %r14d, %r14                                   #186.32
..LN6932:
        vextractf128 $1, %ymm3, %xmm4                           #186.32
..LN6933:
        lea       8(%r12,%r14,8), %r14                          #186.32
..LN6934:
        vmovsd    %xmm3, (%r14)                                 #186.32
..LN6935:
        vmovhpd   %xmm3, (%rdx,%r14)                            #186.32
..LN6936:
        vmovsd    %xmm4, (%r14,%rdx,2)                          #186.32
..LN6937:
        vmovhpd   %xmm4, (%r9,%r14)                             #186.32
..LN6938:
        cmpq      %rax, %r13                                    #186.5
..LN6939:
        jb        ..B3.130      # Prob 81%                      #186.5
..LN6940:
                                # LOE rax rdx rsi r8 r9 r12 r13 r15 ecx ebx edi r10d r11d ymm0
..B3.131:                       # Preds ..B3.130
..LN6941:
        movq      64(%rsp), %rdi                                #
..LN6942:
        movl      160(%rsp), %r14d                              #
..LN6943:
        movq      80(%rsp), %r11                                #
..LN6944:
        movl      152(%rsp), %r12d                              #
..LN6945:
        movq      144(%rsp), %r13                               #
..LN6946:
                                # LOE rax rdi r11 r13 r15 ecx ebx r10d r12d r14d
..B3.132:                       # Preds ..B3.131 ..B3.266
..LN6947:
        cmpq      %r15, %rax                                    #186.5
..LN6948:
        jae       ..B3.144      # Prob 9%                       #186.5
..LN6949:
                                # LOE rax rdi r11 r13 r14 r15 ecx ebx r10d r12d
..B3.133:                       # Preds ..B3.132
..LN6950:
        movl      %ecx, %edx                                    #186.5
..LN6951:
        lea       (%r11,%rdi,8), %rsi                           #186.59
..LN6952:
        imull     48(%rsp), %edx                                #186.5
..LN6953:
        movslq    %ecx, %rcx                                    #186.49
..LN6954:
        movq      56(%rsp), %rdi                                #186.49
..LN6955:
        addl      %edx, 40(%rsp)                                #186.32
..LN6956:
        movl      48(%rsp), %r8d                                #186.49
..LN6957:
        movq      24(%rbp), %r9                                 #186.49
..LN6958:
        lea       (%rsi,%rcx,8), %rdx                           #186.59
..LN6959:
        lea       (%rdi,%rcx,8), %rcx                           #186.49
..LN6960:
        movl      40(%rsp), %edi                                #186.49
..LN6961:
                                # LOE rax rdx rcx r9 r13 r14 r15 ebx edi r8d r10d r12d
..B3.134:                       # Preds ..B3.134 ..B3.133
..L199:         # optimization report
                # MULTIVERSIONED FOR DATA DEPENDENCE, VER 1
                # REMAINDER LOOP FOR VECTORIZATION
                # VECTORIZATION SPEEDUP COEFFECIENT 2.300781
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 0.812500
..LN6962:
        movl      %eax, %esi                                    #186.32
..LN6963:
        vmovsd    8(%rdx,%rax,8), %xmm0                         #186.81
..LN6964:
        imull     %r8d, %esi                                    #186.32
..LN6965:
        vsubsd    (%rdx,%rax,8), %xmm0, %xmm1                   #186.32
..LN6966:
        addl      %edi, %esi                                    #186.32
..LN6967:
        vfnmadd132sd (%rcx,%rax,8), %xmm0, %xmm1                #186.32
..LN6968:
        incq      %rax                                          #186.5
..LN6969:
        movslq    %esi, %rsi                                    #186.32
..LN6970:
        vmovsd    %xmm1, 8(%r9,%rsi,8)                          #186.32
..LN6971:
        cmpq      %r15, %rax                                    #186.5
..LN6972:
        jb        ..B3.134      # Prob 81%                      #186.5
..LN6973:
        jmp       ..B3.144      # Prob 100%                     #186.5
..LN6974:
                                # LOE rax rdx rcx r9 r13 r14 r15 ebx edi r8d r10d r12d
..B3.312:                       # Preds ..B3.109
..LN6975:
	.loc    1  180  is_stmt 1
        movslq    %r15d, %rax                                   #180.5
..LN6976:
                                # LOE rax rdi r9 r11 r13 r14 ebx esi r10d r12d r15d
..B3.136:                       # Preds ..B3.312 ..B3.112 ..B3.113
..LN6977:
	.loc    1  186  is_stmt 1
        movl      %r15d, %ecx                                   #186.5
..LN6978:
        movl      $1, %edx                                      #186.5
..LN6979:
        subl      %r9d, %ecx                                    #186.5
..LN6980:
        sarl      $1, %ecx                                      #186.5
..LN6981:
        shrl      $30, %ecx                                     #186.5
..LN6982:
        addl      %ecx, %r15d                                   #186.5
..LN6983:
        subl      %r9d, %r15d                                   #186.5
..LN6984:
        sarl      $2, %r15d                                     #186.5
..LN6985:
        movl      $0, 8(%rsp)                                   #186.5
..LN6986:
        testl     %r15d, %r15d                                  #186.5
..LN6987:
        jbe       ..B3.140      # Prob 9%                       #186.5
..LN6988:
                                # LOE rax rdx rdi r11 r13 r14 ebx esi r10d r12d r15d
..B3.137:                       # Preds ..B3.136
..LN6989:
        movl      %ebx, 88(%rsp)                                #186.32
..LN6990:
        lea       (%r12,%r12), %ecx                             #186.32
..LN6991:
        negl      %ecx                                          #186.32
..LN6992:
        lea       (%r12,%r12,2), %r9d                           #186.32
..LN6993:
        addl      %r12d, %ecx                                   #186.32
..LN6994:
        negl      %r9d                                          #186.32
..LN6995:
        addl      %r12d, %r9d                                   #186.32
..LN6996:
	.loc    1  142  is_stmt 1
        lea       4(,%r12,4), %edx                              #142.12
..LN6997:
        movl      %edx, 24(%rsp)                                #142.12
..LN6998:
	.loc    1  186  is_stmt 1
        lea       (%r11,%rdi,8), %r8                            #186.59
..LN6999:
        movq      %r8, 16(%rsp)                                 #186.59
..LN7000:
        lea       (%r12,%r12,4), %r8d                           #186.32
..LN7001:
        movq      %rdi, 64(%rsp)                                #186.32
..LN7002:
        lea       (%rcx,%r12,4), %edx                           #186.32
..LN7003:
        addl      %esi, %edx                                    #186.32
..LN7004:
        lea       (%r9,%r12,4), %r9d                            #186.32
..LN7005:
        movl      %edx, 32(%rsp)                                #186.32
..LN7006:
        addl      %esi, %r9d                                    #186.32
..LN7007:
        movq      %r11, 80(%rsp)                                #186.32
..LN7008:
	.loc    1  142  is_stmt 1
        addl      %esi, %r8d                                    #142.12
..LN7009:
	.loc    1  186  is_stmt 1
        movl      %r12d, 152(%rsp)                              #186.32
..LN7010:
	.loc    1  136  is_stmt 1
        lea       (%rsi,%r12,4), %ecx                           #136.1
..LN7011:
	.loc    1  186  is_stmt 1
        movq      %r13, 144(%rsp)                               #186.32
..LN7012:
        xorl      %edx, %edx                                    #186.32
..LN7013:
        movq      %rax, (%rsp)                                  #186.32
..LN7014:
        movl      %r14d, 160(%rsp)                              #186.32
..LN7015:
        movl      32(%rsp), %r12d                               #186.32
..LN7016:
        movl      24(%rsp), %r13d                               #186.32
..LN7017:
        movq      16(%rsp), %rbx                                #186.32
..LN7018:
        movl      8(%rsp), %esi                                 #186.32
..LN7019:
        movq      56(%rsp), %rdi                                #186.32
..LN7020:
        movq      24(%rbp), %r11                                #186.32
..LN7021:
                                # LOE rbx rdi r11 edx ecx esi r8d r9d r10d r12d r13d r15d
..B3.138:                       # Preds ..B3.138 ..B3.137
..L200:         # optimization report
                # MULTIVERSIONED FOR DATA DEPENDENCE, VER 2
                # LOOP WAS UNROLLED BY 4
                # %s was not vectorized: non-vectorizable loop instance from multiversioning
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
..LN7022:
        lea       (,%rsi,4), %eax                               #186.49
..LN7023:
        movslq    %eax, %rax                                    #186.81
..LN7024:
        lea       (%r9,%rdx), %r14d                             #186.32
..LN7025:
        movslq    %r14d, %r14                                   #186.32
..LN7026:
        incl      %esi                                          #186.5
..LN7027:
        vmovsd    8(%rbx,%rax,8), %xmm0                         #186.81
..LN7028:
        vmovsd    16(%rbx,%rax,8), %xmm2                        #186.81
..LN7029:
        vmovsd    24(%rbx,%rax,8), %xmm4                        #186.81
..LN7030:
        vsubsd    %xmm2, %xmm0, %xmm3                           #186.32
..LN7031:
        vsubsd    (%rbx,%rax,8), %xmm0, %xmm1                   #186.32
..LN7032:
        vsubsd    %xmm4, %xmm2, %xmm5                           #186.32
..LN7033:
        vfnmadd132sd (%rdi,%rax,8), %xmm0, %xmm1                #186.32
..LN7034:
        vmovsd    32(%rbx,%rax,8), %xmm6                        #186.81
..LN7035:
        vsubsd    %xmm6, %xmm4, %xmm7                           #186.32
..LN7036:
        vmovsd    %xmm1, 8(%r11,%r14,8)                         #186.32
..LN7037:
        lea       (%r12,%rdx), %r14d                            #186.32
..LN7038:
        vfmadd132sd 8(%rdi,%rax,8), %xmm2, %xmm3                #186.32
..LN7039:
        movslq    %r14d, %r14                                   #186.32
..LN7040:
        vmovsd    %xmm3, 16(%r11,%r14,8)                        #186.32
..LN7041:
        lea       (%rcx,%rdx), %r14d                            #186.32
..LN7042:
        vfmadd132sd 16(%rdi,%rax,8), %xmm4, %xmm5               #186.32
..LN7043:
        movslq    %r14d, %r14                                   #186.32
..LN7044:
        vmovsd    %xmm5, 24(%r11,%r14,8)                        #186.32
..LN7045:
        vfmadd132sd 24(%rdi,%rax,8), %xmm6, %xmm7               #186.32
..LN7046:
        lea       (%r8,%rdx), %eax                              #186.32
..LN7047:
        movslq    %eax, %rax                                    #186.32
..LN7048:
        addl      %r13d, %edx                                   #186.5
..LN7049:
        vmovsd    %xmm7, 32(%r11,%rax,8)                        #186.32
..LN7050:
        cmpl      %r15d, %esi                                   #186.5
..LN7051:
        jb        ..B3.138      # Prob 27%                      #186.5
..LN7052:
                                # LOE rbx rdi r11 edx ecx esi r8d r9d r10d r12d r13d r15d
..B3.139:                       # Preds ..B3.138
..LN7053:
        movl      %esi, 8(%rsp)                                 #
..LN7054:
        movl      %esi, %edx                                    #186.32
..LN7055:
        movl      88(%rsp), %ebx                                #
..LN7056:
        movq      (%rsp), %rax                                  #
..LN7057:
        movq      64(%rsp), %rdi                                #
..LN7058:
        lea       1(,%rdx,4), %edx                              #186.32
..LN7059:
        movl      160(%rsp), %r14d                              #
..LN7060:
        movq      80(%rsp), %r11                                #
..LN7061:
        movl      152(%rsp), %r12d                              #
..LN7062:
        movq      144(%rsp), %r13                               #
..LN7063:
        movslq    %edx, %rdx                                    #186.5
..LN7064:
                                # LOE rax rdx rdi r11 r13 ebx r10d r12d r14d
..B3.140:                       # Preds ..B3.139 ..B3.136
..LN7065:
        decq      %rdx                                          #186.32
..LN7066:
	.loc    1  166  is_stmt 1
        subq      %rdi, %rax                                    #166.7
..LN7067:
	.loc    1  186  is_stmt 1
        cmpq      %rax, %rdx                                    #186.5
..LN7068:
        jae       ..B3.144      # Prob 9%                       #186.5
..LN7069:
                                # LOE rax rdx rdi r11 r13 r14 ebx r10d r12d
..B3.141:                       # Preds ..B3.140
..LN7070:
        movl      48(%rsp), %r8d                                #186.59
..LN7071:
        lea       (%r11,%rdi,8), %rcx                           #186.59
..LN7072:
        movl      40(%rsp), %edi                                #186.59
..LN7073:
        movq      56(%rsp), %r9                                 #186.59
..LN7074:
        movq      24(%rbp), %r11                                #186.59
..LN7075:
                                # LOE rax rdx rcx r9 r11 r13 r14 ebx edi r8d r10d r12d
..B3.142:                       # Preds ..B3.142 ..B3.141
..L201:         # optimization report
                # REMAINDER LOOP
                # MULTIVERSIONED FOR DATA DEPENDENCE, VER 2
                # %s was not vectorized: non-vectorizable loop instance from multiversioning
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
..LN7076:
        movl      %edx, %esi                                    #186.32
..LN7077:
        vmovsd    8(%rcx,%rdx,8), %xmm0                         #186.81
..LN7078:
        imull     %r8d, %esi                                    #186.32
..LN7079:
        vsubsd    (%rcx,%rdx,8), %xmm0, %xmm1                   #186.32
..LN7080:
        addl      %edi, %esi                                    #186.32
..LN7081:
        vfnmadd132sd (%r9,%rdx,8), %xmm0, %xmm1                 #186.32
..LN7082:
        incq      %rdx                                          #186.5
..LN7083:
        movslq    %esi, %rsi                                    #186.32
..LN7084:
        vmovsd    %xmm1, 8(%r11,%rsi,8)                         #186.32
..LN7085:
        cmpq      %rax, %rdx                                    #186.5
..LN7086:
        jb        ..B3.142      # Prob 66%                      #186.5
..LN7087:
                                # LOE rax rdx rcx r9 r11 r13 r14 ebx edi r8d r10d r12d
..B3.144:                       # Preds ..B3.142 ..B3.134 ..B3.301 ..B3.85 ..B3.108
                                #       ..B3.127 ..B3.132 ..B3.140
..LN7088:
	.loc    1  190  is_stmt 1
        cmpl      $0, 48(%rbp)                                  #190.6
..LN7089:
        je        ..B3.202      # Prob 50%                      #190.6
..LN7090:
                                # LOE r13 r14 ebx r10d r12d
..B3.145:                       # Preds ..B3.144
..LN7091:
	.loc    1  191  is_stmt 1
        movl      %r14d, %edi                                   #191.9
..LN7092:
        cmpl      %r10d, %r14d                                  #191.22
..LN7093:
        jg        ..B3.167      # Prob 50%                      #191.22
..LN7094:
                                # LOE rdi r13 r14 ebx r10d r12d
..B3.146:                       # Preds ..B3.145
..LN7095:
        movl      %r10d, %ecx                                   #191.5
..LN7096:
        subl      %r14d, %ecx                                   #191.5
..LN7097:
        incl      %ecx                                          #191.5
..LN7098:
        cmpl      $16, %ecx                                     #191.5
..LN7099:
        jl        ..B3.286      # Prob 10%                      #191.5
..LN7100:
                                # LOE rdi r13 r14 ecx ebx r10d r12d
..B3.147:                       # Preds ..B3.146
..LN7101:
        movq      112(%rsp), %r8                                #191.33
..LN7102:
        lea       (%r8,%rdi,8), %r8                             #191.33
..LN7103:
        movq      %r8, %rsi                                     #191.5
..LN7104:
        andq      $31, %rsi                                     #191.5
..LN7105:
        movl      %esi, %esi                                    #191.5
..LN7106:
        testl     %esi, %esi                                    #191.5
..LN7107:
        je        ..B3.150      # Prob 50%                      #191.5
..LN7108:
                                # LOE rsi rdi r8 r13 r14 ecx ebx r10d r12d
..B3.148:                       # Preds ..B3.147
..LN7109:
        testl     $7, %esi                                      #191.5
..LN7110:
        jne       ..B3.286      # Prob 10%                      #191.5
..LN7111:
                                # LOE rsi rdi r8 r13 r14 ecx ebx r10d r12d
..B3.149:                       # Preds ..B3.148
..LN7112:
        negl      %esi                                          #191.5
..LN7113:
        addl      $32, %esi                                     #191.5
..LN7114:
        shrl      $3, %esi                                      #191.5
..LN7115:
                                # LOE rsi rdi r8 r13 r14 ecx ebx r10d r12d
..B3.150:                       # Preds ..B3.149 ..B3.147
..LN7116:
        lea       16(%rsi), %eax                                #191.5
..LN7117:
        cmpl      %eax, %ecx                                    #191.5
..LN7118:
        jl        ..B3.286      # Prob 10%                      #191.5
..LN7119:
                                # LOE rsi rdi r8 r13 r14 ecx ebx r10d r12d
..B3.151:                       # Preds ..B3.150
..LN7120:
        movl      %ecx, %eax                                    #191.5
..LN7121:
        xorl      %edx, %edx                                    #191.5
..LN7122:
        movq      128(%rsp), %r9                                #191.55
..LN7123:
        subl      %esi, %eax                                    #191.5
..LN7124:
        andl      $15, %eax                                     #191.5
..LN7125:
        negl      %eax                                          #191.5
..LN7126:
        lea       (%r13,%r9,8), %r11                            #191.55
..LN7127:
        addl      %ecx, %eax                                    #191.5
..LN7128:
        lea       (%r11,%rdi,8), %r11                           #191.55
..LN7129:
        lea       (%r13,%rdi,8), %r9                            #191.46
..LN7130:
        testq     %rsi, %rsi                                    #191.5
..LN7131:
        jbe       ..B3.155      # Prob 15%                      #191.5
..LN7132:
                                # LOE rdx rsi rdi r8 r9 r11 r13 r14 eax ecx ebx r10d r12d
..B3.152:                       # Preds ..B3.151
..LN7133:
        vmovsd    .L_2il0floatpacket.3(%rip), %xmm0             #191.41
..LN7134:
                                # LOE rdx rsi rdi r8 r9 r11 r13 r14 eax ecx ebx r10d r12d xmm0
..B3.153:                       # Preds ..B3.153 ..B3.152
..L202:         # optimization report
                # LOOP WAS UNROLLED BY 4
                # PEELED LOOP FOR VECTORIZATION
                # VECTORIZATION SPEEDUP COEFFECIENT 5.332031
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 0.437500
..LN7135:
        vmovsd    (%r9,%rdx,8), %xmm1                           #191.46
..LN7136:
        vaddsd    16(%r11,%rdx,8), %xmm1, %xmm2                 #191.55
..LN7137:
        vmulsd    %xmm2, %xmm0, %xmm3                           #191.55
..LN7138:
        vmovsd    %xmm3, (%r8,%rdx,8)                           #191.33
..LN7139:
        incq      %rdx                                          #191.5
..LN7140:
        cmpq      %rsi, %rdx                                    #191.5
..LN7141:
        jb        ..B3.153      # Prob 82%                      #191.5
..LN7142:
                                # LOE rdx rsi rdi r8 r9 r11 r13 r14 eax ecx ebx r10d r12d xmm0
..B3.155:                       # Preds ..B3.153 ..B3.151
..LN7143:
        vmovupd   .L_2il0floatpacket.4(%rip), %ymm0             #191.41
..LN7144:
        movslq    %eax, %rdx                                    #191.5
        .align    16,0x90
..LN7145:
                                # LOE rdx rsi rdi r8 r9 r11 r13 r14 eax ecx ebx r10d r12d ymm0
..B3.156:                       # Preds ..B3.156 ..B3.155
..L203:         # optimization report
                # LOOP WAS UNROLLED BY 4
                # LOOP WAS VECTORIZED
                # VECTORIZATION HAS UNALIGNED MEMORY REFERENCES
                # VECTORIZATION SPEEDUP COEFFECIENT 5.332031
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 0.437500
                # MAIN VECTOR TYPE: 64-bits floating point
..LN7146:
        vmovupd   (%r9,%rsi,8), %ymm1                           #191.46
..LN7147:
        vmovupd   32(%r9,%rsi,8), %ymm4                         #191.46
..LN7148:
        vmovupd   64(%r9,%rsi,8), %ymm7                         #191.46
..LN7149:
        vmovupd   96(%r9,%rsi,8), %ymm10                        #191.46
..LN7150:
        vaddpd    16(%r11,%rsi,8), %ymm1, %ymm2                 #191.55
..LN7151:
        vaddpd    48(%r11,%rsi,8), %ymm4, %ymm5                 #191.55
..LN7152:
        vaddpd    80(%r11,%rsi,8), %ymm7, %ymm8                 #191.55
..LN7153:
        vaddpd    112(%r11,%rsi,8), %ymm10, %ymm11              #191.55
..LN7154:
        vmulpd    %ymm2, %ymm0, %ymm3                           #191.55
..LN7155:
        vmulpd    %ymm5, %ymm0, %ymm6                           #191.55
..LN7156:
        vmulpd    %ymm8, %ymm0, %ymm9                           #191.55
..LN7157:
        vmulpd    %ymm11, %ymm0, %ymm12                         #191.55
..LN7158:
        vmovupd   %ymm3, (%r8,%rsi,8)                           #191.33
..LN7159:
        vmovupd   %ymm6, 32(%r8,%rsi,8)                         #191.33
..LN7160:
        vmovupd   %ymm9, 64(%r8,%rsi,8)                         #191.33
..LN7161:
        vmovupd   %ymm12, 96(%r8,%rsi,8)                        #191.33
..LN7162:
        addq      $16, %rsi                                     #191.5
..LN7163:
        cmpq      %rdx, %rsi                                    #191.5
..LN7164:
        jb        ..B3.156      # Prob 82%                      #191.5
..LN7165:
                                # LOE rdx rsi rdi r8 r9 r11 r13 r14 eax ecx ebx r10d r12d ymm0
..B3.158:                       # Preds ..B3.156 ..B3.286
..LN7166:
        lea       1(%rax), %edx                                 #191.5
..LN7167:
        cmpl      %edx, %ecx                                    #191.5
..LN7168:
        jb        ..B3.309      # Prob 50%                      #191.5
..LN7169:
                                # LOE rdi r13 r14 eax ecx ebx r10d r12d
..B3.159:                       # Preds ..B3.158
..LN7170:
        movslq    %ecx, %rcx                                    #191.5
..LN7171:
        movslq    %eax, %rax                                    #191.5
..LN7172:
        subq      %rax, %rcx                                    #191.5
..LN7173:
        cmpq      $4, %rcx                                      #191.5
..LN7174:
        jl        ..B3.285      # Prob 10%                      #191.5
..LN7175:
                                # LOE rcx rdi r13 r14 eax ebx r10d r12d
..B3.160:                       # Preds ..B3.159
..LN7176:
        movq      112(%rsp), %r8                                #191.33
..LN7177:
        movl      %ecx, %edx                                    #191.5
..LN7178:
        movq      128(%rsp), %r11                               #191.55
..LN7179:
        andl      $-4, %edx                                     #191.5
..LN7180:
        movslq    %eax, %rax                                    #191.46
..LN7181:
        xorl      %r9d, %r9d                                    #191.5
..LN7182:
        movslq    %edx, %rdx                                    #191.5
..LN7183:
        lea       (%r8,%rdi,8), %rsi                            #191.33
..LN7184:
        lea       (%r13,%r11,8), %r15                           #191.55
..LN7185:
        vmovupd   .L_2il0floatpacket.9(%rip), %ymm0             #191.41
..LN7186:
        lea       (%rsi,%rax,8), %r8                            #191.33
..LN7187:
        lea       (%r15,%rdi,8), %rsi                           #191.55
..LN7188:
        lea       (%r13,%rdi,8), %r11                           #191.46
..LN7189:
        lea       (%rsi,%rax,8), %rsi                           #191.55
..LN7190:
        lea       (%r11,%rax,8), %r11                           #191.46
..LN7191:
                                # LOE rdx rcx rsi rdi r8 r9 r11 r13 r14 eax ebx r10d r12d ymm0
..B3.161:                       # Preds ..B3.161 ..B3.160
..L204:         # optimization report
                # LOOP WAS VECTORIZED
                # REMAINDER LOOP FOR VECTORIZATION
                # VECTORIZATION HAS UNALIGNED MEMORY REFERENCES
                # VECTORIZATION SPEEDUP COEFFECIENT 2.320312
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 1.750000
                # MAIN VECTOR TYPE: 64-bits floating point
..LN7192:
        vmovupd   (%r11,%r9,8), %ymm1                           #191.46
..LN7193:
        vaddpd    16(%rsi,%r9,8), %ymm1, %ymm2                  #191.55
..LN7194:
        vmulpd    %ymm2, %ymm0, %ymm3                           #191.55
..LN7195:
        vmovupd   %ymm3, (%r8,%r9,8)                            #191.33
..LN7196:
        addq      $4, %r9                                       #191.5
..LN7197:
        cmpq      %rdx, %r9                                     #191.5
..LN7198:
        jb        ..B3.161      # Prob 82%                      #191.5
..LN7199:
                                # LOE rdx rcx rsi rdi r8 r9 r11 r13 r14 eax ebx r10d r12d ymm0
..B3.163:                       # Preds ..B3.161 ..B3.285
..LN7200:
        cmpq      %rcx, %rdx                                    #191.5
..LN7201:
        jae       ..B3.309      # Prob 15%                      #191.5
..LN7202:
                                # LOE rdx rcx rdi r13 r14 eax ebx r10d r12d
..B3.164:                       # Preds ..B3.163
..LN7203:
        movq      128(%rsp), %rsi                               #191.55
..LN7204:
        movslq    %eax, %rax                                    #191.46
..LN7205:
        movq      112(%rsp), %r11                               #191.33
..LN7206:
        vmovsd    .L_2il0floatpacket.3(%rip), %xmm0             #191.41
..LN7207:
        lea       (%r13,%rsi,8), %r8                            #191.55
..LN7208:
        lea       (%r8,%rdi,8), %r9                             #191.55
..LN7209:
        lea       (%r9,%rax,8), %rsi                            #191.55
..LN7210:
        lea       (%r11,%rdi,8), %r15                           #191.33
..LN7211:
        lea       (%r13,%rdi,8), %r9                            #191.46
..LN7212:
        lea       (%r15,%rax,8), %r8                            #191.33
..LN7213:
        lea       (%r9,%rax,8), %rax                            #191.46
..LN7214:
                                # LOE rax rdx rcx rsi rdi r8 r13 r14 ebx r10d r12d xmm0
..B3.165:                       # Preds ..B3.165 ..B3.164
..L205:         # optimization report
                # REMAINDER LOOP FOR VECTORIZATION
                # VECTORIZATION SPEEDUP COEFFECIENT 2.320312
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 1.750000
..LN7215:
        vmovsd    (%rax,%rdx,8), %xmm1                          #191.46
..LN7216:
        vaddsd    16(%rsi,%rdx,8), %xmm1, %xmm2                 #191.55
..LN7217:
        vmulsd    %xmm2, %xmm0, %xmm3                           #191.55
..LN7218:
        vmovsd    %xmm3, (%r8,%rdx,8)                           #191.33
..LN7219:
        incq      %rdx                                          #191.5
..LN7220:
        cmpq      %rcx, %rdx                                    #191.5
..LN7221:
        jb        ..B3.165      # Prob 82%                      #191.5
..LN7222:
                                # LOE rax rdx rcx rsi rdi r8 r13 r14 ebx r10d r12d xmm0
..B3.166:                       # Preds ..B3.165
..LN7223:
	.loc    1  166  is_stmt 1
        cmpl      %r10d, %r14d                                  #166.46
..LN7224:
                                # LOE rdi r13 r14 ebx r10d r12d
..B3.167:                       # Preds ..B3.145 ..B3.166
..LN7225:
	.loc    1  192  is_stmt 1
        jge       ..B3.202      # Prob 50%                      #192.21
..LN7226:
                                # LOE rdi r13 r14 ebx r10d r12d
..B3.168:                       # Preds ..B3.309 ..B3.167
..LN7227:
        movq      120(%rsp), %rsi                               #192.42
..LN7228:
        movq      24(%rbp), %rax                                #192.32
..LN7229:
        lea       (%rsi,%rdi,8), %rsi                           #192.42
..LN7230:
        lea       (%rax,%rdi,8), %rdx                           #192.32
..LN7231:
        movq      %rdx, (%rsp)                                  #192.32
..LN7232:
        cmpq      %rsi, %rdx                                    #192.42
..LN7233:
        jbe       ..B3.306      # Prob 50%                      #192.42
..LN7234:
                                # LOE rdx rsi rdi r13 r14 edx ebx r10d r12d dl dh
..B3.169:                       # Preds ..B3.168
..LN7235:
        movslq    %r10d, %rcx                                   #192.5
..LN7236:
        movq      %rcx, %rax                                    #192.5
..LN7237:
        subq      %rdi, %rax                                    #192.5
..LN7238:
        shlq      $3, %rax                                      #192.42
..LN7239:
        subq      %rsi, %rdx                                    #192.42
..LN7240:
        cmpq      %rdx, %rax                                    #192.42
..LN7241:
        jle       ..B3.172      # Prob 50%                      #192.42
..LN7242:
        jmp       ..B3.170      # Prob 100%                     #192.42
..LN7243:
                                # LOE rcx rsi rdi r13 r14 ebx r10d r12d
..B3.306:                       # Preds ..B3.168
..LN7244:
	.loc    1  166  is_stmt 1
        movslq    %r10d, %rcx                                   #166.30
..LN7245:
                                # LOE rcx rsi rdi r13 r14 ebx r10d r12d
..B3.170:                       # Preds ..B3.306 ..B3.169
..LN7246:
	.loc    1  192  is_stmt 1
        cmpq      (%rsp), %rsi                                  #192.42
..LN7247:
        jbe       ..B3.194      # Prob 50%                      #192.42
..LN7248:
                                # LOE rcx rsi rdi r13 r14 ebx r10d r12d
..B3.171:                       # Preds ..B3.170
..LN7249:
        movq      %rcx, %rdx                                    #192.5
..LN7250:
        movq      %rsi, %rax                                    #192.42
..LN7251:
        subq      %rdi, %rdx                                    #192.5
..LN7252:
        subq      (%rsp), %rax                                  #192.42
..LN7253:
        shlq      $3, %rdx                                      #192.42
..LN7254:
        cmpq      %rdx, %rax                                    #192.42
..LN7255:
        jl        ..B3.194      # Prob 50%                      #192.42
..LN7256:
                                # LOE rcx rsi rdi r13 r14 ebx r10d r12d
..B3.172:                       # Preds ..B3.169 ..B3.171
..LN7257:
        movl      %r10d, %edx                                   #192.5
..LN7258:
        subl      %r14d, %edx                                   #192.5
..LN7259:
        cmpl      $16, %edx                                     #192.5
..LN7260:
        jl        ..B3.272      # Prob 10%                      #192.5
..LN7261:
                                # LOE rsi rdi r13 r14 edx ebx r10d r12d
..B3.173:                       # Preds ..B3.172
..LN7262:
        cmpl      $29, %edx                                     #192.5
..LN7263:
        jl        ..B3.274      # Prob 10%                      #192.5
..LN7264:
                                # LOE rsi rdi r13 r14 edx ebx r10d r12d
..B3.174:                       # Preds ..B3.173
..LN7265:
        movq      %rsi, %r8                                     #192.5
..LN7266:
        andq      $31, %r8                                      #192.5
..LN7267:
        movl      %r8d, %r8d                                    #192.5
..LN7268:
        testl     %r8d, %r8d                                    #192.5
..LN7269:
        je        ..B3.177      # Prob 50%                      #192.5
..LN7270:
                                # LOE rsi rdi r8 r13 r14 edx ebx r10d r12d
..B3.175:                       # Preds ..B3.174
..LN7271:
        testl     $7, %r8d                                      #192.5
..LN7272:
        jne       ..B3.272      # Prob 10%                      #192.5
..LN7273:
                                # LOE rsi rdi r8 r13 r14 edx ebx r10d r12d
..B3.176:                       # Preds ..B3.175
..LN7274:
        negl      %r8d                                          #192.5
..LN7275:
        addl      $32, %r8d                                     #192.5
..LN7276:
        shrl      $3, %r8d                                      #192.5
..LN7277:
                                # LOE rsi rdi r8 r13 r14 edx ebx r10d r12d
..B3.177:                       # Preds ..B3.176 ..B3.174
..LN7278:
        lea       16(%r8), %eax                                 #192.5
..LN7279:
        cmpl      %eax, %edx                                    #192.5
..LN7280:
        jl        ..B3.272      # Prob 10%                      #192.5
..LN7281:
                                # LOE rsi rdi r8 r13 r14 edx ebx r10d r12d
..B3.178:                       # Preds ..B3.177
..LN7282:
        movl      %edx, %eax                                    #192.5
..LN7283:
        xorl      %r9d, %r9d                                    #192.5
..LN7284:
        subl      %r8d, %eax                                    #192.5
..LN7285:
        movq      112(%rsp), %rcx                               #192.52
..LN7286:
        andl      $15, %eax                                     #192.5
..LN7287:
        negl      %eax                                          #192.5
..LN7288:
        addl      %edx, %eax                                    #192.5
..LN7289:
        lea       (%rcx,%rdi,8), %rcx                           #192.52
..LN7290:
        testq     %r8, %r8                                      #192.5
..LN7291:
        jbe       ..B3.182      # Prob 9%                       #192.5
..LN7292:
                                # LOE rcx rsi rdi r8 r9 r13 r14 eax edx ebx r10d r12d
..B3.179:                       # Preds ..B3.178
..LN7293:
        movq      (%rsp), %r11                                  #
..LN7294:
                                # LOE rcx rsi rdi r8 r9 r11 r13 r14 eax edx ebx r10d r12d
..B3.180:                       # Preds ..B3.180 ..B3.179
..L206:         # optimization report
                # MULTIVERSIONED FOR DATA DEPENDENCE, VER 1
                # LOOP WAS UNROLLED BY 4
                # PEELED LOOP FOR VECTORIZATION
                # VECTORIZATION SPEEDUP COEFFECIENT 4.843750
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 0.312500
..LN7295:
        vmovsd    8(%rcx,%r9,8), %xmm0                          #192.76
..LN7296:
        vsubsd    (%rcx,%r9,8), %xmm0, %xmm1                    #192.32
..LN7297:
        vfnmadd132sd (%rsi,%r9,8), %xmm0, %xmm1                 #192.32
..LN7298:
        vmovsd    %xmm1, (%r11,%r9,8)                           #192.32
..LN7299:
        incq      %r9                                           #192.5
..LN7300:
        cmpq      %r8, %r9                                      #192.5
..LN7301:
        jb        ..B3.180      # Prob 81%                      #192.5
..LN7302:
                                # LOE rcx rsi rdi r8 r9 r11 r13 r14 eax edx ebx r10d r12d
..B3.182:                       # Preds ..B3.180 ..B3.178 ..B3.274
..LN7303:
        vmovupd   .L_2il0floatpacket.7(%rip), %ymm0             #192.61
..LN7304:
        movslq    %eax, %r9                                     #192.5
..LN7305:
        movq      (%rsp), %r11                                  #192.5
..LN7306:
                                # LOE rcx rsi rdi r8 r9 r11 r13 r14 eax edx ebx r10d r12d ymm0
..B3.183:                       # Preds ..B3.183 ..B3.182
..L207:         # optimization report
                # MULTIVERSIONED FOR DATA DEPENDENCE, VER 1
                # LOOP WAS UNROLLED BY 4
                # LOOP WAS VECTORIZED
                # VECTORIZATION HAS UNALIGNED MEMORY REFERENCES
                # VECTORIZATION SPEEDUP COEFFECIENT 4.843750
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 0.312500
                # MAIN VECTOR TYPE: 64-bits floating point
..LN7307:
        vmovupd   (%rsi,%r8,8), %ymm3                           #192.42
..LN7308:
        vmovupd   32(%rsi,%r8,8), %ymm6                         #192.42
..LN7309:
        vmovupd   64(%rsi,%r8,8), %ymm9                         #192.42
..LN7310:
        vmovupd   96(%rsi,%r8,8), %ymm12                        #192.42
..LN7311:
        vsubpd    %ymm3, %ymm0, %ymm1                           #192.65
..LN7312:
        vsubpd    %ymm6, %ymm0, %ymm4                           #192.65
..LN7313:
        vsubpd    %ymm9, %ymm0, %ymm7                           #192.65
..LN7314:
        vsubpd    %ymm12, %ymm0, %ymm10                         #192.65
..LN7315:
        vmulpd    8(%rcx,%r8,8), %ymm1, %ymm2                   #192.76
..LN7316:
        vmulpd    40(%rcx,%r8,8), %ymm4, %ymm5                  #192.76
..LN7317:
        vmulpd    72(%rcx,%r8,8), %ymm7, %ymm8                  #192.76
..LN7318:
        vmulpd    104(%rcx,%r8,8), %ymm10, %ymm11               #192.76
..LN7319:
        vfmadd132pd (%rcx,%r8,8), %ymm2, %ymm3                  #192.76
..LN7320:
        vfmadd132pd 32(%rcx,%r8,8), %ymm5, %ymm6                #192.76
..LN7321:
        vfmadd132pd 64(%rcx,%r8,8), %ymm8, %ymm9                #192.76
..LN7322:
        vfmadd132pd 96(%rcx,%r8,8), %ymm11, %ymm12              #192.76
..LN7323:
        vmovupd   %ymm3, (%r11,%r8,8)                           #192.32
..LN7324:
        vmovupd   %ymm6, 32(%r11,%r8,8)                         #192.32
..LN7325:
        vmovupd   %ymm9, 64(%r11,%r8,8)                         #192.32
..LN7326:
        vmovupd   %ymm12, 96(%r11,%r8,8)                        #192.32
..LN7327:
        addq      $16, %r8                                      #192.5
..LN7328:
        cmpq      %r9, %r8                                      #192.5
..LN7329:
        jb        ..B3.183      # Prob 81%                      #192.5
..LN7330:
                                # LOE rcx rsi rdi r8 r9 r11 r13 r14 eax edx ebx r10d r12d ymm0
..B3.185:                       # Preds ..B3.183 ..B3.272
..LN7331:
        lea       1(%rax), %ecx                                 #192.5
..LN7332:
        cmpl      %ecx, %edx                                    #192.5
..LN7333:
        jb        ..B3.202      # Prob 50%                      #192.5
..LN7334:
                                # LOE rsi rdi r13 r14 eax edx ebx r10d r12d
..B3.186:                       # Preds ..B3.185
..LN7335:
        movslq    %edx, %rdx                                    #192.5
..LN7336:
        movslq    %eax, %rax                                    #192.5
..LN7337:
        subq      %rax, %rdx                                    #192.5
..LN7338:
        cmpq      $4, %rdx                                      #192.5
..LN7339:
        jl        ..B3.271      # Prob 10%                      #192.5
..LN7340:
                                # LOE rdx rsi rdi r13 r14 eax ebx r10d r12d
..B3.187:                       # Preds ..B3.186
..LN7341:
        movslq    %eax, %rax                                    #192.42
..LN7342:
        movl      %edx, %ecx                                    #192.5
..LN7343:
        movq      (%rsp), %r8                                   #192.32
..LN7344:
        andl      $-4, %ecx                                     #192.5
..LN7345:
        movq      112(%rsp), %r15                               #192.52
..LN7346:
        xorl      %r9d, %r9d                                    #192.5
..LN7347:
        movslq    %ecx, %rcx                                    #192.5
..LN7348:
        vmovupd   .L_2il0floatpacket.8(%rip), %ymm0             #192.61
..LN7349:
        lea       (%r8,%rax,8), %r11                            #192.32
..LN7350:
        lea       (%r15,%rdi,8), %r8                            #192.52
..LN7351:
        movq      %r11, %r15                                    #192.42
..LN7352:
        lea       (%r8,%rax,8), %r8                             #192.52
..LN7353:
        lea       (%rsi,%rax,8), %r11                           #192.42
..LN7354:
                                # LOE rdx rcx rsi rdi r8 r9 r11 r13 r14 r15 eax ebx r10d r12d ymm0
..B3.188:                       # Preds ..B3.188 ..B3.187
..L208:         # optimization report
                # MULTIVERSIONED FOR DATA DEPENDENCE, VER 1
                # LOOP WAS VECTORIZED
                # REMAINDER LOOP FOR VECTORIZATION
                # VECTORIZATION HAS UNALIGNED MEMORY REFERENCES
                # VECTORIZATION SPEEDUP COEFFECIENT 2.427734
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 1.375000
                # MAIN VECTOR TYPE: 64-bits floating point
..LN7355:
        vmovupd   (%r11,%r9,8), %ymm3                           #192.42
..LN7356:
        vsubpd    %ymm3, %ymm0, %ymm1                           #192.65
..LN7357:
        vmulpd    8(%r8,%r9,8), %ymm1, %ymm2                    #192.76
..LN7358:
        vfmadd132pd (%r8,%r9,8), %ymm2, %ymm3                   #192.76
..LN7359:
        vmovupd   %ymm3, (%r15,%r9,8)                           #192.32
..LN7360:
        addq      $4, %r9                                       #192.5
..LN7361:
        cmpq      %rcx, %r9                                     #192.5
..LN7362:
        jb        ..B3.188      # Prob 81%                      #192.5
..LN7363:
                                # LOE rdx rcx rsi rdi r8 r9 r11 r13 r14 r15 eax ebx r10d r12d ymm0
..B3.190:                       # Preds ..B3.188 ..B3.271
..LN7364:
        cmpq      %rdx, %rcx                                    #192.5
..LN7365:
        jae       ..B3.202      # Prob 9%                       #192.5
..LN7366:
                                # LOE rdx rcx rsi rdi r13 r14 eax ebx r10d r12d
..B3.191:                       # Preds ..B3.190
..LN7367:
        movq      112(%rsp), %r9                                #192.52
..LN7368:
        movslq    %eax, %rax                                    #192.42
..LN7369:
        movq      (%rsp), %r8                                   #192.32
..LN7370:
        lea       (%r9,%rdi,8), %rdi                            #192.52
..LN7371:
        lea       (%r8,%rax,8), %r8                             #192.32
..LN7372:
        lea       (%rdi,%rax,8), %rdi                           #192.52
..LN7373:
        lea       (%rsi,%rax,8), %rax                           #192.42
..LN7374:
                                # LOE rax rdx rcx rdi r8 r13 r14 ebx r10d r12d
..B3.192:                       # Preds ..B3.192 ..B3.191
..L209:         # optimization report
                # MULTIVERSIONED FOR DATA DEPENDENCE, VER 1
                # REMAINDER LOOP FOR VECTORIZATION
                # VECTORIZATION SPEEDUP COEFFECIENT 2.427734
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 1.375000
..LN7375:
        vmovsd    8(%rdi,%rcx,8), %xmm0                         #192.76
..LN7376:
        vsubsd    (%rdi,%rcx,8), %xmm0, %xmm1                   #192.32
..LN7377:
        vfnmadd132sd (%rax,%rcx,8), %xmm0, %xmm1                #192.32
..LN7378:
        vmovsd    %xmm1, (%r8,%rcx,8)                           #192.32
..LN7379:
        incq      %rcx                                          #192.5
..LN7380:
        cmpq      %rdx, %rcx                                    #192.5
..LN7381:
        jb        ..B3.192      # Prob 81%                      #192.5
..LN7382:
        jmp       ..B3.202      # Prob 100%                     #192.5
..LN7383:
                                # LOE rax rdx rcx rdi r8 r13 r14 ebx r10d r12d
..B3.194:                       # Preds ..B3.170 ..B3.171
..LN7384:
        movl      %r10d, %edx                                   #192.5
..LN7385:
        movl      $1, %r8d                                      #192.5
..LN7386:
        subl      %r14d, %edx                                   #192.5
..LN7387:
        xorl      %eax, %eax                                    #192.5
..LN7388:
        sarl      $1, %edx                                      #192.5
..LN7389:
        shrl      $30, %edx                                     #192.5
..LN7390:
        addl      %r10d, %edx                                   #192.5
..LN7391:
        subl      %r14d, %edx                                   #192.5
..LN7392:
        sarl      $2, %edx                                      #192.5
..LN7393:
        testl     %edx, %edx                                    #192.5
..LN7394:
        jbe       ..B3.198      # Prob 9%                       #192.5
..LN7395:
                                # LOE rcx rsi rdi r8 r13 r14 eax edx ebx r10d r12d
..B3.195:                       # Preds ..B3.194
..LN7396:
        movq      112(%rsp), %r8                                #192.52
..LN7397:
        movq      (%rsp), %r11                                  #192.52
..LN7398:
        lea       (%r8,%rdi,8), %r8                             #192.52
..LN7399:
        .align    16,0x90
..LN7400:
                                # LOE rcx rsi rdi r8 r11 r13 r14 eax edx ebx r10d r12d
..B3.196:                       # Preds ..B3.196 ..B3.195
..L210:         # optimization report
                # MULTIVERSIONED FOR DATA DEPENDENCE, VER 2
                # LOOP WAS UNROLLED BY 4
                # %s was not vectorized: non-vectorizable loop instance from multiversioning
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
..LN7401:
        lea       (,%rax,4), %r9d                               #192.42
..LN7402:
        movslq    %r9d, %r9                                     #192.76
..LN7403:
        incl      %eax                                          #192.5
..LN7404:
        vmovsd    8(%r8,%r9,8), %xmm1                           #192.76
..LN7405:
        vmovsd    16(%r8,%r9,8), %xmm3                          #192.76
..LN7406:
        vmovsd    24(%r8,%r9,8), %xmm5                          #192.76
..LN7407:
        vsubsd    %xmm3, %xmm1, %xmm2                           #192.32
..LN7408:
        vsubsd    (%r8,%r9,8), %xmm1, %xmm0                     #192.32
..LN7409:
        vsubsd    %xmm5, %xmm3, %xmm4                           #192.32
..LN7410:
        vfnmadd132sd (%rsi,%r9,8), %xmm1, %xmm0                 #192.32
..LN7411:
        vmovsd    32(%r8,%r9,8), %xmm6                          #192.76
..LN7412:
        vsubsd    %xmm6, %xmm5, %xmm7                           #192.32
..LN7413:
        vmovsd    %xmm0, (%r11,%r9,8)                           #192.32
..LN7414:
        vfmadd132sd 8(%rsi,%r9,8), %xmm3, %xmm2                 #192.32
..LN7415:
        vmovsd    %xmm2, 8(%r11,%r9,8)                          #192.32
..LN7416:
        vfmadd132sd 16(%rsi,%r9,8), %xmm5, %xmm4                #192.32
..LN7417:
        vmovsd    %xmm4, 16(%r11,%r9,8)                         #192.32
..LN7418:
        vfmadd132sd 24(%rsi,%r9,8), %xmm6, %xmm7                #192.32
..LN7419:
        vmovsd    %xmm7, 24(%r11,%r9,8)                         #192.32
..LN7420:
        cmpl      %edx, %eax                                    #192.5
..LN7421:
        jb        ..B3.196      # Prob 27%                      #192.5
..LN7422:
                                # LOE rcx rsi rdi r8 r11 r13 r14 eax edx ebx r10d r12d
..B3.197:                       # Preds ..B3.196
..LN7423:
        lea       1(,%rax,4), %r8d                              #192.32
..LN7424:
        movslq    %r8d, %r8                                     #192.5
..LN7425:
                                # LOE rcx rsi rdi r8 r13 r14 ebx r10d r12d
..B3.198:                       # Preds ..B3.197 ..B3.194
..LN7426:
        decq      %r8                                           #192.32
..LN7427:
	.loc    1  156  is_stmt 1
        subq      %rdi, %rcx                                    #156.3
..LN7428:
	.loc    1  192  is_stmt 1
        cmpq      %rcx, %r8                                     #192.5
..LN7429:
        jae       ..B3.202      # Prob 9%                       #192.5
..LN7430:
                                # LOE rcx rsi rdi r8 r13 r14 ebx r10d r12d
..B3.199:                       # Preds ..B3.198
..LN7431:
        movq      112(%rsp), %rax                               #192.52
..LN7432:
        movq      (%rsp), %rdx                                  #192.52
..LN7433:
        lea       (%rax,%rdi,8), %rax                           #192.52
..LN7434:
                                # LOE rax rdx rcx rsi r8 r13 r14 ebx r10d r12d
..B3.200:                       # Preds ..B3.200 ..B3.199
..L211:         # optimization report
                # REMAINDER LOOP
                # MULTIVERSIONED FOR DATA DEPENDENCE, VER 2
                # %s was not vectorized: non-vectorizable loop instance from multiversioning
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
..LN7435:
        vmovsd    8(%rax,%r8,8), %xmm0                          #192.76
..LN7436:
        vsubsd    (%rax,%r8,8), %xmm0, %xmm1                    #192.32
..LN7437:
        vfnmadd132sd (%rsi,%r8,8), %xmm0, %xmm1                 #192.32
..LN7438:
        vmovsd    %xmm1, (%rdx,%r8,8)                           #192.32
..LN7439:
        incq      %r8                                           #192.5
..LN7440:
        cmpq      %rcx, %r8                                     #192.5
..LN7441:
        jb        ..B3.200      # Prob 66%                      #192.5
..LN7442:
                                # LOE rax rdx rcx rsi r8 r13 r14 ebx r10d r12d
..B3.202:                       # Preds ..B3.200 ..B3.192 ..B3.309 ..B3.185 ..B3.190
                                #       ..B3.198 ..B3.144 ..B3.167
..LN7443:
	.loc    1  196  is_stmt 1
        cmpl      $0, 56(%rbp)                                  #196.6
..LN7444:
        je        ..B3.260      # Prob 50%                      #196.6
..LN7445:
                                # LOE r13 r14 ebx r10d r12d
..B3.203:                       # Preds ..B3.202
..LN7446:
	.loc    1  197  is_stmt 1
        movl      %r14d, %esi                                   #197.10
..LN7447:
        cmpl      %r10d, %r14d                                  #197.23
..LN7448:
        jg        ..B3.225      # Prob 50%                      #197.23
..LN7449:
                                # LOE rsi r13 r14 ebx r10d r12d
..B3.204:                       # Preds ..B3.203
..LN7450:
        movl      %r10d, %ecx                                   #197.6
..LN7451:
        subl      %r14d, %ecx                                   #197.6
..LN7452:
        incl      %ecx                                          #197.6
..LN7453:
        cmpl      $16, %ecx                                     #197.6
..LN7454:
        jl        ..B3.282      # Prob 10%                      #197.6
..LN7455:
                                # LOE rsi r13 r14 ecx ebx r10d r12d
..B3.205:                       # Preds ..B3.204
..LN7456:
        movq      112(%rsp), %r11                               #197.34
..LN7457:
        lea       (%r11,%rsi,8), %r11                           #197.34
..LN7458:
        movq      %r11, %r9                                     #197.6
..LN7459:
        andq      $31, %r9                                      #197.6
..LN7460:
        movl      %r9d, %r9d                                    #197.6
..LN7461:
        testl     %r9d, %r9d                                    #197.6
..LN7462:
        je        ..B3.208      # Prob 50%                      #197.6
..LN7463:
                                # LOE rsi r9 r11 r13 r14 ecx ebx r10d r12d
..B3.206:                       # Preds ..B3.205
..LN7464:
        testl     $7, %r9d                                      #197.6
..LN7465:
        jne       ..B3.282      # Prob 10%                      #197.6
..LN7466:
                                # LOE rsi r9 r11 r13 r14 ecx ebx r10d r12d
..B3.207:                       # Preds ..B3.206
..LN7467:
        negl      %r9d                                          #197.6
..LN7468:
        addl      $32, %r9d                                     #197.6
..LN7469:
        shrl      $3, %r9d                                      #197.6
..LN7470:
                                # LOE rsi r9 r11 r13 r14 ecx ebx r10d r12d
..B3.208:                       # Preds ..B3.207 ..B3.205
..LN7471:
        lea       16(%r9), %eax                                 #197.6
..LN7472:
        cmpl      %eax, %ecx                                    #197.6
..LN7473:
        jl        ..B3.282      # Prob 10%                      #197.6
..LN7474:
                                # LOE rsi r9 r11 r13 r14 ecx ebx r10d r12d
..B3.209:                       # Preds ..B3.208
..LN7475:
        movl      %ecx, %eax                                    #197.6
..LN7476:
        lea       2(%r12), %edx                                 #197.58
..LN7477:
        subl      %r9d, %eax                                    #197.6
..LN7478:
	.loc    1  143  is_stmt 1
        lea       1(%rbx), %r8d                                 #143.12
..LN7479:
	.loc    1  197  is_stmt 1
        imull     %edx, %r8d                                    #197.78
..LN7480:
        andl      $15, %eax                                     #197.6
..LN7481:
        imull     %ebx, %edx                                    #197.58
..LN7482:
        movslq    %r8d, %r8                                     #197.66
..LN7483:
        negl      %eax                                          #197.6
..LN7484:
        movslq    %edx, %rdx                                    #197.47
..LN7485:
        addl      %ecx, %eax                                    #197.6
..LN7486:
        xorl      %edi, %edi                                    #197.6
..LN7487:
        lea       (%r13,%r8,8), %r15                            #197.66
..LN7488:
        lea       (%r15,%rsi,8), %r8                            #197.66
..LN7489:
        lea       (%r13,%rdx,8), %r15                           #197.47
..LN7490:
        lea       (%r15,%rsi,8), %rdx                           #197.47
..LN7491:
        testq     %r9, %r9                                      #197.6
..LN7492:
        jbe       ..B3.213      # Prob 15%                      #197.6
..LN7493:
                                # LOE rdx rsi rdi r8 r9 r11 r13 r14 eax ecx ebx r10d r12d
..B3.210:                       # Preds ..B3.209
..LN7494:
        vmovsd    .L_2il0floatpacket.3(%rip), %xmm0             #197.42
..LN7495:
                                # LOE rdx rsi rdi r8 r9 r11 r13 r14 eax ecx ebx r10d r12d xmm0
..B3.211:                       # Preds ..B3.211 ..B3.210
..L212:         # optimization report
                # LOOP WAS UNROLLED BY 4
                # PEELED LOOP FOR VECTORIZATION
                # VECTORIZATION SPEEDUP COEFFECIENT 6.640625
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 0.437500
..LN7496:
        vmovsd    (%rdx,%rdi,8), %xmm1                          #197.47
..LN7497:
        vaddsd    (%r8,%rdi,8), %xmm1, %xmm2                    #197.66
..LN7498:
        vmulsd    %xmm2, %xmm0, %xmm3                           #197.66
..LN7499:
        vmovsd    %xmm3, (%r11,%rdi,8)                          #197.34
..LN7500:
        incq      %rdi                                          #197.6
..LN7501:
        cmpq      %r9, %rdi                                     #197.6
..LN7502:
        jb        ..B3.211      # Prob 82%                      #197.6
..LN7503:
                                # LOE rdx rsi rdi r8 r9 r11 r13 r14 eax ecx ebx r10d r12d xmm0
..B3.213:                       # Preds ..B3.211 ..B3.209
..LN7504:
        vmovupd   .L_2il0floatpacket.4(%rip), %ymm0             #197.42
..LN7505:
        movslq    %eax, %rdi                                    #197.6
..LN7506:
        .align    16,0x90
..LN7507:
                                # LOE rdx rsi rdi r8 r9 r11 r13 r14 eax ecx ebx r10d r12d ymm0
..B3.214:                       # Preds ..B3.214 ..B3.213
..L213:         # optimization report
                # LOOP WAS UNROLLED BY 4
                # LOOP WAS VECTORIZED
                # VECTORIZATION HAS UNALIGNED MEMORY REFERENCES
                # VECTORIZATION SPEEDUP COEFFECIENT 6.640625
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 0.437500
                # MAIN VECTOR TYPE: 64-bits floating point
..LN7508:
        vmovupd   (%rdx,%r9,8), %ymm1                           #197.47
..LN7509:
        vmovupd   32(%rdx,%r9,8), %ymm4                         #197.47
..LN7510:
        vmovupd   64(%rdx,%r9,8), %ymm7                         #197.47
..LN7511:
        vmovupd   96(%rdx,%r9,8), %ymm10                        #197.47
..LN7512:
        vaddpd    (%r8,%r9,8), %ymm1, %ymm2                     #197.66
..LN7513:
        vaddpd    32(%r8,%r9,8), %ymm4, %ymm5                   #197.66
..LN7514:
        vaddpd    64(%r8,%r9,8), %ymm7, %ymm8                   #197.66
..LN7515:
        vaddpd    96(%r8,%r9,8), %ymm10, %ymm11                 #197.66
..LN7516:
        vmulpd    %ymm2, %ymm0, %ymm3                           #197.66
..LN7517:
        vmulpd    %ymm5, %ymm0, %ymm6                           #197.66
..LN7518:
        vmulpd    %ymm8, %ymm0, %ymm9                           #197.66
..LN7519:
        vmulpd    %ymm11, %ymm0, %ymm12                         #197.66
..LN7520:
        vmovupd   %ymm3, (%r11,%r9,8)                           #197.34
..LN7521:
        vmovupd   %ymm6, 32(%r11,%r9,8)                         #197.34
..LN7522:
        vmovupd   %ymm9, 64(%r11,%r9,8)                         #197.34
..LN7523:
        vmovupd   %ymm12, 96(%r11,%r9,8)                        #197.34
..LN7524:
        addq      $16, %r9                                      #197.6
..LN7525:
        cmpq      %rdi, %r9                                     #197.6
..LN7526:
        jb        ..B3.214      # Prob 82%                      #197.6
..LN7527:
                                # LOE rdx rsi rdi r8 r9 r11 r13 r14 eax ecx ebx r10d r12d ymm0
..B3.216:                       # Preds ..B3.214 ..B3.282
..LN7528:
        lea       1(%rax), %edx                                 #197.6
..LN7529:
        cmpl      %edx, %ecx                                    #197.6
..LN7530:
        jb        ..B3.307      # Prob 50%                      #197.6
..LN7531:
                                # LOE rsi r13 r14 eax ecx ebx r10d r12d
..B3.217:                       # Preds ..B3.216
..LN7532:
        movslq    %ecx, %rcx                                    #197.6
..LN7533:
        movslq    %eax, %rax                                    #197.6
..LN7534:
        subq      %rax, %rcx                                    #197.6
..LN7535:
        cmpq      $4, %rcx                                      #197.6
..LN7536:
        jl        ..B3.281      # Prob 10%                      #197.6
..LN7537:
                                # LOE rcx rsi r13 r14 eax ebx r10d r12d
..B3.218:                       # Preds ..B3.217
..LN7538:
        movq      112(%rsp), %r9                                #197.34
..LN7539:
        lea       2(%r12), %edi                                 #197.58
..LN7540:
        movslq    %eax, %rax                                    #197.47
..LN7541:
	.loc    1  143  is_stmt 1
        lea       1(%rbx), %r15d                                #143.12
..LN7542:
	.loc    1  197  is_stmt 1
        movl      %ecx, %edx                                    #197.6
..LN7543:
        xorl      %r11d, %r11d                                  #197.6
..LN7544:
        andl      $-4, %edx                                     #197.6
..LN7545:
        lea       (%r9,%rsi,8), %r8                             #197.34
..LN7546:
        movslq    %edx, %rdx                                    #197.6
..LN7547:
        imull     %edi, %r15d                                   #197.78
..LN7548:
        lea       (%r8,%rax,8), %r9                             #197.34
..LN7549:
        imull     %ebx, %edi                                    #197.58
..LN7550:
        vmovupd   .L_2il0floatpacket.9(%rip), %ymm0             #197.42
..LN7551:
        movslq    %r15d, %r15                                   #197.66
..LN7552:
        movslq    %edi, %rdi                                    #197.47
..LN7553:
        lea       (%r13,%r15,8), %r8                            #197.66
..LN7554:
        lea       (%r13,%rdi,8), %rdi                           #197.47
..LN7555:
        lea       (%r8,%rsi,8), %r8                             #197.66
..LN7556:
        lea       (%rdi,%rsi,8), %r15                           #197.47
..LN7557:
        lea       (%r8,%rax,8), %r8                             #197.66
..LN7558:
        lea       (%r15,%rax,8), %rdi                           #197.47
..LN7559:
                                # LOE rdx rcx rsi rdi r8 r9 r11 r13 r14 eax ebx r10d r12d ymm0
..B3.219:                       # Preds ..B3.219 ..B3.218
..L214:         # optimization report
                # LOOP WAS VECTORIZED
                # REMAINDER LOOP FOR VECTORIZATION
                # VECTORIZATION HAS UNALIGNED MEMORY REFERENCES
                # VECTORIZATION SPEEDUP COEFFECIENT 2.679688
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 1.750000
                # MAIN VECTOR TYPE: 64-bits floating point
..LN7560:
        vmovupd   (%rdi,%r11,8), %ymm1                          #197.47
..LN7561:
        vaddpd    (%r8,%r11,8), %ymm1, %ymm2                    #197.66
..LN7562:
        vmulpd    %ymm2, %ymm0, %ymm3                           #197.66
..LN7563:
        vmovupd   %ymm3, (%r9,%r11,8)                           #197.34
..LN7564:
        addq      $4, %r11                                      #197.6
..LN7565:
        cmpq      %rdx, %r11                                    #197.6
..LN7566:
        jb        ..B3.219      # Prob 82%                      #197.6
..LN7567:
                                # LOE rdx rcx rsi rdi r8 r9 r11 r13 r14 eax ebx r10d r12d ymm0
..B3.221:                       # Preds ..B3.219 ..B3.281
..LN7568:
        cmpq      %rcx, %rdx                                    #197.6
..LN7569:
        jae       ..B3.307      # Prob 15%                      #197.6
..LN7570:
                                # LOE rdx rcx rsi r13 r14 eax ebx r10d r12d
..B3.222:                       # Preds ..B3.221
..LN7571:
        movq      112(%rsp), %r8                                #197.34
..LN7572:
        lea       2(%r12), %r9d                                 #197.58
..LN7573:
        movslq    %eax, %rax                                    #197.47
..LN7574:
	.loc    1  143  is_stmt 1
        lea       1(%rbx), %r11d                                #143.12
..LN7575:
	.loc    1  197  is_stmt 1
        imull     %r9d, %r11d                                   #197.78
..LN7576:
        imull     %ebx, %r9d                                    #197.58
..LN7577:
        vmovsd    .L_2il0floatpacket.3(%rip), %xmm0             #197.42
..LN7578:
        movslq    %r11d, %r11                                   #197.66
..LN7579:
        lea       (%r8,%rsi,8), %rdi                            #197.34
..LN7580:
        movslq    %r9d, %r9                                     #197.47
..LN7581:
        lea       (%rdi,%rax,8), %r8                            #197.34
..LN7582:
        lea       (%r13,%r11,8), %r15                           #197.66
..LN7583:
        lea       (%r13,%r9,8), %r13                            #197.47
..LN7584:
        lea       (%r15,%rsi,8), %rdi                           #197.66
..LN7585:
        lea       (%r13,%rsi,8), %r9                            #197.47
..LN7586:
        lea       (%rdi,%rax,8), %rdi                           #197.66
..LN7587:
        lea       (%r9,%rax,8), %rax                            #197.47
..LN7588:
                                # LOE rax rdx rcx rsi rdi r8 r14 ebx r10d r12d xmm0
..B3.223:                       # Preds ..B3.223 ..B3.222
..L215:         # optimization report
                # REMAINDER LOOP FOR VECTORIZATION
                # VECTORIZATION SPEEDUP COEFFECIENT 2.679688
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 1.750000
..LN7589:
        vmovsd    (%rax,%rdx,8), %xmm1                          #197.47
..LN7590:
        vaddsd    (%rdi,%rdx,8), %xmm1, %xmm2                   #197.66
..LN7591:
        vmulsd    %xmm2, %xmm0, %xmm3                           #197.66
..LN7592:
        vmovsd    %xmm3, (%r8,%rdx,8)                           #197.34
..LN7593:
        incq      %rdx                                          #197.6
..LN7594:
        cmpq      %rcx, %rdx                                    #197.6
..LN7595:
        jb        ..B3.223      # Prob 82%                      #197.6
..LN7596:
                                # LOE rax rdx rcx rsi rdi r8 r14 ebx r10d r12d xmm0
..B3.224:                       # Preds ..B3.223
..LN7597:
	.loc    1  166  is_stmt 1
        cmpl      %r10d, %r14d                                  #166.46
..LN7598:
                                # LOE rsi r14 ebx r10d r12d
..B3.225:                       # Preds ..B3.203 ..B3.224
..LN7599:
	.loc    1  198  is_stmt 1
        jge       ..B3.260      # Prob 50%                      #198.22
..LN7600:
                                # LOE rsi r14 ebx r10d r12d
..B3.226:                       # Preds ..B3.307 ..B3.225
..LN7601:
	.loc    1  142  is_stmt 1
        incl      %r12d                                         #142.12
..LN7602:
	.loc    1  198  is_stmt 1
        imull     %r12d, %ebx                                   #198.41
..LN7603:
	.loc    1  136  is_stmt 1
        movq      16(%rbp), %rdi                                #136.1
..LN7604:
	.loc    1  198  is_stmt 1
        movq      24(%rbp), %rax                                #198.33
..LN7605:
        lea       (%rdi,%rsi,8), %r8                            #198.50
..LN7606:
        movslq    %ebx, %rdi                                    #198.33
..LN7607:
        lea       (%rsi,%rdi), %rdx                             #198.33
..LN7608:
        lea       (%rax,%rdx,8), %r9                            #198.33
..LN7609:
        cmpq      %r8, %r9                                      #198.50
..LN7610:
        jbe       ..B3.305      # Prob 50%                      #198.50
..LN7611:
                                # LOE rsi rdi r8 r9 r14 ebx r10d
..B3.227:                       # Preds ..B3.226
..LN7612:
        movslq    %r10d, %rcx                                   #198.6
..LN7613:
        movq      %r9, %rdx                                     #198.50
..LN7614:
        movq      %rcx, %rax                                    #198.6
..LN7615:
        subq      %r8, %rdx                                     #198.50
..LN7616:
        subq      %rsi, %rax                                    #198.6
..LN7617:
        shlq      $3, %rax                                      #198.50
..LN7618:
        cmpq      %rdx, %rax                                    #198.50
..LN7619:
        jle       ..B3.230      # Prob 50%                      #198.50
..LN7620:
                                # LOE rcx rsi rdi r8 r9 r14 ebx r10d
..B3.228:                       # Preds ..B3.227 ..B3.305
..LN7621:
        cmpq      %r9, %r8                                      #198.50
..LN7622:
        jbe       ..B3.252      # Prob 50%                      #198.50
..LN7623:
                                # LOE rcx rsi rdi r8 r9 r14 ebx r10d
..B3.229:                       # Preds ..B3.228
..LN7624:
        movq      %rcx, %rax                                    #198.6
..LN7625:
        negq      %r9                                           #198.50
..LN7626:
        subq      %rsi, %rax                                    #198.6
..LN7627:
        addq      %r8, %r9                                      #198.50
..LN7628:
        shlq      $3, %rax                                      #198.50
..LN7629:
        cmpq      %rax, %r9                                     #198.50
..LN7630:
        jl        ..B3.252      # Prob 50%                      #198.50
..LN7631:
                                # LOE rcx rsi rdi r8 r14 ebx r10d
..B3.230:                       # Preds ..B3.229 ..B3.227
..LN7632:
        subl      %r14d, %r10d                                  #198.6
..LN7633:
        cmpl      $16, %r10d                                    #198.6
..LN7634:
        jl        ..B3.277      # Prob 10%                      #198.6
..LN7635:
                                # LOE rsi rdi r8 r10d
..B3.231:                       # Preds ..B3.230
..LN7636:
        cmpl      $29, %r10d                                    #198.6
..LN7637:
        jl        ..B3.279      # Prob 10%                      #198.6
..LN7638:
                                # LOE rsi rdi r8 r10d
..B3.232:                       # Preds ..B3.231
..LN7639:
        movq      %r8, %rbx                                     #198.6
..LN7640:
        andq      $31, %rbx                                     #198.6
..LN7641:
        movl      %ebx, %ebx                                    #198.6
..LN7642:
        testl     %ebx, %ebx                                    #198.6
..LN7643:
        je        ..B3.235      # Prob 50%                      #198.6
..LN7644:
                                # LOE rbx rsi rdi r8 r10d
..B3.233:                       # Preds ..B3.232
..LN7645:
        testb     $7, %bl                                       #198.6
..LN7646:
        jne       ..B3.277      # Prob 10%                      #198.6
..LN7647:
                                # LOE rbx rsi rdi r8 r10d
..B3.234:                       # Preds ..B3.233
..LN7648:
        negl      %ebx                                          #198.6
..LN7649:
        addl      $32, %ebx                                     #198.6
..LN7650:
        shrl      $3, %ebx                                      #198.6
..LN7651:
                                # LOE rbx rsi rdi r8 r10d
..B3.235:                       # Preds ..B3.234 ..B3.232
..LN7652:
        lea       16(%rbx), %eax                                #198.6
..LN7653:
        cmpl      %eax, %r10d                                   #198.6
..LN7654:
        jl        ..B3.277      # Prob 10%                      #198.6
..LN7655:
                                # LOE rbx rsi rdi r8 r10d
..B3.236:                       # Preds ..B3.235
..LN7656:
        movl      %r10d, %ecx                                   #198.6
..LN7657:
        xorl      %r9d, %r9d                                    #198.6
..LN7658:
        movq      24(%rbp), %rdx                                #198.33
..LN7659:
        subl      %ebx, %ecx                                    #198.6
..LN7660:
        movq      112(%rsp), %rax                               #198.60
..LN7661:
        andl      $15, %ecx                                     #198.6
..LN7662:
        negl      %ecx                                          #198.6
..LN7663:
        lea       (%rdx,%rdi,8), %r11                           #198.33
..LN7664:
        addl      %r10d, %ecx                                   #198.6
..LN7665:
        lea       (%rax,%rsi,8), %rax                           #198.60
..LN7666:
        lea       (%r11,%rsi,8), %rdx                           #198.33
..LN7667:
        testq     %rbx, %rbx                                    #198.6
..LN7668:
        jbe       ..B3.240      # Prob 9%                       #198.6
..LN7669:
                                # LOE rax rdx rbx rsi rdi r8 r9 ecx r10d
..B3.238:                       # Preds ..B3.236 ..B3.238
..L216:         # optimization report
                # MULTIVERSIONED FOR DATA DEPENDENCE, VER 1
                # LOOP WAS UNROLLED BY 4
                # PEELED LOOP FOR VECTORIZATION
                # VECTORIZATION SPEEDUP COEFFECIENT 5.363281
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 0.312500
..LN7670:
        vmovsd    8(%rax,%r9,8), %xmm0                          #198.84
..LN7671:
        vsubsd    (%rax,%r9,8), %xmm0, %xmm1                    #198.33
..LN7672:
        vfnmadd132sd (%r8,%r9,8), %xmm0, %xmm1                  #198.33
..LN7673:
        vmovsd    %xmm1, (%rdx,%r9,8)                           #198.33
..LN7674:
        incq      %r9                                           #198.6
..LN7675:
        cmpq      %rbx, %r9                                     #198.6
..LN7676:
        jb        ..B3.238      # Prob 81%                      #198.6
..LN7677:
                                # LOE rax rdx rbx rsi rdi r8 r9 ecx r10d
..B3.240:                       # Preds ..B3.238 ..B3.236 ..B3.279
..LN7678:
        vmovupd   .L_2il0floatpacket.7(%rip), %ymm0             #198.69
..LN7679:
        movslq    %ecx, %r9                                     #198.6
..LN7680:
        .align    16,0x90
..LN7681:
                                # LOE rax rdx rbx rsi rdi r8 r9 ecx r10d ymm0
..B3.241:                       # Preds ..B3.241 ..B3.240
..L217:         # optimization report
                # MULTIVERSIONED FOR DATA DEPENDENCE, VER 1
                # LOOP WAS UNROLLED BY 4
                # LOOP WAS VECTORIZED
                # VECTORIZATION HAS UNALIGNED MEMORY REFERENCES
                # VECTORIZATION SPEEDUP COEFFECIENT 5.363281
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 0.312500
                # MAIN VECTOR TYPE: 64-bits floating point
..LN7682:
        vmovupd   (%r8,%rbx,8), %ymm3                           #198.50
..LN7683:
        vmovupd   32(%r8,%rbx,8), %ymm6                         #198.50
..LN7684:
        vmovupd   64(%r8,%rbx,8), %ymm9                         #198.50
..LN7685:
        vmovupd   96(%r8,%rbx,8), %ymm12                        #198.50
..LN7686:
        vsubpd    %ymm3, %ymm0, %ymm1                           #198.73
..LN7687:
        vsubpd    %ymm6, %ymm0, %ymm4                           #198.73
..LN7688:
        vsubpd    %ymm9, %ymm0, %ymm7                           #198.73
..LN7689:
        vsubpd    %ymm12, %ymm0, %ymm10                         #198.73
..LN7690:
        vmulpd    8(%rax,%rbx,8), %ymm1, %ymm2                  #198.84
..LN7691:
        vmulpd    40(%rax,%rbx,8), %ymm4, %ymm5                 #198.84
..LN7692:
        vmulpd    72(%rax,%rbx,8), %ymm7, %ymm8                 #198.84
..LN7693:
        vmulpd    104(%rax,%rbx,8), %ymm10, %ymm11              #198.84
..LN7694:
        vfmadd132pd (%rax,%rbx,8), %ymm2, %ymm3                 #198.84
..LN7695:
        vfmadd132pd 32(%rax,%rbx,8), %ymm5, %ymm6               #198.84
..LN7696:
        vfmadd132pd 64(%rax,%rbx,8), %ymm8, %ymm9               #198.84
..LN7697:
        vfmadd132pd 96(%rax,%rbx,8), %ymm11, %ymm12             #198.84
..LN7698:
        vmovupd   %ymm3, (%rdx,%rbx,8)                          #198.33
..LN7699:
        vmovupd   %ymm6, 32(%rdx,%rbx,8)                        #198.33
..LN7700:
        vmovupd   %ymm9, 64(%rdx,%rbx,8)                        #198.33
..LN7701:
        vmovupd   %ymm12, 96(%rdx,%rbx,8)                       #198.33
..LN7702:
        addq      $16, %rbx                                     #198.6
..LN7703:
        cmpq      %r9, %rbx                                     #198.6
..LN7704:
        jb        ..B3.241      # Prob 81%                      #198.6
..LN7705:
                                # LOE rax rdx rbx rsi rdi r8 r9 ecx r10d ymm0
..B3.243:                       # Preds ..B3.241 ..B3.277
..LN7706:
        lea       1(%rcx), %eax                                 #198.6
..LN7707:
        cmpl      %eax, %r10d                                   #198.6
..LN7708:
        jb        ..B3.260      # Prob 50%                      #198.6
..LN7709:
                                # LOE rsi rdi r8 ecx r10d
..B3.244:                       # Preds ..B3.243
..LN7710:
        movslq    %r10d, %r10                                   #198.6
..LN7711:
        movslq    %ecx, %rcx                                    #198.6
..LN7712:
        subq      %rcx, %r10                                    #198.6
..LN7713:
        cmpq      $4, %r10                                      #198.6
..LN7714:
        jl        ..B3.276      # Prob 10%                      #198.6
..LN7715:
                                # LOE rsi rdi r8 r10 ecx
..B3.245:                       # Preds ..B3.244
..LN7716:
        movq      24(%rbp), %r11                                #198.33
..LN7717:
        movl      %r10d, %edx                                   #198.6
..LN7718:
        movq      112(%rsp), %r12                               #198.60
..LN7719:
        andl      $-4, %edx                                     #198.6
..LN7720:
        movslq    %edx, %rdx                                    #198.6
..LN7721:
        xorl      %eax, %eax                                    #198.6
..LN7722:
        movslq    %ecx, %rcx                                    #198.50
..LN7723:
        lea       (%r11,%rdi,8), %r9                            #198.33
..LN7724:
        lea       (%r9,%rsi,8), %rbx                            #198.33
..LN7725:
        vmovupd   .L_2il0floatpacket.8(%rip), %ymm0             #198.69
..LN7726:
        lea       (%r12,%rsi,8), %r13                           #198.60
..LN7727:
        lea       (%rbx,%rcx,8), %r11                           #198.33
..LN7728:
        lea       (%r13,%rcx,8), %r9                            #198.60
..LN7729:
        lea       (%r8,%rcx,8), %rbx                            #198.50
..LN7730:
                                # LOE rax rdx rbx rsi rdi r8 r9 r10 r11 ecx ymm0
..B3.246:                       # Preds ..B3.246 ..B3.245
..L218:         # optimization report
                # MULTIVERSIONED FOR DATA DEPENDENCE, VER 1
                # LOOP WAS VECTORIZED
                # REMAINDER LOOP FOR VECTORIZATION
                # VECTORIZATION HAS UNALIGNED MEMORY REFERENCES
                # VECTORIZATION SPEEDUP COEFFECIENT 2.587891
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 1.375000
                # MAIN VECTOR TYPE: 64-bits floating point
..LN7731:
        vmovupd   (%rbx,%rax,8), %ymm3                          #198.50
..LN7732:
        vsubpd    %ymm3, %ymm0, %ymm1                           #198.73
..LN7733:
        vmulpd    8(%r9,%rax,8), %ymm1, %ymm2                   #198.84
..LN7734:
        vfmadd132pd (%r9,%rax,8), %ymm2, %ymm3                  #198.84
..LN7735:
        vmovupd   %ymm3, (%r11,%rax,8)                          #198.33
..LN7736:
        addq      $4, %rax                                      #198.6
..LN7737:
        cmpq      %rdx, %rax                                    #198.6
..LN7738:
        jb        ..B3.246      # Prob 81%                      #198.6
..LN7739:
                                # LOE rax rdx rbx rsi rdi r8 r9 r10 r11 ecx ymm0
..B3.248:                       # Preds ..B3.246 ..B3.276
..LN7740:
        cmpq      %r10, %rdx                                    #198.6
..LN7741:
        jae       ..B3.260      # Prob 9%                       #198.6
..LN7742:
                                # LOE rdx rsi rdi r8 r10 ecx
..B3.249:                       # Preds ..B3.248
..LN7743:
        movq      24(%rbp), %rbx                                #198.33
..LN7744:
        movq      112(%rsp), %r9                                #198.60
..LN7745:
        movslq    %ecx, %rcx                                    #198.50
..LN7746:
        lea       (%rbx,%rdi,8), %rdi                           #198.33
..LN7747:
        lea       (%rdi,%rsi,8), %rax                           #198.33
..LN7748:
        lea       (%r9,%rsi,8), %rsi                            #198.60
..LN7749:
        lea       (%rax,%rcx,8), %rdi                           #198.33
..LN7750:
        lea       (%rsi,%rcx,8), %rbx                           #198.60
..LN7751:
        lea       (%r8,%rcx,8), %rax                            #198.50
..LN7752:
                                # LOE rax rdx rbx rdi r10
..B3.250:                       # Preds ..B3.250 ..B3.249
..L219:         # optimization report
                # MULTIVERSIONED FOR DATA DEPENDENCE, VER 1
                # REMAINDER LOOP FOR VECTORIZATION
                # VECTORIZATION SPEEDUP COEFFECIENT 2.587891
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 1.375000
..LN7753:
        vmovsd    8(%rbx,%rdx,8), %xmm0                         #198.84
..LN7754:
        vsubsd    (%rbx,%rdx,8), %xmm0, %xmm1                   #198.33
..LN7755:
        vfnmadd132sd (%rax,%rdx,8), %xmm0, %xmm1                #198.33
..LN7756:
        vmovsd    %xmm1, (%rdi,%rdx,8)                          #198.33
..LN7757:
        incq      %rdx                                          #198.6
..LN7758:
        cmpq      %r10, %rdx                                    #198.6
..LN7759:
        jb        ..B3.250      # Prob 81%                      #198.6
..LN7760:
        jmp       ..B3.260      # Prob 100%                     #198.6
..LN7761:
                                # LOE rax rdx rbx rdi r10
..B3.252:                       # Preds ..B3.229 ..B3.228
..LN7762:
        movl      %r10d, %r9d                                   #198.6
..LN7763:
        xorl      %edx, %edx                                    #198.6
..LN7764:
        subl      %r14d, %r9d                                   #198.6
..LN7765:
        movl      $1, %eax                                      #198.6
..LN7766:
        sarl      $1, %r9d                                      #198.6
..LN7767:
        shrl      $30, %r9d                                     #198.6
..LN7768:
        addl      %r9d, %r10d                                   #198.6
..LN7769:
        subl      %r14d, %r10d                                  #198.6
..LN7770:
        sarl      $2, %r10d                                     #198.6
..LN7771:
        testl     %r10d, %r10d                                  #198.6
..LN7772:
        jbe       ..B3.256      # Prob 9%                       #198.6
..LN7773:
                                # LOE rax rcx rsi rdi r8 edx ebx r10d
..B3.253:                       # Preds ..B3.252
..LN7774:
        movq      24(%rbp), %r9                                 #198.33
..LN7775:
        movq      112(%rsp), %rax                               #198.60
..LN7776:
        lea       (%r9,%rsi,8), %r9                             #198.33
..LN7777:
        lea       (%rax,%rsi,8), %rax                           #198.60
..LN7778:
        .align    16,0x90
..LN7779:
                                # LOE rax rcx rsi rdi r8 r9 edx ebx r10d
..B3.254:                       # Preds ..B3.254 ..B3.253
..L220:         # optimization report
                # MULTIVERSIONED FOR DATA DEPENDENCE, VER 2
                # LOOP WAS UNROLLED BY 4
                # %s was not vectorized: non-vectorizable loop instance from multiversioning
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
..LN7780:
        lea       (,%rdx,4), %r11d                              #198.50
..LN7781:
        movslq    %r11d, %r11                                   #198.84
..LN7782:
        lea       (%rbx,%rdx,4), %r12d                          #198.33
..LN7783:
        movslq    %r12d, %r12                                   #198.33
..LN7784:
        incl      %edx                                          #198.6
..LN7785:
        vmovsd    8(%rax,%r11,8), %xmm0                         #198.84
..LN7786:
        vmovsd    16(%rax,%r11,8), %xmm2                        #198.84
..LN7787:
        vmovsd    24(%rax,%r11,8), %xmm4                        #198.84
..LN7788:
        vsubsd    %xmm2, %xmm0, %xmm3                           #198.33
..LN7789:
        vsubsd    (%rax,%r11,8), %xmm0, %xmm1                   #198.33
..LN7790:
        vsubsd    %xmm4, %xmm2, %xmm5                           #198.33
..LN7791:
        vfnmadd132sd (%r8,%r11,8), %xmm0, %xmm1                 #198.33
..LN7792:
        vmovsd    32(%rax,%r11,8), %xmm6                        #198.84
..LN7793:
        vsubsd    %xmm6, %xmm4, %xmm7                           #198.33
..LN7794:
        vmovsd    %xmm1, (%r9,%r12,8)                           #198.33
..LN7795:
        vfmadd132sd 8(%r8,%r11,8), %xmm2, %xmm3                 #198.33
..LN7796:
        vmovsd    %xmm3, 8(%r9,%r12,8)                          #198.33
..LN7797:
        vfmadd132sd 16(%r8,%r11,8), %xmm4, %xmm5                #198.33
..LN7798:
        vmovsd    %xmm5, 16(%r9,%r12,8)                         #198.33
..LN7799:
        vfmadd132sd 24(%r8,%r11,8), %xmm6, %xmm7                #198.33
..LN7800:
        vmovsd    %xmm7, 24(%r9,%r12,8)                         #198.33
..LN7801:
        cmpl      %r10d, %edx                                   #198.6
..LN7802:
        jb        ..B3.254      # Prob 27%                      #198.6
..LN7803:
                                # LOE rax rcx rsi rdi r8 r9 edx ebx r10d
..B3.255:                       # Preds ..B3.254
..LN7804:
        lea       1(,%rdx,4), %eax                              #198.33
..LN7805:
        movslq    %eax, %rax                                    #198.6
..LN7806:
                                # LOE rax rcx rsi rdi r8
..B3.256:                       # Preds ..B3.255 ..B3.252
..LN7807:
        decq      %rax                                          #198.33
..LN7808:
	.loc    1  156  is_stmt 1
        subq      %rsi, %rcx                                    #156.3
..LN7809:
	.loc    1  198  is_stmt 1
        cmpq      %rcx, %rax                                    #198.6
..LN7810:
        jae       ..B3.260      # Prob 9%                       #198.6
..LN7811:
                                # LOE rax rcx rsi rdi r8
..B3.257:                       # Preds ..B3.256
..LN7812:
        movq      24(%rbp), %rdx                                #198.33
..LN7813:
        movq      112(%rsp), %rbx                               #198.60
..LN7814:
        lea       (%rdx,%rdi,8), %rdi                           #198.33
..LN7815:
        lea       (%rbx,%rsi,8), %rbx                           #198.60
..LN7816:
        lea       (%rdi,%rsi,8), %rdx                           #198.33
..LN7817:
                                # LOE rax rdx rcx rbx r8
..B3.258:                       # Preds ..B3.258 ..B3.257
..L221:         # optimization report
                # REMAINDER LOOP
                # MULTIVERSIONED FOR DATA DEPENDENCE, VER 2
                # %s was not vectorized: non-vectorizable loop instance from multiversioning
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
..LN7818:
        vmovsd    8(%rbx,%rax,8), %xmm0                         #198.84
..LN7819:
        vsubsd    (%rbx,%rax,8), %xmm0, %xmm1                   #198.33
..LN7820:
        vfnmadd132sd (%r8,%rax,8), %xmm0, %xmm1                 #198.33
..LN7821:
        vmovsd    %xmm1, (%rdx,%rax,8)                          #198.33
..LN7822:
        incq      %rax                                          #198.6
..LN7823:
        cmpq      %rcx, %rax                                    #198.6
..LN7824:
        jb        ..B3.258      # Prob 66%                      #198.6
..LN7825:
                                # LOE rax rdx rcx rbx r8
..B3.260:                       # Preds ..B3.258 ..B3.250 ..B3.307 ..B3.256 ..B3.248
                                #       ..B3.243 ..B3.202 ..B3.225
..LN7826:
	.loc    1  201  is_stmt 1
        vzeroupper                                              #201.1
..LN7827:
	.loc    1  201  epilogue_begin  is_stmt 1
        addq      $184, %rsp                                    #201.1
	.cfi_restore 3
..LN7828:
        popq      %rbx                                          #201.1
	.cfi_restore 15
..LN7829:
        popq      %r15                                          #201.1
	.cfi_restore 14
..LN7830:
        popq      %r14                                          #201.1
	.cfi_restore 13
..LN7831:
        popq      %r13                                          #201.1
	.cfi_restore 12
..LN7832:
        popq      %r12                                          #201.1
..LN7833:
        movq      %rbp, %rsp                                    #201.1
..LN7834:
        popq      %rbp                                          #201.1
	.cfi_def_cfa 7, 8
	.cfi_restore 6
..LN7835:
        ret                                                     #201.1
	.cfi_def_cfa 6, 16
	.cfi_escape 0x10, 0x03, 0x0e, 0x38, 0x1c, 0x0d, 0xe0, 0xff, 0xff, 0xff, 0x1a, 0x0d, 0xd8, 0xff, 0xff, 0xff, 0x22
	.cfi_offset 6, -16
	.cfi_escape 0x10, 0x0c, 0x0e, 0x38, 0x1c, 0x0d, 0xe0, 0xff, 0xff, 0xff, 0x1a, 0x0d, 0xf8, 0xff, 0xff, 0xff, 0x22
	.cfi_escape 0x10, 0x0d, 0x0e, 0x38, 0x1c, 0x0d, 0xe0, 0xff, 0xff, 0xff, 0x1a, 0x0d, 0xf0, 0xff, 0xff, 0xff, 0x22
	.cfi_escape 0x10, 0x0e, 0x0e, 0x38, 0x1c, 0x0d, 0xe0, 0xff, 0xff, 0xff, 0x1a, 0x0d, 0xe8, 0xff, 0xff, 0xff, 0x22
	.cfi_escape 0x10, 0x0f, 0x0e, 0x38, 0x1c, 0x0d, 0xe0, 0xff, 0xff, 0xff, 0x1a, 0x0d, 0xe0, 0xff, 0xff, 0xff, 0x22
..LN7836:
                                # LOE
..B3.261:                       # Preds ..B3.69                 # Infreq
..LN7837:
	.loc    1  180  is_stmt 1
        movq      $0, 72(%rsp)                                  #180.5
..LN7838:
        jmp       ..B3.73       # Prob 100%                     #180.5
..LN7839:
                                # LOE rax rsi r9 r11 r13 r14 edx ebx edi r10d r12d r15d
..B3.262:                       # Preds ..B3.55 ..B3.58 ..B3.60 # Infreq
..LN7840:
        xorl      %edi, %edi                                    #180.5
..LN7841:
        jmp       ..B3.68       # Prob 100%                     #180.5
..LN7842:
                                # LOE rax r9 r11 r13 r14 edx ebx esi edi r10d r12d r15d
..B3.264:                       # Preds ..B3.56                 # Infreq
..LN7843:
        movl      %esi, %edi                                    #180.5
..LN7844:
        lea       (%r11,%rax,8), %rcx                           #180.56
..LN7845:
        movq      %rcx, 72(%rsp)                                #180.56
..LN7846:
        lea       (%r12,%rdx), %r8d                             #180.32
..LN7847:
        movl      %r8d, 40(%rsp)                                #180.32
..LN7848:
        andl      $-16, %edi                                    #180.5
..LN7849:
        xorl      %ecx, %ecx                                    #180.5
..LN7850:
        jmp       ..B3.65       # Prob 100%                     #180.5
..LN7851:
                                # LOE rax rcx r9 r11 r13 r14 edx ebx esi edi r10d r12d r15d
..B3.266:                       # Preds ..B3.128                # Infreq
..LN7852:
	.loc    1  186  is_stmt 1
        xorl      %eax, %eax                                    #186.5
..LN7853:
        jmp       ..B3.132      # Prob 100%                     #186.5
..LN7854:
                                # LOE rax rdi r11 r13 r14 r15 ecx ebx r10d r12d
..B3.267:                       # Preds ..B3.114 ..B3.117 ..B3.119 # Infreq
..LN7855:
        xorl      %ecx, %ecx                                    #186.5
..LN7856:
        jmp       ..B3.127      # Prob 100%                     #186.5
..LN7857:
                                # LOE rdi r11 r13 r14 ecx ebx r10d r12d r15d
..B3.269:                       # Preds ..B3.115                # Infreq
..LN7858:
        movl      %r15d, %ecx                                   #186.5
..LN7859:
        lea       (%r11,%rdi,8), %rax                           #186.59
..LN7860:
        andl      $-16, %ecx                                    #186.5
..LN7861:
        xorl      %edx, %edx                                    #186.5
..LN7862:
        jmp       ..B3.124      # Prob 100%                     #186.5
..LN7863:
                                # LOE rax rdx rdi r11 r13 r14 ecx ebx esi r10d r12d r15d
..B3.271:                       # Preds ..B3.186                # Infreq
..LN7864:
	.loc    1  192  is_stmt 1
        xorl      %ecx, %ecx                                    #192.5
..LN7865:
        jmp       ..B3.190      # Prob 100%                     #192.5
..LN7866:
                                # LOE rdx rcx rsi rdi r13 r14 eax ebx r10d r12d
..B3.272:                       # Preds ..B3.172 ..B3.175 ..B3.177 # Infreq
..LN7867:
        xorl      %eax, %eax                                    #192.5
..LN7868:
        jmp       ..B3.185      # Prob 100%                     #192.5
..LN7869:
                                # LOE rsi rdi r13 r14 eax edx ebx r10d r12d
..B3.274:                       # Preds ..B3.173                # Infreq
..LN7870:
        movq      112(%rsp), %rcx                               #192.52
..LN7871:
        movl      %edx, %eax                                    #192.5
..LN7872:
        andl      $-16, %eax                                    #192.5
..LN7873:
        xorl      %r8d, %r8d                                    #192.5
..LN7874:
        lea       (%rcx,%rdi,8), %rcx                           #192.52
..LN7875:
        jmp       ..B3.182      # Prob 100%                     #192.52
..LN7876:
                                # LOE rcx rsi rdi r8 r13 r14 eax edx ebx r10d r12d
..B3.276:                       # Preds ..B3.244                # Infreq
..LN7877:
	.loc    1  198  is_stmt 1
        xorl      %edx, %edx                                    #198.6
..LN7878:
        jmp       ..B3.248      # Prob 100%                     #198.6
..LN7879:
                                # LOE rdx rsi rdi r8 r10 ecx
..B3.277:                       # Preds ..B3.230 ..B3.233 ..B3.235 # Infreq
..LN7880:
        xorl      %ecx, %ecx                                    #198.6
..LN7881:
        jmp       ..B3.243      # Prob 100%                     #198.6
..LN7882:
                                # LOE rsi rdi r8 ecx r10d
..B3.279:                       # Preds ..B3.231                # Infreq
..LN7883:
        movq      24(%rbp), %rdx                                #198.33
..LN7884:
        movl      %r10d, %ecx                                   #198.6
..LN7885:
        movq      112(%rsp), %rax                               #198.60
..LN7886:
        andl      $-16, %ecx                                    #198.6
..LN7887:
        lea       (%rdx,%rdi,8), %rbx                           #198.33
..LN7888:
        lea       (%rax,%rsi,8), %rax                           #198.60
..LN7889:
        lea       (%rbx,%rsi,8), %rdx                           #198.33
..LN7890:
        xorl      %ebx, %ebx                                    #198.6
..LN7891:
        jmp       ..B3.240      # Prob 100%                     #198.6
..LN7892:
                                # LOE rax rdx rbx rsi rdi r8 ecx r10d
..B3.281:                       # Preds ..B3.217                # Infreq
..LN7893:
	.loc    1  197  is_stmt 1
        xorl      %edx, %edx                                    #197.6
..LN7894:
        jmp       ..B3.221      # Prob 100%                     #197.6
..LN7895:
                                # LOE rdx rcx rsi r13 r14 eax ebx r10d r12d
..B3.282:                       # Preds ..B3.204 ..B3.206 ..B3.208 # Infreq
..LN7896:
        xorl      %eax, %eax                                    #197.6
..LN7897:
        jmp       ..B3.216      # Prob 100%                     #197.6
..LN7898:
                                # LOE rsi r13 r14 eax ecx ebx r10d r12d
..B3.285:                       # Preds ..B3.159                # Infreq
..LN7899:
	.loc    1  191  is_stmt 1
        xorl      %edx, %edx                                    #191.5
..LN7900:
        jmp       ..B3.163      # Prob 100%                     #191.5
..LN7901:
                                # LOE rdx rcx rdi r13 r14 eax ebx r10d r12d
..B3.286:                       # Preds ..B3.146 ..B3.148 ..B3.150 # Infreq
..LN7902:
        xorl      %eax, %eax                                    #191.5
..LN7903:
        jmp       ..B3.158      # Prob 100%                     #191.5
..LN7904:
                                # LOE rdi r13 r14 eax ecx ebx r10d r12d
..B3.289:                       # Preds ..B3.100                # Infreq
..LN7905:
	.loc    1  185  is_stmt 1
        xorl      %eax, %eax                                    #185.5
..LN7906:
        jmp       ..B3.104      # Prob 100%                     #185.5
..LN7907:
                                # LOE r9 r11 r13 r14 eax edx ecx ebx r10d r12d r15d
..B3.290:                       # Preds ..B3.87 ..B3.89 ..B3.91 # Infreq
..LN7908:
        xorl      %edx, %edx                                    #185.5
..LN7909:
        jmp       ..B3.99       # Prob 100%                     #185.5
..LN7910:
                                # LOE r11 r13 r14 edx ecx ebx r9d r10d r12d r15d
..B3.293:                       # Preds ..B3.41                 # Infreq
..LN7911:
	.loc    1  179  is_stmt 1
        xorl      %eax, %eax                                    #179.5
..LN7912:
        jmp       ..B3.45       # Prob 100%                     #179.5
..LN7913:
                                # LOE r9 r11 r13 r14 eax edx ecx ebx r10d r12d r15d
..B3.294:                       # Preds ..B3.28 ..B3.30 ..B3.32 # Infreq
..LN7914:
        xorl      %edx, %edx                                    #179.5
..LN7915:
        jmp       ..B3.40       # Prob 100%                     #179.5
..LN7916:
                                # LOE r11 r13 r14 edx ecx ebx r9d r10d r12d r15d
..B3.301:                       # Preds ..B3.99 ..B3.104        # Infreq
..LN7917:
	.loc    1  166  is_stmt 1
        cmpl      %r15d, %r9d                                   #166.19
..LN7918:
        jl        ..B3.109      # Prob 50%                      #166.19
..LN7919:
        jmp       ..B3.144      # Prob 100%                     #166.19
..LN7920:
                                # LOE r9 r11 r13 r14 ebx r10d r12d r15d
..B3.303:                       # Preds ..B3.40 ..B3.45         # Infreq
..LN7921:
        cmpl      %r15d, %r9d                                   #166.19
..LN7922:
        jl        ..B3.50       # Prob 50%                      #166.19
..LN7923:
        jmp       ..B3.85       # Prob 100%                     #166.19
..LN7924:
                                # LOE r9 r11 r13 r14 ebx r10d r12d r15d
..B3.305:                       # Preds ..B3.226                # Infreq
..LN7925:
        movslq    %r10d, %rcx                                   #166.30
..LN7926:
        jmp       ..B3.228      # Prob 100%                     #166.30
..LN7927:
                                # LOE rcx rsi rdi r8 r9 r14 ebx r10d
..B3.307:                       # Preds ..B3.216 ..B3.221       # Infreq
..LN7928:
        cmpl      %r10d, %r14d                                  #166.46
..LN7929:
        jl        ..B3.226      # Prob 50%                      #166.46
..LN7930:
        jmp       ..B3.260      # Prob 100%                     #166.46
..LN7931:
                                # LOE rsi r14 ebx r10d r12d
..B3.309:                       # Preds ..B3.158 ..B3.163       # Infreq
..LN7932:
        cmpl      %r10d, %r14d                                  #166.46
..LN7933:
        jl        ..B3.168      # Prob 50%                      #166.46
..LN7934:
        jmp       ..B3.202      # Prob 100%                     #166.46
..LN7935:
        .align    16,0x90
	.cfi_endproc
..LN7936:
                                # LOE rdi r13 r14 ebx r10d r12d
..LN7937:
# mark_end;
	.type	a2b_ord2,@function
	.size	a2b_ord2,.-a2b_ord2
..LNa2b_ord2.7938:
.LNa2b_ord2:
	.data
# -- End  a2b_ord2
	.text
.L_2__routine_start_get_edge_3:
# -- Begin  get_edge
	.text
# mark_begin;
       .align    16,0x90
	.globl get_edge
# --- get_edge(int, int, const double *, const double *, const double *, const double *, double *, double *, double *, double *, int, int, int, int)
get_edge:
# parameter 1(nx): %edi
# parameter 2(ny): %esi
# parameter 3(lont): %rdx
# parameter 4(latt): %rcx
# parameter 5(lonc): %r8
# parameter 6(latc): %r9
# parameter 7(edge_w): 16 + %rbp
# parameter 8(edge_e): 24 + %rbp
# parameter 9(edge_s): 32 + %rbp
# parameter 10(edge_n): 40 + %rbp
# parameter 11(on_west_edge): 48 + %rbp
# parameter 12(on_east_edge): 56 + %rbp
# parameter 13(on_south_edge): 64 + %rbp
# parameter 14(on_north_edge): 72 + %rbp
..B4.1:                         # Preds ..B4.0
	.cfi_startproc
..___tag_value_get_edge.241:
..L242:
                                                        #207.1
..LN7939:
	.loc    1  207  is_stmt 1
        pushq     %rbp                                          #207.1
	.cfi_def_cfa_offset 16
..LN7940:
        movq      %rsp, %rbp                                    #207.1
	.cfi_def_cfa 6, 16
	.cfi_offset 6, -16
..LN7941:
        andq      $-32, %rsp                                    #207.1
..LN7942:
        pushq     %r12                                          #207.1
..LN7943:
        pushq     %r13                                          #207.1
..LN7944:
        pushq     %r14                                          #207.1
..LN7945:
        pushq     %r15                                          #207.1
..LN7946:
        pushq     %rbx                                          #207.1
..LN7947:
        subq      $440, %rsp                                    #207.1
	.cfi_escape 0x10, 0x03, 0x0e, 0x38, 0x1c, 0x0d, 0xe0, 0xff, 0xff, 0xff, 0x1a, 0x0d, 0xd8, 0xff, 0xff, 0xff, 0x22
	.cfi_escape 0x10, 0x0c, 0x0e, 0x38, 0x1c, 0x0d, 0xe0, 0xff, 0xff, 0xff, 0x1a, 0x0d, 0xf8, 0xff, 0xff, 0xff, 0x22
	.cfi_escape 0x10, 0x0d, 0x0e, 0x38, 0x1c, 0x0d, 0xe0, 0xff, 0xff, 0xff, 0x1a, 0x0d, 0xf0, 0xff, 0xff, 0xff, 0x22
	.cfi_escape 0x10, 0x0e, 0x0e, 0x38, 0x1c, 0x0d, 0xe0, 0xff, 0xff, 0xff, 0x1a, 0x0d, 0xe8, 0xff, 0xff, 0xff, 0x22
	.cfi_escape 0x10, 0x0f, 0x0e, 0x38, 0x1c, 0x0d, 0xe0, 0xff, 0xff, 0xff, 0x1a, 0x0d, 0xe0, 0xff, 0xff, 0xff, 0x22
..LN7948:
        movl      %edi, %r14d                                   #207.1
..LN7949:
        movq      %r9, 408(%rsp)                                #207.1
..LN7950:
        movq      %rcx, %rbx                                    #207.1
..LN7951:
        movq      %r8, 400(%rsp)                                #207.1
..LN7952:
        movl      %esi, %r13d                                   #207.1
..LN7953:
        movq      %rdx, 376(%rsp)                               #207.1
..LN7954:
	.loc    1  214  prologue_end  is_stmt 1
        lea       1(%r14), %r12d                                #214.3
..LN7955:
	.loc    1  217  is_stmt 1
        testl     %r12d, %r12d                                  #217.14
..LN7956:
	.loc    1  274  is_stmt 1
        movslq    %r12d, %r12                                   #274.27
..LN7957:
        movq      %r12, 224(%rsp)                               #274.27
..LN7958:
	.loc    1  217  is_stmt 1
        jle       ..B4.150      # Prob 50%                      #217.14
..LN7959:
                                # LOE rbx r12 r12d r13d r14d r12b
..B4.2:                         # Preds ..B4.1
..LN7960:
        cmpl      $6, %r12d                                     #217.3
..LN7961:
        jg        ..B4.3        # Prob 50%                      #217.3
..LN7962:
                                # LOE rbx r12 r12d r13d r14d r12b
..B4.149:                       # Preds ..B4.2
..LN7963:
        movslq    %r14d, %r14                                   #217.3
..LN7964:
        movq      %r14, 288(%rsp)                               #217.3
..LN7965:
        jmp       ..B4.28       # Prob 100%                     #217.3
..LN7966:
                                # LOE rbx r12 r14 r12d r13d r14d r12b r14b
..B4.3:                         # Preds ..B4.2
..LN7967:
	.loc    1  218  is_stmt 1
        movq      40(%rbp), %rax                                #218.5
..LN7968:
        cmpq      32(%rbp), %rax                                #218.5
..LN7969:
        jbe       ..B4.148      # Prob 50%                      #218.5
..LN7970:
                                # LOE rbx r12 r12d r13d r14d r12b
..B4.4:                         # Preds ..B4.3
..LN7971:
	.loc    1  217  is_stmt 1
        movslq    %r14d, %r14                                   #217.3
..LN7972:
	.loc    1  218  is_stmt 1
        movq      40(%rbp), %rdx                                #218.5
..LN7973:
        subq      32(%rbp), %rdx                                #218.5
..LN7974:
	.loc    1  217  is_stmt 1
        movq      %r14, 288(%rsp)                               #217.3
..LN7975:
	.loc    1  218  is_stmt 1
        lea       8(,%r14,8), %rax                              #218.5
..LN7976:
        cmpq      %rdx, %rax                                    #218.5
..LN7977:
        jle       ..B4.7        # Prob 50%                      #218.5
..LN7978:
        jmp       ..B4.5        # Prob 100%                     #218.5
..LN7979:
                                # LOE rbx r12 r14 r12d r13d r14d r12b r14b
..B4.148:                       # Preds ..B4.3
..LN7980:
	.loc    1  217  is_stmt 1
        movslq    %r14d, %r14                                   #217.3
..LN7981:
        movq      %r14, 288(%rsp)                               #217.3
..LN7982:
                                # LOE rbx r12 r14 r12d r13d r14d r12b r14b
..B4.5:                         # Preds ..B4.148 ..B4.4
..LN7983:
	.loc    1  218  is_stmt 1
        movq      40(%rbp), %rax                                #218.5
..LN7984:
        cmpq      32(%rbp), %rax                                #218.5
..LN7985:
        jae       ..B4.28       # Prob 50%                      #218.5
..LN7986:
                                # LOE rbx r12 r14 r12d r13d r14d r12b r14b
..B4.6:                         # Preds ..B4.5
..LN7987:
        movq      %r14, %rax                                    #218.5
..LN7988:
        movq      32(%rbp), %rdx                                #218.5
..LN7989:
        subq      40(%rbp), %rdx                                #218.5
..LN7990:
        lea       8(,%rax,8), %rcx                              #218.5
..LN7991:
        cmpq      %rcx, %rdx                                    #218.5
..LN7992:
        jl        ..B4.28       # Prob 50%                      #218.5
..LN7993:
                                # LOE rbx r12 r14 r12d r13d r14d r12b r14b
..B4.7:                         # Preds ..B4.4 ..B4.6
..LN7994:
	.loc    1  217  is_stmt 1
        cmpl      $16, %r12d                                    #217.3
..LN7995:
        jl        ..B4.129      # Prob 10%                      #217.3
..LN7996:
                                # LOE rbx r12 r12d r13d r14d r12b
..B4.8:                         # Preds ..B4.7
..LN7997:
        movq      40(%rbp), %rdx                                #217.3
..LN7998:
        andq      $31, %rdx                                     #217.3
..LN7999:
        movl      %edx, %edx                                    #217.3
..LN8000:
        testl     %edx, %edx                                    #217.3
..LN8001:
        je        ..B4.11       # Prob 50%                      #217.3
..LN8002:
                                # LOE rdx rbx r12 r12d r13d r14d r12b
..B4.9:                         # Preds ..B4.8
..LN8003:
        testb     $7, %dl                                       #217.3
..LN8004:
        jne       ..B4.129      # Prob 10%                      #217.3
..LN8005:
                                # LOE rdx rbx r12 r12d r13d r14d r12b
..B4.10:                        # Preds ..B4.9
..LN8006:
        negl      %edx                                          #217.3
..LN8007:
        addl      $32, %edx                                     #217.3
..LN8008:
        shrl      $3, %edx                                      #217.3
..LN8009:
                                # LOE rdx rbx r12 r12d r13d r14d r12b
..B4.11:                        # Preds ..B4.10 ..B4.8
..LN8010:
        lea       16(%rdx), %eax                                #217.3
..LN8011:
        cmpl      %eax, %r12d                                   #217.3
..LN8012:
        jl        ..B4.129      # Prob 10%                      #217.3
..LN8013:
                                # LOE rdx rbx r12 r12d r13d r14d r12b
..B4.12:                        # Preds ..B4.11
..LN8014:
        movl      %r12d, %ecx                                   #217.3
..LN8015:
        xorl      %esi, %esi                                    #217.3
..LN8016:
        subl      %edx, %ecx                                    #217.3
..LN8017:
        andl      $15, %ecx                                     #217.3
..LN8018:
        negl      %ecx                                          #217.3
..LN8019:
        addl      %r12d, %ecx                                   #217.3
..LN8020:
        testq     %rdx, %rdx                                    #217.3
..LN8021:
        jbe       ..B4.16       # Prob 9%                       #217.3
..LN8022:
                                # LOE rdx rbx rsi ecx r12d r13d r14d
..B4.13:                        # Preds ..B4.12
..LN8023:
	.loc    1  218  is_stmt 1
        movq      40(%rbp), %rdi                                #218.17
..LN8024:
        movq      $0x3fe0000000000000, %rax                     #218.17
..LN8025:
        movq      32(%rbp), %r8                                 #218.17
..LN8026:
                                # LOE rax rdx rbx rsi rdi r8 ecx r12d r13d r14d
..B4.14:                        # Preds ..B4.14 ..B4.13
..L252:         # optimization report
                # MULTIVERSIONED FOR DATA DEPENDENCE, VER 1
                # LOOP WAS UNROLLED BY 4
                # PEELED LOOP FOR VECTORIZATION
                # VECTORIZATION SPEEDUP COEFFECIENT 3.875000
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 0.406250
..LN8027:
        movq      %rax, (%r8,%rsi,8)                            #218.5
..LN8028:
	.loc    1  219  is_stmt 1
        movq      %rax, (%rdi,%rsi,8)                           #219.5
..LN8029:
	.loc    1  217  is_stmt 1
        incq      %rsi                                          #217.3
..LN8030:
        cmpq      %rdx, %rsi                                    #217.3
..LN8031:
        jb        ..B4.14       # Prob 82%                      #217.3
..LN8032:
                                # LOE rax rdx rbx rsi rdi r8 ecx r12d r13d r14d
..B4.16:                        # Preds ..B4.14 ..B4.12
..LN8033:
	.loc    1  218  is_stmt 1
        vmovupd   .L_2il0floatpacket.4(%rip), %ymm0             #218.17
..LN8034:
	.loc    1  217  is_stmt 1
        movslq    %ecx, %rax                                    #217.3
..LN8035:
        movq      40(%rbp), %rsi                                #217.3
..LN8036:
        movq      32(%rbp), %rdi                                #217.3
..LN8037:
                                # LOE rax rdx rbx rsi rdi ecx r12d r13d r14d ymm0
..B4.17:                        # Preds ..B4.17 ..B4.16
..L253:         # optimization report
                # MULTIVERSIONED FOR DATA DEPENDENCE, VER 1
                # LOOP WAS UNROLLED BY 4
                # LOOP WAS VECTORIZED
                # VECTORIZATION HAS UNALIGNED MEMORY REFERENCES
                # VECTORIZATION SPEEDUP COEFFECIENT 3.875000
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 0.406250
                # MAIN VECTOR TYPE: 64-bits floating point
..LN8038:
	.loc    1  218  is_stmt 1
        vmovupd   %ymm0, (%rdi,%rdx,8)                          #218.5
..LN8039:
	.loc    1  219  is_stmt 1
        vmovupd   %ymm0, (%rsi,%rdx,8)                          #219.5
..LN8040:
	.loc    1  218  is_stmt 1
        vmovupd   %ymm0, 32(%rdi,%rdx,8)                        #218.5
..LN8041:
	.loc    1  219  is_stmt 1
        vmovupd   %ymm0, 32(%rsi,%rdx,8)                        #219.5
..LN8042:
	.loc    1  218  is_stmt 1
        vmovupd   %ymm0, 64(%rdi,%rdx,8)                        #218.5
..LN8043:
	.loc    1  219  is_stmt 1
        vmovupd   %ymm0, 64(%rsi,%rdx,8)                        #219.5
..LN8044:
	.loc    1  218  is_stmt 1
        vmovupd   %ymm0, 96(%rdi,%rdx,8)                        #218.5
..LN8045:
	.loc    1  219  is_stmt 1
        vmovupd   %ymm0, 96(%rsi,%rdx,8)                        #219.5
..LN8046:
	.loc    1  217  is_stmt 1
        addq      $16, %rdx                                     #217.3
..LN8047:
        cmpq      %rax, %rdx                                    #217.3
..LN8048:
        jb        ..B4.17       # Prob 82%                      #217.3
..LN8049:
                                # LOE rax rdx rbx rsi rdi ecx r12d r13d r14d ymm0
..B4.19:                        # Preds ..B4.17 ..B4.129
..LN8050:
        lea       1(%rcx), %eax                                 #217.3
..LN8051:
        cmpl      %eax, %r12d                                   #217.3
..LN8052:
        jb        ..B4.34       # Prob 50%                      #217.3
..LN8053:
                                # LOE rbx ecx r12d r13d r14d
..B4.20:                        # Preds ..B4.19
..LN8054:
        movslq    %ecx, %rdx                                    #217.3
..LN8055:
        negq      %rdx                                          #217.3
..LN8056:
        addq      224(%rsp), %rdx                               #217.3
..LN8057:
        cmpq      $4, %rdx                                      #217.3
..LN8058:
        jl        ..B4.128      # Prob 10%                      #217.3
..LN8059:
                                # LOE rdx rbx ecx r12d r13d r14d
..B4.21:                        # Preds ..B4.20
..LN8060:
	.loc    1  218  is_stmt 1
        movslq    %ecx, %rcx                                    #218.5
..LN8061:
	.loc    1  217  is_stmt 1
        movl      %edx, %eax                                    #217.3
..LN8062:
	.loc    1  219  is_stmt 1
        movq      40(%rbp), %rdi                                #219.5
..LN8063:
	.loc    1  217  is_stmt 1
        andl      $-4, %eax                                     #217.3
..LN8064:
	.loc    1  218  is_stmt 1
        movq      32(%rbp), %rsi                                #218.5
..LN8065:
	.loc    1  217  is_stmt 1
        xorl      %r8d, %r8d                                    #217.3
..LN8066:
        movslq    %eax, %rax                                    #217.3
..LN8067:
	.loc    1  218  is_stmt 1
        vmovupd   .L_2il0floatpacket.9(%rip), %ymm0             #218.17
..LN8068:
	.loc    1  219  is_stmt 1
        lea       (%rdi,%rcx,8), %rdi                           #219.5
..LN8069:
	.loc    1  218  is_stmt 1
        lea       (%rsi,%rcx,8), %rsi                           #218.5
..LN8070:
                                # LOE rax rdx rbx rsi rdi r8 ecx r12d r13d r14d ymm0
..B4.22:                        # Preds ..B4.22 ..B4.21
..L254:         # optimization report
                # MULTIVERSIONED FOR DATA DEPENDENCE, VER 1
                # LOOP WAS VECTORIZED
                # REMAINDER LOOP FOR VECTORIZATION
                # VECTORIZATION HAS UNALIGNED MEMORY REFERENCES
                # VECTORIZATION SPEEDUP COEFFECIENT 1.849609
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 1.625000
                # MAIN VECTOR TYPE: 64-bits floating point
..LN8071:
        vmovupd   %ymm0, (%rsi,%r8,8)                           #218.5
..LN8072:
	.loc    1  219  is_stmt 1
        vmovupd   %ymm0, (%rdi,%r8,8)                           #219.5
..LN8073:
	.loc    1  217  is_stmt 1
        addq      $4, %r8                                       #217.3
..LN8074:
        cmpq      %rax, %r8                                     #217.3
..LN8075:
        jb        ..B4.22       # Prob 82%                      #217.3
..LN8076:
                                # LOE rax rdx rbx rsi rdi r8 ecx r12d r13d r14d ymm0
..B4.24:                        # Preds ..B4.22 ..B4.128
..LN8077:
        cmpq      %rdx, %rax                                    #217.3
..LN8078:
        jae       ..B4.34       # Prob 9%                       #217.3
..LN8079:
                                # LOE rax rdx rbx ecx r12d r13d r14d
..B4.25:                        # Preds ..B4.24
..LN8080:
	.loc    1  218  is_stmt 1
        movslq    %ecx, %rcx                                    #218.5
..LN8081:
        movq      $0x3fe0000000000000, %rdi                     #218.17
..LN8082:
	.loc    1  219  is_stmt 1
        movq      40(%rbp), %rsi                                #219.5
..LN8083:
	.loc    1  218  is_stmt 1
        movq      32(%rbp), %r8                                 #218.5
..LN8084:
	.loc    1  219  is_stmt 1
        lea       (%rsi,%rcx,8), %rsi                           #219.5
..LN8085:
	.loc    1  218  is_stmt 1
        lea       (%r8,%rcx,8), %rcx                            #218.5
..LN8086:
                                # LOE rax rdx rcx rbx rsi rdi r12d r13d r14d
..B4.26:                        # Preds ..B4.26 ..B4.25
..L255:         # optimization report
                # MULTIVERSIONED FOR DATA DEPENDENCE, VER 1
                # REMAINDER LOOP FOR VECTORIZATION
                # VECTORIZATION SPEEDUP COEFFECIENT 1.849609
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 1.625000
..LN8087:
        movq      %rdi, (%rcx,%rax,8)                           #218.5
..LN8088:
	.loc    1  219  is_stmt 1
        movq      %rdi, (%rsi,%rax,8)                           #219.5
..LN8089:
	.loc    1  217  is_stmt 1
        incq      %rax                                          #217.3
..LN8090:
        cmpq      %rdx, %rax                                    #217.3
..LN8091:
        jb        ..B4.26       # Prob 82%                      #217.3
..LN8092:
        jmp       ..B4.34       # Prob 100%                     #217.3
..LN8093:
                                # LOE rax rdx rcx rbx rsi rdi r12d r13d r14d
..B4.28:                        # Preds ..B4.149 ..B4.5 ..B4.6
..LN8094:
        movl      %r12d, %eax                                   #217.3
..LN8095:
        movl      $1, %esi                                      #217.3
..LN8096:
        shrl      $31, %eax                                     #217.3
..LN8097:
        xorl      %ecx, %ecx                                    #217.3
..LN8098:
        lea       1(%r14,%rax), %edx                            #217.3
..LN8099:
        sarl      $1, %edx                                      #217.3
..LN8100:
        testl     %edx, %edx                                    #217.3
..LN8101:
        jbe       ..B4.32       # Prob 9%                       #217.3
..LN8102:
                                # LOE rbx edx ecx esi r12d r13d r14d
..B4.29:                        # Preds ..B4.28
..LN8103:
	.loc    1  218  is_stmt 1
        movq      40(%rbp), %rdi                                #218.17
..LN8104:
        movq      $0x3fe0000000000000, %rax                     #218.17
..LN8105:
        movq      32(%rbp), %r8                                 #218.17
..LN8106:
                                # LOE rax rbx rdi r8 edx ecx r12d r13d r14d
..B4.30:                        # Preds ..B4.30 ..B4.29
..L256:         # optimization report
                # MULTIVERSIONED FOR DATA DEPENDENCE, VER 2
                # LOOP WAS UNROLLED BY 2
                # %s was not vectorized: non-vectorizable loop instance from multiversioning
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
..LN8107:
        lea       (%rcx,%rcx), %esi                             #218.5
..LN8108:
        movslq    %esi, %rsi                                    #218.5
..LN8109:
	.loc    1  217  is_stmt 1
        incl      %ecx                                          #217.3
..LN8110:
	.loc    1  218  is_stmt 1
        movq      %rax, (%r8,%rsi,8)                            #218.5
..LN8111:
	.loc    1  219  is_stmt 1
        movq      %rax, (%rdi,%rsi,8)                           #219.5
..LN8112:
	.loc    1  218  is_stmt 1
        movq      %rax, 8(%r8,%rsi,8)                           #218.5
..LN8113:
	.loc    1  219  is_stmt 1
        movq      %rax, 8(%rdi,%rsi,8)                          #219.5
..LN8114:
	.loc    1  217  is_stmt 1
        cmpl      %edx, %ecx                                    #217.3
..LN8115:
        jb        ..B4.30       # Prob 63%                      #217.3
..LN8116:
                                # LOE rax rbx rdi r8 edx ecx r12d r13d r14d
..B4.31:                        # Preds ..B4.30
..LN8117:
	.loc    1  218  is_stmt 1
        lea       1(%rcx,%rcx), %esi                            #218.5
..LN8118:
                                # LOE rbx esi r12d r13d r14d
..B4.32:                        # Preds ..B4.31 ..B4.28
..LN8119:
	.loc    1  217  is_stmt 1
        lea       -1(%rsi), %eax                                #217.3
..LN8120:
        cmpl      %eax, %r12d                                   #217.3
..LN8121:
        jbe       ..B4.34       # Prob 9%                       #217.3
..LN8122:
                                # LOE rbx esi r12d r13d r14d
..B4.33:                        # Preds ..B4.32
..L257:         # optimization report
                # REMAINDER LOOP
                # MULTIVERSIONED FOR DATA DEPENDENCE, VER 2
                # %s was not vectorized: non-vectorizable loop instance from multiversioning
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
..LN8123:
	.loc    1  218  is_stmt 1
        movq      $0x3fe0000000000000, %rdx                     #218.17
..LN8124:
        movslq    %esi, %rsi                                    #218.5
..LN8125:
        movq      32(%rbp), %rax                                #218.5
..LN8126:
	.loc    1  219  is_stmt 1
        movq      40(%rbp), %rcx                                #219.5
..LN8127:
	.loc    1  218  is_stmt 1
        movq      %rdx, -8(%rax,%rsi,8)                         #218.5
..LN8128:
	.loc    1  219  is_stmt 1
        movq      %rdx, -8(%rcx,%rsi,8)                         #219.5
..LN8129:
        jmp       ..B4.34       # Prob 100%                     #219.5
..LN8130:
                                # LOE rbx r12d r13d r14d
..B4.150:                       # Preds ..B4.1
..LN8131:
	.loc    1  217  is_stmt 1
        movslq    %r14d, %r14                                   #217.3
..LN8132:
        movq      %r14, 288(%rsp)                               #217.3
..LN8133:
                                # LOE rbx r12d r13d r14d
..B4.34:                        # Preds ..B4.19 ..B4.24 ..B4.32 ..B4.26 ..B4.150
                                #       ..B4.33
..LN8134:
	.loc    1  215  is_stmt 1
        lea       1(%r13), %r15d                                #215.3
..LN8135:
	.loc    1  221  is_stmt 1
        testl     %r15d, %r15d                                  #221.14
..LN8136:
        jle       ..B4.67       # Prob 50%                      #221.14
..LN8137:
                                # LOE rbx r12d r13d r14d r15d
..B4.35:                        # Preds ..B4.34
..LN8138:
        cmpl      $6, %r15d                                     #221.3
..LN8139:
        jle       ..B4.61       # Prob 50%                      #221.3
..LN8140:
                                # LOE rbx r12d r13d r14d r15d
..B4.36:                        # Preds ..B4.35
..LN8141:
	.loc    1  222  is_stmt 1
        movq      24(%rbp), %rax                                #222.5
..LN8142:
        cmpq      16(%rbp), %rax                                #222.5
..LN8143:
        jbe       ..B4.38       # Prob 50%                      #222.5
..LN8144:
                                # LOE rbx r12d r13d r14d r15d
..B4.37:                        # Preds ..B4.36
..LN8145:
	.loc    1  221  is_stmt 1
        movslq    %r13d, %r13                                   #221.3
..LN8146:
	.loc    1  222  is_stmt 1
        movq      24(%rbp), %rdx                                #222.5
..LN8147:
        subq      16(%rbp), %rdx                                #222.5
..LN8148:
        lea       8(,%r13,8), %rax                              #222.5
..LN8149:
        cmpq      %rdx, %rax                                    #222.5
..LN8150:
        jle       ..B4.40       # Prob 50%                      #222.5
..LN8151:
                                # LOE rbx r12d r13d r14d r15d
..B4.38:                        # Preds ..B4.36 ..B4.37
..LN8152:
        movq      24(%rbp), %rax                                #222.5
..LN8153:
        cmpq      16(%rbp), %rax                                #222.5
..LN8154:
        jae       ..B4.61       # Prob 50%                      #222.5
..LN8155:
                                # LOE rbx r12d r13d r14d r15d
..B4.39:                        # Preds ..B4.38
..LN8156:
	.loc    1  221  is_stmt 1
        movslq    %r13d, %r13                                   #221.3
..LN8157:
	.loc    1  222  is_stmt 1
        movq      16(%rbp), %rax                                #222.5
..LN8158:
        subq      24(%rbp), %rax                                #222.5
..LN8159:
        lea       8(,%r13,8), %rdx                              #222.5
..LN8160:
        cmpq      %rdx, %rax                                    #222.5
..LN8161:
        jl        ..B4.61       # Prob 50%                      #222.5
..LN8162:
                                # LOE rbx r12d r13d r14d r15d
..B4.40:                        # Preds ..B4.37 ..B4.39
..LN8163:
	.loc    1  221  is_stmt 1
        cmpl      $16, %r15d                                    #221.3
..LN8164:
        jl        ..B4.133      # Prob 10%                      #221.3
..LN8165:
                                # LOE rbx r12d r13d r14d r15d
..B4.41:                        # Preds ..B4.40
..LN8166:
        movq      24(%rbp), %rdx                                #221.3
..LN8167:
        andq      $31, %rdx                                     #221.3
..LN8168:
        movl      %edx, %edx                                    #221.3
..LN8169:
        testl     %edx, %edx                                    #221.3
..LN8170:
        je        ..B4.44       # Prob 50%                      #221.3
..LN8171:
                                # LOE rdx rbx r12d r13d r14d r15d
..B4.42:                        # Preds ..B4.41
..LN8172:
        testb     $7, %dl                                       #221.3
..LN8173:
        jne       ..B4.133      # Prob 10%                      #221.3
..LN8174:
                                # LOE rdx rbx r12d r13d r14d r15d
..B4.43:                        # Preds ..B4.42
..LN8175:
        negl      %edx                                          #221.3
..LN8176:
        addl      $32, %edx                                     #221.3
..LN8177:
        shrl      $3, %edx                                      #221.3
..LN8178:
                                # LOE rdx rbx r12d r13d r14d r15d
..B4.44:                        # Preds ..B4.43 ..B4.41
..LN8179:
        lea       16(%rdx), %eax                                #221.3
..LN8180:
        cmpl      %eax, %r15d                                   #221.3
..LN8181:
        jl        ..B4.133      # Prob 10%                      #221.3
..LN8182:
                                # LOE rdx rbx r12d r13d r14d r15d
..B4.45:                        # Preds ..B4.44
..LN8183:
        movl      %r15d, %ecx                                   #221.3
..LN8184:
        xorl      %esi, %esi                                    #221.3
..LN8185:
        subl      %edx, %ecx                                    #221.3
..LN8186:
        andl      $15, %ecx                                     #221.3
..LN8187:
        negl      %ecx                                          #221.3
..LN8188:
        addl      %r15d, %ecx                                   #221.3
..LN8189:
        testq     %rdx, %rdx                                    #221.3
..LN8190:
        jbe       ..B4.49       # Prob 9%                       #221.3
..LN8191:
                                # LOE rdx rbx rsi ecx r12d r13d r14d r15d
..B4.46:                        # Preds ..B4.45
..LN8192:
	.loc    1  222  is_stmt 1
        movq      24(%rbp), %r8                                 #222.17
..LN8193:
        movq      $0x3fe0000000000000, %rax                     #222.17
..LN8194:
        movq      16(%rbp), %r9                                 #222.17
..LN8195:
                                # LOE rax rdx rbx rsi r8 r9 ecx r12d r13d r14d r15d
..B4.47:                        # Preds ..B4.47 ..B4.46
..L258:         # optimization report
                # MULTIVERSIONED FOR DATA DEPENDENCE, VER 1
                # LOOP WAS UNROLLED BY 4
                # PEELED LOOP FOR VECTORIZATION
                # VECTORIZATION SPEEDUP COEFFECIENT 3.875000
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 0.406250
..LN8196:
        movq      %rax, (%r9,%rsi,8)                            #222.5
..LN8197:
	.loc    1  223  is_stmt 1
        movq      %rax, (%r8,%rsi,8)                            #223.5
..LN8198:
	.loc    1  221  is_stmt 1
        incq      %rsi                                          #221.3
..LN8199:
        cmpq      %rdx, %rsi                                    #221.3
..LN8200:
        jb        ..B4.47       # Prob 82%                      #221.3
..LN8201:
                                # LOE rax rdx rbx rsi r8 r9 ecx r12d r13d r14d r15d
..B4.49:                        # Preds ..B4.47 ..B4.45
..LN8202:
	.loc    1  222  is_stmt 1
        vmovupd   .L_2il0floatpacket.4(%rip), %ymm0             #222.17
..LN8203:
	.loc    1  221  is_stmt 1
        movslq    %ecx, %rax                                    #221.3
..LN8204:
        movq      24(%rbp), %rsi                                #221.3
..LN8205:
        movq      16(%rbp), %r8                                 #221.3
..LN8206:
                                # LOE rax rdx rbx rsi r8 ecx r12d r13d r14d r15d ymm0
..B4.50:                        # Preds ..B4.50 ..B4.49
..L259:         # optimization report
                # MULTIVERSIONED FOR DATA DEPENDENCE, VER 1
                # LOOP WAS UNROLLED BY 4
                # LOOP WAS VECTORIZED
                # VECTORIZATION HAS UNALIGNED MEMORY REFERENCES
                # VECTORIZATION SPEEDUP COEFFECIENT 3.875000
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 0.406250
                # MAIN VECTOR TYPE: 64-bits floating point
..LN8207:
	.loc    1  222  is_stmt 1
        vmovupd   %ymm0, (%r8,%rdx,8)                           #222.5
..LN8208:
	.loc    1  223  is_stmt 1
        vmovupd   %ymm0, (%rsi,%rdx,8)                          #223.5
..LN8209:
	.loc    1  222  is_stmt 1
        vmovupd   %ymm0, 32(%r8,%rdx,8)                         #222.5
..LN8210:
	.loc    1  223  is_stmt 1
        vmovupd   %ymm0, 32(%rsi,%rdx,8)                        #223.5
..LN8211:
	.loc    1  222  is_stmt 1
        vmovupd   %ymm0, 64(%r8,%rdx,8)                         #222.5
..LN8212:
	.loc    1  223  is_stmt 1
        vmovupd   %ymm0, 64(%rsi,%rdx,8)                        #223.5
..LN8213:
	.loc    1  222  is_stmt 1
        vmovupd   %ymm0, 96(%r8,%rdx,8)                         #222.5
..LN8214:
	.loc    1  223  is_stmt 1
        vmovupd   %ymm0, 96(%rsi,%rdx,8)                        #223.5
..LN8215:
	.loc    1  221  is_stmt 1
        addq      $16, %rdx                                     #221.3
..LN8216:
        cmpq      %rax, %rdx                                    #221.3
..LN8217:
        jb        ..B4.50       # Prob 82%                      #221.3
..LN8218:
                                # LOE rax rdx rbx rsi r8 ecx r12d r13d r14d r15d ymm0
..B4.52:                        # Preds ..B4.50 ..B4.133
..LN8219:
        lea       1(%rcx), %eax                                 #221.3
..LN8220:
        cmpl      %eax, %r15d                                   #221.3
..LN8221:
        jb        ..B4.67       # Prob 50%                      #221.3
..LN8222:
                                # LOE rbx ecx r12d r13d r14d r15d
..B4.53:                        # Preds ..B4.52
..LN8223:
        movslq    %r15d, %rdx                                   #221.3
..LN8224:
        movslq    %ecx, %rcx                                    #221.3
..LN8225:
        subq      %rcx, %rdx                                    #221.3
..LN8226:
        cmpq      $4, %rdx                                      #221.3
..LN8227:
        jl        ..B4.132      # Prob 10%                      #221.3
..LN8228:
                                # LOE rdx rbx ecx r12d r13d r14d r15d
..B4.54:                        # Preds ..B4.53
..LN8229:
	.loc    1  222  is_stmt 1
        movslq    %ecx, %rcx                                    #222.5
..LN8230:
	.loc    1  221  is_stmt 1
        movl      %edx, %eax                                    #221.3
..LN8231:
	.loc    1  223  is_stmt 1
        movq      24(%rbp), %rdi                                #223.5
..LN8232:
	.loc    1  221  is_stmt 1
        andl      $-4, %eax                                     #221.3
..LN8233:
	.loc    1  222  is_stmt 1
        movq      16(%rbp), %rsi                                #222.5
..LN8234:
	.loc    1  221  is_stmt 1
        xorl      %r8d, %r8d                                    #221.3
..LN8235:
        movslq    %eax, %rax                                    #221.3
..LN8236:
	.loc    1  222  is_stmt 1
        vmovupd   .L_2il0floatpacket.9(%rip), %ymm0             #222.17
..LN8237:
	.loc    1  223  is_stmt 1
        lea       (%rdi,%rcx,8), %rdi                           #223.5
..LN8238:
	.loc    1  222  is_stmt 1
        lea       (%rsi,%rcx,8), %rsi                           #222.5
..LN8239:
                                # LOE rax rdx rbx rsi rdi r8 ecx r12d r13d r14d r15d ymm0
..B4.55:                        # Preds ..B4.55 ..B4.54
..L260:         # optimization report
                # MULTIVERSIONED FOR DATA DEPENDENCE, VER 1
                # LOOP WAS VECTORIZED
                # REMAINDER LOOP FOR VECTORIZATION
                # VECTORIZATION HAS UNALIGNED MEMORY REFERENCES
                # VECTORIZATION SPEEDUP COEFFECIENT 1.849609
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 1.625000
                # MAIN VECTOR TYPE: 64-bits floating point
..LN8240:
        vmovupd   %ymm0, (%rsi,%r8,8)                           #222.5
..LN8241:
	.loc    1  223  is_stmt 1
        vmovupd   %ymm0, (%rdi,%r8,8)                           #223.5
..LN8242:
	.loc    1  221  is_stmt 1
        addq      $4, %r8                                       #221.3
..LN8243:
        cmpq      %rax, %r8                                     #221.3
..LN8244:
        jb        ..B4.55       # Prob 82%                      #221.3
..LN8245:
                                # LOE rax rdx rbx rsi rdi r8 ecx r12d r13d r14d r15d ymm0
..B4.57:                        # Preds ..B4.55 ..B4.132
..LN8246:
        cmpq      %rdx, %rax                                    #221.3
..LN8247:
        jae       ..B4.67       # Prob 9%                       #221.3
..LN8248:
                                # LOE rax rdx rbx ecx r12d r13d r14d r15d
..B4.58:                        # Preds ..B4.57
..LN8249:
	.loc    1  222  is_stmt 1
        movslq    %ecx, %rcx                                    #222.5
..LN8250:
        movq      $0x3fe0000000000000, %rdi                     #222.17
..LN8251:
	.loc    1  223  is_stmt 1
        movq      24(%rbp), %rsi                                #223.5
..LN8252:
	.loc    1  222  is_stmt 1
        movq      16(%rbp), %r8                                 #222.5
..LN8253:
	.loc    1  223  is_stmt 1
        lea       (%rsi,%rcx,8), %rsi                           #223.5
..LN8254:
	.loc    1  222  is_stmt 1
        lea       (%r8,%rcx,8), %rcx                            #222.5
..LN8255:
                                # LOE rax rdx rcx rbx rsi rdi r12d r13d r14d r15d
..B4.59:                        # Preds ..B4.59 ..B4.58
..L261:         # optimization report
                # MULTIVERSIONED FOR DATA DEPENDENCE, VER 1
                # REMAINDER LOOP FOR VECTORIZATION
                # VECTORIZATION SPEEDUP COEFFECIENT 1.849609
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 1.625000
..LN8256:
        movq      %rdi, (%rcx,%rax,8)                           #222.5
..LN8257:
	.loc    1  223  is_stmt 1
        movq      %rdi, (%rsi,%rax,8)                           #223.5
..LN8258:
	.loc    1  221  is_stmt 1
        incq      %rax                                          #221.3
..LN8259:
        cmpq      %rdx, %rax                                    #221.3
..LN8260:
        jb        ..B4.59       # Prob 82%                      #221.3
..LN8261:
        jmp       ..B4.67       # Prob 100%                     #221.3
..LN8262:
                                # LOE rax rdx rcx rbx rsi rdi r12d r13d r14d r15d
..B4.61:                        # Preds ..B4.35 ..B4.38 ..B4.39
..LN8263:
        movl      %r15d, %eax                                   #221.3
..LN8264:
        movl      $1, %esi                                      #221.3
..LN8265:
        shrl      $31, %eax                                     #221.3
..LN8266:
        xorl      %ecx, %ecx                                    #221.3
..LN8267:
        lea       1(%r13,%rax), %edx                            #221.3
..LN8268:
        sarl      $1, %edx                                      #221.3
..LN8269:
        testl     %edx, %edx                                    #221.3
..LN8270:
        jbe       ..B4.65       # Prob 9%                       #221.3
..LN8271:
                                # LOE rbx edx ecx esi r12d r13d r14d r15d
..B4.62:                        # Preds ..B4.61
..LN8272:
	.loc    1  222  is_stmt 1
        movq      24(%rbp), %rdi                                #222.17
..LN8273:
        movq      $0x3fe0000000000000, %rax                     #222.17
..LN8274:
        movq      16(%rbp), %r8                                 #222.17
..LN8275:
                                # LOE rax rbx rdi r8 edx ecx r12d r13d r14d r15d
..B4.63:                        # Preds ..B4.63 ..B4.62
..L262:         # optimization report
                # MULTIVERSIONED FOR DATA DEPENDENCE, VER 2
                # LOOP WAS UNROLLED BY 2
                # %s was not vectorized: non-vectorizable loop instance from multiversioning
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
..LN8276:
        lea       (%rcx,%rcx), %esi                             #222.5
..LN8277:
        movslq    %esi, %rsi                                    #222.5
..LN8278:
	.loc    1  221  is_stmt 1
        incl      %ecx                                          #221.3
..LN8279:
	.loc    1  222  is_stmt 1
        movq      %rax, (%r8,%rsi,8)                            #222.5
..LN8280:
	.loc    1  223  is_stmt 1
        movq      %rax, (%rdi,%rsi,8)                           #223.5
..LN8281:
	.loc    1  222  is_stmt 1
        movq      %rax, 8(%r8,%rsi,8)                           #222.5
..LN8282:
	.loc    1  223  is_stmt 1
        movq      %rax, 8(%rdi,%rsi,8)                          #223.5
..LN8283:
	.loc    1  221  is_stmt 1
        cmpl      %edx, %ecx                                    #221.3
..LN8284:
        jb        ..B4.63       # Prob 63%                      #221.3
..LN8285:
                                # LOE rax rbx rdi r8 edx ecx r12d r13d r14d r15d
..B4.64:                        # Preds ..B4.63
..LN8286:
	.loc    1  222  is_stmt 1
        lea       1(%rcx,%rcx), %esi                            #222.5
..LN8287:
                                # LOE rbx esi r12d r13d r14d r15d
..B4.65:                        # Preds ..B4.64 ..B4.61
..LN8288:
	.loc    1  221  is_stmt 1
        lea       -1(%rsi), %eax                                #221.3
..LN8289:
        cmpl      %eax, %r15d                                   #221.3
..LN8290:
        jbe       ..B4.67       # Prob 9%                       #221.3
..LN8291:
                                # LOE rbx esi r12d r13d r14d r15d
..B4.66:                        # Preds ..B4.65
..L263:         # optimization report
                # REMAINDER LOOP
                # MULTIVERSIONED FOR DATA DEPENDENCE, VER 2
                # %s was not vectorized: non-vectorizable loop instance from multiversioning
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
..LN8292:
	.loc    1  222  is_stmt 1
        movq      $0x3fe0000000000000, %rdx                     #222.17
..LN8293:
        movslq    %esi, %rsi                                    #222.5
..LN8294:
        movq      16(%rbp), %rax                                #222.5
..LN8295:
	.loc    1  223  is_stmt 1
        movq      24(%rbp), %rcx                                #223.5
..LN8296:
	.loc    1  222  is_stmt 1
        movq      %rdx, -8(%rax,%rsi,8)                         #222.5
..LN8297:
	.loc    1  223  is_stmt 1
        movq      %rdx, -8(%rcx,%rsi,8)                         #223.5
..LN8298:
                                # LOE rbx r12d r13d r14d r15d
..B4.67:                        # Preds ..B4.59 ..B4.34 ..B4.52 ..B4.57 ..B4.65
                                #       ..B4.66
..LN8299:
	.loc    1  226  is_stmt 1
        vzeroupper                                              #226.18
..LN8300:
        lea       (%r14,%r14), %eax                             #226.18
..LN8301:
        movslq    %eax, %rax                                    #226.18
..LN8302:
        lea       32(,%rax,8), %rdi                             #226.18
..LN8303:
#       malloc(size_t)
        call      malloc                                        #226.18
..LN8304:
                                # LOE rax rbx r12d r13d r14d r15d
..B4.138:                       # Preds ..B4.67
..LN8305:
        movq      %rax, 392(%rsp)                               #226.18
..LN8306:
                                # LOE rbx r12d r13d r14d r15d
..B4.68:                        # Preds ..B4.138
..LN8307:
	.loc    1  227  is_stmt 1
        lea       (%r13,%r13), %eax                             #227.18
..LN8308:
        movslq    %eax, %rax                                    #227.18
..LN8309:
        lea       32(,%rax,8), %rdi                             #227.18
..LN8310:
#       malloc(size_t)
        call      malloc                                        #227.18
..LN8311:
                                # LOE rax rbx r12d r13d r14d r15d
..B4.139:                       # Preds ..B4.68
..LN8312:
        movq      %rax, %r8                                     #227.18
..LN8313:
                                # LOE rbx r8 r12d r13d r14d r15d
..B4.69:                        # Preds ..B4.139
..LN8314:
	.loc    1  207  is_stmt 1
        movl      48(%rbp), %r9d                                #207.1
..LN8315:
	.loc    1  232  is_stmt 1
        movl      $1, %ecx                                      #232.5
..LN8316:
        xorl      %esi, %esi                                    #232.5
..LN8317:
        testl     %r9d, %r9d                                    #232.5
..LN8318:
	.loc    1  214  is_stmt 1
        movq      288(%rsp), %rax                               #214.14
..LN8319:
	.loc    1  232  is_stmt 1
        cmovne    %rcx, %rsi                                    #232.5
..LN8320:
	.loc    1  236  is_stmt 1
        cmpl      $0, 56(%rbp)                                  #236.5
..LN8321:
	.loc    1  214  is_stmt 1
        lea       1(%rax), %rcx                                 #214.14
..LN8322:
	.loc    1  207  is_stmt 1
        movl      64(%rbp), %edx                                #207.1
..LN8323:
	.loc    1  236  is_stmt 1
        cmovne    %rax, %rcx                                    #236.5
..LN8324:
	.loc    1  240  is_stmt 1
        movl      $1, %eax                                      #240.5
..LN8325:
        testl     %edx, %edx                                    #240.5
..LN8326:
        cmove     %edx, %eax                                    #240.5
..LN8327:
	.loc    1  244  is_stmt 1
        movl      %r15d, %edx                                   #244.5
..LN8328:
        cmpl      $0, 72(%rbp)                                  #244.5
..LN8329:
        cmovne    %r13d, %edx                                   #244.5
..LN8330:
	.loc    1  247  is_stmt 1
        testl     %r9d, %r9d                                    #247.6
..LN8331:
        je        ..B4.83       # Prob 50%                      #247.6
..LN8332:
                                # LOE rcx rbx rsi r8 eax edx r12d r13d r14d r15d
..B4.70:                        # Preds ..B4.69
..LN8333:
	.loc    1  249  is_stmt 1
        movl      %eax, 48(%rsp)                                #249.9
..LN8334:
        lea       (%rax,%rax), %r9d                             #249.9
..LN8335:
        movl      %eax, (%rsp)                                  #249.9
..LN8336:
	.loc    1  227  is_stmt 1
        lea       (%r8,%r9,8), %rdi                             #227.18
..LN8337:
	.loc    1  249  is_stmt 1
        cmpl      %edx, %eax                                    #249.22
..LN8338:
        jg        ..B4.77       # Prob 15%                      #249.22
..LN8339:
                                # LOE rax rcx rbx rsi rdi r8 eax edx r12d r13d r14d r15d al ah
..B4.71:                        # Preds ..B4.70
..LN8340:
        movl      %eax, %r9d                                    #249.9
..LN8341:
	.loc    1  251  is_stmt 1
        lea       2(%r14), %r10d                                #251.26
..LN8342:
	.loc    1  249  is_stmt 1
        imull     %r10d, %r9d                                   #249.9
..LN8343:
        movslq    %r9d, %r9                                     #249.9
..LN8344:
        movslq    %r10d, %r10                                   #249.28
..LN8345:
        movl      %r15d, 32(%rsp)                               #249.28
..LN8346:
        movl      %r12d, 16(%rsp)                               #249.28
..LN8347:
        movq      %r10, 64(%rsp)                                #249.28
..LN8348:
        movl      %edx, 232(%rsp)                               #249.28
..LN8349:
        movl      %eax, 56(%rsp)                                #249.28
..LN8350:
        movq      %rcx, 384(%rsp)                               #249.28
..LN8351:
        movq      %rsi, 8(%rsp)                                 #249.28
..LN8352:
        movq      %r8, 336(%rsp)                                #249.28
..LN8353:
        movl      %r14d, 40(%rsp)                               #249.28
..LN8354:
        movq      %r9, %r14                                     #249.28
..LN8355:
        movl      %r13d, 24(%rsp)                               #249.28
..LN8356:
        movq      %rdi, %r13                                    #249.28
..LN8357:
        movl      48(%rsp), %r12d                               #249.28
..LN8358:
        movq      376(%rsp), %r15                               #249.28
..LN8359:
                                # LOE rbx r13 r14 r15 r12d
..B4.72:                        # Preds ..B4.75 ..B4.71
..L264:         # optimization report
                # %s was not vectorized: vector dependence prevents vectorization%s
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
..LN8360:
	.loc    1  325  is_stmt 1
        lea       360(%rsp), %rsi                               #325.3
..LN8361:
	.loc    1  251  is_stmt 1
        movq      (%r15,%r14,8), %rax                           #251.15
..LN8362:
	.loc    1  325  is_stmt 1
        movl      $1, %edi                                      #325.3
..LN8363:
	.loc    1  251  is_stmt 1
        movq      %rax, (%rsi)                                  #251.7
..LN8364:
	.loc    1  325  is_stmt 1
        lea       368(%rsp), %rdx                               #325.3
..LN8365:
	.loc    1  251  is_stmt 1
        movq      (%rbx,%r14,8), %r10                           #251.43
..LN8366:
	.loc    1  325  is_stmt 1
        lea       72(%rsp), %rcx                                #325.3
..LN8367:
	.loc    1  252  is_stmt 1
        movq      8(%rbx,%r14,8), %rax                          #252.43
..LN8368:
	.loc    1  325  is_stmt 1
        lea       80(%rsp), %r8                                 #325.3
..LN8369:
	.loc    1  252  is_stmt 1
        movq      8(%r15,%r14,8), %r11                          #252.15
..LN8370:
	.loc    1  325  is_stmt 1
        lea       88(%rsp), %r9                                 #325.3
..LN8371:
	.loc    1  251  is_stmt 1
        movq      %r10, (%rdx)                                  #251.35
..LN8372:
	.loc    1  252  is_stmt 1
        movq      %r11, -24(%rdx)                               #252.7
..LN8373:
        movq      %rax, -16(%rdx)                               #252.35
..___tag_value_get_edge.265:
..LN8374:
	.loc    1  325  is_stmt 1
#       latlon2xyz(int, const double *, const double *, double *, double *, double *)
        call      latlon2xyz                                    #325.3
..___tag_value_get_edge.266:
..LN8375:
                                # LOE rbx r13 r14 r15 r12d
..B4.73:                        # Preds ..B4.72
..LN8376:
	.loc    1  326  is_stmt 1
        movl      $1, %edi                                      #326.3
..LN8377:
        lea       344(%rsp), %rsi                               #326.3
..LN8378:
        lea       352(%rsp), %rdx                               #326.3
..LN8379:
        lea       96(%rsp), %rcx                                #326.3
..LN8380:
        lea       104(%rsp), %r8                                #326.3
..LN8381:
        lea       112(%rsp), %r9                                #326.3
..___tag_value_get_edge.267:
..LN8382:
#       latlon2xyz(int, const double *, const double *, double *, double *, double *)
        call      latlon2xyz                                    #326.3
..___tag_value_get_edge.268:
..LN8383:
                                # LOE rbx r13 r14 r15 r12d
..B4.74:                        # Preds ..B4.73
..LN8384:
	.loc    1  327  is_stmt 1
        vmovsd    88(%rsp), %xmm2                               #327.16
..LN8385:
	.loc    1  328  is_stmt 1
        lea       8(%r13), %r9                                  #328.3
..LN8386:
	.loc    1  327  is_stmt 1
        vmovsd    80(%rsp), %xmm1                               #327.16
..LN8387:
	.loc    1  328  is_stmt 1
        lea       120(%rsp), %rsi                               #328.3
..LN8388:
	.loc    1  327  is_stmt 1
        vmovsd    -48(%rsi), %xmm0                              #327.16
..LN8389:
	.loc    1  328  is_stmt 1
        lea       128(%rsp), %rdx                               #328.3
..LN8390:
        movl      $1, %edi                                      #328.3
..LN8391:
        lea       136(%rsp), %rcx                               #328.3
..LN8392:
        movq      %r13, %r8                                     #328.3
..LN8393:
	.loc    1  338  is_stmt 1
        vaddsd    -16(%rdx), %xmm2, %xmm8                       #338.18
..LN8394:
	.loc    1  337  is_stmt 1
        vaddsd    -24(%rdx), %xmm1, %xmm6                       #337.18
..LN8395:
	.loc    1  336  is_stmt 1
        vaddsd    -32(%rdx), %xmm0, %xmm4                       #336.18
..LN8396:
	.loc    1  339  is_stmt 1
        vmulsd    %xmm8, %xmm8, %xmm3                           #339.43
..LN8397:
        vfmadd231sd %xmm6, %xmm6, %xmm3                         #339.8
..LN8398:
        vfmadd231sd %xmm4, %xmm4, %xmm3                         #339.8
..LN8399:
        vsqrtsd   %xmm3, %xmm3, %xmm3                           #339.8
..LN8400:
	.loc    1  340  is_stmt 1
        vdivsd    %xmm3, %xmm4, %xmm5                           #340.3
..LN8401:
	.loc    1  341  is_stmt 1
        vdivsd    %xmm3, %xmm6, %xmm7                           #341.3
..LN8402:
	.loc    1  342  is_stmt 1
        vdivsd    %xmm3, %xmm8, %xmm9                           #342.3
..LN8403:
	.loc    1  327  is_stmt 1
        vmovsd    %xmm5, -8(%rdx)                               #327.24
..LN8404:
        vmovsd    %xmm7, (%rdx)                                 #327.24
..LN8405:
        vmovsd    %xmm9, 8(%rdx)                                #327.24
..___tag_value_get_edge.269:
..LN8406:
	.loc    1  328  is_stmt 1
#       xyz2latlon(int, const double *, const double *, const double *, double *, double *)
        call      xyz2latlon                                    #328.3
..___tag_value_get_edge.270:
..LN8407:
                                # LOE rbx r13 r14 r15 r12d
..B4.75:                        # Preds ..B4.74
..LN8408:
	.loc    1  249  is_stmt 1
        incl      %r12d                                         #249.28
..LN8409:
        addq      $16, %r13                                     #249.28
..LN8410:
        addq      64(%rsp), %r14                                #249.28
..LN8411:
        cmpl      232(%rsp), %r12d                              #249.22
..LN8412:
        jle       ..B4.72       # Prob 82%                      #249.22
..LN8413:
                                # LOE rbx r13 r14 r15 r12d
..B4.76:                        # Preds ..B4.75
..LN8414:
        movl      232(%rsp), %edx                               #
..LN8415:
        movl      56(%rsp), %eax                                #
..LN8416:
        movq      384(%rsp), %rcx                               #
..LN8417:
        movq      8(%rsp), %rsi                                 #
..LN8418:
        movq      336(%rsp), %r8                                #
..LN8419:
        movl      32(%rsp), %r15d                               #
..LN8420:
        movl      16(%rsp), %r12d                               #
..LN8421:
        movl      40(%rsp), %r14d                               #
..LN8422:
        movl      24(%rsp), %r13d                               #
..LN8423:
                                # LOE rcx rbx rsi r8 eax edx r12d r13d r14d r15d
..B4.77:                        # Preds ..B4.70 ..B4.76
..LN8424:
	.loc    1  256  is_stmt 1
        movl      %r12d, %edi                                   #256.9
..LN8425:
        imull     %eax, %edi                                    #256.9
..LN8426:
        movl      %eax, %r9d                                    #256.9
..LN8427:
        movslq    %edi, %rdi                                    #256.9
..LN8428:
        cmpl      %edx, %eax                                    #256.21
..LN8429:
        jge       ..B4.83       # Prob 10%                      #256.21
..LN8430:
                                # LOE rcx rbx rsi rdi r8 r9 eax edx r12d r13d r14d r15d
..B4.78:                        # Preds ..B4.77
..LN8431:
        movl      %r14d, 40(%rsp)                               #
..LN8432:
        movl      %edx, 232(%rsp)                               #
..LN8433:
        movl      %eax, 56(%rsp)                                #
..LN8434:
        movq      %rcx, 384(%rsp)                               #
..LN8435:
        movq      %rsi, 8(%rsp)                                 #
..LN8436:
        movl      %r15d, 32(%rsp)                               #
..LN8437:
        movl      %r12d, 16(%rsp)                               #
..LN8438:
        movq      %r9, %r12                                     #
..LN8439:
        movl      %r13d, 24(%rsp)                               #
..LN8440:
        movq      %r8, %r13                                     #
..LN8441:
        movq      %rbx, 48(%rsp)                                #
..LN8442:
        movq      %rdi, %rbx                                    #
..LN8443:
        movl      (%rsp), %r14d                                 #
..LN8444:
                                # LOE rbx r12 r13 r14d
..B4.79:                        # Preds ..B4.81 ..B4.78
..L271:         # optimization report
                # %s was not vectorized: vector dependence prevents vectorization%s
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
..LN8445:
	.loc    1  259  is_stmt 1
        lea       (%r14,%r14), %r11d                            #259.39
..LN8446:
        movslq    %r11d, %r11                                   #259.34
..LN8447:
        lea       360(%rsp), %rsi                               #259.12
..LN8448:
	.loc    1  257  is_stmt 1
        movq      40(%rsi), %rax                                #257.15
..LN8449:
	.loc    1  258  is_stmt 1
        movq      48(%rsi), %rcx                                #258.15
..LN8450:
	.loc    1  257  is_stmt 1
        movq      (%rax,%rbx,8), %rdx                           #257.15
..LN8451:
	.loc    1  259  is_stmt 1
        lea       (%r13,%r11,8), %r15                           #259.34
..LN8452:
	.loc    1  258  is_stmt 1
        movq      (%rcx,%rbx,8), %r10                           #258.15
..LN8453:
	.loc    1  259  is_stmt 1
        movq      %r15, %rdi                                    #259.12
..LN8454:
	.loc    1  257  is_stmt 1
        movq      %rdx, (%rsi)                                  #257.7
..LN8455:
	.loc    1  258  is_stmt 1
        movq      %r10, 8(%rsi)                                 #258.7
..___tag_value_get_edge.272:
..LN8456:
	.loc    1  259  is_stmt 1
#       great_circle_distance(double *, double *)
        call      great_circle_distance                         #259.12
..___tag_value_get_edge.273:
..LN8457:
                                # LOE rbx r12 r13 r15 r14d xmm0
..B4.140:                       # Preds ..B4.79
..LN8458:
        vmovsd    %xmm0, (%rsp)                                 #259.12
..LN8459:
                                # LOE rbx r12 r13 r15 r14d
..B4.80:                        # Preds ..B4.140
..LN8460:
	.loc    1  260  is_stmt 1
        addq      $16, %r15                                     #260.12
..LN8461:
        lea       360(%rsp), %rsi                               #260.12
..LN8462:
        movq      %r15, %rdi                                    #260.12
..___tag_value_get_edge.274:
..LN8463:
#       great_circle_distance(double *, double *)
        call      great_circle_distance                         #260.12
..___tag_value_get_edge.275:
..LN8464:
                                # LOE rbx r12 r13 r14d xmm0
..B4.141:                       # Preds ..B4.80
..LN8465:
        vmovapd   %xmm0, %xmm1                                  #260.12
..LN8466:
                                # LOE rbx r12 r13 r14d xmm1
..B4.81:                        # Preds ..B4.141
..LN8467:
	.loc    1  261  is_stmt 1
        movq      16(%rbp), %rax                                #261.7
..LN8468:
	.loc    1  256  is_stmt 1
        incl      %r14d                                         #256.27
..LN8469:
        addq      224(%rsp), %rbx                               #256.27
..LN8470:
	.loc    1  261  is_stmt 1
        vaddsd    (%rsp), %xmm1, %xmm0                          #261.26
..LN8471:
        vdivsd    %xmm0, %xmm1, %xmm1                           #261.26
..LN8472:
        vmovsd    %xmm1, (%rax,%r12,8)                          #261.7
..LN8473:
	.loc    1  256  is_stmt 1
        incq      %r12                                          #256.27
..LN8474:
        cmpl      232(%rsp), %r14d                              #256.21
..LN8475:
        jl        ..B4.79       # Prob 82%                      #256.21
..LN8476:
                                # LOE rbx r12 r13 r14d
..B4.82:                        # Preds ..B4.81
..LN8477:
        movl      232(%rsp), %edx                               #
..LN8478:
        movq      %r13, %r8                                     #
..LN8479:
        movl      56(%rsp), %eax                                #
..LN8480:
        movq      384(%rsp), %rcx                               #
..LN8481:
        movq      8(%rsp), %rsi                                 #
..LN8482:
        movl      32(%rsp), %r15d                               #
..LN8483:
        movl      16(%rsp), %r12d                               #
..LN8484:
        movl      40(%rsp), %r14d                               #
..LN8485:
        movl      24(%rsp), %r13d                               #
..LN8486:
        movq      48(%rsp), %rbx                                #
..LN8487:
                                # LOE rcx rbx rsi r8 eax edx r12d r13d r14d r15d
..B4.83:                        # Preds ..B4.77 ..B4.82 ..B4.69
..LN8488:
	.loc    1  265  is_stmt 1
        cmpl      $0, 56(%rbp)                                  #265.6
..LN8489:
        je        ..B4.97       # Prob 50%                      #265.6
..LN8490:
                                # LOE rcx rbx rsi r8 eax edx r12d r13d r14d r15d
..B4.84:                        # Preds ..B4.83
..LN8491:
	.loc    1  267  is_stmt 1
        movl      %eax, 64(%rsp)                                #267.9
..LN8492:
        lea       (%rax,%rax), %r9d                             #267.9
..LN8493:
	.loc    1  227  is_stmt 1
        lea       (%r8,%r9,8), %r9                              #227.18
..LN8494:
	.loc    1  267  is_stmt 1
        cmpl      %edx, %eax                                    #267.22
..LN8495:
        jg        ..B4.91       # Prob 15%                      #267.22
..LN8496:
                                # LOE rax rcx rbx rsi r8 r9 eax edx r12d r13d r14d r15d al ah
..B4.85:                        # Preds ..B4.84
..LN8497:
        movl      %eax, %r10d                                   #267.9
..LN8498:
	.loc    1  269  is_stmt 1
        lea       2(%r14), %r11d                                #269.26
..LN8499:
	.loc    1  267  is_stmt 1
        imull     %r11d, %r10d                                  #267.9
..LN8500:
        movslq    %r10d, %r10                                   #267.9
..LN8501:
        movslq    %r11d, %r11                                   #267.28
..LN8502:
        movq      %r10, (%rsp)                                  #267.9
..LN8503:
        movq      %r11, 216(%rsp)                               #267.28
..LN8504:
	.loc    1  269  is_stmt 1
        movq      288(%rsp), %r11                               #269.43
..LN8505:
        movq      376(%rsp), %r10                               #269.15
..LN8506:
        movl      %r15d, 32(%rsp)                               #269.15
..LN8507:
        movl      %r12d, 16(%rsp)                               #269.15
..LN8508:
        lea       (%rbx,%r11,8), %rdi                           #269.43
..LN8509:
        movl      %edx, 232(%rsp)                               #269.15
..LN8510:
        lea       (%r10,%r11,8), %r10                           #269.15
..LN8511:
        movl      %eax, 56(%rsp)                                #269.15
..LN8512:
        movq      %rcx, 384(%rsp)                               #269.15
..LN8513:
        movq      %rsi, 8(%rsp)                                 #269.15
..LN8514:
        movq      %r8, 336(%rsp)                                #269.15
..LN8515:
        movl      %r14d, 40(%rsp)                               #269.15
..LN8516:
        movq      %r9, %r14                                     #269.15
..LN8517:
        movl      %r13d, 24(%rsp)                               #269.15
..LN8518:
        movq      %rdi, %r13                                    #269.15
..LN8519:
        movq      %rbx, 48(%rsp)                                #269.15
..LN8520:
        movq      %r10, %rbx                                    #269.15
..LN8521:
        movq      (%rsp), %r12                                  #269.15
..LN8522:
        movl      64(%rsp), %r15d                               #269.15
..LN8523:
                                # LOE rbx r12 r13 r14 r15d
..B4.86:                        # Preds ..B4.89 ..B4.85
..L276:         # optimization report
                # %s was not vectorized: vector dependence prevents vectorization%s
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
..LN8524:
	.loc    1  325  is_stmt 1
        lea       360(%rsp), %rsi                               #325.3
..LN8525:
	.loc    1  269  is_stmt 1
        movq      (%rbx,%r12,8), %rax                           #269.15
..LN8526:
	.loc    1  325  is_stmt 1
        movl      $1, %edi                                      #325.3
..LN8527:
	.loc    1  269  is_stmt 1
        movq      %rax, (%rsi)                                  #269.7
..LN8528:
	.loc    1  325  is_stmt 1
        lea       368(%rsp), %rdx                               #325.3
..LN8529:
	.loc    1  270  is_stmt 1
        movq      8(%rbx,%r12,8), %rax                          #270.15
..LN8530:
	.loc    1  325  is_stmt 1
        lea       144(%rsp), %rcx                               #325.3
..LN8531:
	.loc    1  270  is_stmt 1
        movq      %rax, -24(%rdx)                               #270.7
..LN8532:
	.loc    1  325  is_stmt 1
        lea       152(%rsp), %r8                                #325.3
..LN8533:
	.loc    1  269  is_stmt 1
        movq      (%r13,%r12,8), %r11                           #269.43
..LN8534:
	.loc    1  325  is_stmt 1
        lea       160(%rsp), %r9                                #325.3
..LN8535:
	.loc    1  270  is_stmt 1
        movq      8(%r13,%r12,8), %rax                          #270.43
..LN8536:
	.loc    1  269  is_stmt 1
        movq      %r11, (%rdx)                                  #269.35
..LN8537:
	.loc    1  270  is_stmt 1
        movq      %rax, -16(%rdx)                               #270.35
..___tag_value_get_edge.277:
..LN8538:
	.loc    1  325  is_stmt 1
#       latlon2xyz(int, const double *, const double *, double *, double *, double *)
        call      latlon2xyz                                    #325.3
..___tag_value_get_edge.278:
..LN8539:
                                # LOE rbx r12 r13 r14 r15d
..B4.87:                        # Preds ..B4.86
..LN8540:
	.loc    1  326  is_stmt 1
        movl      $1, %edi                                      #326.3
..LN8541:
        lea       344(%rsp), %rsi                               #326.3
..LN8542:
        lea       352(%rsp), %rdx                               #326.3
..LN8543:
        lea       168(%rsp), %rcx                               #326.3
..LN8544:
        lea       176(%rsp), %r8                                #326.3
..LN8545:
        lea       184(%rsp), %r9                                #326.3
..___tag_value_get_edge.279:
..LN8546:
#       latlon2xyz(int, const double *, const double *, double *, double *, double *)
        call      latlon2xyz                                    #326.3
..___tag_value_get_edge.280:
..LN8547:
                                # LOE rbx r12 r13 r14 r15d
..B4.88:                        # Preds ..B4.87
..LN8548:
	.loc    1  327  is_stmt 1
        vmovsd    160(%rsp), %xmm2                              #327.16
..LN8549:
	.loc    1  328  is_stmt 1
        lea       8(%r14), %r9                                  #328.3
..LN8550:
	.loc    1  327  is_stmt 1
        vmovsd    152(%rsp), %xmm1                              #327.16
..LN8551:
	.loc    1  328  is_stmt 1
        lea       192(%rsp), %rsi                               #328.3
..LN8552:
	.loc    1  327  is_stmt 1
        vmovsd    -48(%rsi), %xmm0                              #327.16
..LN8553:
	.loc    1  328  is_stmt 1
        lea       200(%rsp), %rdx                               #328.3
..LN8554:
        movl      $1, %edi                                      #328.3
..LN8555:
        lea       208(%rsp), %rcx                               #328.3
..LN8556:
        movq      %r14, %r8                                     #328.3
..LN8557:
	.loc    1  338  is_stmt 1
        vaddsd    -16(%rdx), %xmm2, %xmm8                       #338.18
..LN8558:
	.loc    1  337  is_stmt 1
        vaddsd    -24(%rdx), %xmm1, %xmm6                       #337.18
..LN8559:
	.loc    1  336  is_stmt 1
        vaddsd    -32(%rdx), %xmm0, %xmm4                       #336.18
..LN8560:
	.loc    1  339  is_stmt 1
        vmulsd    %xmm8, %xmm8, %xmm3                           #339.43
..LN8561:
        vfmadd231sd %xmm6, %xmm6, %xmm3                         #339.8
..LN8562:
        vfmadd231sd %xmm4, %xmm4, %xmm3                         #339.8
..LN8563:
        vsqrtsd   %xmm3, %xmm3, %xmm3                           #339.8
..LN8564:
	.loc    1  340  is_stmt 1
        vdivsd    %xmm3, %xmm4, %xmm5                           #340.3
..LN8565:
	.loc    1  341  is_stmt 1
        vdivsd    %xmm3, %xmm6, %xmm7                           #341.3
..LN8566:
	.loc    1  342  is_stmt 1
        vdivsd    %xmm3, %xmm8, %xmm9                           #342.3
..LN8567:
	.loc    1  327  is_stmt 1
        vmovsd    %xmm5, -8(%rdx)                               #327.24
..LN8568:
        vmovsd    %xmm7, (%rdx)                                 #327.24
..LN8569:
        vmovsd    %xmm9, 8(%rdx)                                #327.24
..___tag_value_get_edge.281:
..LN8570:
	.loc    1  328  is_stmt 1
#       xyz2latlon(int, const double *, const double *, const double *, double *, double *)
        call      xyz2latlon                                    #328.3
..___tag_value_get_edge.282:
..LN8571:
                                # LOE rbx r12 r13 r14 r15d
..B4.89:                        # Preds ..B4.88
..LN8572:
	.loc    1  267  is_stmt 1
        incl      %r15d                                         #267.28
..LN8573:
        addq      $16, %r14                                     #267.28
..LN8574:
        addq      216(%rsp), %r12                               #267.28
..LN8575:
        cmpl      232(%rsp), %r15d                              #267.22
..LN8576:
        jle       ..B4.86       # Prob 82%                      #267.22
..LN8577:
                                # LOE rbx r12 r13 r14 r15d
..B4.90:                        # Preds ..B4.89
..LN8578:
        movl      232(%rsp), %edx                               #
..LN8579:
        movl      56(%rsp), %eax                                #
..LN8580:
        movq      384(%rsp), %rcx                               #
..LN8581:
        movq      8(%rsp), %rsi                                 #
..LN8582:
        movq      336(%rsp), %r8                                #
..LN8583:
        movl      32(%rsp), %r15d                               #
..LN8584:
        movl      16(%rsp), %r12d                               #
..LN8585:
        movl      40(%rsp), %r14d                               #
..LN8586:
        movl      24(%rsp), %r13d                               #
..LN8587:
        movq      48(%rsp), %rbx                                #
..LN8588:
                                # LOE rcx rbx rsi r8 eax edx r12d r13d r14d r15d
..B4.91:                        # Preds ..B4.84 ..B4.90
..LN8589:
	.loc    1  274  is_stmt 1
        movl      %r12d, %edi                                   #274.9
..LN8590:
        imull     %eax, %edi                                    #274.9
..LN8591:
        movl      %eax, %r10d                                   #274.9
..LN8592:
        movslq    %edi, %rdi                                    #274.9
..LN8593:
        cmpl      %edx, %eax                                    #274.21
..LN8594:
        jge       ..B4.97       # Prob 10%                      #274.21
..LN8595:
                                # LOE rcx rbx rsi rdi r8 r10 eax edx r12d r13d r14d r15d
..B4.92:                        # Preds ..B4.91
..LN8596:
	.loc    1  276  is_stmt 1
        movq      408(%rsp), %r11                               #276.15
..LN8597:
        movq      288(%rsp), %r9                                #276.15
..LN8598:
	.loc    1  275  is_stmt 1
        movl      %edx, 232(%rsp)                               #275.15
..LN8599:
        movq      %rcx, 384(%rsp)                               #275.15
..LN8600:
        movq      %rsi, 8(%rsp)                                 #275.15
..LN8601:
	.loc    1  276  is_stmt 1
        lea       (%r11,%r9,8), %r11                            #276.15
..LN8602:
        movq      %r11, 64(%rsp)                                #276.15
..LN8603:
	.loc    1  275  is_stmt 1
        movq      400(%rsp), %r11                               #275.15
..LN8604:
        movl      %r15d, 32(%rsp)                               #275.15
..LN8605:
        movl      %r12d, 16(%rsp)                               #275.15
..LN8606:
        movq      %r8, %r12                                     #275.15
..LN8607:
        movl      %r14d, 40(%rsp)                               #275.15
..LN8608:
        lea       (%r11,%r9,8), %r9                             #275.15
..LN8609:
        movq      %r9, (%rsp)                                   #275.15
..LN8610:
        movq      %r10, %r14                                    #275.15
..LN8611:
        movl      %r13d, 24(%rsp)                               #275.15
..LN8612:
        movl      %eax, %r13d                                   #275.15
..LN8613:
        movq      %rbx, 48(%rsp)                                #275.15
..LN8614:
        movq      %rdi, %rbx                                    #275.15
..LN8615:
                                # LOE rbx r12 r14 r13d
..B4.93:                        # Preds ..B4.95 ..B4.92
..L283:         # optimization report
                # %s was not vectorized: vector dependence prevents vectorization%s
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
..LN8616:
	.loc    1  277  is_stmt 1
        lea       (%r13,%r13), %r15d                            #277.41
..LN8617:
        movslq    %r15d, %r15                                   #277.36
..LN8618:
        lea       360(%rsp), %rsi                               #277.12
..LN8619:
	.loc    1  275  is_stmt 1
        movq      (%rsp), %rdx                                  #275.15
..LN8620:
	.loc    1  276  is_stmt 1
        movq      64(%rsp), %r9                                 #276.15
..LN8621:
	.loc    1  275  is_stmt 1
        movq      (%rdx,%rbx,8), %rcx                           #275.15
..LN8622:
	.loc    1  277  is_stmt 1
        lea       (%r12,%r15,8), %r15                           #277.36
..LN8623:
	.loc    1  276  is_stmt 1
        movq      (%r9,%rbx,8), %r11                            #276.15
..LN8624:
	.loc    1  277  is_stmt 1
        movq      %r15, %rdi                                    #277.12
..LN8625:
	.loc    1  275  is_stmt 1
        movq      %rcx, (%rsi)                                  #275.7
..LN8626:
	.loc    1  276  is_stmt 1
        movq      %r11, 8(%rsi)                                 #276.7
..___tag_value_get_edge.284:
..LN8627:
	.loc    1  277  is_stmt 1
#       great_circle_distance(double *, double *)
        call      great_circle_distance                         #277.12
..___tag_value_get_edge.285:
..LN8628:
                                # LOE rbx r12 r14 r15 r13d xmm0
..B4.142:                       # Preds ..B4.93
..LN8629:
        vmovsd    %xmm0, 56(%rsp)                               #277.12
..LN8630:
                                # LOE rbx r12 r14 r15 r13d
..B4.94:                        # Preds ..B4.142
..LN8631:
	.loc    1  278  is_stmt 1
        addq      $16, %r15                                     #278.12
..LN8632:
        lea       360(%rsp), %rsi                               #278.12
..LN8633:
        movq      %r15, %rdi                                    #278.12
..___tag_value_get_edge.286:
..LN8634:
#       great_circle_distance(double *, double *)
        call      great_circle_distance                         #278.12
..___tag_value_get_edge.287:
..LN8635:
                                # LOE rbx r12 r14 r13d xmm0
..B4.143:                       # Preds ..B4.94
..LN8636:
        vmovapd   %xmm0, %xmm1                                  #278.12
..LN8637:
                                # LOE rbx r12 r14 r13d xmm1
..B4.95:                        # Preds ..B4.143
..LN8638:
	.loc    1  279  is_stmt 1
        movq      24(%rbp), %rdx                                #279.7
..LN8639:
	.loc    1  274  is_stmt 1
        incl      %r13d                                         #274.27
..LN8640:
        addq      224(%rsp), %rbx                               #274.27
..LN8641:
	.loc    1  279  is_stmt 1
        vaddsd    56(%rsp), %xmm1, %xmm0                        #279.26
..LN8642:
        vdivsd    %xmm0, %xmm1, %xmm1                           #279.26
..LN8643:
        vmovsd    %xmm1, (%rdx,%r14,8)                          #279.7
..LN8644:
	.loc    1  274  is_stmt 1
        incq      %r14                                          #274.27
..LN8645:
        cmpl      232(%rsp), %r13d                              #274.21
..LN8646:
        jl        ..B4.93       # Prob 82%                      #274.21
..LN8647:
                                # LOE rbx r12 r14 r13d
..B4.96:                        # Preds ..B4.95
..LN8648:
        movq      384(%rsp), %rcx                               #
..LN8649:
        movq      %r12, %r8                                     #
..LN8650:
        movq      8(%rsp), %rsi                                 #
..LN8651:
        movl      32(%rsp), %r15d                               #
..LN8652:
        movl      16(%rsp), %r12d                               #
..LN8653:
        movl      40(%rsp), %r14d                               #
..LN8654:
        movl      24(%rsp), %r13d                               #
..LN8655:
        movq      48(%rsp), %rbx                                #
..LN8656:
                                # LOE rcx rbx rsi r8 r12d r13d r14d r15d
..B4.97:                        # Preds ..B4.96 ..B4.91 ..B4.83
..LN8657:
	.loc    1  284  is_stmt 1
        cmpl      $0, 64(%rbp)                                  #284.6
..LN8658:
        je        ..B4.111      # Prob 50%                      #284.6
..LN8659:
                                # LOE rcx rbx rsi r8 r12d r13d r14d r15d
..B4.98:                        # Preds ..B4.97
..LN8660:
	.loc    1  286  is_stmt 1
        movq      %rsi, %rdi                                    #286.9
..LN8661:
        movq      %rdi, %r9                                     #286.9
..LN8662:
        cmpq      %rcx, %rsi                                    #286.22
..LN8663:
        jg        ..B4.105      # Prob 15%                      #286.22
..LN8664:
                                # LOE rcx rbx rsi rdi r8 r9 r12d r13d r14d r15d
..B4.99:                        # Preds ..B4.98
..LN8665:
	.loc    1  288  is_stmt 1
        movq      288(%rsp), %r10                               #288.45
..LN8666:
        movq      376(%rsp), %rax                               #288.15
..LN8667:
        movq      %r9, (%rsp)                                   #288.15
..LN8668:
        movq      %rcx, 384(%rsp)                               #288.15
..LN8669:
        lea       (%rbx,%r10,8), %rdx                           #288.45
..LN8670:
        movq      %rsi, 8(%rsp)                                 #288.15
..LN8671:
        lea       (%rax,%r10,8), %rax                           #288.15
..LN8672:
        movq      %r8, 336(%rsp)                                #288.15
..LN8673:
        movl      %r15d, 32(%rsp)                               #288.15
..LN8674:
        movq      %rax, %r15                                    #288.15
..LN8675:
        movl      %r12d, 16(%rsp)                               #288.15
..LN8676:
        movl      %r14d, 40(%rsp)                               #288.15
..LN8677:
        movq      %rdx, %r14                                    #288.15
..LN8678:
        movl      %r13d, 24(%rsp)                               #288.15
..LN8679:
        movq      %rdi, %r13                                    #288.15
..LN8680:
                                # LOE rbx r13 r14 r15
..B4.100:                       # Preds ..B4.103 ..B4.99
..L288:         # optimization report
                # %s was not vectorized: vector dependence prevents vectorization%s
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
..LN8681:
	.loc    1  325  is_stmt 1
        lea       368(%rsp), %rdx                               #325.3
..LN8682:
	.loc    1  288  is_stmt 1
        movq      16(%r15,%r13,8), %rcx                         #288.15
..LN8683:
	.loc    1  325  is_stmt 1
        movl      $1, %edi                                      #325.3
..LN8684:
	.loc    1  288  is_stmt 1
        movq      %rcx, -24(%rdx)                               #288.7
..LN8685:
	.loc    1  325  is_stmt 1
        lea       224(%rsp), %r8                                #325.3
..LN8686:
	.loc    1  288  is_stmt 1
        movq      16(%r14,%r13,8), %rcx                         #288.45
..LN8687:
	.loc    1  325  is_stmt 1
        lea       232(%rsp), %r9                                #325.3
..LN8688:
	.loc    1  288  is_stmt 1
        movq      %rcx, -16(%rdx)                               #288.37
..LN8689:
	.loc    1  289  is_stmt 1
        movl      %r13d, %ecx                                   #289.7
..LN8690:
        addl      %ecx, %ecx                                    #289.36
..LN8691:
        movslq    %ecx, %rcx                                    #289.31
..LN8692:
	.loc    1  287  is_stmt 1
        movq      8(%rdx), %r10                                 #287.15
..LN8693:
	.loc    1  289  is_stmt 1
        movq      24(%rdx), %rsi                                #289.31
..LN8694:
	.loc    1  287  is_stmt 1
        movq      (%rbx,%r13,8), %r12                           #287.45
..LN8695:
        movq      (%r10,%r13,8), %r11                           #287.15
..LN8696:
        movq      %r12, (%rdx)                                  #287.37
..LN8697:
	.loc    1  289  is_stmt 1
        lea       (%rsi,%rcx,8), %r12                           #289.31
..LN8698:
	.loc    1  287  is_stmt 1
        movq      %r11, -8(%rdx)                                #287.7
..LN8699:
	.loc    1  325  is_stmt 1
        lea       360(%rsp), %rsi                               #325.3
..LN8700:
        lea       216(%rsp), %rcx                               #325.3
..___tag_value_get_edge.289:
..LN8701:
#       latlon2xyz(int, const double *, const double *, double *, double *, double *)
        call      latlon2xyz                                    #325.3
..___tag_value_get_edge.290:
..LN8702:
                                # LOE rbx r12 r13 r14 r15
..B4.101:                       # Preds ..B4.100
..LN8703:
	.loc    1  326  is_stmt 1
        movl      $1, %edi                                      #326.3
..LN8704:
        lea       344(%rsp), %rsi                               #326.3
..LN8705:
        lea       352(%rsp), %rdx                               #326.3
..LN8706:
        lea       240(%rsp), %rcx                               #326.3
..LN8707:
        lea       248(%rsp), %r8                                #326.3
..LN8708:
        lea       256(%rsp), %r9                                #326.3
..___tag_value_get_edge.291:
..LN8709:
#       latlon2xyz(int, const double *, const double *, double *, double *, double *)
        call      latlon2xyz                                    #326.3
..___tag_value_get_edge.292:
..LN8710:
                                # LOE rbx r12 r13 r14 r15
..B4.102:                       # Preds ..B4.101
..LN8711:
	.loc    1  327  is_stmt 1
        vmovsd    232(%rsp), %xmm2                              #327.16
..LN8712:
	.loc    1  328  is_stmt 1
        lea       8(%r12), %r9                                  #328.3
..LN8713:
	.loc    1  327  is_stmt 1
        vmovsd    224(%rsp), %xmm1                              #327.16
..LN8714:
	.loc    1  328  is_stmt 1
        lea       264(%rsp), %rsi                               #328.3
..LN8715:
	.loc    1  327  is_stmt 1
        vmovsd    -48(%rsi), %xmm0                              #327.16
..LN8716:
	.loc    1  328  is_stmt 1
        lea       272(%rsp), %rdx                               #328.3
..LN8717:
        movl      $1, %edi                                      #328.3
..LN8718:
        lea       280(%rsp), %rcx                               #328.3
..LN8719:
        movq      %r12, %r8                                     #328.3
..LN8720:
	.loc    1  338  is_stmt 1
        vaddsd    -16(%rdx), %xmm2, %xmm8                       #338.18
..LN8721:
	.loc    1  337  is_stmt 1
        vaddsd    -24(%rdx), %xmm1, %xmm6                       #337.18
..LN8722:
	.loc    1  336  is_stmt 1
        vaddsd    -32(%rdx), %xmm0, %xmm4                       #336.18
..LN8723:
	.loc    1  339  is_stmt 1
        vmulsd    %xmm8, %xmm8, %xmm3                           #339.43
..LN8724:
        vfmadd231sd %xmm6, %xmm6, %xmm3                         #339.8
..LN8725:
        vfmadd231sd %xmm4, %xmm4, %xmm3                         #339.8
..LN8726:
        vsqrtsd   %xmm3, %xmm3, %xmm3                           #339.8
..LN8727:
	.loc    1  340  is_stmt 1
        vdivsd    %xmm3, %xmm4, %xmm5                           #340.3
..LN8728:
	.loc    1  341  is_stmt 1
        vdivsd    %xmm3, %xmm6, %xmm7                           #341.3
..LN8729:
	.loc    1  342  is_stmt 1
        vdivsd    %xmm3, %xmm8, %xmm9                           #342.3
..LN8730:
	.loc    1  327  is_stmt 1
        vmovsd    %xmm5, -8(%rdx)                               #327.24
..LN8731:
        vmovsd    %xmm7, (%rdx)                                 #327.24
..LN8732:
        vmovsd    %xmm9, 8(%rdx)                                #327.24
..___tag_value_get_edge.293:
..LN8733:
	.loc    1  328  is_stmt 1
#       xyz2latlon(int, const double *, const double *, const double *, double *, double *)
        call      xyz2latlon                                    #328.3
..___tag_value_get_edge.294:
..LN8734:
                                # LOE rbx r13 r14 r15
..B4.103:                       # Preds ..B4.102
..LN8735:
	.loc    1  286  is_stmt 1
        incq      %r13                                          #286.28
..LN8736:
        cmpq      384(%rsp), %r13                               #286.22
..LN8737:
        jle       ..B4.100      # Prob 82%                      #286.22
..LN8738:
                                # LOE rbx r13 r14 r15
..B4.104:                       # Preds ..B4.103
..LN8739:
        movq      384(%rsp), %rcx                               #
..LN8740:
        movq      8(%rsp), %rsi                                 #
..LN8741:
        cmpq      %rcx, %rsi                                    #286.22
..LN8742:
        movq      (%rsp), %r9                                   #
..LN8743:
        movq      336(%rsp), %r8                                #
..LN8744:
        movl      32(%rsp), %r15d                               #
..LN8745:
        movl      16(%rsp), %r12d                               #
..LN8746:
        movl      40(%rsp), %r14d                               #
..LN8747:
        movl      24(%rsp), %r13d                               #
..LN8748:
                                # LOE rcx rbx rsi r8 r9 r12d r13d r14d r15d
..B4.105:                       # Preds ..B4.104 ..B4.98
..LN8749:
	.loc    1  291  is_stmt 1
        jge       ..B4.111      # Prob 10%                      #291.21
..LN8750:
                                # LOE rcx rbx rsi r8 r9 r12d r13d r14d r15d
..B4.106:                       # Preds ..B4.105
..LN8751:
        movl      %r12d, 16(%rsp)                               #
..LN8752:
        movl      %r14d, 40(%rsp)                               #
..LN8753:
        movq      %rsi, 8(%rsp)                                 #
..LN8754:
        movq      %r8, 336(%rsp)                                #
..LN8755:
        movl      %r15d, 32(%rsp)                               #
..LN8756:
        movl      %r13d, 24(%rsp)                               #
..LN8757:
        movq      %rcx, %r13                                    #
..LN8758:
        movq      %rbx, 48(%rsp)                                #
..LN8759:
        movq      %r9, %rbx                                     #
..LN8760:
        movq      32(%rbp), %r12                                #
..LN8761:
        movq      408(%rsp), %r14                               #
..LN8762:
                                # LOE rbx r12 r13 r14
..B4.107:                       # Preds ..B4.109 ..B4.106
..L295:         # optimization report
                # %s was not vectorized: vector dependence prevents vectorization%s
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
..LN8763:
	.loc    1  294  is_stmt 1
        movl      %ebx, %r10d                                   #294.12
..LN8764:
        addl      %r10d, %r10d                                  #294.41
..LN8765:
        lea       360(%rsp), %rsi                               #294.12
..LN8766:
        movslq    %r10d, %r10                                   #294.36
..LN8767:
        movq      32(%rsi), %r11                                #294.36
..LN8768:
	.loc    1  292  is_stmt 1
        movq      40(%rsi), %rax                                #292.15
..LN8769:
	.loc    1  293  is_stmt 1
        movq      (%r14,%rbx,8), %r8                            #293.15
..LN8770:
        movq      %r8, 8(%rsi)                                  #293.7
..LN8771:
	.loc    1  294  is_stmt 1
        lea       (%r11,%r10,8), %r15                           #294.36
..LN8772:
	.loc    1  292  is_stmt 1
        movq      (%rax,%rbx,8), %rdx                           #292.15
..LN8773:
	.loc    1  294  is_stmt 1
        movq      %r15, %rdi                                    #294.12
..LN8774:
	.loc    1  292  is_stmt 1
        movq      %rdx, (%rsi)                                  #292.7
..___tag_value_get_edge.296:
..LN8775:
	.loc    1  294  is_stmt 1
#       great_circle_distance(double *, double *)
        call      great_circle_distance                         #294.12
..___tag_value_get_edge.297:
..LN8776:
                                # LOE rbx r12 r13 r14 r15 xmm0
..B4.144:                       # Preds ..B4.107
..LN8777:
        vmovsd    %xmm0, (%rsp)                                 #294.12
..LN8778:
                                # LOE rbx r12 r13 r14 r15
..B4.108:                       # Preds ..B4.144
..LN8779:
	.loc    1  295  is_stmt 1
        addq      $16, %r15                                     #295.12
..LN8780:
        lea       360(%rsp), %rsi                               #295.12
..LN8781:
        movq      %r15, %rdi                                    #295.12
..___tag_value_get_edge.298:
..LN8782:
#       great_circle_distance(double *, double *)
        call      great_circle_distance                         #295.12
..___tag_value_get_edge.299:
..LN8783:
                                # LOE rbx r12 r13 r14 xmm0
..B4.145:                       # Preds ..B4.108
..LN8784:
        vmovapd   %xmm0, %xmm1                                  #295.12
..LN8785:
                                # LOE rbx r12 r13 r14 xmm1
..B4.109:                       # Preds ..B4.145
..LN8786:
	.loc    1  296  is_stmt 1
        vaddsd    (%rsp), %xmm1, %xmm0                          #296.26
..LN8787:
        vdivsd    %xmm0, %xmm1, %xmm1                           #296.26
..LN8788:
        vmovsd    %xmm1, (%r12,%rbx,8)                          #296.7
..LN8789:
	.loc    1  291  is_stmt 1
        incq      %rbx                                          #291.27
..LN8790:
        cmpq      %r13, %rbx                                    #291.21
..LN8791:
        jl        ..B4.107      # Prob 82%                      #291.21
..LN8792:
                                # LOE rbx r12 r13 r14
..B4.110:                       # Preds ..B4.109
..LN8793:
        movq      8(%rsp), %rsi                                 #
..LN8794:
        movq      %r13, %rcx                                    #
..LN8795:
        movq      336(%rsp), %r8                                #
..LN8796:
        movl      32(%rsp), %r15d                               #
..LN8797:
        movl      16(%rsp), %r12d                               #
..LN8798:
        movl      40(%rsp), %r14d                               #
..LN8799:
        movl      24(%rsp), %r13d                               #
..LN8800:
        movq      48(%rsp), %rbx                                #
..LN8801:
                                # LOE rcx rbx rsi r8 r12d r13d r14d r15d
..B4.111:                       # Preds ..B4.110 ..B4.105 ..B4.97
..LN8802:
	.loc    1  300  is_stmt 1
        cmpl      $0, 72(%rbp)                                  #300.6
..LN8803:
        je        ..B4.125      # Prob 50%                      #300.6
..LN8804:
                                # LOE rcx rbx rsi r8 r12d r13d r14d r15d
..B4.112:                       # Preds ..B4.111
..LN8805:
	.loc    1  302  is_stmt 1
        movq      %rsi, %rax                                    #302.9
..LN8806:
        cmpq      %rcx, %rsi                                    #302.22
..LN8807:
        jg        ..B4.119      # Prob 15%                      #302.22
..LN8808:
                                # LOE rax rcx rbx rsi r8 r12d r13d r14d r15d
..B4.113:                       # Preds ..B4.112
..LN8809:
	.loc    1  303  is_stmt 1
        addl      $2, %r14d                                     #303.30
..LN8810:
	.loc    1  304  is_stmt 1
        imull     %r14d, %r15d                                  #304.30
..LN8811:
	.loc    1  303  is_stmt 1
        imull     %r13d, %r14d                                  #303.30
..LN8812:
        movslq    %r14d, %r14                                   #303.15
..LN8813:
	.loc    1  304  is_stmt 1
        movslq    %r15d, %rdi                                   #304.15
..LN8814:
	.loc    1  303  is_stmt 1
        movq      376(%rsp), %r9                                #303.15
..LN8815:
	.loc    1  304  is_stmt 1
        movq      %rcx, 384(%rsp)                               #304.15
..LN8816:
        movq      %rsi, 8(%rsp)                                 #304.15
..LN8817:
	.loc    1  303  is_stmt 1
        lea       (%rbx,%r14,8), %rdx                           #303.45
..LN8818:
	.loc    1  304  is_stmt 1
        movq      %r8, 336(%rsp)                                #304.15
..LN8819:
        lea       (%rbx,%rdi,8), %r15                           #304.45
..LN8820:
        movl      %r12d, 16(%rsp)                               #304.15
..LN8821:
        lea       (%r9,%rdi,8), %rbx                            #304.15
..LN8822:
        movq      %rbx, (%rsp)                                  #304.15
..LN8823:
	.loc    1  303  is_stmt 1
        lea       (%r9,%r14,8), %r14                            #303.15
..LN8824:
	.loc    1  304  is_stmt 1
        movl      %r13d, 24(%rsp)                               #304.15
..LN8825:
        movq      %rax, %r12                                    #304.15
..LN8826:
        movq      %rdx, %r13                                    #304.15
..LN8827:
                                # LOE r12 r13 r14 r15
..B4.114:                       # Preds ..B4.117 ..B4.113
..L300:         # optimization report
                # %s was not vectorized: vector dependence prevents vectorization%s
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
..LN8828:
	.loc    1  325  is_stmt 1
        lea       360(%rsp), %rsi                               #325.3
..LN8829:
	.loc    1  304  is_stmt 1
        movq      (%rsp), %r11                                  #304.15
..LN8830:
	.loc    1  325  is_stmt 1
        movl      $1, %edi                                      #325.3
..LN8831:
	.loc    1  303  is_stmt 1
        movq      (%r14,%r12,8), %rbx                           #303.15
..LN8832:
	.loc    1  325  is_stmt 1
        lea       368(%rsp), %rdx                               #325.3
..LN8833:
	.loc    1  303  is_stmt 1
        movq      %rbx, -8(%rdx)                                #303.7
..LN8834:
	.loc    1  325  is_stmt 1
        lea       40(%rsp), %r8                                 #325.3
..LN8835:
	.loc    1  304  is_stmt 1
        movq      (%r11,%r12,8), %rcx                           #304.15
..LN8836:
	.loc    1  325  is_stmt 1
        lea       48(%rsp), %r9                                 #325.3
..LN8837:
	.loc    1  304  is_stmt 1
        movq      %rcx, -24(%rdx)                               #304.7
..LN8838:
        movq      (%r15,%r12,8), %rcx                           #304.45
..LN8839:
        movq      %rcx, -16(%rdx)                               #304.37
..LN8840:
	.loc    1  305  is_stmt 1
        movl      %r12d, %ecx                                   #305.7
..LN8841:
        addl      %ecx, %ecx                                    #305.36
..LN8842:
        movslq    %ecx, %rcx                                    #305.31
..LN8843:
        movq      24(%rdx), %rbx                                #305.31
..LN8844:
	.loc    1  303  is_stmt 1
        movq      (%r13,%r12,8), %r10                           #303.45
..LN8845:
        movq      %r10, (%rdx)                                  #303.37
..LN8846:
	.loc    1  305  is_stmt 1
        lea       (%rbx,%rcx,8), %rbx                           #305.31
..LN8847:
	.loc    1  325  is_stmt 1
        lea       32(%rsp), %rcx                                #325.3
..___tag_value_get_edge.301:
..LN8848:
#       latlon2xyz(int, const double *, const double *, double *, double *, double *)
        call      latlon2xyz                                    #325.3
..___tag_value_get_edge.302:
..LN8849:
                                # LOE rbx r12 r13 r14 r15
..B4.115:                       # Preds ..B4.114
..LN8850:
	.loc    1  326  is_stmt 1
        movl      $1, %edi                                      #326.3
..LN8851:
        lea       344(%rsp), %rsi                               #326.3
..LN8852:
        lea       352(%rsp), %rdx                               #326.3
..LN8853:
        lea       288(%rsp), %rcx                               #326.3
..LN8854:
        lea       296(%rsp), %r8                                #326.3
..LN8855:
        lea       304(%rsp), %r9                                #326.3
..___tag_value_get_edge.303:
..LN8856:
#       latlon2xyz(int, const double *, const double *, double *, double *, double *)
        call      latlon2xyz                                    #326.3
..___tag_value_get_edge.304:
..LN8857:
                                # LOE rbx r12 r13 r14 r15
..B4.116:                       # Preds ..B4.115
..LN8858:
	.loc    1  327  is_stmt 1
        vmovsd    48(%rsp), %xmm2                               #327.16
..LN8859:
	.loc    1  328  is_stmt 1
        lea       8(%rbx), %r9                                  #328.3
..LN8860:
	.loc    1  327  is_stmt 1
        vmovsd    40(%rsp), %xmm1                               #327.16
..LN8861:
	.loc    1  328  is_stmt 1
        lea       312(%rsp), %rsi                               #328.3
..LN8862:
	.loc    1  327  is_stmt 1
        vmovsd    32(%rsp), %xmm0                               #327.16
..LN8863:
	.loc    1  328  is_stmt 1
        lea       320(%rsp), %rdx                               #328.3
..LN8864:
        movl      $1, %edi                                      #328.3
..LN8865:
        lea       328(%rsp), %rcx                               #328.3
..LN8866:
        movq      %rbx, %r8                                     #328.3
..LN8867:
	.loc    1  338  is_stmt 1
        vaddsd    -16(%rdx), %xmm2, %xmm8                       #338.18
..LN8868:
	.loc    1  337  is_stmt 1
        vaddsd    -24(%rdx), %xmm1, %xmm6                       #337.18
..LN8869:
	.loc    1  336  is_stmt 1
        vaddsd    -32(%rdx), %xmm0, %xmm4                       #336.18
..LN8870:
	.loc    1  339  is_stmt 1
        vmulsd    %xmm8, %xmm8, %xmm3                           #339.43
..LN8871:
        vfmadd231sd %xmm6, %xmm6, %xmm3                         #339.8
..LN8872:
        vfmadd231sd %xmm4, %xmm4, %xmm3                         #339.8
..LN8873:
        vsqrtsd   %xmm3, %xmm3, %xmm3                           #339.8
..LN8874:
	.loc    1  340  is_stmt 1
        vdivsd    %xmm3, %xmm4, %xmm5                           #340.3
..LN8875:
	.loc    1  341  is_stmt 1
        vdivsd    %xmm3, %xmm6, %xmm7                           #341.3
..LN8876:
	.loc    1  342  is_stmt 1
        vdivsd    %xmm3, %xmm8, %xmm9                           #342.3
..LN8877:
	.loc    1  327  is_stmt 1
        vmovsd    %xmm5, -8(%rdx)                               #327.24
..LN8878:
        vmovsd    %xmm7, (%rdx)                                 #327.24
..LN8879:
        vmovsd    %xmm9, 8(%rdx)                                #327.24
..___tag_value_get_edge.305:
..LN8880:
	.loc    1  328  is_stmt 1
#       xyz2latlon(int, const double *, const double *, const double *, double *, double *)
        call      xyz2latlon                                    #328.3
..___tag_value_get_edge.306:
..LN8881:
                                # LOE r12 r13 r14 r15
..B4.117:                       # Preds ..B4.116
..LN8882:
	.loc    1  302  is_stmt 1
        incq      %r12                                          #302.28
..LN8883:
        cmpq      384(%rsp), %r12                               #302.22
..LN8884:
        jle       ..B4.114      # Prob 82%                      #302.22
..LN8885:
                                # LOE r12 r13 r14 r15
..B4.118:                       # Preds ..B4.117
..LN8886:
        movq      384(%rsp), %rcx                               #
..LN8887:
        movq      8(%rsp), %rsi                                 #
..LN8888:
	.loc    1  286  is_stmt 1
        cmpq      %rcx, %rsi                                    #286.22
..LN8889:
        movq      336(%rsp), %r8                                #
..LN8890:
        movl      16(%rsp), %r12d                               #
..LN8891:
        movl      24(%rsp), %r13d                               #
..LN8892:
                                # LOE rcx rsi r8 r12d r13d
..B4.119:                       # Preds ..B4.118 ..B4.112
..LN8893:
	.loc    1  307  is_stmt 1
        jge       ..B4.125      # Prob 10%                      #307.21
..LN8894:
                                # LOE rcx rsi r8 r12d r13d
..B4.120:                       # Preds ..B4.119
..LN8895:
	.loc    1  308  is_stmt 1
        imull     %r12d, %r13d                                  #308.22
..LN8896:
        movslq    %r13d, %r13                                   #308.15
..LN8897:
	.loc    1  309  is_stmt 1
        movq      408(%rsp), %rax                               #309.15
..LN8898:
	.loc    1  308  is_stmt 1
        movq      400(%rsp), %rdx                               #308.15
..LN8899:
        movq      %rcx, 384(%rsp)                               #308.15
..LN8900:
        movq      %r8, 336(%rsp)                                #308.15
..LN8901:
	.loc    1  309  is_stmt 1
        lea       (%rax,%r13,8), %r12                           #309.15
..LN8902:
	.loc    1  308  is_stmt 1
        movq      40(%rbp), %r14                                #308.15
..LN8903:
        lea       (%rdx,%r13,8), %rbx                           #308.15
..LN8904:
        movq      %rsi, %r13                                    #308.15
..LN8905:
                                # LOE rbx r12 r13 r14
..B4.121:                       # Preds ..B4.123 ..B4.120
..L307:         # optimization report
                # %s was not vectorized: vector dependence prevents vectorization%s
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
..LN8906:
	.loc    1  310  is_stmt 1
        movl      %r13d, %ecx                                   #310.12
..LN8907:
        addl      %ecx, %ecx                                    #310.41
..LN8908:
        lea       360(%rsp), %rsi                               #310.12
..LN8909:
        movslq    %ecx, %rcx                                    #310.36
..LN8910:
        movq      32(%rsi), %r8                                 #310.36
..LN8911:
	.loc    1  308  is_stmt 1
        movq      (%rbx,%r13,8), %rax                           #308.15
..LN8912:
	.loc    1  309  is_stmt 1
        movq      (%r12,%r13,8), %rdx                           #309.15
..LN8913:
	.loc    1  308  is_stmt 1
        movq      %rax, (%rsi)                                  #308.7
..LN8914:
	.loc    1  310  is_stmt 1
        lea       (%r8,%rcx,8), %r15                            #310.36
..LN8915:
        movq      %r15, %rdi                                    #310.12
..LN8916:
	.loc    1  309  is_stmt 1
        movq      %rdx, 8(%rsi)                                 #309.7
..___tag_value_get_edge.308:
..LN8917:
	.loc    1  310  is_stmt 1
#       great_circle_distance(double *, double *)
        call      great_circle_distance                         #310.12
..___tag_value_get_edge.309:
..LN8918:
                                # LOE rbx r12 r13 r14 r15 xmm0
..B4.146:                       # Preds ..B4.121
..LN8919:
        vmovsd    %xmm0, (%rsp)                                 #310.12
..LN8920:
                                # LOE rbx r12 r13 r14 r15
..B4.122:                       # Preds ..B4.146
..LN8921:
	.loc    1  311  is_stmt 1
        addq      $16, %r15                                     #311.12
..LN8922:
        lea       360(%rsp), %rsi                               #311.12
..LN8923:
        movq      %r15, %rdi                                    #311.12
..___tag_value_get_edge.310:
..LN8924:
#       great_circle_distance(double *, double *)
        call      great_circle_distance                         #311.12
..___tag_value_get_edge.311:
..LN8925:
                                # LOE rbx r12 r13 r14 xmm0
..B4.147:                       # Preds ..B4.122
..LN8926:
        vmovapd   %xmm0, %xmm1                                  #311.12
..LN8927:
                                # LOE rbx r12 r13 r14 xmm1
..B4.123:                       # Preds ..B4.147
..LN8928:
	.loc    1  312  is_stmt 1
        vaddsd    (%rsp), %xmm1, %xmm0                          #312.26
..LN8929:
        vdivsd    %xmm0, %xmm1, %xmm1                           #312.26
..LN8930:
        vmovsd    %xmm1, (%r14,%r13,8)                          #312.7
..LN8931:
	.loc    1  307  is_stmt 1
        incq      %r13                                          #307.27
..LN8932:
        cmpq      384(%rsp), %r13                               #307.21
..LN8933:
        jl        ..B4.121      # Prob 82%                      #307.21
..LN8934:
                                # LOE rbx r12 r13 r14
..B4.124:                       # Preds ..B4.123
..LN8935:
        movq      336(%rsp), %r8                                #
..LN8936:
                                # LOE r8
..B4.125:                       # Preds ..B4.124 ..B4.119 ..B4.111
..LN8937:
	.loc    1  316  is_stmt 1
        movq      392(%rsp), %rdi                               #316.3
..LN8938:
        movq      %r8, 336(%rsp)                                #316.3
..LN8939:
#       free(void *)
        call      free                                          #316.3
..LN8940:
                                # LOE
..B4.126:                       # Preds ..B4.125
..LN8941:
        movq      336(%rsp), %r8                                #
..LN8942:
	.loc    1  317  is_stmt 1
        movq      %r8, %rdi                                     #317.3
..LN8943:
#       free(void *)
        call      free                                          #317.3
..LN8944:
                                # LOE
..B4.127:                       # Preds ..B4.126
..LN8945:
	.loc    1  319  epilogue_begin  is_stmt 1
        addq      $440, %rsp                                    #319.1
	.cfi_restore 3
..LN8946:
        popq      %rbx                                          #319.1
	.cfi_restore 15
..LN8947:
        popq      %r15                                          #319.1
	.cfi_restore 14
..LN8948:
        popq      %r14                                          #319.1
	.cfi_restore 13
..LN8949:
        popq      %r13                                          #319.1
	.cfi_restore 12
..LN8950:
        popq      %r12                                          #319.1
..LN8951:
        movq      %rbp, %rsp                                    #319.1
..LN8952:
        popq      %rbp                                          #319.1
	.cfi_def_cfa 7, 8
	.cfi_restore 6
..LN8953:
        ret                                                     #319.1
	.cfi_def_cfa 6, 16
	.cfi_escape 0x10, 0x03, 0x0e, 0x38, 0x1c, 0x0d, 0xe0, 0xff, 0xff, 0xff, 0x1a, 0x0d, 0xd8, 0xff, 0xff, 0xff, 0x22
	.cfi_offset 6, -16
	.cfi_escape 0x10, 0x0c, 0x0e, 0x38, 0x1c, 0x0d, 0xe0, 0xff, 0xff, 0xff, 0x1a, 0x0d, 0xf8, 0xff, 0xff, 0xff, 0x22
	.cfi_escape 0x10, 0x0d, 0x0e, 0x38, 0x1c, 0x0d, 0xe0, 0xff, 0xff, 0xff, 0x1a, 0x0d, 0xf0, 0xff, 0xff, 0xff, 0x22
	.cfi_escape 0x10, 0x0e, 0x0e, 0x38, 0x1c, 0x0d, 0xe0, 0xff, 0xff, 0xff, 0x1a, 0x0d, 0xe8, 0xff, 0xff, 0xff, 0x22
	.cfi_escape 0x10, 0x0f, 0x0e, 0x38, 0x1c, 0x0d, 0xe0, 0xff, 0xff, 0xff, 0x1a, 0x0d, 0xe0, 0xff, 0xff, 0xff, 0x22
..LN8954:
                                # LOE
..B4.128:                       # Preds ..B4.20                 # Infreq
..LN8955:
	.loc    1  217  is_stmt 1
        xorl      %eax, %eax                                    #217.3
..LN8956:
        jmp       ..B4.24       # Prob 100%                     #217.3
..LN8957:
                                # LOE rax rdx rbx ecx r12d r13d r14d
..B4.129:                       # Preds ..B4.7 ..B4.9 ..B4.11   # Infreq
..LN8958:
        xorl      %ecx, %ecx                                    #217.3
..LN8959:
        jmp       ..B4.19       # Prob 100%                     #217.3
..LN8960:
                                # LOE rbx ecx r12d r13d r14d
..B4.132:                       # Preds ..B4.53                 # Infreq
..LN8961:
	.loc    1  221  is_stmt 1
        xorl      %eax, %eax                                    #221.3
..LN8962:
        jmp       ..B4.57       # Prob 100%                     #221.3
..LN8963:
                                # LOE rax rdx rbx ecx r12d r13d r14d r15d
..B4.133:                       # Preds ..B4.40 ..B4.42 ..B4.44 # Infreq
..LN8964:
        xorl      %ecx, %ecx                                    #221.3
..LN8965:
        jmp       ..B4.52       # Prob 100%                     #221.3
..LN8966:
        .align    16,0x90
	.cfi_endproc
..LN8967:
                                # LOE rbx ecx r12d r13d r14d r15d
..LN8968:
# mark_end;
	.type	get_edge,@function
	.size	get_edge,.-get_edge
..LNget_edge.8969:
.LNget_edge:
	.data
# -- End  get_edge
	.text
.L_2__routine_start_mid_pt_sphere_4:
# -- Begin  mid_pt_sphere
	.text
# mark_begin;
       .align    16,0x90
	.globl mid_pt_sphere
# --- mid_pt_sphere(const double *, const double *, double *)
mid_pt_sphere:
# parameter 1(p1): %rdi
# parameter 2(p2): %rsi
# parameter 3(pm): %rdx
..B5.1:                         # Preds ..B5.0
	.cfi_startproc
..___tag_value_mid_pt_sphere.331:
..L332:
                                                        #322.1
..LN8970:
	.loc    1  322  is_stmt 1
        pushq     %r15                                          #322.1
	.cfi_def_cfa_offset 16
	.cfi_offset 15, -16
..LN8971:
        pushq     %rbx                                          #322.1
	.cfi_def_cfa_offset 24
	.cfi_offset 3, -24
..LN8972:
        subq      $72, %rsp                                     #322.1
	.cfi_def_cfa_offset 96
..LN8973:
        movq      %rsi, %rbx                                    #322.1
..LN8974:
        movq      %rdi, %rsi                                    #322.1
..LN8975:
        movq      %rdx, %r15                                    #322.1
..LN8976:
	.loc    1  325  prologue_end  is_stmt 1
        movl      $1, %edi                                      #325.3
..LN8977:
        lea       8(%rsp), %r8                                  #325.31
..LN8978:
        lea       16(%rsp), %r9                                 #325.37
..LN8979:
        lea       (%rsp), %rcx                                  #325.3
..LN8980:
        lea       8(%rsi), %rdx                                 #325.3
..___tag_value_mid_pt_sphere.339:
..LN8981:
#       latlon2xyz(int, const double *, const double *, double *, double *, double *)
        call      latlon2xyz                                    #325.3
..___tag_value_mid_pt_sphere.340:
..LN8982:
                                # LOE rbx rbp r12 r13 r14 r15
..B5.2:                         # Preds ..B5.1
..LN8983:
	.loc    1  326  is_stmt 1
        movl      $1, %edi                                      #326.3
..LN8984:
        lea       32(%rsp), %r8                                 #326.31
..LN8985:
        movq      %rbx, %rsi                                    #326.3
..LN8986:
        lea       40(%rsp), %r9                                 #326.37
..LN8987:
        lea       8(%rbx), %rdx                                 #326.3
..LN8988:
        lea       24(%rsp), %rcx                                #326.3
..___tag_value_mid_pt_sphere.341:
..LN8989:
#       latlon2xyz(int, const double *, const double *, double *, double *, double *)
        call      latlon2xyz                                    #326.3
..___tag_value_mid_pt_sphere.342:
..LN8990:
                                # LOE rbp r12 r13 r14 r15
..B5.3:                         # Preds ..B5.2
..LN8991:
	.loc    1  327  is_stmt 1
        vmovsd    8(%rsp), %xmm1                                #327.16
..LN8992:
        lea       56(%rsp), %rdx                                #327.24
..LN8993:
        vmovsd    (%rsp), %xmm0                                 #327.16
..LN8994:
	.loc    1  338  is_stmt 1
        lea       64(%rsp), %rcx                                #338.3
..LN8995:
	.loc    1  327  is_stmt 1
        vmovsd    -40(%rdx), %xmm2                              #327.16
..LN8996:
	.loc    1  328  is_stmt 1
        lea       8(%r15), %r9                                  #328.3
..LN8997:
        movl      $1, %edi                                      #328.3
..LN8998:
        lea       48(%rsp), %rsi                                #328.3
..LN8999:
        movq      %r15, %r8                                     #328.3
..LN9000:
	.loc    1  337  is_stmt 1
        vaddsd    -24(%rdx), %xmm1, %xmm6                       #337.18
..LN9001:
	.loc    1  336  is_stmt 1
        vaddsd    -32(%rdx), %xmm0, %xmm4                       #336.18
..LN9002:
	.loc    1  338  is_stmt 1
        vaddsd    -16(%rdx), %xmm2, %xmm8                       #338.18
..LN9003:
	.loc    1  339  is_stmt 1
        vmulsd    %xmm6, %xmm6, %xmm3                           #339.31
..LN9004:
        vfmadd231sd %xmm4, %xmm4, %xmm3                         #339.8
..LN9005:
        vfmadd231sd %xmm8, %xmm8, %xmm3                         #339.8
..LN9006:
        vsqrtsd   %xmm3, %xmm3, %xmm3                           #339.8
..LN9007:
	.loc    1  340  is_stmt 1
        vdivsd    %xmm3, %xmm4, %xmm5                           #340.3
..LN9008:
	.loc    1  341  is_stmt 1
        vdivsd    %xmm3, %xmm6, %xmm7                           #341.3
..LN9009:
	.loc    1  342  is_stmt 1
        vdivsd    %xmm3, %xmm8, %xmm9                           #342.3
..LN9010:
	.loc    1  327  is_stmt 1
        vmovsd    %xmm5, -8(%rdx)                               #327.24
..LN9011:
        vmovsd    %xmm7, (%rdx)                                 #327.24
..LN9012:
        vmovsd    %xmm9, (%rcx)                                 #327.24
..___tag_value_mid_pt_sphere.343:
..LN9013:
	.loc    1  328  is_stmt 1
#       xyz2latlon(int, const double *, const double *, const double *, double *, double *)
        call      xyz2latlon                                    #328.3
..___tag_value_mid_pt_sphere.344:
..LN9014:
                                # LOE rbp r12 r13 r14
..B5.4:                         # Preds ..B5.3
..LN9015:
	.loc    1  330  epilogue_begin  is_stmt 1
        addq      $72, %rsp                                     #330.1
	.cfi_def_cfa_offset 24
	.cfi_restore 3
..LN9016:
        popq      %rbx                                          #330.1
	.cfi_def_cfa_offset 16
	.cfi_restore 15
..LN9017:
        popq      %r15                                          #330.1
	.cfi_def_cfa_offset 8
..LN9018:
        ret                                                     #330.1
..LN9019:
        .align    16,0x90
	.cfi_endproc
..LN9020:
                                # LOE
..LN9021:
# mark_end;
	.type	mid_pt_sphere,@function
	.size	mid_pt_sphere,.-mid_pt_sphere
..LNmid_pt_sphere.9022:
.LNmid_pt_sphere:
	.data
# -- End  mid_pt_sphere
	.text
.L_2__routine_start_mid_pt3_cart_5:
# -- Begin  mid_pt3_cart
	.text
# mark_begin;
       .align    16,0x90
	.globl mid_pt3_cart
# --- mid_pt3_cart(const double *, const double *, double *)
mid_pt3_cart:
# parameter 1(p1): %rdi
# parameter 2(p2): %rsi
# parameter 3(e): %rdx
..B6.1:                         # Preds ..B6.0
	.cfi_startproc
..___tag_value_mid_pt3_cart.355:
..L356:
                                                        #333.1
..LN9023:
	.loc    1  333  prologue_end  is_stmt 1
..LN9024:
	.loc    1  336  is_stmt 1
        vmovsd    (%rdi), %xmm0                                 #336.10
..LN9025:
        vaddsd    (%rsi), %xmm0, %xmm4                          #336.18
..LN9026:
        vmovsd    %xmm4, (%rdx)                                 #336.3
..LN9027:
	.loc    1  337  is_stmt 1
        vmovsd    8(%rdi), %xmm1                                #337.10
..LN9028:
        vaddsd    8(%rsi), %xmm1, %xmm6                         #337.18
..LN9029:
	.loc    1  339  is_stmt 1
        vmulsd    %xmm6, %xmm6, %xmm3                           #339.31
..LN9030:
	.loc    1  337  is_stmt 1
        vmovsd    %xmm6, 8(%rdx)                                #337.3
..LN9031:
	.loc    1  338  is_stmt 1
        vmovsd    16(%rdi), %xmm2                               #338.10
..LN9032:
	.loc    1  339  is_stmt 1
        vfmadd231sd %xmm4, %xmm4, %xmm3                         #339.3
..LN9033:
	.loc    1  338  is_stmt 1
        vaddsd    16(%rsi), %xmm2, %xmm8                        #338.18
..LN9034:
	.loc    1  339  is_stmt 1
        vfmadd231sd %xmm8, %xmm8, %xmm3                         #339.3
..LN9035:
        vsqrtsd   %xmm3, %xmm3, %xmm3                           #339.8
..LN9036:
	.loc    1  340  is_stmt 1
        vdivsd    %xmm3, %xmm4, %xmm5                           #340.3
..LN9037:
	.loc    1  341  is_stmt 1
        vdivsd    %xmm3, %xmm6, %xmm7                           #341.3
..LN9038:
	.loc    1  342  is_stmt 1
        vdivsd    %xmm3, %xmm8, %xmm9                           #342.3
..LN9039:
	.loc    1  340  is_stmt 1
        vmovsd    %xmm5, (%rdx)                                 #340.3
..LN9040:
	.loc    1  341  is_stmt 1
        vmovsd    %xmm7, 8(%rdx)                                #341.3
..LN9041:
	.loc    1  342  is_stmt 1
        vmovsd    %xmm9, 16(%rdx)                               #342.3
..LN9042:
	.loc    1  343  epilogue_begin  is_stmt 1
        ret                                                     #343.1
..LN9043:
        .align    16,0x90
	.cfi_endproc
..LN9044:
                                # LOE
..LN9045:
# mark_end;
	.type	mid_pt3_cart,@function
	.size	mid_pt3_cart,.-mid_pt3_cart
..LNmid_pt3_cart.9046:
.LNmid_pt3_cart:
	.data
# -- End  mid_pt3_cart
	.text
.L_2__routine_start_calc_c2l_grid_info__6:
# -- Begin  calc_c2l_grid_info_
	.text
# mark_begin;
       .align    16,0x90
	.globl calc_c2l_grid_info_
# --- calc_c2l_grid_info_(int *, int *, const double *, const double *, const double *, const double *, double *, double *, double *, double *, double *, double *, double *, double *, double *, double *, double *, int *, int *, int *, int *)
calc_c2l_grid_info_:
# parameter 1(nx_pt): %rdi
# parameter 2(ny_pt): %rsi
# parameter 3(xt): %rdx
# parameter 4(yt): %rcx
# parameter 5(xc): %r8
# parameter 6(yc): %r9
# parameter 7(dx): 16 + %rbp
# parameter 8(dy): 24 + %rbp
# parameter 9(area): 32 + %rbp
# parameter 10(edge_w): 40 + %rbp
# parameter 11(edge_e): 48 + %rbp
# parameter 12(edge_s): 56 + %rbp
# parameter 13(edge_n): 64 + %rbp
# parameter 14(en_n): 72 + %rbp
# parameter 15(en_e): 80 + %rbp
# parameter 16(vlon): 88 + %rbp
# parameter 17(vlat): 96 + %rbp
# parameter 18(on_west_edge): 104 + %rbp
# parameter 19(on_east_edge): 112 + %rbp
# parameter 20(on_south_edge): 120 + %rbp
# parameter 21(on_north_edge): 128 + %rbp
..B7.1:                         # Preds ..B7.0
	.cfi_startproc
..___tag_value_calc_c2l_grid_info_.362:
..L363:
                                                        #368.1
..LN9047:
	.loc    1  368  is_stmt 1
        pushq     %rbp                                          #368.1
	.cfi_def_cfa_offset 16
..LN9048:
        movq      %rsp, %rbp                                    #368.1
	.cfi_def_cfa 6, 16
	.cfi_offset 6, -16
..LN9049:
        andq      $-32, %rsp                                    #368.1
..LN9050:
        pushq     %r12                                          #368.1
..LN9051:
        pushq     %r13                                          #368.1
..LN9052:
        pushq     %r14                                          #368.1
..LN9053:
        pushq     %r15                                          #368.1
..LN9054:
        pushq     %rbx                                          #368.1
..LN9055:
        subq      $568, %rsp                                    #368.1
..LN9056:
	.loc    1  389  prologue_end  is_stmt 1
        xorl      %eax, %eax                                    #389.3
	.cfi_escape 0x10, 0x03, 0x0e, 0x38, 0x1c, 0x0d, 0xe0, 0xff, 0xff, 0xff, 0x1a, 0x0d, 0xd8, 0xff, 0xff, 0xff, 0x22
	.cfi_escape 0x10, 0x0c, 0x0e, 0x38, 0x1c, 0x0d, 0xe0, 0xff, 0xff, 0xff, 0x1a, 0x0d, 0xf8, 0xff, 0xff, 0xff, 0x22
	.cfi_escape 0x10, 0x0d, 0x0e, 0x38, 0x1c, 0x0d, 0xe0, 0xff, 0xff, 0xff, 0x1a, 0x0d, 0xf0, 0xff, 0xff, 0xff, 0x22
	.cfi_escape 0x10, 0x0e, 0x0e, 0x38, 0x1c, 0x0d, 0xe0, 0xff, 0xff, 0xff, 0x1a, 0x0d, 0xe8, 0xff, 0xff, 0xff, 0x22
	.cfi_escape 0x10, 0x0f, 0x0e, 0x38, 0x1c, 0x0d, 0xe0, 0xff, 0xff, 0xff, 0x1a, 0x0d, 0xe0, 0xff, 0xff, 0xff, 0x22
..LN9057:
	.loc    1  384  is_stmt 1
        movl      (%rdi), %ebx                                  #384.10
..LN9058:
	.loc    1  385  is_stmt 1
        movl      (%rsi), %r15d                                 #385.10
..LN9059:
	.loc    1  368  is_stmt 1
        movq      %rdx, 368(%rsp)                               #368.1
..LN9060:
	.loc    1  389  is_stmt 1
        xorl      %edx, %edx                                    #389.28
..LN9061:
	.loc    1  368  is_stmt 1
        movq      %r9, 400(%rsp)                                #368.1
..LN9062:
	.loc    1  386  is_stmt 1
        lea       1(%rbx), %r12d                                #386.12
..LN9063:
	.loc    1  274  is_stmt 1
        movslq    %r12d, %r12                                   #274.27
..LN9064:
	.loc    1  387  is_stmt 1
        lea       1(%r15), %r14d                                #387.12
..LN9065:
	.loc    1  368  is_stmt 1
        movq      %r8, 408(%rsp)                                #368.1
..LN9066:
        movq      %rcx, 360(%rsp)                               #368.1
..LN9067:
	.loc    1  389  is_stmt 1
        xorl      %ecx, %ecx                                    #389.28
..LN9068:
	.loc    1  405  is_stmt 1
        movslq    %ebx, %r13                                    #405.27
..LN9069:
	.loc    1  274  is_stmt 1
        movq      %r12, 192(%rsp)                               #274.27
..LN9070:
	.loc    1  389  is_stmt 1
        testl     %r14d, %r14d                                  #389.14
..LN9071:
        jle       ..B7.10       # Prob 15%                      #389.14
..LN9072:
                                # LOE r12 r13 eax edx ecx ebx r12d r14d r15d r12b
..B7.2:                         # Preds ..B7.1
..LN9073:
	.loc    1  368  is_stmt 1
        movq      16(%rbp), %rsi                                #368.1
..LN9074:
        movl      %ebx, %r8d                                    #368.1
..LN9075:
        movl      %r12d, 416(%rsp)                              #368.1
..LN9076:
        movl      %r14d, %edi                                   #368.1
..LN9077:
        movl      %r15d, 456(%rsp)                              #368.1
..LN9078:
        movq      408(%rsp), %r9                                #368.1
..LN9079:
        movq      400(%rsp), %r10                               #368.1
..LN9080:
                                # LOE rsi r9 r10 r13 eax edx ecx edi r8d
..B7.3:                         # Preds ..B7.2 ..B7.8
..L373:         # optimization report
                # %s was not vectorized: vector dependence prevents vectorization%s
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
..LN9081:
	.loc    1  389  is_stmt 1
        xorl      %ebx, %ebx                                    #389.24
..LN9082:
        testl     %r8d, %r8d                                    #389.35
..LN9083:
        jle       ..B7.8        # Prob 9%                       #389.35
..LN9084:
                                # LOE rbx rsi r9 r10 r13 eax edx ecx edi r8d
..B7.4:                         # Preds ..B7.3
..LN9085:
	.loc    1  390  is_stmt 1
        movslq    %edx, %rdx                                    #390.13
..LN9086:
	.loc    1  394  is_stmt 1
        movslq    %ecx, %rcx                                    #394.5
..LN9087:
        movl      %eax, 16(%rsp)                                #394.5
..LN9088:
        movl      %edx, 8(%rsp)                                 #394.5
..LN9089:
        movl      %ecx, (%rsp)                                  #394.5
..LN9090:
	.loc    1  391  is_stmt 1
        lea       (%r10,%rdx,8), %r15                           #391.13
..LN9091:
	.loc    1  394  is_stmt 1
        movl      %edi, 256(%rsp)                               #394.5
..LN9092:
	.loc    1  390  is_stmt 1
        lea       (%r9,%rdx,8), %r12                            #390.13
..LN9093:
	.loc    1  394  is_stmt 1
        movl      %r8d, 264(%rsp)                               #394.5
..LN9094:
        lea       (%rsi,%rcx,8), %r14                           #394.5
..LN9095:
                                # LOE rbx r12 r13 r14 r15
..B7.5:                         # Preds ..B7.6 ..B7.4
..L374:         # optimization report
                # %s was not vectorized: vector dependence prevents vectorization%s
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
..LN9096:
        lea       464(%rsp), %rdi                               #394.18
..LN9097:
	.loc    1  390  is_stmt 1
        movq      (%r12,%rbx,8), %rax                           #390.13
..LN9098:
	.loc    1  394  is_stmt 1
        lea       488(%rsp), %rsi                               #394.18
..LN9099:
	.loc    1  392  is_stmt 1
        movq      8(%r12,%rbx,8), %rcx                          #392.13
..LN9100:
	.loc    1  391  is_stmt 1
        movq      (%r15,%rbx,8), %rdx                           #391.13
..LN9101:
	.loc    1  393  is_stmt 1
        movq      8(%r15,%rbx,8), %r8                           #393.13
..LN9102:
	.loc    1  390  is_stmt 1
        movq      %rax, -24(%rsi)                               #390.5
..LN9103:
	.loc    1  391  is_stmt 1
        movq      %rdx, -16(%rsi)                               #391.5
..LN9104:
	.loc    1  392  is_stmt 1
        movq      %rcx, (%rsi)                                  #392.5
..LN9105:
	.loc    1  393  is_stmt 1
        movq      %r8, 8(%rsi)                                  #393.5
..___tag_value_calc_c2l_grid_info_.375:
..LN9106:
	.loc    1  394  is_stmt 1
#       great_circle_distance(double *, double *)
        call      great_circle_distance                         #394.18
..___tag_value_calc_c2l_grid_info_.376:
..LN9107:
                                # LOE rbx r12 r13 r14 r15 xmm0
..B7.6:                         # Preds ..B7.5
..LN9108:
        vmovsd    %xmm0, (%r14,%rbx,8)                          #394.5
..LN9109:
	.loc    1  389  is_stmt 1
        incq      %rbx                                          #389.24
..LN9110:
        cmpq      %r13, %rbx                                    #389.24
..LN9111:
        jb        ..B7.5        # Prob 81%                      #389.24
..LN9112:
                                # LOE rbx r12 r13 r14 r15
..B7.7:                         # Preds ..B7.6
..LN9113:
        movl      16(%rsp), %eax                                #
..LN9114:
        movl      8(%rsp), %edx                                 #
..LN9115:
        movl      (%rsp), %ecx                                  #
..LN9116:
        movl      256(%rsp), %edi                               #
..LN9117:
        movl      264(%rsp), %r8d                               #
..LN9118:
        movq      408(%rsp), %r9                                #
..LN9119:
        movq      400(%rsp), %r10                               #
..LN9120:
        movq      16(%rbp), %rsi                                #
..LN9121:
                                # LOE rsi r9 r10 r13 eax edx ecx edi r8d
..B7.8:                         # Preds ..B7.3 ..B7.7
..LN9122:
        incl      %eax                                          #389.3
..LN9123:
        addl      %r8d, %ecx                                    #389.3
..LN9124:
        lea       1(%rdx,%r8), %edx                             #389.3
..LN9125:
        cmpl      %edi, %eax                                    #389.3
..LN9126:
        jb        ..B7.3        # Prob 82%                      #389.3
..LN9127:
                                # LOE rsi r9 r10 r13 eax edx ecx edi r8d
..B7.9:                         # Preds ..B7.8
..LN9128:
        movl      416(%rsp), %r12d                              #
..LN9129:
        movl      %edi, %r14d                                   #
..LN9130:
        movl      456(%rsp), %r15d                              #
..LN9131:
        movl      %r8d, %ebx                                    #
..LN9132:
                                # LOE r13 ebx r12d r14d r15d
..B7.10:                        # Preds ..B7.1 ..B7.9
..LN9133:
	.loc    1  397  is_stmt 1
        xorl      %r10d, %r10d                                  #397.3
..LN9134:
        xorl      %esi, %esi                                    #397.27
..LN9135:
        testl     %r15d, %r15d                                  #397.14
..LN9136:
        jle       ..B7.19       # Prob 15%                      #397.14
..LN9137:
                                # LOE r13 ebx esi r10d r12d r14d r15d
..B7.11:                        # Preds ..B7.10
..LN9138:
	.loc    1  401  is_stmt 1
        movq      400(%rsp), %rcx                               #401.13
..LN9139:
	.loc    1  386  is_stmt 1
        lea       1(%r13), %r11                                 #386.3
..LN9140:
	.loc    1  400  is_stmt 1
        movq      408(%rsp), %rax                               #400.13
..LN9141:
        movl      %ebx, %r9d                                    #400.13
..LN9142:
        movq      %r11, 32(%rsp)                                #400.13
..LN9143:
        movl      %r12d, %r8d                                   #400.13
..LN9144:
	.loc    1  368  is_stmt 1
        movq      24(%rbp), %rdx                                #368.1
..LN9145:
	.loc    1  401  is_stmt 1
        lea       (%rcx,%r13,8), %rcx                           #401.13
..LN9146:
	.loc    1  400  is_stmt 1
        movl      %r14d, 256(%rsp)                              #400.13
..LN9147:
        lea       (%rax,%r13,8), %rax                           #400.13
..LN9148:
        movl      %r15d, 456(%rsp)                              #400.13
..LN9149:
        movq      %r13, 200(%rsp)                               #400.13
..LN9150:
        movq      400(%rsp), %r11                               #400.13
..LN9151:
                                # LOE rax rdx rcx r11 esi r8d r9d r10d
..B7.12:                        # Preds ..B7.17 ..B7.11
..L377:         # optimization report
                # %s was not vectorized: vector dependence prevents vectorization%s
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
..LN9152:
	.loc    1  397  is_stmt 1
        xorl      %r15d, %r15d                                  #397.23
..LN9153:
        testl     %r8d, %r8d                                    #397.34
..LN9154:
        jle       ..B7.17       # Prob 10%                      #397.34
..LN9155:
                                # LOE rax rdx rcx r11 r15 esi r8d r9d r10d
..B7.13:                        # Preds ..B7.12
..LN9156:
	.loc    1  398  is_stmt 1
        movslq    %esi, %rsi                                    #398.13
..LN9157:
        movq      408(%rsp), %rdi                               #398.13
..LN9158:
	.loc    1  400  is_stmt 1
        movq      %rax, 24(%rsp)                                #400.13
..LN9159:
        movq      %rcx, 16(%rsp)                                #400.13
..LN9160:
        movl      %esi, 8(%rsp)                                 #400.13
..LN9161:
	.loc    1  398  is_stmt 1
        lea       (%rdi,%rsi,8), %rdi                           #398.13
..LN9162:
	.loc    1  400  is_stmt 1
        movq      %rdi, 40(%rsp)                                #400.13
..LN9163:
	.loc    1  402  is_stmt 1
        lea       (%rdx,%rsi,8), %r14                           #402.5
..LN9164:
	.loc    1  400  is_stmt 1
        movl      %r10d, (%rsp)                                 #400.13
..LN9165:
	.loc    1  399  is_stmt 1
        lea       (%r11,%rsi,8), %rbx                           #399.13
..LN9166:
	.loc    1  400  is_stmt 1
        movl      %r8d, 416(%rsp)                               #400.13
..LN9167:
	.loc    1  401  is_stmt 1
        lea       (%rcx,%rsi,8), %r13                           #401.13
..LN9168:
	.loc    1  400  is_stmt 1
        movl      %r9d, 264(%rsp)                               #400.13
..LN9169:
        lea       (%rax,%rsi,8), %r12                           #400.13
..LN9170:
                                # LOE rbx r12 r13 r14 r15
..B7.14:                        # Preds ..B7.15 ..B7.13
..L378:         # optimization report
                # %s was not vectorized: vector dependence prevents vectorization%s
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
..LN9171:
	.loc    1  402  is_stmt 1
        lea       464(%rsp), %rdi                               #402.19
..LN9172:
	.loc    1  398  is_stmt 1
        movq      40(%rsp), %rax                                #398.13
..LN9173:
	.loc    1  402  is_stmt 1
        lea       488(%rsp), %rsi                               #402.19
..LN9174:
	.loc    1  399  is_stmt 1
        movq      (%rbx,%r15,8), %rcx                           #399.13
..LN9175:
	.loc    1  400  is_stmt 1
        movq      8(%r12,%r15,8), %r8                           #400.13
..LN9176:
	.loc    1  398  is_stmt 1
        movq      (%rax,%r15,8), %rdx                           #398.13
..LN9177:
	.loc    1  401  is_stmt 1
        movq      8(%r13,%r15,8), %r9                           #401.13
..LN9178:
	.loc    1  398  is_stmt 1
        movq      %rdx, -24(%rsi)                               #398.5
..LN9179:
	.loc    1  399  is_stmt 1
        movq      %rcx, -16(%rsi)                               #399.5
..LN9180:
	.loc    1  400  is_stmt 1
        movq      %r8, (%rsi)                                   #400.5
..LN9181:
	.loc    1  401  is_stmt 1
        movq      %r9, 8(%rsi)                                  #401.5
..___tag_value_calc_c2l_grid_info_.379:
..LN9182:
	.loc    1  402  is_stmt 1
#       great_circle_distance(double *, double *)
        call      great_circle_distance                         #402.19
..___tag_value_calc_c2l_grid_info_.380:
..LN9183:
                                # LOE rbx r12 r13 r14 r15 xmm0
..B7.15:                        # Preds ..B7.14
..LN9184:
        vmovsd    %xmm0, (%r14,%r15,8)                          #402.5
..LN9185:
	.loc    1  397  is_stmt 1
        incq      %r15                                          #397.23
..LN9186:
        cmpq      32(%rsp), %r15                                #397.23
..LN9187:
        jb        ..B7.14       # Prob 82%                      #397.23
..LN9188:
                                # LOE rbx r12 r13 r14 r15
..B7.16:                        # Preds ..B7.15
..LN9189:
        movq      24(%rsp), %rax                                #
..LN9190:
        movq      16(%rsp), %rcx                                #
..LN9191:
        movl      8(%rsp), %esi                                 #
..LN9192:
        movl      (%rsp), %r10d                                 #
..LN9193:
        movl      416(%rsp), %r8d                               #
..LN9194:
        movl      264(%rsp), %r9d                               #
..LN9195:
        movq      400(%rsp), %r11                               #
..LN9196:
        movq      24(%rbp), %rdx                                #
..LN9197:
                                # LOE rax rdx rcx r11 esi r8d r9d r10d
..B7.17:                        # Preds ..B7.12 ..B7.16
..LN9198:
        incl      %r10d                                         #397.3
..LN9199:
        lea       1(%rsi,%r9), %esi                             #397.3
..LN9200:
        cmpl      456(%rsp), %r10d                              #397.3
..LN9201:
        jb        ..B7.12       # Prob 82%                      #397.3
..LN9202:
                                # LOE rax rdx rcx r11 esi r8d r9d r10d
..B7.18:                        # Preds ..B7.17
..LN9203:
        movl      456(%rsp), %r15d                              #
..LN9204:
        movl      %r8d, %r12d                                   #
..LN9205:
        movl      256(%rsp), %r14d                              #
..LN9206:
        movl      %r9d, %ebx                                    #
..LN9207:
        movq      200(%rsp), %r13                               #
..LN9208:
        testl     %r15d, %r15d                                  #397.14
..LN9209:
                                # LOE r13 ebx r12d r14d r15d
..B7.19:                        # Preds ..B7.10 ..B7.18
..LN9210:
	.loc    1  405  is_stmt 1
        movl      $0, %ecx                                      #405.27
..LN9211:
        movl      $0, %edi                                      #405.3
..LN9212:
        movq      %rcx, %rsi                                    #405.27
..LN9213:
        jle       ..B7.27       # Prob 9%                       #405.14
..LN9214:
                                # LOE rcx rsi r13 ebx edi r12d r14d r15d
..B7.20:                        # Preds ..B7.19
..LN9215:
	.loc    1  408  is_stmt 1
        movq      408(%rsp), %r10                               #408.13
..LN9216:
        movl      %ebx, %r9d                                    #408.13
..LN9217:
	.loc    1  409  is_stmt 1
        movq      400(%rsp), %rdx                               #409.13
..LN9218:
	.loc    1  408  is_stmt 1
        movq      %rdx, %r11                                    #408.13
..LN9219:
	.loc    1  368  is_stmt 1
        movq      32(%rbp), %rax                                #368.1
..LN9220:
	.loc    1  408  is_stmt 1
        lea       (%r10,%r13,8), %r10                           #408.13
..LN9221:
        movq      %r10, (%rsp)                                  #408.13
..LN9222:
	.loc    1  409  is_stmt 1
        lea       (%rdx,%r13,8), %rdx                           #409.13
..LN9223:
	.loc    1  408  is_stmt 1
        movl      %r14d, 256(%rsp)                              #408.13
..LN9224:
        movl      %r12d, 416(%rsp)                              #408.13
..LN9225:
        movl      %r15d, 456(%rsp)                              #408.13
..LN9226:
        movq      %r13, 200(%rsp)                               #408.13
..LN9227:
        movq      408(%rsp), %r10                               #408.13
..LN9228:
                                # LOE rax rdx rcx rsi r10 r11 edi r9d
..B7.21:                        # Preds ..B7.25 ..B7.221 ..B7.20
..L381:         # optimization report
                # %s was not vectorized: vector dependence prevents vectorization%s
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
..LN9229:
	.loc    1  405  is_stmt 1
        xorl      %r15d, %r15d                                  #405.23
..LN9230:
        testl     %r9d, %r9d                                    #405.34
..LN9231:
        jle       ..B7.221      # Prob 9%                       #405.34
..LN9232:
                                # LOE rax rdx rcx rsi r10 r11 r15 edi r9d
..B7.22:                        # Preds ..B7.21
..LN9233:
	.loc    1  408  is_stmt 1
        movq      (%rsp), %rbx                                  #408.13
..LN9234:
	.loc    1  414  is_stmt 1
        lea       (%rax,%rsi,8), %r8                            #414.5
..LN9235:
        movq      %r8, 40(%rsp)                                 #414.5
..LN9236:
	.loc    1  407  is_stmt 1
        lea       (%r11,%rcx,8), %r14                           #407.13
..LN9237:
	.loc    1  414  is_stmt 1
        movq      %rdx, 32(%rsp)                                #414.5
..LN9238:
	.loc    1  406  is_stmt 1
        lea       (%r10,%rcx,8), %r13                           #406.13
..LN9239:
	.loc    1  414  is_stmt 1
        movq      %rsi, 24(%rsp)                                #414.5
..LN9240:
	.loc    1  409  is_stmt 1
        lea       (%rdx,%rcx,8), %r12                           #409.13
..LN9241:
	.loc    1  414  is_stmt 1
        movq      %rcx, 16(%rsp)                                #414.5
..LN9242:
	.loc    1  408  is_stmt 1
        lea       (%rbx,%rcx,8), %rbx                           #408.13
..LN9243:
	.loc    1  414  is_stmt 1
        movl      %edi, 8(%rsp)                                 #414.5
..LN9244:
        movl      %r9d, 264(%rsp)                               #414.5
..LN9245:
                                # LOE rbx r12 r13 r14 r15
..B7.23:                        # Preds ..B7.24 ..B7.22
..L382:         # optimization report
                # %s was not vectorized: vector dependence prevents vectorization%s
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
..LN9246:
        lea       464(%rsp), %rdi                               #414.20
..LN9247:
	.loc    1  406  is_stmt 1
        movq      (%r13,%r15,8), %rax                           #406.13
..LN9248:
	.loc    1  414  is_stmt 1
        lea       488(%rsp), %rsi                               #414.20
..LN9249:
	.loc    1  412  is_stmt 1
        movq      16(%rbx,%r15,8), %rdx                         #412.13
..LN9250:
	.loc    1  413  is_stmt 1
        movq      16(%r12,%r15,8), %rcx                         #413.13
..LN9251:
	.loc    1  406  is_stmt 1
        movq      %rax, -24(%rsi)                               #406.5
..LN9252:
	.loc    1  407  is_stmt 1
        movq      (%r14,%r15,8), %r8                            #407.13
..LN9253:
	.loc    1  411  is_stmt 1
        movq      8(%r14,%r15,8), %rax                          #411.13
..LN9254:
	.loc    1  408  is_stmt 1
        movq      8(%rbx,%r15,8), %r9                           #408.13
..LN9255:
	.loc    1  409  is_stmt 1
        movq      8(%r12,%r15,8), %r10                          #409.13
..LN9256:
	.loc    1  410  is_stmt 1
        movq      8(%r13,%r15,8), %r11                          #410.13
..LN9257:
	.loc    1  412  is_stmt 1
        movq      %rdx, 48(%rsi)                                #412.5
..LN9258:
	.loc    1  414  is_stmt 1
        lea       512(%rsp), %rdx                               #414.20
..LN9259:
	.loc    1  413  is_stmt 1
        movq      %rcx, 32(%rdx)                                #413.5
..LN9260:
	.loc    1  414  is_stmt 1
        lea       536(%rsp), %rcx                               #414.20
..LN9261:
	.loc    1  407  is_stmt 1
        movq      %r8, -40(%rdx)                                #407.5
..LN9262:
	.loc    1  408  is_stmt 1
        movq      %r9, -24(%rdx)                                #408.5
..LN9263:
	.loc    1  409  is_stmt 1
        movq      %r10, -16(%rdx)                               #409.5
..LN9264:
	.loc    1  410  is_stmt 1
        movq      %r11, (%rdx)                                  #410.5
..LN9265:
	.loc    1  411  is_stmt 1
        movq      %rax, 8(%rdx)                                 #411.5
..LN9266:
	.loc    1  414  is_stmt 1
        vmovsd    .L_2il0floatpacket.10(%rip), %xmm0            #414.20
..___tag_value_calc_c2l_grid_info_.383:
..LN9267:
#       spherical_excess_area(const double *, const double *, const double *, const double *, double)
        call      spherical_excess_area                         #414.20
..___tag_value_calc_c2l_grid_info_.384:
..LN9268:
                                # LOE rbx r12 r13 r14 r15 xmm0
..B7.24:                        # Preds ..B7.23
..LN9269:
        movq      40(%rsp), %rax                                #414.5
..LN9270:
        vmovsd    %xmm0, (%rax,%r15,8)                          #414.5
..LN9271:
	.loc    1  405  is_stmt 1
        incq      %r15                                          #405.23
..LN9272:
        cmpq      200(%rsp), %r15                               #405.23
..LN9273:
        jb        ..B7.23       # Prob 82%                      #405.23
..LN9274:
                                # LOE rbx r12 r13 r14 r15
..B7.25:                        # Preds ..B7.24
..LN9275:
        movq      24(%rsp), %rsi                                #
..LN9276:
        movq      16(%rsp), %rcx                                #
..LN9277:
        movl      8(%rsp), %edi                                 #
..LN9278:
        incl      %edi                                          #405.3
..LN9279:
        addq      192(%rsp), %rcx                               #405.3
..LN9280:
        addq      200(%rsp), %rsi                               #405.3
..LN9281:
        movq      32(%rsp), %rdx                                #
..LN9282:
        movl      264(%rsp), %r9d                               #
..LN9283:
        movq      408(%rsp), %r10                               #
..LN9284:
        movq      400(%rsp), %r11                               #
..LN9285:
        movq      32(%rbp), %rax                                #
..LN9286:
        cmpl      456(%rsp), %edi                               #405.3
..LN9287:
        jb        ..B7.21       # Prob 81%                      #405.3
..LN9288:
                                # LOE rax rdx rcx rsi r9 r10 r11 edi r9d r9b
..B7.26:                        # Preds ..B7.221 ..B7.25        # Infreq
..LN9289:
        movl      256(%rsp), %r14d                              #
..LN9290:
        movl      %r9d, %ebx                                    #
..LN9291:
        movl      416(%rsp), %r12d                              #
..LN9292:
        movl      456(%rsp), %r15d                              #
..LN9293:
        movq      200(%rsp), %r13                               #
..LN9294:
                                # LOE r13 ebx r12d r14d r15d
..B7.27:                        # Preds ..B7.26 ..B7.19         # Infreq
..LN9295:
	.loc    1  417  is_stmt 1
        movl      %r12d, %edi                                   #417.28
..LN9296:
        imull     %r14d, %edi                                   #417.28
..LN9297:
        movl      %edi, (%rsp)                                  #417.28
..LN9298:
        movslq    %edi, %rdi                                    #417.28
..LN9299:
        shlq      $3, %rdi                                      #417.32
..LN9300:
        movq      %rdi, 8(%rsp)                                 #417.32
..LN9301:
#       malloc(size_t)
        call      malloc                                        #417.17
..LN9302:
                                # LOE rax r13 ebx r12d r14d r15d
..B7.228:                       # Preds ..B7.27                 # Infreq
..LN9303:
        movq      %rax, 424(%rsp)                               #417.17
..LN9304:
                                # LOE r13 ebx r12d r14d r15d
..B7.28:                        # Preds ..B7.228                # Infreq
..LN9305:
	.loc    1  418  is_stmt 1
        movq      8(%rsp), %rdi                                 #418.17
..LN9306:
#       malloc(size_t)
        call      malloc                                        #418.17
..LN9307:
                                # LOE rax r13 ebx r12d r14d r15d
..B7.229:                       # Preds ..B7.28                 # Infreq
..LN9308:
        movq      %rax, 432(%rsp)                               #418.17
..LN9309:
                                # LOE r13 ebx r12d r14d r15d
..B7.29:                        # Preds ..B7.229                # Infreq
..LN9310:
	.loc    1  419  is_stmt 1
        movq      8(%rsp), %rdi                                 #419.17
..LN9311:
#       malloc(size_t)
        call      malloc                                        #419.17
..LN9312:
                                # LOE rax r13 ebx r12d r14d r15d
..B7.230:                       # Preds ..B7.29                 # Infreq
..LN9313:
        movq      %rax, 440(%rsp)                               #419.17
..LN9314:
                                # LOE rax r13 eax ebx r12d r14d r15d al ah
..B7.30:                        # Preds ..B7.230                # Infreq
..LN9315:
	.loc    1  421  is_stmt 1
        movl      (%rsp), %edi                                  #421.3
..LN9316:
        movq      408(%rsp), %rsi                               #421.3
..LN9317:
        movq      400(%rsp), %rdx                               #421.3
..LN9318:
        movq      424(%rsp), %rcx                               #421.3
..LN9319:
        movq      432(%rsp), %r8                                #421.3
..LN9320:
        movq      %rax, %r9                                     #421.3
..___tag_value_calc_c2l_grid_info_.385:
..LN9321:
#       latlon2xyz(int, const double *, const double *, double *, double *, double *)
        call      latlon2xyz                                    #421.3
..___tag_value_calc_c2l_grid_info_.386:
..LN9322:
                                # LOE r13 ebx r12d r14d r15d
..B7.31:                        # Preds ..B7.30                 # Infreq
..LN9323:
	.loc    1  422  is_stmt 1
        xorl      %edx, %edx                                    #422.3
..LN9324:
        xorl      %ecx, %ecx                                    #422.28
..LN9325:
        testl     %r14d, %r14d                                  #422.14
..LN9326:
        jle       ..B7.41       # Prob 15%                      #422.14
..LN9327:
                                # LOE r13 edx ecx ebx r12d r14d r15d
..B7.32:                        # Preds ..B7.31                 # Infreq
..LN9328:
	.loc    1  429  is_stmt 1
        lea       (%rbx,%rbx,2), %esi                           #429.37
..LN9329:
	.loc    1  422  is_stmt 1
        movl      %r12d, 416(%rsp)                              #422.28
..LN9330:
        xorl      %eax, %eax                                    #422.28
..LN9331:
        movl      %r15d, 456(%rsp)                              #422.28
..LN9332:
        movl      %ebx, %r9d                                    #422.28
..LN9333:
        movq      %r13, 200(%rsp)                               #422.28
..LN9334:
        movq      440(%rsp), %r10                               #422.28
..LN9335:
        movq      432(%rsp), %r11                               #422.28
..LN9336:
        movq      424(%rsp), %rdi                               #422.28
..LN9337:
                                # LOE rdi r10 r11 eax edx ecx esi r9d r14d
..B7.33:                        # Preds ..B7.39 ..B7.32         # Infreq
..L387:         # optimization report
                # %s was not vectorized: vector dependence prevents vectorization%s
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
..LN9338:
        xorl      %r13d, %r13d                                  #422.24
..LN9339:
        testl     %r9d, %r9d                                    #422.35
..LN9340:
        jle       ..B7.39       # Prob 10%                      #422.35
..LN9341:
                                # LOE rdi r10 r11 r13 eax edx ecx esi r9d r14d
..B7.34:                        # Preds ..B7.33                 # Infreq
..LN9342:
	.loc    1  423  is_stmt 1
        movslq    %ecx, %rcx                                    #423.13
..LN9343:
        movl      %eax, 24(%rsp)                                #423.13
..LN9344:
        movl      %esi, 16(%rsp)                                #423.13
..LN9345:
        movl      %ecx, 8(%rsp)                                 #423.13
..LN9346:
        movl      %edx, (%rsp)                                  #423.13
..LN9347:
	.loc    1  425  is_stmt 1
        lea       (%r10,%rcx,8), %r12                           #425.13
..LN9348:
	.loc    1  423  is_stmt 1
        movl      %r14d, 256(%rsp)                              #423.13
..LN9349:
	.loc    1  424  is_stmt 1
        lea       (%r11,%rcx,8), %r15                           #424.13
..LN9350:
	.loc    1  423  is_stmt 1
        movl      %r9d, 264(%rsp)                               #423.13
..LN9351:
        lea       (%rdi,%rcx,8), %rbx                           #423.13
..LN9352:
                                # LOE rbx r12 r13 r15
..B7.35:                        # Preds ..B7.37 ..B7.34         # Infreq
..L388:         # optimization report
                # %s was not vectorized: vector dependence prevents vectorization%s
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
..LN9353:
	.loc    1  429  is_stmt 1
        lea       464(%rsp), %rdi                               #429.5
..LN9354:
	.loc    1  423  is_stmt 1
        movq      (%rbx,%r13,8), %rax                           #423.13
..LN9355:
	.loc    1  429  is_stmt 1
        lea       488(%rsp), %rsi                               #429.5
..LN9356:
	.loc    1  426  is_stmt 1
        movq      8(%rbx,%r13,8), %r9                           #426.13
..LN9357:
	.loc    1  424  is_stmt 1
        movq      (%r15,%r13,8), %rcx                           #424.13
..LN9358:
	.loc    1  427  is_stmt 1
        movq      8(%r15,%r13,8), %r10                          #427.13
..LN9359:
	.loc    1  425  is_stmt 1
        movq      (%r12,%r13,8), %r8                            #425.13
..LN9360:
	.loc    1  428  is_stmt 1
        movq      8(%r12,%r13,8), %r11                          #428.13
..LN9361:
	.loc    1  429  is_stmt 1
        lea       (%r13,%r13,2), %r14d                          #429.37
..LN9362:
        addl      24(%rsp), %r14d                               #429.37
..LN9363:
        movslq    %r14d, %r14                                   #429.24
..LN9364:
	.loc    1  423  is_stmt 1
        movq      %rax, -24(%rsi)                               #423.5
..LN9365:
	.loc    1  429  is_stmt 1
        movq      72(%rbp), %rax                                #429.24
..LN9366:
	.loc    1  424  is_stmt 1
        movq      %rcx, -16(%rsi)                               #424.5
..LN9367:
	.loc    1  425  is_stmt 1
        movq      %r8, -8(%rsi)                                 #425.5
..LN9368:
	.loc    1  426  is_stmt 1
        movq      %r9, (%rsi)                                   #426.5
..LN9369:
	.loc    1  429  is_stmt 1
        lea       (%rax,%r14,8), %r14                           #429.24
..LN9370:
        movq      %r14, %rdx                                    #429.5
..LN9371:
	.loc    1  427  is_stmt 1
        movq      %r10, 8(%rsi)                                 #427.5
..LN9372:
	.loc    1  428  is_stmt 1
        movq      %r11, 16(%rsi)                                #428.5
..___tag_value_calc_c2l_grid_info_.389:
..LN9373:
	.loc    1  429  is_stmt 1
#       vect_cross(const double *, const double *, double *)
        call      vect_cross                                    #429.5
..___tag_value_calc_c2l_grid_info_.390:
..LN9374:
                                # LOE rbx r12 r13 r14 r15
..B7.36:                        # Preds ..B7.35                 # Infreq
..LN9375:
	.loc    1  430  is_stmt 1
        movq      %r14, %rdi                                    #430.5
..___tag_value_calc_c2l_grid_info_.391:
..LN9376:
#       normalize_vect(double *)
        call      normalize_vect                                #430.5
..___tag_value_calc_c2l_grid_info_.392:
..LN9377:
                                # LOE rbx r12 r13 r15
..B7.37:                        # Preds ..B7.36                 # Infreq
..LN9378:
	.loc    1  422  is_stmt 1
        incq      %r13                                          #422.24
..LN9379:
        cmpq      200(%rsp), %r13                               #422.24
..LN9380:
        jb        ..B7.35       # Prob 82%                      #422.24
..LN9381:
                                # LOE rbx r12 r13 r15
..B7.38:                        # Preds ..B7.37                 # Infreq
..LN9382:
        movl      24(%rsp), %eax                                #
..LN9383:
        movl      16(%rsp), %esi                                #
..LN9384:
        movl      8(%rsp), %ecx                                 #
..LN9385:
        movl      (%rsp), %edx                                  #
..LN9386:
        movq      440(%rsp), %r10                               #
..LN9387:
        movq      432(%rsp), %r11                               #
..LN9388:
        movq      424(%rsp), %rdi                               #
..LN9389:
        movl      256(%rsp), %r14d                              #
..LN9390:
        movl      264(%rsp), %r9d                               #
..LN9391:
                                # LOE rdi r10 r11 eax edx ecx esi r9d r14d
..B7.39:                        # Preds ..B7.33 ..B7.38         # Infreq
..LN9392:
        incl      %edx                                          #422.3
..LN9393:
        addl      %esi, %eax                                    #422.3
..LN9394:
        lea       1(%rcx,%r9), %ecx                             #422.3
..LN9395:
        cmpl      %r14d, %edx                                   #422.3
..LN9396:
        jb        ..B7.33       # Prob 82%                      #422.3
..LN9397:
                                # LOE rdi r10 r11 eax edx ecx esi r9d r14d
..B7.40:                        # Preds ..B7.39                 # Infreq
..LN9398:
        movl      416(%rsp), %r12d                              #
..LN9399:
        movl      %r9d, %ebx                                    #
..LN9400:
        movl      456(%rsp), %r15d                              #
..LN9401:
        movq      200(%rsp), %r13                               #
..LN9402:
                                # LOE r13 ebx r12d r14d r15d
..B7.41:                        # Preds ..B7.31 ..B7.40         # Infreq
..LN9403:
	.loc    1  433  is_stmt 1
        xorl      %eax, %eax                                    #433.3
..LN9404:
        xorl      %esi, %esi                                    #433.27
..LN9405:
        testl     %r15d, %r15d                                  #433.14
..LN9406:
        jle       ..B7.51       # Prob 9%                       #433.14
..LN9407:
                                # LOE r13 eax ebx esi r12d r14d r15d
..B7.42:                        # Preds ..B7.41                 # Infreq
..LN9408:
	.loc    1  438  is_stmt 1
        movq      432(%rsp), %rdx                               #438.13
..LN9409:
	.loc    1  386  is_stmt 1
        lea       1(%r13), %r10                                 #386.3
..LN9410:
	.loc    1  439  is_stmt 1
        movq      440(%rsp), %rcx                               #439.13
..LN9411:
	.loc    1  440  is_stmt 1
        lea       3(%rbx,%rbx,2), %r8d                          #440.38
..LN9412:
	.loc    1  368  is_stmt 1
        movq      80(%rbp), %r11                                #368.1
..LN9413:
	.loc    1  433  is_stmt 1
        movl      %r8d, 40(%rsp)                                #433.27
..LN9414:
	.loc    1  438  is_stmt 1
        lea       (%rdx,%r13,8), %rdi                           #438.13
..LN9415:
	.loc    1  437  is_stmt 1
        movq      424(%rsp), %rdx                               #437.13
..LN9416:
	.loc    1  439  is_stmt 1
        lea       (%rcx,%r13,8), %rcx                           #439.13
..LN9417:
	.loc    1  433  is_stmt 1
        movq      %r10, 48(%rsp)                                #433.27
..LN9418:
        movl      %r14d, 256(%rsp)                              #433.27
..LN9419:
        movl      %r15d, 456(%rsp)                              #433.27
..LN9420:
	.loc    1  437  is_stmt 1
        lea       (%rdx,%r13,8), %r9                            #437.13
..LN9421:
	.loc    1  433  is_stmt 1
        movq      %r9, (%rsp)                                   #433.27
..LN9422:
        xorl      %edx, %edx                                    #433.27
..LN9423:
        movq      %r13, 200(%rsp)                               #433.27
..LN9424:
                                # LOE rcx rdi eax edx ebx esi r12d
..B7.43:                        # Preds ..B7.49 ..B7.42         # Infreq
..L393:         # optimization report
                # %s was not vectorized: vector dependence prevents vectorization%s
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
..LN9425:
        xorl      %r14d, %r14d                                  #433.23
..LN9426:
        testl     %r12d, %r12d                                  #433.34
..LN9427:
        jle       ..B7.49       # Prob 9%                       #433.34
..LN9428:
                                # LOE rcx rdi r14 eax edx ebx esi r12d
..B7.44:                        # Preds ..B7.43                 # Infreq
..LN9429:
	.loc    1  434  is_stmt 1
        movslq    %esi, %rsi                                    #434.13
..LN9430:
	.loc    1  436  is_stmt 1
        movq      440(%rsp), %r11                               #436.13
..LN9431:
	.loc    1  435  is_stmt 1
        movq      432(%rsp), %r10                               #435.13
..LN9432:
	.loc    1  434  is_stmt 1
        movq      424(%rsp), %r13                               #434.13
..LN9433:
	.loc    1  437  is_stmt 1
        movq      (%rsp), %r15                                  #437.13
..LN9434:
	.loc    1  436  is_stmt 1
        lea       (%r11,%rsi,8), %r8                            #436.13
..LN9435:
	.loc    1  437  is_stmt 1
        movl      %ebx, 264(%rsp)                               #437.13
..LN9436:
	.loc    1  435  is_stmt 1
        lea       (%r10,%rsi,8), %r11                           #435.13
..LN9437:
	.loc    1  437  is_stmt 1
        movq      %r11, 80(%rsp)                                #437.13
..LN9438:
	.loc    1  434  is_stmt 1
        lea       (%r13,%rsi,8), %r9                            #434.13
..LN9439:
	.loc    1  437  is_stmt 1
        movq      %r9, 72(%rsp)                                 #437.13
..LN9440:
	.loc    1  439  is_stmt 1
        lea       (%rcx,%rsi,8), %r10                           #439.13
..LN9441:
	.loc    1  437  is_stmt 1
        movq      %r10, 64(%rsp)                                #437.13
..LN9442:
	.loc    1  438  is_stmt 1
        lea       (%rdi,%rsi,8), %r13                           #438.13
..LN9443:
	.loc    1  437  is_stmt 1
        movq      %r8, 88(%rsp)                                 #437.13
..LN9444:
        lea       (%r15,%rsi,8), %r15                           #437.13
..LN9445:
        movl      %edx, 56(%rsp)                                #437.13
..LN9446:
        movq      %rdi, 32(%rsp)                                #437.13
..LN9447:
        movq      %rcx, 24(%rsp)                                #437.13
..LN9448:
        movl      %esi, 16(%rsp)                                #437.13
..LN9449:
        movl      %eax, 8(%rsp)                                 #437.13
..LN9450:
        movl      %r12d, 416(%rsp)                              #437.13
..LN9451:
        movq      80(%rbp), %rbx                                #437.13
..LN9452:
                                # LOE rbx r13 r14 r15
..B7.45:                        # Preds ..B7.47 ..B7.44         # Infreq
..L394:         # optimization report
                # %s was not vectorized: vector dependence prevents vectorization%s
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
..LN9453:
	.loc    1  440  is_stmt 1
        lea       464(%rsp), %rdi                               #440.5
..LN9454:
	.loc    1  434  is_stmt 1
        movq      72(%rsp), %rax                                #434.13
..LN9455:
	.loc    1  435  is_stmt 1
        movq      80(%rsp), %r8                                 #435.13
..LN9456:
	.loc    1  436  is_stmt 1
        movq      88(%rsp), %r10                                #436.13
..LN9457:
	.loc    1  439  is_stmt 1
        movq      64(%rsp), %rdx                                #439.13
..LN9458:
	.loc    1  434  is_stmt 1
        movq      (%rax,%r14,8), %rcx                           #434.13
..LN9459:
        movq      %rcx, 24(%rdi)                                #434.5
..LN9460:
	.loc    1  435  is_stmt 1
        movq      (%r8,%r14,8), %r9                             #435.13
..LN9461:
	.loc    1  436  is_stmt 1
        movq      (%r10,%r14,8), %r11                           #436.13
..LN9462:
	.loc    1  437  is_stmt 1
        movq      8(%r15,%r14,8), %r12                          #437.13
..LN9463:
	.loc    1  438  is_stmt 1
        movq      8(%r13,%r14,8), %rax                          #438.13
..LN9464:
	.loc    1  439  is_stmt 1
        movq      8(%rdx,%r14,8), %rcx                          #439.13
..LN9465:
	.loc    1  440  is_stmt 1
        lea       (%r14,%r14,2), %esi                           #440.38
..LN9466:
        addl      56(%rsp), %esi                                #440.38
..LN9467:
        movslq    %esi, %rsi                                    #440.24
..LN9468:
	.loc    1  437  is_stmt 1
        movq      %r12, (%rdi)                                  #437.5
..LN9469:
	.loc    1  435  is_stmt 1
        movq      %r9, 32(%rdi)                                 #435.5
..LN9470:
	.loc    1  436  is_stmt 1
        movq      %r11, 40(%rdi)                                #436.5
..LN9471:
	.loc    1  438  is_stmt 1
        movq      %rax, 8(%rdi)                                 #438.5
..LN9472:
	.loc    1  440  is_stmt 1
        lea       (%rbx,%rsi,8), %r12                           #440.24
..LN9473:
        movq      %r12, %rdx                                    #440.5
..LN9474:
        lea       488(%rsp), %rsi                               #440.5
..LN9475:
	.loc    1  439  is_stmt 1
        movq      %rcx, -8(%rsi)                                #439.5
..___tag_value_calc_c2l_grid_info_.395:
..LN9476:
	.loc    1  440  is_stmt 1
#       vect_cross(const double *, const double *, double *)
        call      vect_cross                                    #440.5
..___tag_value_calc_c2l_grid_info_.396:
..LN9477:
                                # LOE rbx r12 r13 r14 r15
..B7.46:                        # Preds ..B7.45                 # Infreq
..LN9478:
	.loc    1  441  is_stmt 1
        movq      %r12, %rdi                                    #441.5
..___tag_value_calc_c2l_grid_info_.397:
..LN9479:
#       normalize_vect(double *)
        call      normalize_vect                                #441.5
..___tag_value_calc_c2l_grid_info_.398:
..LN9480:
                                # LOE rbx r13 r14 r15
..B7.47:                        # Preds ..B7.46                 # Infreq
..LN9481:
	.loc    1  433  is_stmt 1
        incq      %r14                                          #433.23
..LN9482:
        cmpq      48(%rsp), %r14                                #433.23
..LN9483:
        jb        ..B7.45       # Prob 82%                      #433.23
..LN9484:
                                # LOE rbx r13 r14 r15
..B7.48:                        # Preds ..B7.47                 # Infreq
..LN9485:
        movl      56(%rsp), %edx                                #
..LN9486:
        movq      32(%rsp), %rdi                                #
..LN9487:
        movq      24(%rsp), %rcx                                #
..LN9488:
        movl      16(%rsp), %esi                                #
..LN9489:
        movl      8(%rsp), %eax                                 #
..LN9490:
        movl      416(%rsp), %r12d                              #
..LN9491:
        movl      264(%rsp), %ebx                               #
..LN9492:
                                # LOE rcx rdi eax edx ebx esi r12d
..B7.49:                        # Preds ..B7.43 ..B7.48         # Infreq
..LN9493:
        incl      %eax                                          #433.3
..LN9494:
        lea       1(%rsi,%rbx), %esi                            #433.3
..LN9495:
        addl      40(%rsp), %edx                                #433.3
..LN9496:
        cmpl      456(%rsp), %eax                               #433.3
..LN9497:
        jb        ..B7.43       # Prob 81%                      #433.3
..LN9498:
                                # LOE rcx rdi eax edx ebx esi r12d
..B7.50:                        # Preds ..B7.49                 # Infreq
..LN9499:
        movl      256(%rsp), %r14d                              #
..LN9500:
        movl      456(%rsp), %r15d                              #
..LN9501:
        movq      200(%rsp), %r13                               #
..LN9502:
                                # LOE r13 ebx r12d r14d r15d
..B7.51:                        # Preds ..B7.41 ..B7.50         # Infreq
..LN9503:
	.loc    1  444  is_stmt 1
        movl      %ebx, %edi                                    #444.32
..LN9504:
        imull     %r15d, %edi                                   #444.32
..LN9505:
        movl      %edi, 8(%rsp)                                 #444.32
..LN9506:
        movslq    %edi, %rdi                                    #444.32
..LN9507:
        shlq      $3, %rdi                                      #444.35
..LN9508:
        movq      %rdi, (%rsp)                                  #444.35
..LN9509:
#       malloc(size_t)
        call      malloc                                        #444.22
..LN9510:
                                # LOE rax r13 ebx r12d r14d r15d
..B7.231:                       # Preds ..B7.51                 # Infreq
..LN9511:
        movq      %rax, 320(%rsp)                               #444.22
..LN9512:
                                # LOE r13 ebx r12d r14d r15d
..B7.52:                        # Preds ..B7.231                # Infreq
..LN9513:
	.loc    1  445  is_stmt 1
        movq      (%rsp), %rdi                                  #445.22
..LN9514:
#       malloc(size_t)
        call      malloc                                        #445.22
..LN9515:
                                # LOE rax r13 ebx r12d r14d r15d
..B7.232:                       # Preds ..B7.52                 # Infreq
..LN9516:
        movq      %rax, 448(%rsp)                               #445.22
..LN9517:
                                # LOE r13 ebx r12d r14d r15d
..B7.53:                        # Preds ..B7.232                # Infreq
..LN9518:
	.loc    1  446  is_stmt 1
        xorl      %esi, %esi                                    #446.3
..LN9519:
        xorl      %edi, %edi                                    #446.26
..LN9520:
        testl     %r15d, %r15d                                  #446.14
..LN9521:
        jle       ..B7.55       # Prob 9%                       #446.14
..LN9522:
                                # LOE rdi r13 ebx esi r12d r14d r15d
..B7.54:                        # Preds ..B7.53                 # Infreq
..L399:         # optimization report
                # %s was not vectorized: inner loop was already vectorized
..LN9523:
        testl     %ebx, %ebx                                    #446.33
..LN9524:
        jg        ..B7.188      # Prob 50%                      #446.33
..LN9525:
                                # LOE rdi r13 ebx esi r12d r14d r15d
..B7.55:                        # Preds ..B7.215 ..B7.206 ..B7.53 ..B7.54 # Infreq
..LN9526:
	.loc    1  450  is_stmt 1
        vzeroupper                                              #450.3
..LN9527:
        movl      8(%rsp), %edi                                 #450.3
..LN9528:
        movq      320(%rsp), %rsi                               #450.3
..LN9529:
        movq      448(%rsp), %rdx                               #450.3
..LN9530:
        movq      88(%rbp), %rcx                                #450.3
..LN9531:
        movq      96(%rbp), %r8                                 #450.3
..___tag_value_calc_c2l_grid_info_.400:
..LN9532:
#       unit_vect_latlon(int, const double *, const double *, double *, double *)
        call      unit_vect_latlon                              #450.3
..___tag_value_calc_c2l_grid_info_.401:
..LN9533:
                                # LOE r13 ebx r12d r14d r15d
..B7.56:                        # Preds ..B7.55                 # Infreq
..LN9534:
	.loc    1  368  is_stmt 1
        movq      104(%rbp), %rax                               #368.1
..LN9535:
        movq      112(%rbp), %rcx                               #368.1
..LN9536:
        movq      120(%rbp), %r10                               #368.1
..LN9537:
	.loc    1  451  is_stmt 1
        movl      (%rax), %edx                                  #451.69
..LN9538:
	.loc    1  368  is_stmt 1
        movq      128(%rbp), %rax                               #368.1
..LN9539:
	.loc    1  451  is_stmt 1
        movl      (%rcx), %esi                                  #451.84
..LN9540:
	.loc    1  452  is_stmt 1
        movl      (%r10), %r11d                                 #452.6
..LN9541:
        movl      (%rax), %eax                                  #452.22
..LN9542:
	.loc    1  451  is_stmt 1
        movl      %edx, (%rsp)                                  #451.69
..LN9543:
        movl      %esi, 104(%rsp)                               #451.84
..LN9544:
	.loc    1  452  is_stmt 1
        movl      %r11d, 176(%rsp)                              #452.6
..LN9545:
        movl      %eax, 248(%rsp)                               #452.22
..LN9546:
	.loc    1  217  is_stmt 1
        testl     %r12d, %r12d                                  #217.14
..LN9547:
        jle       ..B7.89       # Prob 50%                      #217.14
..LN9548:
                                # LOE r13 ebx r12d r14d r15d
..B7.57:                        # Preds ..B7.56                 # Infreq
..LN9549:
        cmpl      $6, %r12d                                     #217.3
..LN9550:
        jle       ..B7.83       # Prob 50%                      #217.3
..LN9551:
                                # LOE r13 ebx r12d r14d r15d
..B7.58:                        # Preds ..B7.57                 # Infreq
..LN9552:
	.loc    1  218  is_stmt 1
        movq      64(%rbp), %rax                                #218.5
..LN9553:
        cmpq      56(%rbp), %rax                                #218.5
..LN9554:
        jbe       ..B7.60       # Prob 50%                      #218.5
..LN9555:
                                # LOE r13 ebx r12d r14d r15d
..B7.59:                        # Preds ..B7.58                 # Infreq
..LN9556:
        movq      64(%rbp), %rdx                                #218.5
..LN9557:
        lea       8(,%r13,8), %rax                              #218.5
..LN9558:
        subq      56(%rbp), %rdx                                #218.5
..LN9559:
        cmpq      %rdx, %rax                                    #218.5
..LN9560:
        jle       ..B7.62       # Prob 50%                      #218.5
..LN9561:
                                # LOE r13 ebx r12d r14d r15d
..B7.60:                        # Preds ..B7.58 ..B7.59         # Infreq
..LN9562:
        movq      64(%rbp), %rax                                #218.5
..LN9563:
        cmpq      56(%rbp), %rax                                #218.5
..LN9564:
        jae       ..B7.83       # Prob 50%                      #218.5
..LN9565:
                                # LOE r13 ebx r12d r14d r15d
..B7.61:                        # Preds ..B7.60                 # Infreq
..LN9566:
        movq      56(%rbp), %rax                                #218.5
..LN9567:
        lea       8(,%r13,8), %rdx                              #218.5
..LN9568:
        subq      64(%rbp), %rax                                #218.5
..LN9569:
        cmpq      %rdx, %rax                                    #218.5
..LN9570:
        jl        ..B7.83       # Prob 50%                      #218.5
..LN9571:
                                # LOE r13 ebx r12d r14d r15d
..B7.62:                        # Preds ..B7.59 ..B7.61         # Infreq
..LN9572:
	.loc    1  217  is_stmt 1
        cmpl      $16, %r12d                                    #217.3
..LN9573:
        jl        ..B7.207      # Prob 10%                      #217.3
..LN9574:
                                # LOE r13 ebx r12d r14d r15d
..B7.63:                        # Preds ..B7.62                 # Infreq
..LN9575:
        movq      64(%rbp), %rdx                                #217.3
..LN9576:
        andq      $31, %rdx                                     #217.3
..LN9577:
        movl      %edx, %edx                                    #217.3
..LN9578:
        testl     %edx, %edx                                    #217.3
..LN9579:
        je        ..B7.66       # Prob 50%                      #217.3
..LN9580:
                                # LOE rdx r13 ebx r12d r14d r15d
..B7.64:                        # Preds ..B7.63                 # Infreq
..LN9581:
        testb     $7, %dl                                       #217.3
..LN9582:
        jne       ..B7.207      # Prob 10%                      #217.3
..LN9583:
                                # LOE rdx r13 ebx r12d r14d r15d
..B7.65:                        # Preds ..B7.64                 # Infreq
..LN9584:
        negl      %edx                                          #217.3
..LN9585:
        addl      $32, %edx                                     #217.3
..LN9586:
        shrl      $3, %edx                                      #217.3
..LN9587:
                                # LOE rdx r13 ebx r12d r14d r15d
..B7.66:                        # Preds ..B7.65 ..B7.63         # Infreq
..LN9588:
        lea       16(%rdx), %eax                                #217.3
..LN9589:
        cmpl      %eax, %r12d                                   #217.3
..LN9590:
        jl        ..B7.207      # Prob 10%                      #217.3
..LN9591:
                                # LOE rdx r13 ebx r12d r14d r15d
..B7.67:                        # Preds ..B7.66                 # Infreq
..LN9592:
        movl      %r12d, %ecx                                   #217.3
..LN9593:
        xorl      %esi, %esi                                    #217.3
..LN9594:
        subl      %edx, %ecx                                    #217.3
..LN9595:
        andl      $15, %ecx                                     #217.3
..LN9596:
        negl      %ecx                                          #217.3
..LN9597:
        addl      %r12d, %ecx                                   #217.3
..LN9598:
        testq     %rdx, %rdx                                    #217.3
..LN9599:
        jbe       ..B7.71       # Prob 9%                       #217.3
..LN9600:
                                # LOE rdx rsi r13 ecx ebx r12d r14d r15d
..B7.68:                        # Preds ..B7.67                 # Infreq
..LN9601:
	.loc    1  218  is_stmt 1
        movq      64(%rbp), %r10                                #218.17
..LN9602:
        movq      $0x3fe0000000000000, %rax                     #218.17
..LN9603:
        movq      56(%rbp), %r11                                #218.17
..LN9604:
                                # LOE rax rdx rsi r10 r11 r13 ecx ebx r12d r14d r15d
..B7.69:                        # Preds ..B7.69 ..B7.68         # Infreq
..L402:         # optimization report
                # MULTIVERSIONED FOR DATA DEPENDENCE, VER 1
                # LOOP WAS UNROLLED BY 4
                # PEELED LOOP FOR VECTORIZATION
                # VECTORIZATION SPEEDUP COEFFECIENT 3.875000
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 0.406250
..LN9605:
        movq      %rax, (%r11,%rsi,8)                           #218.5
..LN9606:
	.loc    1  219  is_stmt 1
        movq      %rax, (%r10,%rsi,8)                           #219.5
..LN9607:
	.loc    1  217  is_stmt 1
        incq      %rsi                                          #217.3
..LN9608:
        cmpq      %rdx, %rsi                                    #217.3
..LN9609:
        jb        ..B7.69       # Prob 81%                      #217.3
..LN9610:
                                # LOE rax rdx rsi r10 r11 r13 ecx ebx r12d r14d r15d
..B7.71:                        # Preds ..B7.69 ..B7.67         # Infreq
..LN9611:
	.loc    1  218  is_stmt 1
        vmovupd   .L_2il0floatpacket.4(%rip), %ymm0             #218.17
..LN9612:
	.loc    1  217  is_stmt 1
        movslq    %ecx, %rax                                    #217.3
..LN9613:
        movq      64(%rbp), %rsi                                #217.3
..LN9614:
        movq      56(%rbp), %r10                                #217.3
..LN9615:
                                # LOE rax rdx rsi r10 r13 ecx ebx r12d r14d r15d ymm0
..B7.72:                        # Preds ..B7.72 ..B7.71         # Infreq
..L403:         # optimization report
                # MULTIVERSIONED FOR DATA DEPENDENCE, VER 1
                # LOOP WAS UNROLLED BY 4
                # LOOP WAS VECTORIZED
                # VECTORIZATION HAS UNALIGNED MEMORY REFERENCES
                # VECTORIZATION SPEEDUP COEFFECIENT 3.875000
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 0.406250
                # MAIN VECTOR TYPE: 64-bits floating point
..LN9616:
	.loc    1  218  is_stmt 1
        vmovupd   %ymm0, (%r10,%rdx,8)                          #218.5
..LN9617:
	.loc    1  219  is_stmt 1
        vmovupd   %ymm0, (%rsi,%rdx,8)                          #219.5
..LN9618:
	.loc    1  218  is_stmt 1
        vmovupd   %ymm0, 32(%r10,%rdx,8)                        #218.5
..LN9619:
	.loc    1  219  is_stmt 1
        vmovupd   %ymm0, 32(%rsi,%rdx,8)                        #219.5
..LN9620:
	.loc    1  218  is_stmt 1
        vmovupd   %ymm0, 64(%r10,%rdx,8)                        #218.5
..LN9621:
	.loc    1  219  is_stmt 1
        vmovupd   %ymm0, 64(%rsi,%rdx,8)                        #219.5
..LN9622:
	.loc    1  218  is_stmt 1
        vmovupd   %ymm0, 96(%r10,%rdx,8)                        #218.5
..LN9623:
	.loc    1  219  is_stmt 1
        vmovupd   %ymm0, 96(%rsi,%rdx,8)                        #219.5
..LN9624:
	.loc    1  217  is_stmt 1
        addq      $16, %rdx                                     #217.3
..LN9625:
        cmpq      %rax, %rdx                                    #217.3
..LN9626:
        jb        ..B7.72       # Prob 81%                      #217.3
..LN9627:
                                # LOE rax rdx rsi r10 r13 ecx ebx r12d r14d r15d ymm0
..B7.74:                        # Preds ..B7.72 ..B7.207        # Infreq
..LN9628:
        lea       1(%rcx), %eax                                 #217.3
..LN9629:
        cmpl      %eax, %r12d                                   #217.3
..LN9630:
        jb        ..B7.89       # Prob 50%                      #217.3
..LN9631:
                                # LOE r13 ecx ebx r12d r14d r15d
..B7.75:                        # Preds ..B7.74                 # Infreq
..LN9632:
        movslq    %ecx, %rdx                                    #217.3
..LN9633:
        negq      %rdx                                          #217.3
..LN9634:
        addq      192(%rsp), %rdx                               #217.3
..LN9635:
        cmpq      $4, %rdx                                      #217.3
..LN9636:
        jl        ..B7.220      # Prob 10%                      #217.3
..LN9637:
                                # LOE rdx r13 ecx ebx r12d r14d r15d
..B7.76:                        # Preds ..B7.75                 # Infreq
..LN9638:
	.loc    1  218  is_stmt 1
        movslq    %ecx, %rcx                                    #218.5
..LN9639:
	.loc    1  217  is_stmt 1
        movl      %edx, %eax                                    #217.3
..LN9640:
	.loc    1  219  is_stmt 1
        movq      64(%rbp), %r10                                #219.5
..LN9641:
	.loc    1  217  is_stmt 1
        andl      $-4, %eax                                     #217.3
..LN9642:
	.loc    1  218  is_stmt 1
        movq      56(%rbp), %rsi                                #218.5
..LN9643:
	.loc    1  217  is_stmt 1
        xorl      %r11d, %r11d                                  #217.3
..LN9644:
        movslq    %eax, %rax                                    #217.3
..LN9645:
	.loc    1  218  is_stmt 1
        vmovupd   .L_2il0floatpacket.9(%rip), %ymm0             #218.17
..LN9646:
	.loc    1  219  is_stmt 1
        lea       (%r10,%rcx,8), %r10                           #219.5
..LN9647:
	.loc    1  218  is_stmt 1
        lea       (%rsi,%rcx,8), %rsi                           #218.5
..LN9648:
                                # LOE rax rdx rsi r10 r11 r13 ecx ebx r12d r14d r15d ymm0
..B7.77:                        # Preds ..B7.77 ..B7.76         # Infreq
..L404:         # optimization report
                # MULTIVERSIONED FOR DATA DEPENDENCE, VER 1
                # LOOP WAS VECTORIZED
                # REMAINDER LOOP FOR VECTORIZATION
                # VECTORIZATION HAS UNALIGNED MEMORY REFERENCES
                # VECTORIZATION SPEEDUP COEFFECIENT 1.849609
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 1.625000
                # MAIN VECTOR TYPE: 64-bits floating point
..LN9649:
        vmovupd   %ymm0, (%rsi,%r11,8)                          #218.5
..LN9650:
	.loc    1  219  is_stmt 1
        vmovupd   %ymm0, (%r10,%r11,8)                          #219.5
..LN9651:
	.loc    1  217  is_stmt 1
        addq      $4, %r11                                      #217.3
..LN9652:
        cmpq      %rax, %r11                                    #217.3
..LN9653:
        jb        ..B7.77       # Prob 81%                      #217.3
..LN9654:
                                # LOE rax rdx rsi r10 r11 r13 ecx ebx r12d r14d r15d ymm0
..B7.79:                        # Preds ..B7.77 ..B7.220        # Infreq
..LN9655:
        cmpq      %rdx, %rax                                    #217.3
..LN9656:
        jae       ..B7.89       # Prob 9%                       #217.3
..LN9657:
                                # LOE rax rdx r13 ecx ebx r12d r14d r15d
..B7.80:                        # Preds ..B7.79                 # Infreq
..LN9658:
	.loc    1  218  is_stmt 1
        movslq    %ecx, %rcx                                    #218.5
..LN9659:
        movq      $0x3fe0000000000000, %r10                     #218.17
..LN9660:
	.loc    1  219  is_stmt 1
        movq      64(%rbp), %rsi                                #219.5
..LN9661:
	.loc    1  218  is_stmt 1
        movq      56(%rbp), %r11                                #218.5
..LN9662:
	.loc    1  219  is_stmt 1
        lea       (%rsi,%rcx,8), %rsi                           #219.5
..LN9663:
	.loc    1  218  is_stmt 1
        lea       (%r11,%rcx,8), %rcx                           #218.5
..LN9664:
                                # LOE rax rdx rcx rsi r10 r13 ebx r12d r14d r15d
..B7.81:                        # Preds ..B7.81 ..B7.80         # Infreq
..L405:         # optimization report
                # MULTIVERSIONED FOR DATA DEPENDENCE, VER 1
                # REMAINDER LOOP FOR VECTORIZATION
                # VECTORIZATION SPEEDUP COEFFECIENT 1.849609
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 1.625000
..LN9665:
        movq      %r10, (%rcx,%rax,8)                           #218.5
..LN9666:
	.loc    1  219  is_stmt 1
        movq      %r10, (%rsi,%rax,8)                           #219.5
..LN9667:
	.loc    1  217  is_stmt 1
        incq      %rax                                          #217.3
..LN9668:
        cmpq      %rdx, %rax                                    #217.3
..LN9669:
        jb        ..B7.81       # Prob 81%                      #217.3
..LN9670:
        jmp       ..B7.89       # Prob 100%                     #217.3
..LN9671:
                                # LOE rax rdx rcx rsi r10 r13 ebx r12d r14d r15d
..B7.83:                        # Preds ..B7.57 ..B7.60 ..B7.61 # Infreq
..LN9672:
        movl      %r12d, %eax                                   #217.3
..LN9673:
        movl      $1, %esi                                      #217.3
..LN9674:
        shrl      $31, %eax                                     #217.3
..LN9675:
        xorl      %ecx, %ecx                                    #217.3
..LN9676:
        lea       1(%rbx,%rax), %edx                            #217.3
..LN9677:
        sarl      $1, %edx                                      #217.3
..LN9678:
        testl     %edx, %edx                                    #217.3
..LN9679:
        jbe       ..B7.87       # Prob 9%                       #217.3
..LN9680:
                                # LOE r13 edx ecx ebx esi r12d r14d r15d
..B7.84:                        # Preds ..B7.83                 # Infreq
..LN9681:
	.loc    1  218  is_stmt 1
        movq      64(%rbp), %r10                                #218.17
..LN9682:
        movq      $0x3fe0000000000000, %rax                     #218.17
..LN9683:
        movq      56(%rbp), %r11                                #218.17
..LN9684:
                                # LOE rax r10 r11 r13 edx ecx ebx r12d r14d r15d
..B7.85:                        # Preds ..B7.85 ..B7.84         # Infreq
..L406:         # optimization report
                # MULTIVERSIONED FOR DATA DEPENDENCE, VER 2
                # LOOP WAS UNROLLED BY 2
                # %s was not vectorized: non-vectorizable loop instance from multiversioning
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
..LN9685:
        lea       (%rcx,%rcx), %esi                             #218.5
..LN9686:
        movslq    %esi, %rsi                                    #218.5
..LN9687:
	.loc    1  217  is_stmt 1
        incl      %ecx                                          #217.3
..LN9688:
	.loc    1  218  is_stmt 1
        movq      %rax, (%r11,%rsi,8)                           #218.5
..LN9689:
	.loc    1  219  is_stmt 1
        movq      %rax, (%r10,%rsi,8)                           #219.5
..LN9690:
	.loc    1  218  is_stmt 1
        movq      %rax, 8(%r11,%rsi,8)                          #218.5
..LN9691:
	.loc    1  219  is_stmt 1
        movq      %rax, 8(%r10,%rsi,8)                          #219.5
..LN9692:
	.loc    1  217  is_stmt 1
        cmpl      %edx, %ecx                                    #217.3
..LN9693:
        jb        ..B7.85       # Prob 63%                      #217.3
..LN9694:
                                # LOE rax r10 r11 r13 edx ecx ebx r12d r14d r15d
..B7.86:                        # Preds ..B7.85                 # Infreq
..LN9695:
	.loc    1  218  is_stmt 1
        lea       1(%rcx,%rcx), %esi                            #218.5
..LN9696:
                                # LOE r13 ebx esi r12d r14d r15d
..B7.87:                        # Preds ..B7.86 ..B7.83         # Infreq
..LN9697:
	.loc    1  217  is_stmt 1
        lea       -1(%rsi), %eax                                #217.3
..LN9698:
        cmpl      %eax, %r12d                                   #217.3
..LN9699:
        jbe       ..B7.89       # Prob 9%                       #217.3
..LN9700:
                                # LOE r13 ebx esi r12d r14d r15d
..B7.88:                        # Preds ..B7.87                 # Infreq
..L407:         # optimization report
                # REMAINDER LOOP
                # MULTIVERSIONED FOR DATA DEPENDENCE, VER 2
                # %s was not vectorized: non-vectorizable loop instance from multiversioning
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
..LN9701:
	.loc    1  218  is_stmt 1
        movq      $0x3fe0000000000000, %rdx                     #218.17
..LN9702:
        movslq    %esi, %rsi                                    #218.5
..LN9703:
        movq      56(%rbp), %rax                                #218.5
..LN9704:
	.loc    1  219  is_stmt 1
        movq      64(%rbp), %rcx                                #219.5
..LN9705:
	.loc    1  218  is_stmt 1
        movq      %rdx, -8(%rax,%rsi,8)                         #218.5
..LN9706:
	.loc    1  219  is_stmt 1
        movq      %rdx, -8(%rcx,%rsi,8)                         #219.5
..LN9707:
                                # LOE r13 ebx r12d r14d r15d
..B7.89:                        # Preds ..B7.74 ..B7.79 ..B7.56 ..B7.81 ..B7.87
                                #       ..B7.88                 # Infreq
..LN9708:
	.loc    1  221  is_stmt 1
        testl     %r14d, %r14d                                  #221.14
..LN9709:
        jle       ..B7.122      # Prob 50%                      #221.14
..LN9710:
                                # LOE r13 ebx r12d r14d r15d
..B7.90:                        # Preds ..B7.89                 # Infreq
..LN9711:
        cmpl      $6, %r14d                                     #221.3
..LN9712:
        jle       ..B7.116      # Prob 50%                      #221.3
..LN9713:
                                # LOE r13 ebx r12d r14d r15d
..B7.91:                        # Preds ..B7.90                 # Infreq
..LN9714:
	.loc    1  222  is_stmt 1
        movq      48(%rbp), %rax                                #222.5
..LN9715:
        cmpq      40(%rbp), %rax                                #222.5
..LN9716:
        jbe       ..B7.93       # Prob 50%                      #222.5
..LN9717:
                                # LOE r13 ebx r12d r14d r15d
..B7.92:                        # Preds ..B7.91                 # Infreq
..LN9718:
	.loc    1  221  is_stmt 1
        movslq    %r15d, %r15                                   #221.3
..LN9719:
	.loc    1  222  is_stmt 1
        movq      48(%rbp), %rdx                                #222.5
..LN9720:
        subq      40(%rbp), %rdx                                #222.5
..LN9721:
        lea       8(,%r15,8), %rax                              #222.5
..LN9722:
        cmpq      %rdx, %rax                                    #222.5
..LN9723:
        jle       ..B7.95       # Prob 50%                      #222.5
..LN9724:
                                # LOE r13 ebx r12d r14d r15d
..B7.93:                        # Preds ..B7.91 ..B7.92         # Infreq
..LN9725:
        movq      48(%rbp), %rax                                #222.5
..LN9726:
        cmpq      40(%rbp), %rax                                #222.5
..LN9727:
        jae       ..B7.116      # Prob 50%                      #222.5
..LN9728:
                                # LOE r13 ebx r12d r14d r15d
..B7.94:                        # Preds ..B7.93                 # Infreq
..LN9729:
	.loc    1  221  is_stmt 1
        movslq    %r15d, %r15                                   #221.3
..LN9730:
	.loc    1  222  is_stmt 1
        movq      40(%rbp), %rax                                #222.5
..LN9731:
        subq      48(%rbp), %rax                                #222.5
..LN9732:
        lea       8(,%r15,8), %rdx                              #222.5
..LN9733:
        cmpq      %rdx, %rax                                    #222.5
..LN9734:
        jl        ..B7.116      # Prob 50%                      #222.5
..LN9735:
                                # LOE r13 ebx r12d r14d r15d
..B7.95:                        # Preds ..B7.92 ..B7.94         # Infreq
..LN9736:
	.loc    1  221  is_stmt 1
        cmpl      $16, %r14d                                    #221.3
..LN9737:
        jl        ..B7.211      # Prob 10%                      #221.3
..LN9738:
                                # LOE r13 ebx r12d r14d r15d
..B7.96:                        # Preds ..B7.95                 # Infreq
..LN9739:
        movq      48(%rbp), %rdx                                #221.3
..LN9740:
        andq      $31, %rdx                                     #221.3
..LN9741:
        movl      %edx, %edx                                    #221.3
..LN9742:
        testl     %edx, %edx                                    #221.3
..LN9743:
        je        ..B7.99       # Prob 50%                      #221.3
..LN9744:
                                # LOE rdx r13 ebx r12d r14d r15d
..B7.97:                        # Preds ..B7.96                 # Infreq
..LN9745:
        testb     $7, %dl                                       #221.3
..LN9746:
        jne       ..B7.211      # Prob 10%                      #221.3
..LN9747:
                                # LOE rdx r13 ebx r12d r14d r15d
..B7.98:                        # Preds ..B7.97                 # Infreq
..LN9748:
        negl      %edx                                          #221.3
..LN9749:
        addl      $32, %edx                                     #221.3
..LN9750:
        shrl      $3, %edx                                      #221.3
..LN9751:
                                # LOE rdx r13 ebx r12d r14d r15d
..B7.99:                        # Preds ..B7.98 ..B7.96         # Infreq
..LN9752:
        lea       16(%rdx), %eax                                #221.3
..LN9753:
        cmpl      %eax, %r14d                                   #221.3
..LN9754:
        jl        ..B7.211      # Prob 10%                      #221.3
..LN9755:
                                # LOE rdx r13 ebx r12d r14d r15d
..B7.100:                       # Preds ..B7.99                 # Infreq
..LN9756:
        movl      %r14d, %ecx                                   #221.3
..LN9757:
        xorl      %esi, %esi                                    #221.3
..LN9758:
        subl      %edx, %ecx                                    #221.3
..LN9759:
        andl      $15, %ecx                                     #221.3
..LN9760:
        negl      %ecx                                          #221.3
..LN9761:
        addl      %r14d, %ecx                                   #221.3
..LN9762:
        testq     %rdx, %rdx                                    #221.3
..LN9763:
        jbe       ..B7.104      # Prob 9%                       #221.3
..LN9764:
                                # LOE rdx rsi r13 ecx ebx r12d r14d r15d
..B7.101:                       # Preds ..B7.100                # Infreq
..LN9765:
	.loc    1  222  is_stmt 1
        movq      48(%rbp), %r10                                #222.17
..LN9766:
        movq      $0x3fe0000000000000, %rax                     #222.17
..LN9767:
        movq      40(%rbp), %r11                                #222.17
..LN9768:
                                # LOE rax rdx rsi r10 r11 r13 ecx ebx r12d r14d r15d
..B7.102:                       # Preds ..B7.102 ..B7.101       # Infreq
..L408:         # optimization report
                # MULTIVERSIONED FOR DATA DEPENDENCE, VER 1
                # LOOP WAS UNROLLED BY 4
                # PEELED LOOP FOR VECTORIZATION
                # VECTORIZATION SPEEDUP COEFFECIENT 3.875000
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 0.406250
..LN9769:
        movq      %rax, (%r11,%rsi,8)                           #222.5
..LN9770:
	.loc    1  223  is_stmt 1
        movq      %rax, (%r10,%rsi,8)                           #223.5
..LN9771:
	.loc    1  221  is_stmt 1
        incq      %rsi                                          #221.3
..LN9772:
        cmpq      %rdx, %rsi                                    #221.3
..LN9773:
        jb        ..B7.102      # Prob 81%                      #221.3
..LN9774:
                                # LOE rax rdx rsi r10 r11 r13 ecx ebx r12d r14d r15d
..B7.104:                       # Preds ..B7.102 ..B7.100       # Infreq
..LN9775:
	.loc    1  222  is_stmt 1
        vmovupd   .L_2il0floatpacket.4(%rip), %ymm0             #222.17
..LN9776:
	.loc    1  221  is_stmt 1
        movslq    %ecx, %rax                                    #221.3
..LN9777:
        movq      48(%rbp), %rsi                                #221.3
..LN9778:
        movq      40(%rbp), %r10                                #221.3
..LN9779:
                                # LOE rax rdx rsi r10 r13 ecx ebx r12d r14d r15d ymm0
..B7.105:                       # Preds ..B7.105 ..B7.104       # Infreq
..L409:         # optimization report
                # MULTIVERSIONED FOR DATA DEPENDENCE, VER 1
                # LOOP WAS UNROLLED BY 4
                # LOOP WAS VECTORIZED
                # VECTORIZATION HAS UNALIGNED MEMORY REFERENCES
                # VECTORIZATION SPEEDUP COEFFECIENT 3.875000
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 0.406250
                # MAIN VECTOR TYPE: 64-bits floating point
..LN9780:
	.loc    1  222  is_stmt 1
        vmovupd   %ymm0, (%r10,%rdx,8)                          #222.5
..LN9781:
	.loc    1  223  is_stmt 1
        vmovupd   %ymm0, (%rsi,%rdx,8)                          #223.5
..LN9782:
	.loc    1  222  is_stmt 1
        vmovupd   %ymm0, 32(%r10,%rdx,8)                        #222.5
..LN9783:
	.loc    1  223  is_stmt 1
        vmovupd   %ymm0, 32(%rsi,%rdx,8)                        #223.5
..LN9784:
	.loc    1  222  is_stmt 1
        vmovupd   %ymm0, 64(%r10,%rdx,8)                        #222.5
..LN9785:
	.loc    1  223  is_stmt 1
        vmovupd   %ymm0, 64(%rsi,%rdx,8)                        #223.5
..LN9786:
	.loc    1  222  is_stmt 1
        vmovupd   %ymm0, 96(%r10,%rdx,8)                        #222.5
..LN9787:
	.loc    1  223  is_stmt 1
        vmovupd   %ymm0, 96(%rsi,%rdx,8)                        #223.5
..LN9788:
	.loc    1  221  is_stmt 1
        addq      $16, %rdx                                     #221.3
..LN9789:
        cmpq      %rax, %rdx                                    #221.3
..LN9790:
        jb        ..B7.105      # Prob 81%                      #221.3
..LN9791:
                                # LOE rax rdx rsi r10 r13 ecx ebx r12d r14d r15d ymm0
..B7.107:                       # Preds ..B7.105 ..B7.211       # Infreq
..LN9792:
        lea       1(%rcx), %eax                                 #221.3
..LN9793:
        cmpl      %eax, %r14d                                   #221.3
..LN9794:
        jb        ..B7.122      # Prob 50%                      #221.3
..LN9795:
                                # LOE r13 ecx ebx r12d r14d r15d
..B7.108:                       # Preds ..B7.107                # Infreq
..LN9796:
        movslq    %r14d, %rdx                                   #221.3
..LN9797:
        movslq    %ecx, %rcx                                    #221.3
..LN9798:
        subq      %rcx, %rdx                                    #221.3
..LN9799:
        cmpq      $4, %rdx                                      #221.3
..LN9800:
        jl        ..B7.210      # Prob 10%                      #221.3
..LN9801:
                                # LOE rdx r13 ecx ebx r12d r14d r15d
..B7.109:                       # Preds ..B7.108                # Infreq
..LN9802:
	.loc    1  222  is_stmt 1
        movslq    %ecx, %rcx                                    #222.5
..LN9803:
	.loc    1  221  is_stmt 1
        movl      %edx, %eax                                    #221.3
..LN9804:
	.loc    1  223  is_stmt 1
        movq      48(%rbp), %r10                                #223.5
..LN9805:
	.loc    1  221  is_stmt 1
        andl      $-4, %eax                                     #221.3
..LN9806:
	.loc    1  222  is_stmt 1
        movq      40(%rbp), %rsi                                #222.5
..LN9807:
	.loc    1  221  is_stmt 1
        xorl      %r11d, %r11d                                  #221.3
..LN9808:
        movslq    %eax, %rax                                    #221.3
..LN9809:
	.loc    1  222  is_stmt 1
        vmovupd   .L_2il0floatpacket.9(%rip), %ymm0             #222.17
..LN9810:
	.loc    1  223  is_stmt 1
        lea       (%r10,%rcx,8), %r10                           #223.5
..LN9811:
	.loc    1  222  is_stmt 1
        lea       (%rsi,%rcx,8), %rsi                           #222.5
..LN9812:
                                # LOE rax rdx rsi r10 r11 r13 ecx ebx r12d r14d r15d ymm0
..B7.110:                       # Preds ..B7.110 ..B7.109       # Infreq
..L410:         # optimization report
                # MULTIVERSIONED FOR DATA DEPENDENCE, VER 1
                # LOOP WAS VECTORIZED
                # REMAINDER LOOP FOR VECTORIZATION
                # VECTORIZATION HAS UNALIGNED MEMORY REFERENCES
                # VECTORIZATION SPEEDUP COEFFECIENT 1.849609
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 1.625000
                # MAIN VECTOR TYPE: 64-bits floating point
..LN9813:
        vmovupd   %ymm0, (%rsi,%r11,8)                          #222.5
..LN9814:
	.loc    1  223  is_stmt 1
        vmovupd   %ymm0, (%r10,%r11,8)                          #223.5
..LN9815:
	.loc    1  221  is_stmt 1
        addq      $4, %r11                                      #221.3
..LN9816:
        cmpq      %rax, %r11                                    #221.3
..LN9817:
        jb        ..B7.110      # Prob 81%                      #221.3
..LN9818:
                                # LOE rax rdx rsi r10 r11 r13 ecx ebx r12d r14d r15d ymm0
..B7.112:                       # Preds ..B7.110 ..B7.210       # Infreq
..LN9819:
        cmpq      %rdx, %rax                                    #221.3
..LN9820:
        jae       ..B7.122      # Prob 9%                       #221.3
..LN9821:
                                # LOE rax rdx r13 ecx ebx r12d r14d r15d
..B7.113:                       # Preds ..B7.112                # Infreq
..LN9822:
	.loc    1  222  is_stmt 1
        movslq    %ecx, %rcx                                    #222.5
..LN9823:
        movq      $0x3fe0000000000000, %r10                     #222.17
..LN9824:
	.loc    1  223  is_stmt 1
        movq      48(%rbp), %rsi                                #223.5
..LN9825:
	.loc    1  222  is_stmt 1
        movq      40(%rbp), %r11                                #222.5
..LN9826:
	.loc    1  223  is_stmt 1
        lea       (%rsi,%rcx,8), %rsi                           #223.5
..LN9827:
	.loc    1  222  is_stmt 1
        lea       (%r11,%rcx,8), %rcx                           #222.5
..LN9828:
                                # LOE rax rdx rcx rsi r10 r13 ebx r12d r14d r15d
..B7.114:                       # Preds ..B7.114 ..B7.113       # Infreq
..L411:         # optimization report
                # MULTIVERSIONED FOR DATA DEPENDENCE, VER 1
                # REMAINDER LOOP FOR VECTORIZATION
                # VECTORIZATION SPEEDUP COEFFECIENT 1.849609
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 1.625000
..LN9829:
        movq      %r10, (%rcx,%rax,8)                           #222.5
..LN9830:
	.loc    1  223  is_stmt 1
        movq      %r10, (%rsi,%rax,8)                           #223.5
..LN9831:
	.loc    1  221  is_stmt 1
        incq      %rax                                          #221.3
..LN9832:
        cmpq      %rdx, %rax                                    #221.3
..LN9833:
        jb        ..B7.114      # Prob 81%                      #221.3
..LN9834:
        jmp       ..B7.122      # Prob 100%                     #221.3
..LN9835:
                                # LOE rax rdx rcx rsi r10 r13 ebx r12d r14d r15d
..B7.116:                       # Preds ..B7.90 ..B7.93 ..B7.94 # Infreq
..LN9836:
        movl      %r14d, %eax                                   #221.3
..LN9837:
        xorl      %ecx, %ecx                                    #221.3
..LN9838:
        shrl      $31, %eax                                     #221.3
..LN9839:
        movl      $1, %esi                                      #221.3
..LN9840:
        lea       1(%r15,%rax), %edx                            #221.3
..LN9841:
        sarl      $1, %edx                                      #221.3
..LN9842:
        testl     %edx, %edx                                    #221.3
..LN9843:
        jbe       ..B7.120      # Prob 9%                       #221.3
..LN9844:
                                # LOE r13 edx ecx ebx esi r12d r14d r15d
..B7.117:                       # Preds ..B7.116                # Infreq
..LN9845:
	.loc    1  222  is_stmt 1
        movq      48(%rbp), %r10                                #222.17
..LN9846:
        movq      $0x3fe0000000000000, %rax                     #222.17
..LN9847:
        movq      40(%rbp), %r11                                #222.17
..LN9848:
                                # LOE rax r10 r11 r13 edx ecx ebx r12d r14d r15d
..B7.118:                       # Preds ..B7.118 ..B7.117       # Infreq
..L412:         # optimization report
                # MULTIVERSIONED FOR DATA DEPENDENCE, VER 2
                # LOOP WAS UNROLLED BY 2
                # %s was not vectorized: non-vectorizable loop instance from multiversioning
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
..LN9849:
        lea       (%rcx,%rcx), %esi                             #222.5
..LN9850:
        movslq    %esi, %rsi                                    #222.5
..LN9851:
	.loc    1  221  is_stmt 1
        incl      %ecx                                          #221.3
..LN9852:
	.loc    1  222  is_stmt 1
        movq      %rax, (%r11,%rsi,8)                           #222.5
..LN9853:
	.loc    1  223  is_stmt 1
        movq      %rax, (%r10,%rsi,8)                           #223.5
..LN9854:
	.loc    1  222  is_stmt 1
        movq      %rax, 8(%r11,%rsi,8)                          #222.5
..LN9855:
	.loc    1  223  is_stmt 1
        movq      %rax, 8(%r10,%rsi,8)                          #223.5
..LN9856:
	.loc    1  221  is_stmt 1
        cmpl      %edx, %ecx                                    #221.3
..LN9857:
        jb        ..B7.118      # Prob 63%                      #221.3
..LN9858:
                                # LOE rax r10 r11 r13 edx ecx ebx r12d r14d r15d
..B7.119:                       # Preds ..B7.118                # Infreq
..LN9859:
	.loc    1  222  is_stmt 1
        lea       1(%rcx,%rcx), %esi                            #222.5
..LN9860:
                                # LOE r13 ebx esi r12d r14d r15d
..B7.120:                       # Preds ..B7.119 ..B7.116       # Infreq
..LN9861:
	.loc    1  221  is_stmt 1
        lea       -1(%rsi), %eax                                #221.3
..LN9862:
        cmpl      %eax, %r14d                                   #221.3
..LN9863:
        jbe       ..B7.122      # Prob 9%                       #221.3
..LN9864:
                                # LOE r13 ebx esi r12d r14d r15d
..B7.121:                       # Preds ..B7.120                # Infreq
..L413:         # optimization report
                # REMAINDER LOOP
                # MULTIVERSIONED FOR DATA DEPENDENCE, VER 2
                # %s was not vectorized: non-vectorizable loop instance from multiversioning
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
..LN9865:
	.loc    1  222  is_stmt 1
        movq      $0x3fe0000000000000, %rdx                     #222.17
..LN9866:
        movslq    %esi, %rsi                                    #222.5
..LN9867:
        movq      40(%rbp), %rax                                #222.5
..LN9868:
	.loc    1  223  is_stmt 1
        movq      48(%rbp), %rcx                                #223.5
..LN9869:
	.loc    1  222  is_stmt 1
        movq      %rdx, -8(%rax,%rsi,8)                         #222.5
..LN9870:
	.loc    1  223  is_stmt 1
        movq      %rdx, -8(%rcx,%rsi,8)                         #223.5
..LN9871:
                                # LOE r13 ebx r12d r14d r15d
..B7.122:                       # Preds ..B7.114 ..B7.120 ..B7.89 ..B7.107 ..B7.112
                                #       ..B7.121                # Infreq
..LN9872:
	.loc    1  226  is_stmt 1
        vzeroupper                                              #226.18
..LN9873:
        lea       (%rbx,%rbx), %eax                             #226.18
..LN9874:
        movslq    %eax, %rax                                    #226.18
..LN9875:
        lea       32(,%rax,8), %rdi                             #226.18
..LN9876:
#       malloc(size_t)
        call      malloc                                        #226.18
..LN9877:
                                # LOE rax r13 ebx r12d r14d r15d
..B7.233:                       # Preds ..B7.122                # Infreq
..LN9878:
        movq      %rax, 384(%rsp)                               #226.18
..LN9879:
                                # LOE r13 ebx r12d r14d r15d
..B7.123:                       # Preds ..B7.233                # Infreq
..LN9880:
	.loc    1  227  is_stmt 1
        lea       (%r15,%r15), %eax                             #227.18
..LN9881:
        movslq    %eax, %rax                                    #227.18
..LN9882:
        lea       32(,%rax,8), %rdi                             #227.18
..LN9883:
#       malloc(size_t)
        call      malloc                                        #227.18
..LN9884:
                                # LOE rax r13 ebx r12d r14d r15d
..B7.234:                       # Preds ..B7.123                # Infreq
..LN9885:
        movq      %rax, %rcx                                    #227.18
..LN9886:
                                # LOE rcx r13 ebx r12d r14d r15d
..B7.124:                       # Preds ..B7.234                # Infreq
..LN9887:
	.loc    1  232  is_stmt 1
        movl      (%rsp), %r10d                                 #232.5
..LN9888:
        movl      $1, %eax                                      #232.5
..LN9889:
        xorl      %edx, %edx                                    #232.5
..LN9890:
        testl     %r10d, %r10d                                  #232.5
..LN9891:
        cmovne    %rax, %rdx                                    #232.5
..LN9892:
	.loc    1  214  is_stmt 1
        lea       1(%r13), %rax                                 #214.14
..LN9893:
	.loc    1  236  is_stmt 1
        cmpl      $0, 104(%rsp)                                 #236.5
..LN9894:
	.loc    1  240  is_stmt 1
        movl      176(%rsp), %esi                               #240.5
..LN9895:
	.loc    1  236  is_stmt 1
        cmovne    %r13, %rax                                    #236.5
..LN9896:
        movl      $1, %edi                                      #236.5
..LN9897:
	.loc    1  240  is_stmt 1
        testl     %esi, %esi                                    #240.5
..LN9898:
        cmove     %esi, %edi                                    #240.5
..LN9899:
	.loc    1  244  is_stmt 1
        movl      %r14d, %esi                                   #244.5
..LN9900:
        cmpl      $0, 248(%rsp)                                 #244.5
..LN9901:
        cmovne    %r15d, %esi                                   #244.5
..LN9902:
	.loc    1  247  is_stmt 1
        testl     %r10d, %r10d                                  #247.6
..LN9903:
        je        ..B7.138      # Prob 50%                      #247.6
..LN9904:
                                # LOE rax rdx rcx r13 ebx esi edi r12d r14d r15d
..B7.125:                       # Preds ..B7.124                # Infreq
..LN9905:
	.loc    1  249  is_stmt 1
        movl      %edi, 24(%rsp)                                #249.9
..LN9906:
        lea       (%rdi,%rdi), %r10d                            #249.9
..LN9907:
        movl      %edi, (%rsp)                                  #249.9
..LN9908:
	.loc    1  227  is_stmt 1
        lea       (%rcx,%r10,8), %r8                            #227.18
..LN9909:
	.loc    1  249  is_stmt 1
        cmpl      %esi, %edi                                    #249.22
..LN9910:
        jg        ..B7.132      # Prob 15%                      #249.22
..LN9911:
                                # LOE rax rdx rcx rdi r8 r13 ebx esi edi r12d r14d r15d dil
..B7.126:                       # Preds ..B7.125                # Infreq
..LN9912:
        movl      %edi, %r9d                                    #249.9
..LN9913:
	.loc    1  251  is_stmt 1
        lea       2(%rbx), %r10d                                #251.26
..LN9914:
	.loc    1  249  is_stmt 1
        imull     %r10d, %r9d                                   #249.9
..LN9915:
        movslq    %r9d, %r9                                     #249.9
..LN9916:
        movslq    %r10d, %r10                                   #249.28
..LN9917:
        movl      %r12d, 416(%rsp)                              #249.28
..LN9918:
        movl      %r15d, 456(%rsp)                              #249.28
..LN9919:
        movq      %r13, 200(%rsp)                               #249.28
..LN9920:
        movq      %r10, 112(%rsp)                               #249.28
..LN9921:
        movl      %esi, 184(%rsp)                               #249.28
..LN9922:
        movl      %edi, 16(%rsp)                                #249.28
..LN9923:
        movq      %rax, 376(%rsp)                               #249.28
..LN9924:
        movq      %rdx, 8(%rsp)                                 #249.28
..LN9925:
        movq      %rcx, 392(%rsp)                               #249.28
..LN9926:
        movl      %r14d, 256(%rsp)                              #249.28
..LN9927:
        movq      %r8, %r14                                     #249.28
..LN9928:
        movl      %ebx, 264(%rsp)                               #249.28
..LN9929:
        movq      %r9, %rbx                                     #249.28
..LN9930:
        movl      24(%rsp), %r12d                               #249.28
..LN9931:
        movq      368(%rsp), %r13                               #249.28
..LN9932:
        movq      360(%rsp), %r15                               #249.28
..LN9933:
                                # LOE rbx r13 r14 r15 r12d
..B7.127:                       # Preds ..B7.130 ..B7.126       # Infreq
..L414:         # optimization report
                # %s was not vectorized: vector dependence prevents vectorization%s
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
..LN9934:
	.loc    1  325  is_stmt 1
        lea       344(%rsp), %rsi                               #325.3
..LN9935:
	.loc    1  251  is_stmt 1
        movq      (%r13,%rbx,8), %rax                           #251.15
..LN9936:
	.loc    1  325  is_stmt 1
        movl      $1, %edi                                      #325.3
..LN9937:
	.loc    1  251  is_stmt 1
        movq      %rax, (%rsi)                                  #251.7
..LN9938:
	.loc    1  325  is_stmt 1
        lea       352(%rsp), %rdx                               #325.3
..LN9939:
	.loc    1  251  is_stmt 1
        movq      (%r15,%rbx,8), %r10                           #251.43
..LN9940:
	.loc    1  325  is_stmt 1
        lea       32(%rsp), %rcx                                #325.3
..LN9941:
	.loc    1  252  is_stmt 1
        movq      8(%r15,%rbx,8), %rax                          #252.43
..LN9942:
	.loc    1  325  is_stmt 1
        lea       40(%rsp), %r8                                 #325.3
..LN9943:
	.loc    1  252  is_stmt 1
        movq      8(%r13,%rbx,8), %r11                          #252.15
..LN9944:
	.loc    1  325  is_stmt 1
        lea       48(%rsp), %r9                                 #325.3
..LN9945:
	.loc    1  251  is_stmt 1
        movq      %r10, (%rdx)                                  #251.35
..LN9946:
	.loc    1  252  is_stmt 1
        movq      %r11, -24(%rdx)                               #252.7
..LN9947:
        movq      %rax, -16(%rdx)                               #252.35
..___tag_value_calc_c2l_grid_info_.415:
..LN9948:
	.loc    1  325  is_stmt 1
#       latlon2xyz(int, const double *, const double *, double *, double *, double *)
        call      latlon2xyz                                    #325.3
..___tag_value_calc_c2l_grid_info_.416:
..LN9949:
                                # LOE rbx r13 r14 r15 r12d
..B7.128:                       # Preds ..B7.127                # Infreq
..LN9950:
	.loc    1  326  is_stmt 1
        movl      $1, %edi                                      #326.3
..LN9951:
        lea       328(%rsp), %rsi                               #326.3
..LN9952:
        lea       336(%rsp), %rdx                               #326.3
..LN9953:
        lea       56(%rsp), %rcx                                #326.3
..LN9954:
        lea       64(%rsp), %r8                                 #326.3
..LN9955:
        lea       72(%rsp), %r9                                 #326.3
..___tag_value_calc_c2l_grid_info_.417:
..LN9956:
#       latlon2xyz(int, const double *, const double *, double *, double *, double *)
        call      latlon2xyz                                    #326.3
..___tag_value_calc_c2l_grid_info_.418:
..LN9957:
                                # LOE rbx r13 r14 r15 r12d
..B7.129:                       # Preds ..B7.128                # Infreq
..LN9958:
	.loc    1  327  is_stmt 1
        vmovsd    48(%rsp), %xmm2                               #327.16
..LN9959:
	.loc    1  328  is_stmt 1
        lea       8(%r14), %r9                                  #328.3
..LN9960:
	.loc    1  327  is_stmt 1
        vmovsd    40(%rsp), %xmm1                               #327.16
..LN9961:
	.loc    1  328  is_stmt 1
        lea       80(%rsp), %rsi                                #328.3
..LN9962:
	.loc    1  327  is_stmt 1
        vmovsd    -48(%rsi), %xmm0                              #327.16
..LN9963:
	.loc    1  328  is_stmt 1
        lea       88(%rsp), %rdx                                #328.3
..LN9964:
        movl      $1, %edi                                      #328.3
..LN9965:
        lea       96(%rsp), %rcx                                #328.3
..LN9966:
        movq      %r14, %r8                                     #328.3
..LN9967:
	.loc    1  338  is_stmt 1
        vaddsd    -16(%rdx), %xmm2, %xmm8                       #338.18
..LN9968:
	.loc    1  337  is_stmt 1
        vaddsd    -24(%rdx), %xmm1, %xmm6                       #337.18
..LN9969:
	.loc    1  336  is_stmt 1
        vaddsd    -32(%rdx), %xmm0, %xmm4                       #336.18
..LN9970:
	.loc    1  339  is_stmt 1
        vmulsd    %xmm8, %xmm8, %xmm3                           #339.43
..LN9971:
        vfmadd231sd %xmm6, %xmm6, %xmm3                         #339.8
..LN9972:
        vfmadd231sd %xmm4, %xmm4, %xmm3                         #339.8
..LN9973:
        vsqrtsd   %xmm3, %xmm3, %xmm3                           #339.8
..LN9974:
	.loc    1  340  is_stmt 1
        vdivsd    %xmm3, %xmm4, %xmm5                           #340.3
..LN9975:
	.loc    1  341  is_stmt 1
        vdivsd    %xmm3, %xmm6, %xmm7                           #341.3
..LN9976:
	.loc    1  342  is_stmt 1
        vdivsd    %xmm3, %xmm8, %xmm9                           #342.3
..LN9977:
	.loc    1  327  is_stmt 1
        vmovsd    %xmm5, -8(%rdx)                               #327.24
..LN9978:
        vmovsd    %xmm7, (%rdx)                                 #327.24
..LN9979:
        vmovsd    %xmm9, 8(%rdx)                                #327.24
..___tag_value_calc_c2l_grid_info_.419:
..LN9980:
	.loc    1  328  is_stmt 1
#       xyz2latlon(int, const double *, const double *, const double *, double *, double *)
        call      xyz2latlon                                    #328.3
..___tag_value_calc_c2l_grid_info_.420:
..LN9981:
                                # LOE rbx r13 r14 r15 r12d
..B7.130:                       # Preds ..B7.129                # Infreq
..LN9982:
	.loc    1  249  is_stmt 1
        incl      %r12d                                         #249.28
..LN9983:
        addq      $16, %r14                                     #249.28
..LN9984:
        addq      112(%rsp), %rbx                               #249.28
..LN9985:
        cmpl      184(%rsp), %r12d                              #249.22
..LN9986:
        jle       ..B7.127      # Prob 82%                      #249.22
..LN9987:
                                # LOE rbx r13 r14 r15 r12d
..B7.131:                       # Preds ..B7.130                # Infreq
..LN9988:
        movl      184(%rsp), %esi                               #
..LN9989:
        movl      16(%rsp), %edi                                #
..LN9990:
        movq      376(%rsp), %rax                               #
..LN9991:
        movq      8(%rsp), %rdx                                 #
..LN9992:
        movq      392(%rsp), %rcx                               #
..LN9993:
        movl      256(%rsp), %r14d                              #
..LN9994:
        movl      416(%rsp), %r12d                              #
..LN9995:
        movl      456(%rsp), %r15d                              #
..LN9996:
        movq      200(%rsp), %r13                               #
..LN9997:
        movl      264(%rsp), %ebx                               #
..LN9998:
                                # LOE rax rdx rcx r13 ebx esi edi r12d r14d r15d
..B7.132:                       # Preds ..B7.125 ..B7.131       # Infreq
..LN9999:
	.loc    1  256  is_stmt 1
        movl      %r12d, %r8d                                   #256.9
..LN10000:
        imull     %edi, %r8d                                    #256.9
..LN10001:
        movl      %edi, %r9d                                    #256.9
..LN10002:
        movslq    %r8d, %r8                                     #256.9
..LN10003:
        cmpl      %esi, %edi                                    #256.21
..LN10004:
        jge       ..B7.138      # Prob 10%                      #256.21
..LN10005:
                                # LOE rax rdx rcx r8 r9 r13 ebx esi edi r12d r14d r15d
..B7.133:                       # Preds ..B7.132                # Infreq
..LN10006:
        movl      %r14d, 256(%rsp)                              #
..LN10007:
        movl      %esi, 184(%rsp)                               #
..LN10008:
        movl      %edi, 16(%rsp)                                #
..LN10009:
        movq      %rax, 376(%rsp)                               #
..LN10010:
        movq      %rdx, 8(%rsp)                                 #
..LN10011:
        movl      %r12d, 416(%rsp)                              #
..LN10012:
        movq      %r9, %r12                                     #
..LN10013:
        movl      %r15d, 456(%rsp)                              #
..LN10014:
        movq      %r13, 200(%rsp)                               #
..LN10015:
        movq      %r8, %r13                                     #
..LN10016:
        movl      %ebx, 264(%rsp)                               #
..LN10017:
        movq      %rcx, %rbx                                    #
..LN10018:
        movl      (%rsp), %r14d                                 #
..LN10019:
                                # LOE rbx r12 r13 r14d
..B7.134:                       # Preds ..B7.136 ..B7.133       # Infreq
..L421:         # optimization report
                # %s was not vectorized: vector dependence prevents vectorization%s
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
..LN10020:
	.loc    1  259  is_stmt 1
        lea       (%r14,%r14), %r15d                            #259.39
..LN10021:
        movslq    %r15d, %r15                                   #259.34
..LN10022:
        lea       344(%rsp), %rsi                               #259.12
..LN10023:
	.loc    1  257  is_stmt 1
        movq      64(%rsi), %rax                                #257.15
..LN10024:
	.loc    1  258  is_stmt 1
        movq      56(%rsi), %r10                                #258.15
..LN10025:
	.loc    1  257  is_stmt 1
        movq      (%rax,%r13,8), %rdx                           #257.15
..LN10026:
	.loc    1  259  is_stmt 1
        lea       (%rbx,%r15,8), %r15                           #259.34
..LN10027:
	.loc    1  258  is_stmt 1
        movq      (%r10,%r13,8), %r11                           #258.15
..LN10028:
	.loc    1  259  is_stmt 1
        movq      %r15, %rdi                                    #259.12
..LN10029:
	.loc    1  257  is_stmt 1
        movq      %rdx, (%rsi)                                  #257.7
..LN10030:
	.loc    1  258  is_stmt 1
        movq      %r11, 8(%rsi)                                 #258.7
..___tag_value_calc_c2l_grid_info_.422:
..LN10031:
	.loc    1  259  is_stmt 1
#       great_circle_distance(double *, double *)
        call      great_circle_distance                         #259.12
..___tag_value_calc_c2l_grid_info_.423:
..LN10032:
                                # LOE rbx r12 r13 r15 r14d xmm0
..B7.235:                       # Preds ..B7.134                # Infreq
..LN10033:
        vmovsd    %xmm0, (%rsp)                                 #259.12
..LN10034:
                                # LOE rbx r12 r13 r15 r14d
..B7.135:                       # Preds ..B7.235                # Infreq
..LN10035:
	.loc    1  260  is_stmt 1
        addq      $16, %r15                                     #260.12
..LN10036:
        lea       344(%rsp), %rsi                               #260.12
..LN10037:
        movq      %r15, %rdi                                    #260.12
..___tag_value_calc_c2l_grid_info_.424:
..LN10038:
#       great_circle_distance(double *, double *)
        call      great_circle_distance                         #260.12
..___tag_value_calc_c2l_grid_info_.425:
..LN10039:
                                # LOE rbx r12 r13 r14d xmm0
..B7.236:                       # Preds ..B7.135                # Infreq
..LN10040:
        vmovapd   %xmm0, %xmm1                                  #260.12
..LN10041:
                                # LOE rbx r12 r13 r14d xmm1
..B7.136:                       # Preds ..B7.236                # Infreq
..LN10042:
	.loc    1  261  is_stmt 1
        movq      40(%rbp), %rax                                #261.7
..LN10043:
	.loc    1  256  is_stmt 1
        incl      %r14d                                         #256.27
..LN10044:
        addq      192(%rsp), %r13                               #256.27
..LN10045:
	.loc    1  261  is_stmt 1
        vaddsd    (%rsp), %xmm1, %xmm0                          #261.26
..LN10046:
        vdivsd    %xmm0, %xmm1, %xmm1                           #261.26
..LN10047:
        vmovsd    %xmm1, (%rax,%r12,8)                          #261.7
..LN10048:
	.loc    1  256  is_stmt 1
        incq      %r12                                          #256.27
..LN10049:
        cmpl      184(%rsp), %r14d                              #256.21
..LN10050:
        jl        ..B7.134      # Prob 82%                      #256.21
..LN10051:
                                # LOE rbx r12 r13 r14d
..B7.137:                       # Preds ..B7.136                # Infreq
..LN10052:
        movl      184(%rsp), %esi                               #
..LN10053:
        movq      %rbx, %rcx                                    #
..LN10054:
        movl      16(%rsp), %edi                                #
..LN10055:
        movq      376(%rsp), %rax                               #
..LN10056:
        movq      8(%rsp), %rdx                                 #
..LN10057:
        movl      256(%rsp), %r14d                              #
..LN10058:
        movl      416(%rsp), %r12d                              #
..LN10059:
        movl      456(%rsp), %r15d                              #
..LN10060:
        movq      200(%rsp), %r13                               #
..LN10061:
        movl      264(%rsp), %ebx                               #
..LN10062:
                                # LOE rax rdx rcx r13 ebx esi edi r12d r14d r15d
..B7.138:                       # Preds ..B7.137 ..B7.124 ..B7.132 # Infreq
..LN10063:
	.loc    1  265  is_stmt 1
        cmpl      $0, 104(%rsp)                                 #265.6
..LN10064:
        je        ..B7.152      # Prob 50%                      #265.6
..LN10065:
                                # LOE rax rdx rcx r13 ebx esi edi r12d r14d r15d
..B7.139:                       # Preds ..B7.138                # Infreq
..LN10066:
	.loc    1  267  is_stmt 1
        lea       (%rdi,%rdi), %r10d                            #267.9
..LN10067:
	.loc    1  227  is_stmt 1
        lea       (%rcx,%r10,8), %r9                            #227.18
..LN10068:
	.loc    1  267  is_stmt 1
        cmpl      %esi, %edi                                    #267.22
..LN10069:
        jg        ..B7.146      # Prob 15%                      #267.22
..LN10070:
                                # LOE rax rdx rcx rdi r9 r13 ebx esi edi r12d r14d r15d dil
..B7.140:                       # Preds ..B7.139                # Infreq
..LN10071:
        movl      %edi, %r11d                                   #267.9
..LN10072:
	.loc    1  269  is_stmt 1
        lea       2(%rbx), %r10d                                #269.26
..LN10073:
	.loc    1  267  is_stmt 1
        imull     %r10d, %r11d                                  #267.9
..LN10074:
        movslq    %r11d, %r11                                   #267.9
..LN10075:
        movq      %r11, (%rsp)                                  #267.9
..LN10076:
	.loc    1  269  is_stmt 1
        movq      360(%rsp), %r11                               #269.43
..LN10077:
	.loc    1  267  is_stmt 1
        movslq    %r10d, %r10                                   #267.28
..LN10078:
	.loc    1  269  is_stmt 1
        movl      %r12d, 416(%rsp)                              #269.15
..LN10079:
        movl      %r15d, 456(%rsp)                              #269.15
..LN10080:
        lea       (%r11,%r13,8), %r8                            #269.43
..LN10081:
        movq      368(%rsp), %r11                               #269.15
..LN10082:
        movq      (%rsp), %r12                                  #269.15
..LN10083:
        movl      %edi, %r15d                                   #269.15
..LN10084:
        movq      %r10, 24(%rsp)                                #269.15
..LN10085:
        lea       (%r11,%r13,8), %r11                           #269.15
..LN10086:
        movl      %esi, 184(%rsp)                               #269.15
..LN10087:
        movl      %edi, 16(%rsp)                                #269.15
..LN10088:
        movq      %rax, 376(%rsp)                               #269.15
..LN10089:
        movq      %rdx, 8(%rsp)                                 #269.15
..LN10090:
        movq      %rcx, 392(%rsp)                               #269.15
..LN10091:
        movl      %r14d, 256(%rsp)                              #269.15
..LN10092:
        movq      %r9, %r14                                     #269.15
..LN10093:
        movq      %r13, 200(%rsp)                               #269.15
..LN10094:
        movq      %r8, %r13                                     #269.15
..LN10095:
        movl      %ebx, 264(%rsp)                               #269.15
..LN10096:
        movq      %r11, %rbx                                    #269.15
..LN10097:
                                # LOE rbx r12 r13 r14 r15d
..B7.141:                       # Preds ..B7.144 ..B7.140       # Infreq
..L426:         # optimization report
                # %s was not vectorized: vector dependence prevents vectorization%s
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
..LN10098:
	.loc    1  325  is_stmt 1
        lea       344(%rsp), %rsi                               #325.3
..LN10099:
	.loc    1  269  is_stmt 1
        movq      (%rbx,%r12,8), %rax                           #269.15
..LN10100:
	.loc    1  325  is_stmt 1
        movl      $1, %edi                                      #325.3
..LN10101:
	.loc    1  269  is_stmt 1
        movq      %rax, (%rsi)                                  #269.7
..LN10102:
	.loc    1  325  is_stmt 1
        lea       352(%rsp), %rdx                               #325.3
..LN10103:
	.loc    1  270  is_stmt 1
        movq      8(%rbx,%r12,8), %rax                          #270.15
..LN10104:
	.loc    1  325  is_stmt 1
        lea       104(%rsp), %rcx                               #325.3
..LN10105:
	.loc    1  270  is_stmt 1
        movq      %rax, -24(%rdx)                               #270.7
..LN10106:
	.loc    1  325  is_stmt 1
        lea       112(%rsp), %r8                                #325.3
..LN10107:
	.loc    1  269  is_stmt 1
        movq      (%r13,%r12,8), %r10                           #269.43
..LN10108:
	.loc    1  325  is_stmt 1
        lea       120(%rsp), %r9                                #325.3
..LN10109:
	.loc    1  270  is_stmt 1
        movq      8(%r13,%r12,8), %rax                          #270.43
..LN10110:
	.loc    1  269  is_stmt 1
        movq      %r10, (%rdx)                                  #269.35
..LN10111:
	.loc    1  270  is_stmt 1
        movq      %rax, -16(%rdx)                               #270.35
..___tag_value_calc_c2l_grid_info_.427:
..LN10112:
	.loc    1  325  is_stmt 1
#       latlon2xyz(int, const double *, const double *, double *, double *, double *)
        call      latlon2xyz                                    #325.3
..___tag_value_calc_c2l_grid_info_.428:
..LN10113:
                                # LOE rbx r12 r13 r14 r15d
..B7.142:                       # Preds ..B7.141                # Infreq
..LN10114:
	.loc    1  326  is_stmt 1
        movl      $1, %edi                                      #326.3
..LN10115:
        lea       328(%rsp), %rsi                               #326.3
..LN10116:
        lea       336(%rsp), %rdx                               #326.3
..LN10117:
        lea       128(%rsp), %rcx                               #326.3
..LN10118:
        lea       136(%rsp), %r8                                #326.3
..LN10119:
        lea       144(%rsp), %r9                                #326.3
..___tag_value_calc_c2l_grid_info_.429:
..LN10120:
#       latlon2xyz(int, const double *, const double *, double *, double *, double *)
        call      latlon2xyz                                    #326.3
..___tag_value_calc_c2l_grid_info_.430:
..LN10121:
                                # LOE rbx r12 r13 r14 r15d
..B7.143:                       # Preds ..B7.142                # Infreq
..LN10122:
	.loc    1  327  is_stmt 1
        vmovsd    120(%rsp), %xmm2                              #327.16
..LN10123:
	.loc    1  328  is_stmt 1
        lea       8(%r14), %r9                                  #328.3
..LN10124:
	.loc    1  327  is_stmt 1
        vmovsd    112(%rsp), %xmm1                              #327.16
..LN10125:
	.loc    1  328  is_stmt 1
        lea       152(%rsp), %rsi                               #328.3
..LN10126:
	.loc    1  327  is_stmt 1
        vmovsd    -48(%rsi), %xmm0                              #327.16
..LN10127:
	.loc    1  328  is_stmt 1
        lea       160(%rsp), %rdx                               #328.3
..LN10128:
        movl      $1, %edi                                      #328.3
..LN10129:
        lea       168(%rsp), %rcx                               #328.3
..LN10130:
        movq      %r14, %r8                                     #328.3
..LN10131:
	.loc    1  338  is_stmt 1
        vaddsd    -16(%rdx), %xmm2, %xmm8                       #338.18
..LN10132:
	.loc    1  337  is_stmt 1
        vaddsd    -24(%rdx), %xmm1, %xmm6                       #337.18
..LN10133:
	.loc    1  336  is_stmt 1
        vaddsd    -32(%rdx), %xmm0, %xmm4                       #336.18
..LN10134:
	.loc    1  339  is_stmt 1
        vmulsd    %xmm8, %xmm8, %xmm3                           #339.43
..LN10135:
        vfmadd231sd %xmm6, %xmm6, %xmm3                         #339.8
..LN10136:
        vfmadd231sd %xmm4, %xmm4, %xmm3                         #339.8
..LN10137:
        vsqrtsd   %xmm3, %xmm3, %xmm3                           #339.8
..LN10138:
	.loc    1  340  is_stmt 1
        vdivsd    %xmm3, %xmm4, %xmm5                           #340.3
..LN10139:
	.loc    1  341  is_stmt 1
        vdivsd    %xmm3, %xmm6, %xmm7                           #341.3
..LN10140:
	.loc    1  342  is_stmt 1
        vdivsd    %xmm3, %xmm8, %xmm9                           #342.3
..LN10141:
	.loc    1  327  is_stmt 1
        vmovsd    %xmm5, -8(%rdx)                               #327.24
..LN10142:
        vmovsd    %xmm7, (%rdx)                                 #327.24
..LN10143:
        vmovsd    %xmm9, 8(%rdx)                                #327.24
..___tag_value_calc_c2l_grid_info_.431:
..LN10144:
	.loc    1  328  is_stmt 1
#       xyz2latlon(int, const double *, const double *, const double *, double *, double *)
        call      xyz2latlon                                    #328.3
..___tag_value_calc_c2l_grid_info_.432:
..LN10145:
                                # LOE rbx r12 r13 r14 r15d
..B7.144:                       # Preds ..B7.143                # Infreq
..LN10146:
	.loc    1  267  is_stmt 1
        incl      %r15d                                         #267.28
..LN10147:
        addq      $16, %r14                                     #267.28
..LN10148:
        addq      24(%rsp), %r12                                #267.28
..LN10149:
        cmpl      184(%rsp), %r15d                              #267.22
..LN10150:
        jle       ..B7.141      # Prob 82%                      #267.22
..LN10151:
                                # LOE rbx r12 r13 r14 r15d
..B7.145:                       # Preds ..B7.144                # Infreq
..LN10152:
        movl      184(%rsp), %esi                               #
..LN10153:
        movl      16(%rsp), %edi                                #
..LN10154:
        movq      376(%rsp), %rax                               #
..LN10155:
        movq      8(%rsp), %rdx                                 #
..LN10156:
        movq      392(%rsp), %rcx                               #
..LN10157:
        movl      256(%rsp), %r14d                              #
..LN10158:
        movl      416(%rsp), %r12d                              #
..LN10159:
        movl      456(%rsp), %r15d                              #
..LN10160:
        movq      200(%rsp), %r13                               #
..LN10161:
        movl      264(%rsp), %ebx                               #
..LN10162:
                                # LOE rax rdx rcx r13 ebx esi edi r12d r14d r15d
..B7.146:                       # Preds ..B7.145 ..B7.139       # Infreq
..LN10163:
	.loc    1  274  is_stmt 1
        movl      %r12d, %r8d                                   #274.9
..LN10164:
        imull     %edi, %r8d                                    #274.9
..LN10165:
        movl      %edi, %r9d                                    #274.9
..LN10166:
        movslq    %r8d, %r8                                     #274.9
..LN10167:
        cmpl      %esi, %edi                                    #274.21
..LN10168:
        jge       ..B7.152      # Prob 10%                      #274.21
..LN10169:
                                # LOE rax rdx rcx r8 r9 r13 ebx esi edi r12d r14d r15d
..B7.147:                       # Preds ..B7.146                # Infreq
..LN10170:
	.loc    1  276  is_stmt 1
        movq      400(%rsp), %r10                               #276.15
..LN10171:
	.loc    1  275  is_stmt 1
        movq      408(%rsp), %r11                               #275.15
..LN10172:
        movl      %esi, 184(%rsp)                               #275.15
..LN10173:
        movq      %rax, 376(%rsp)                               #275.15
..LN10174:
	.loc    1  276  is_stmt 1
        lea       (%r10,%r13,8), %r10                           #276.15
..LN10175:
	.loc    1  275  is_stmt 1
        movq      %r10, (%rsp)                                  #275.15
..LN10176:
        lea       (%r11,%r13,8), %r11                           #275.15
..LN10177:
        movq      %rdx, 8(%rsp)                                 #275.15
..LN10178:
        movq      %rcx, 392(%rsp)                               #275.15
..LN10179:
        movl      %r14d, 256(%rsp)                              #275.15
..LN10180:
        movq      %r8, %r14                                     #275.15
..LN10181:
        movl      %r12d, 416(%rsp)                              #275.15
..LN10182:
        movl      %edi, %r12d                                   #275.15
..LN10183:
        movl      %r15d, 456(%rsp)                              #275.15
..LN10184:
        movq      %r13, 200(%rsp)                               #275.15
..LN10185:
        movq      %r9, %r13                                     #275.15
..LN10186:
        movl      %ebx, 264(%rsp)                               #275.15
..LN10187:
        movq      %r11, %rbx                                    #275.15
..LN10188:
                                # LOE rbx r13 r14 r12d
..B7.148:                       # Preds ..B7.150 ..B7.147       # Infreq
..L433:         # optimization report
                # %s was not vectorized: vector dependence prevents vectorization%s
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
..LN10189:
	.loc    1  277  is_stmt 1
        lea       (%r12,%r12), %r10d                            #277.41
..LN10190:
        movslq    %r10d, %r10                                   #277.36
..LN10191:
        lea       344(%rsp), %rsi                               #277.12
..LN10192:
        movq      48(%rsi), %r15                                #277.36
..LN10193:
	.loc    1  276  is_stmt 1
        movq      (%rsp), %rdx                                  #276.15
..LN10194:
	.loc    1  275  is_stmt 1
        movq      (%rbx,%r14,8), %rax                           #275.15
..LN10195:
        movq      %rax, (%rsi)                                  #275.7
..LN10196:
	.loc    1  277  is_stmt 1
        lea       (%r15,%r10,8), %r15                           #277.36
..LN10197:
	.loc    1  276  is_stmt 1
        movq      (%rdx,%r14,8), %rcx                           #276.15
..LN10198:
	.loc    1  277  is_stmt 1
        movq      %r15, %rdi                                    #277.12
..LN10199:
	.loc    1  276  is_stmt 1
        movq      %rcx, 8(%rsi)                                 #276.7
..___tag_value_calc_c2l_grid_info_.434:
..LN10200:
	.loc    1  277  is_stmt 1
#       great_circle_distance(double *, double *)
        call      great_circle_distance                         #277.12
..___tag_value_calc_c2l_grid_info_.435:
..LN10201:
                                # LOE rbx r13 r14 r15 r12d xmm0
..B7.237:                       # Preds ..B7.148                # Infreq
..LN10202:
        vmovsd    %xmm0, 16(%rsp)                               #277.12
..LN10203:
                                # LOE rbx r13 r14 r15 r12d
..B7.149:                       # Preds ..B7.237                # Infreq
..LN10204:
	.loc    1  278  is_stmt 1
        addq      $16, %r15                                     #278.12
..LN10205:
        lea       344(%rsp), %rsi                               #278.12
..LN10206:
        movq      %r15, %rdi                                    #278.12
..___tag_value_calc_c2l_grid_info_.436:
..LN10207:
#       great_circle_distance(double *, double *)
        call      great_circle_distance                         #278.12
..___tag_value_calc_c2l_grid_info_.437:
..LN10208:
                                # LOE rbx r13 r14 r12d xmm0
..B7.238:                       # Preds ..B7.149                # Infreq
..LN10209:
        vmovapd   %xmm0, %xmm1                                  #278.12
..LN10210:
                                # LOE rbx r13 r14 r12d xmm1
..B7.150:                       # Preds ..B7.238                # Infreq
..LN10211:
	.loc    1  279  is_stmt 1
        movq      48(%rbp), %rax                                #279.7
..LN10212:
	.loc    1  274  is_stmt 1
        incl      %r12d                                         #274.27
..LN10213:
        addq      192(%rsp), %r14                               #274.27
..LN10214:
	.loc    1  279  is_stmt 1
        vaddsd    16(%rsp), %xmm1, %xmm0                        #279.26
..LN10215:
        vdivsd    %xmm0, %xmm1, %xmm1                           #279.26
..LN10216:
        vmovsd    %xmm1, (%rax,%r13,8)                          #279.7
..LN10217:
	.loc    1  274  is_stmt 1
        incq      %r13                                          #274.27
..LN10218:
        cmpl      184(%rsp), %r12d                              #274.21
..LN10219:
        jl        ..B7.148      # Prob 82%                      #274.21
..LN10220:
                                # LOE rbx r13 r14 r12d
..B7.151:                       # Preds ..B7.150                # Infreq
..LN10221:
        movq      376(%rsp), %rax                               #
..LN10222:
        movq      8(%rsp), %rdx                                 #
..LN10223:
        movq      392(%rsp), %rcx                               #
..LN10224:
        movl      256(%rsp), %r14d                              #
..LN10225:
        movl      416(%rsp), %r12d                              #
..LN10226:
        movl      456(%rsp), %r15d                              #
..LN10227:
        movq      200(%rsp), %r13                               #
..LN10228:
        movl      264(%rsp), %ebx                               #
..LN10229:
                                # LOE rax rdx rcx r13 ebx r12d r14d r15d
..B7.152:                       # Preds ..B7.151 ..B7.146 ..B7.138 # Infreq
..LN10230:
	.loc    1  284  is_stmt 1
        cmpl      $0, 176(%rsp)                                 #284.6
..LN10231:
        je        ..B7.166      # Prob 50%                      #284.6
..LN10232:
                                # LOE rax rdx rcx r13 ebx r12d r14d r15d
..B7.153:                       # Preds ..B7.152                # Infreq
..LN10233:
	.loc    1  286  is_stmt 1
        movq      %rdx, %rdi                                    #286.9
..LN10234:
        movq      %rdi, %r9                                     #286.9
..LN10235:
        cmpq      %rax, %rdx                                    #286.22
..LN10236:
        jg        ..B7.160      # Prob 15%                      #286.22
..LN10237:
                                # LOE rax rdx rcx rdi r9 r13 ebx r12d r14d r15d
..B7.154:                       # Preds ..B7.153                # Infreq
..LN10238:
	.loc    1  288  is_stmt 1
        movq      360(%rsp), %rsi                               #288.45
..LN10239:
        movq      368(%rsp), %r10                               #288.15
..LN10240:
        movq      %r9, (%rsp)                                   #288.15
..LN10241:
        movq      %rdx, 8(%rsp)                                 #288.15
..LN10242:
        lea       (%rsi,%r13,8), %rsi                           #288.45
..LN10243:
        movq      %rcx, 392(%rsp)                               #288.15
..LN10244:
        lea       (%r10,%r13,8), %r8                            #288.15
..LN10245:
        movl      %r14d, 256(%rsp)                              #288.15
..LN10246:
        movq      %rsi, %r14                                    #288.15
..LN10247:
        movl      %r12d, 416(%rsp)                              #288.15
..LN10248:
        movq      %rax, %r12                                    #288.15
..LN10249:
        movl      %r15d, 456(%rsp)                              #288.15
..LN10250:
        movq      %rdi, %r13                                    #288.15
..LN10251:
        movl      %ebx, 264(%rsp)                               #288.15
..LN10252:
        movq      %r8, %r15                                     #288.15
..LN10253:
                                # LOE r12 r13 r14 r15
..B7.155:                       # Preds ..B7.158 ..B7.154       # Infreq
..L438:         # optimization report
                # %s was not vectorized: vector dependence prevents vectorization%s
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
..LN10254:
	.loc    1  325  is_stmt 1
        lea       344(%rsp), %rsi                               #325.3
..LN10255:
	.loc    1  287  is_stmt 1
        movq      16(%rsi), %r11                                #287.45
..LN10256:
	.loc    1  325  is_stmt 1
        movl      $1, %edi                                      #325.3
..LN10257:
	.loc    1  287  is_stmt 1
        movq      24(%rsi), %rbx                                #287.15
..LN10258:
	.loc    1  325  is_stmt 1
        lea       184(%rsp), %r8                                #325.3
..LN10259:
	.loc    1  289  is_stmt 1
        movq      40(%rsi), %rcx                                #289.31
..LN10260:
	.loc    1  325  is_stmt 1
        lea       192(%rsp), %r9                                #325.3
..LN10261:
	.loc    1  287  is_stmt 1
        movq      (%r11,%r13,8), %rdx                           #287.45
..LN10262:
        movq      %rdx, 8(%rsi)                                 #287.37
..LN10263:
	.loc    1  288  is_stmt 1
        movq      16(%r15,%r13,8), %rdx                         #288.15
..LN10264:
        movq      %rdx, -16(%rsi)                               #288.7
..LN10265:
        movq      16(%r14,%r13,8), %rdx                         #288.45
..LN10266:
        movq      %rdx, -8(%rsi)                                #288.37
..LN10267:
	.loc    1  289  is_stmt 1
        movl      %r13d, %edx                                   #289.7
..LN10268:
        addl      %edx, %edx                                    #289.36
..LN10269:
        movslq    %edx, %rdx                                    #289.31
..LN10270:
	.loc    1  287  is_stmt 1
        movq      (%rbx,%r13,8), %r10                           #287.15
..LN10271:
        movq      %r10, (%rsi)                                  #287.7
..LN10272:
	.loc    1  289  is_stmt 1
        lea       (%rcx,%rdx,8), %rbx                           #289.31
..LN10273:
	.loc    1  325  is_stmt 1
        lea       352(%rsp), %rdx                               #325.3
..LN10274:
        lea       176(%rsp), %rcx                               #325.3
..___tag_value_calc_c2l_grid_info_.439:
..LN10275:
#       latlon2xyz(int, const double *, const double *, double *, double *, double *)
        call      latlon2xyz                                    #325.3
..___tag_value_calc_c2l_grid_info_.440:
..LN10276:
                                # LOE rbx r12 r13 r14 r15
..B7.156:                       # Preds ..B7.155                # Infreq
..LN10277:
	.loc    1  326  is_stmt 1
        movl      $1, %edi                                      #326.3
..LN10278:
        lea       328(%rsp), %rsi                               #326.3
..LN10279:
        lea       336(%rsp), %rdx                               #326.3
..LN10280:
        lea       200(%rsp), %rcx                               #326.3
..LN10281:
        lea       208(%rsp), %r8                                #326.3
..LN10282:
        lea       216(%rsp), %r9                                #326.3
..___tag_value_calc_c2l_grid_info_.441:
..LN10283:
#       latlon2xyz(int, const double *, const double *, double *, double *, double *)
        call      latlon2xyz                                    #326.3
..___tag_value_calc_c2l_grid_info_.442:
..LN10284:
                                # LOE rbx r12 r13 r14 r15
..B7.157:                       # Preds ..B7.156                # Infreq
..LN10285:
	.loc    1  327  is_stmt 1
        vmovsd    192(%rsp), %xmm2                              #327.16
..LN10286:
	.loc    1  328  is_stmt 1
        lea       8(%rbx), %r9                                  #328.3
..LN10287:
	.loc    1  327  is_stmt 1
        vmovsd    184(%rsp), %xmm1                              #327.16
..LN10288:
	.loc    1  328  is_stmt 1
        lea       224(%rsp), %rsi                               #328.3
..LN10289:
	.loc    1  327  is_stmt 1
        vmovsd    -48(%rsi), %xmm0                              #327.16
..LN10290:
	.loc    1  328  is_stmt 1
        lea       232(%rsp), %rdx                               #328.3
..LN10291:
        movl      $1, %edi                                      #328.3
..LN10292:
        lea       240(%rsp), %rcx                               #328.3
..LN10293:
        movq      %rbx, %r8                                     #328.3
..LN10294:
	.loc    1  338  is_stmt 1
        vaddsd    -16(%rdx), %xmm2, %xmm8                       #338.18
..LN10295:
	.loc    1  337  is_stmt 1
        vaddsd    -24(%rdx), %xmm1, %xmm6                       #337.18
..LN10296:
	.loc    1  336  is_stmt 1
        vaddsd    -32(%rdx), %xmm0, %xmm4                       #336.18
..LN10297:
	.loc    1  339  is_stmt 1
        vmulsd    %xmm8, %xmm8, %xmm3                           #339.43
..LN10298:
        vfmadd231sd %xmm6, %xmm6, %xmm3                         #339.8
..LN10299:
        vfmadd231sd %xmm4, %xmm4, %xmm3                         #339.8
..LN10300:
        vsqrtsd   %xmm3, %xmm3, %xmm3                           #339.8
..LN10301:
	.loc    1  340  is_stmt 1
        vdivsd    %xmm3, %xmm4, %xmm5                           #340.3
..LN10302:
	.loc    1  341  is_stmt 1
        vdivsd    %xmm3, %xmm6, %xmm7                           #341.3
..LN10303:
	.loc    1  342  is_stmt 1
        vdivsd    %xmm3, %xmm8, %xmm9                           #342.3
..LN10304:
	.loc    1  327  is_stmt 1
        vmovsd    %xmm5, -8(%rdx)                               #327.24
..LN10305:
        vmovsd    %xmm7, (%rdx)                                 #327.24
..LN10306:
        vmovsd    %xmm9, 8(%rdx)                                #327.24
..___tag_value_calc_c2l_grid_info_.443:
..LN10307:
	.loc    1  328  is_stmt 1
#       xyz2latlon(int, const double *, const double *, const double *, double *, double *)
        call      xyz2latlon                                    #328.3
..___tag_value_calc_c2l_grid_info_.444:
..LN10308:
                                # LOE r12 r13 r14 r15
..B7.158:                       # Preds ..B7.157                # Infreq
..LN10309:
	.loc    1  286  is_stmt 1
        incq      %r13                                          #286.28
..LN10310:
        cmpq      %r12, %r13                                    #286.22
..LN10311:
        jle       ..B7.155      # Prob 82%                      #286.22
..LN10312:
                                # LOE r12 r13 r14 r15
..B7.159:                       # Preds ..B7.158                # Infreq
..LN10313:
        movq      %r12, %rax                                    #
..LN10314:
        movq      8(%rsp), %rdx                                 #
..LN10315:
        cmpq      %rax, %rdx                                    #286.22
..LN10316:
        movq      (%rsp), %r9                                   #
..LN10317:
        movq      392(%rsp), %rcx                               #
..LN10318:
        movl      256(%rsp), %r14d                              #
..LN10319:
        movl      416(%rsp), %r12d                              #
..LN10320:
        movl      456(%rsp), %r15d                              #
..LN10321:
        movl      264(%rsp), %ebx                               #
..LN10322:
                                # LOE rax rdx rcx r9 ebx r12d r14d r15d
..B7.160:                       # Preds ..B7.159 ..B7.153       # Infreq
..LN10323:
	.loc    1  291  is_stmt 1
        jge       ..B7.166      # Prob 10%                      #291.21
..LN10324:
                                # LOE rax rdx rcx r9 ebx r12d r14d r15d
..B7.161:                       # Preds ..B7.160                # Infreq
..LN10325:
        movl      %r14d, 256(%rsp)                              #
..LN10326:
        movq      %r9, %r13                                     #
..LN10327:
        movl      %ebx, 264(%rsp)                               #
..LN10328:
        movq      %rdx, 8(%rsp)                                 #
..LN10329:
        movq      %rcx, 392(%rsp)                               #
..LN10330:
        movl      %r12d, 416(%rsp)                              #
..LN10331:
        movq      %rax, %r12                                    #
..LN10332:
        movl      %r15d, 456(%rsp)                              #
..LN10333:
        movq      408(%rsp), %rbx                               #
..LN10334:
        movq      400(%rsp), %r14                               #
..LN10335:
                                # LOE rbx r12 r13 r14
..B7.162:                       # Preds ..B7.164 ..B7.161       # Infreq
..L445:         # optimization report
                # %s was not vectorized: vector dependence prevents vectorization%s
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
..LN10336:
	.loc    1  294  is_stmt 1
        movl      %r13d, %r8d                                   #294.12
..LN10337:
        addl      %r8d, %r8d                                    #294.41
..LN10338:
        lea       344(%rsp), %rsi                               #294.12
..LN10339:
        movslq    %r8d, %r8                                     #294.36
..LN10340:
        movq      40(%rsi), %r10                                #294.36
..LN10341:
	.loc    1  292  is_stmt 1
        movq      (%rbx,%r13,8), %rdx                           #292.15
..LN10342:
	.loc    1  293  is_stmt 1
        movq      (%r14,%r13,8), %rcx                           #293.15
..LN10343:
	.loc    1  292  is_stmt 1
        movq      %rdx, (%rsi)                                  #292.7
..LN10344:
	.loc    1  294  is_stmt 1
        lea       (%r10,%r8,8), %r15                            #294.36
..LN10345:
        movq      %r15, %rdi                                    #294.12
..LN10346:
	.loc    1  293  is_stmt 1
        movq      %rcx, 8(%rsi)                                 #293.7
..___tag_value_calc_c2l_grid_info_.446:
..LN10347:
	.loc    1  294  is_stmt 1
#       great_circle_distance(double *, double *)
        call      great_circle_distance                         #294.12
..___tag_value_calc_c2l_grid_info_.447:
..LN10348:
                                # LOE rbx r12 r13 r14 r15 xmm0
..B7.239:                       # Preds ..B7.162                # Infreq
..LN10349:
        vmovsd    %xmm0, (%rsp)                                 #294.12
..LN10350:
                                # LOE rbx r12 r13 r14 r15
..B7.163:                       # Preds ..B7.239                # Infreq
..LN10351:
	.loc    1  295  is_stmt 1
        addq      $16, %r15                                     #295.12
..LN10352:
        lea       344(%rsp), %rsi                               #295.12
..LN10353:
        movq      %r15, %rdi                                    #295.12
..___tag_value_calc_c2l_grid_info_.448:
..LN10354:
#       great_circle_distance(double *, double *)
        call      great_circle_distance                         #295.12
..___tag_value_calc_c2l_grid_info_.449:
..LN10355:
                                # LOE rbx r12 r13 r14 xmm0
..B7.240:                       # Preds ..B7.163                # Infreq
..LN10356:
        vmovapd   %xmm0, %xmm1                                  #295.12
..LN10357:
                                # LOE rbx r12 r13 r14 xmm1
..B7.164:                       # Preds ..B7.240                # Infreq
..LN10358:
	.loc    1  296  is_stmt 1
        movq      56(%rbp), %rdx                                #296.7
..LN10359:
        vaddsd    (%rsp), %xmm1, %xmm0                          #296.26
..LN10360:
        vdivsd    %xmm0, %xmm1, %xmm1                           #296.26
..LN10361:
        vmovsd    %xmm1, (%rdx,%r13,8)                          #296.7
..LN10362:
	.loc    1  291  is_stmt 1
        incq      %r13                                          #291.27
..LN10363:
        cmpq      %r12, %r13                                    #291.21
..LN10364:
        jl        ..B7.162      # Prob 82%                      #291.21
..LN10365:
                                # LOE rbx r12 r13 r14
..B7.165:                       # Preds ..B7.164                # Infreq
..LN10366:
        movq      8(%rsp), %rdx                                 #
..LN10367:
        movq      %r12, %rax                                    #
..LN10368:
        movq      392(%rsp), %rcx                               #
..LN10369:
        movl      256(%rsp), %r14d                              #
..LN10370:
        movl      416(%rsp), %r12d                              #
..LN10371:
        movl      456(%rsp), %r15d                              #
..LN10372:
        movl      264(%rsp), %ebx                               #
..LN10373:
                                # LOE rax rdx rcx ebx r12d r14d r15d
..B7.166:                       # Preds ..B7.165 ..B7.160 ..B7.152 # Infreq
..LN10374:
	.loc    1  300  is_stmt 1
        cmpl      $0, 248(%rsp)                                 #300.6
..LN10375:
        je        ..B7.180      # Prob 50%                      #300.6
..LN10376:
                                # LOE rax rdx rcx ebx r12d r14d r15d
..B7.167:                       # Preds ..B7.166                # Infreq
..LN10377:
	.loc    1  302  is_stmt 1
        movq      %rdx, %rsi                                    #302.9
..LN10378:
        cmpq      %rax, %rdx                                    #302.22
..LN10379:
        jg        ..B7.174      # Prob 15%                      #302.22
..LN10380:
                                # LOE rax rdx rcx rsi ebx r12d r14d r15d
..B7.168:                       # Preds ..B7.167                # Infreq
..LN10381:
	.loc    1  303  is_stmt 1
        addl      $2, %ebx                                      #303.30
..LN10382:
	.loc    1  304  is_stmt 1
        imull     %ebx, %r14d                                   #304.30
..LN10383:
	.loc    1  303  is_stmt 1
        imull     %r15d, %ebx                                   #303.30
..LN10384:
	.loc    1  304  is_stmt 1
        movslq    %r14d, %rdi                                   #304.15
..LN10385:
	.loc    1  303  is_stmt 1
        movq      368(%rsp), %r11                               #303.15
..LN10386:
        movslq    %ebx, %rbx                                    #303.15
..LN10387:
	.loc    1  304  is_stmt 1
        movq      %rax, 376(%rsp)                               #304.15
..LN10388:
	.loc    1  303  is_stmt 1
        movq      360(%rsp), %r10                               #303.45
..LN10389:
	.loc    1  304  is_stmt 1
        lea       (%r11,%rdi,8), %r9                            #304.15
..LN10390:
        movq      %r9, (%rsp)                                   #304.15
..LN10391:
        movq      %rdx, 8(%rsp)                                 #304.15
..LN10392:
	.loc    1  303  is_stmt 1
        lea       (%r11,%rbx,8), %r14                           #303.15
..LN10393:
	.loc    1  304  is_stmt 1
        movq      %rcx, 392(%rsp)                               #304.15
..LN10394:
	.loc    1  303  is_stmt 1
        lea       (%r10,%rbx,8), %r13                           #303.45
..LN10395:
	.loc    1  304  is_stmt 1
        movl      %r12d, 416(%rsp)                              #304.15
..LN10396:
        lea       (%r10,%rdi,8), %rbx                           #304.45
..LN10397:
        movl      %r15d, 456(%rsp)                              #304.15
..LN10398:
        movq      %rsi, %r15                                    #304.15
..LN10399:
                                # LOE rbx r13 r14 r15
..B7.169:                       # Preds ..B7.172 ..B7.168       # Infreq
..L450:         # optimization report
                # %s was not vectorized: vector dependence prevents vectorization%s
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
..LN10400:
	.loc    1  305  is_stmt 1
        movl      %r15d, %edx                                   #305.7
..LN10401:
        addl      %edx, %edx                                    #305.36
..LN10402:
	.loc    1  325  is_stmt 1
        movl      $1, %edi                                      #325.3
..LN10403:
	.loc    1  304  is_stmt 1
        movq      (%rsp), %r11                                  #304.15
..LN10404:
	.loc    1  325  is_stmt 1
        lea       344(%rsp), %rsi                               #325.3
..LN10405:
	.loc    1  305  is_stmt 1
        movslq    %edx, %rdx                                    #305.31
..LN10406:
	.loc    1  325  is_stmt 1
        lea       256(%rsp), %r8                                #325.3
..LN10407:
	.loc    1  305  is_stmt 1
        movq      40(%rsi), %rcx                                #305.31
..LN10408:
	.loc    1  325  is_stmt 1
        lea       264(%rsp), %r9                                #325.3
..LN10409:
	.loc    1  303  is_stmt 1
        movq      (%r14,%r15,8), %rax                           #303.15
..LN10410:
	.loc    1  304  is_stmt 1
        movq      (%r11,%r15,8), %r12                           #304.15
..LN10411:
	.loc    1  303  is_stmt 1
        movq      %rax, (%rsi)                                  #303.7
..LN10412:
        movq      (%r13,%r15,8), %r10                           #303.45
..LN10413:
	.loc    1  304  is_stmt 1
        movq      %r12, -16(%rsi)                               #304.7
..LN10414:
	.loc    1  305  is_stmt 1
        lea       (%rcx,%rdx,8), %r12                           #305.31
..LN10415:
	.loc    1  304  is_stmt 1
        movq      (%rbx,%r15,8), %rax                           #304.45
..LN10416:
	.loc    1  325  is_stmt 1
        lea       352(%rsp), %rdx                               #325.3
..LN10417:
	.loc    1  303  is_stmt 1
        movq      %r10, (%rdx)                                  #303.37
..LN10418:
	.loc    1  325  is_stmt 1
        lea       248(%rsp), %rcx                               #325.3
..LN10419:
	.loc    1  304  is_stmt 1
        movq      %rax, -16(%rdx)                               #304.37
..___tag_value_calc_c2l_grid_info_.451:
..LN10420:
	.loc    1  325  is_stmt 1
#       latlon2xyz(int, const double *, const double *, double *, double *, double *)
        call      latlon2xyz                                    #325.3
..___tag_value_calc_c2l_grid_info_.452:
..LN10421:
                                # LOE rbx r12 r13 r14 r15
..B7.170:                       # Preds ..B7.169                # Infreq
..LN10422:
	.loc    1  326  is_stmt 1
        movl      $1, %edi                                      #326.3
..LN10423:
        lea       328(%rsp), %rsi                               #326.3
..LN10424:
        lea       336(%rsp), %rdx                               #326.3
..LN10425:
        lea       272(%rsp), %rcx                               #326.3
..LN10426:
        lea       280(%rsp), %r8                                #326.3
..LN10427:
        lea       288(%rsp), %r9                                #326.3
..___tag_value_calc_c2l_grid_info_.453:
..LN10428:
#       latlon2xyz(int, const double *, const double *, double *, double *, double *)
        call      latlon2xyz                                    #326.3
..___tag_value_calc_c2l_grid_info_.454:
..LN10429:
                                # LOE rbx r12 r13 r14 r15
..B7.171:                       # Preds ..B7.170                # Infreq
..LN10430:
	.loc    1  327  is_stmt 1
        vmovsd    264(%rsp), %xmm2                              #327.16
..LN10431:
	.loc    1  328  is_stmt 1
        lea       8(%r12), %r9                                  #328.3
..LN10432:
	.loc    1  327  is_stmt 1
        vmovsd    256(%rsp), %xmm1                              #327.16
..LN10433:
	.loc    1  328  is_stmt 1
        lea       296(%rsp), %rsi                               #328.3
..LN10434:
	.loc    1  327  is_stmt 1
        vmovsd    -48(%rsi), %xmm0                              #327.16
..LN10435:
	.loc    1  328  is_stmt 1
        lea       304(%rsp), %rdx                               #328.3
..LN10436:
        movl      $1, %edi                                      #328.3
..LN10437:
        lea       312(%rsp), %rcx                               #328.3
..LN10438:
        movq      %r12, %r8                                     #328.3
..LN10439:
	.loc    1  338  is_stmt 1
        vaddsd    -16(%rdx), %xmm2, %xmm8                       #338.18
..LN10440:
	.loc    1  337  is_stmt 1
        vaddsd    -24(%rdx), %xmm1, %xmm6                       #337.18
..LN10441:
	.loc    1  336  is_stmt 1
        vaddsd    -32(%rdx), %xmm0, %xmm4                       #336.18
..LN10442:
	.loc    1  339  is_stmt 1
        vmulsd    %xmm8, %xmm8, %xmm3                           #339.43
..LN10443:
        vfmadd231sd %xmm6, %xmm6, %xmm3                         #339.8
..LN10444:
        vfmadd231sd %xmm4, %xmm4, %xmm3                         #339.8
..LN10445:
        vsqrtsd   %xmm3, %xmm3, %xmm3                           #339.8
..LN10446:
	.loc    1  340  is_stmt 1
        vdivsd    %xmm3, %xmm4, %xmm5                           #340.3
..LN10447:
	.loc    1  341  is_stmt 1
        vdivsd    %xmm3, %xmm6, %xmm7                           #341.3
..LN10448:
	.loc    1  342  is_stmt 1
        vdivsd    %xmm3, %xmm8, %xmm9                           #342.3
..LN10449:
	.loc    1  327  is_stmt 1
        vmovsd    %xmm5, -8(%rdx)                               #327.24
..LN10450:
        vmovsd    %xmm7, (%rdx)                                 #327.24
..LN10451:
        vmovsd    %xmm9, 8(%rdx)                                #327.24
..___tag_value_calc_c2l_grid_info_.455:
..LN10452:
	.loc    1  328  is_stmt 1
#       xyz2latlon(int, const double *, const double *, const double *, double *, double *)
        call      xyz2latlon                                    #328.3
..___tag_value_calc_c2l_grid_info_.456:
..LN10453:
                                # LOE rbx r13 r14 r15
..B7.172:                       # Preds ..B7.171                # Infreq
..LN10454:
	.loc    1  302  is_stmt 1
        incq      %r15                                          #302.28
..LN10455:
        cmpq      376(%rsp), %r15                               #302.22
..LN10456:
        jle       ..B7.169      # Prob 82%                      #302.22
..LN10457:
                                # LOE rbx r13 r14 r15
..B7.173:                       # Preds ..B7.172                # Infreq
..LN10458:
        movq      376(%rsp), %rax                               #
..LN10459:
        movq      8(%rsp), %rdx                                 #
..LN10460:
	.loc    1  286  is_stmt 1
        cmpq      %rax, %rdx                                    #286.22
..LN10461:
        movq      392(%rsp), %rcx                               #
..LN10462:
        movl      416(%rsp), %r12d                              #
..LN10463:
        movl      456(%rsp), %r15d                              #
..LN10464:
                                # LOE rax rdx rcx r12d r15d
..B7.174:                       # Preds ..B7.173 ..B7.167       # Infreq
..LN10465:
	.loc    1  307  is_stmt 1
        jge       ..B7.180      # Prob 10%                      #307.21
..LN10466:
                                # LOE rax rdx rcx r12d r15d
..B7.175:                       # Preds ..B7.174                # Infreq
..LN10467:
	.loc    1  308  is_stmt 1
        imull     %r12d, %r15d                                  #308.22
..LN10468:
        movq      %rax, %r13                                    #308.15
..LN10469:
        movslq    %r15d, %r15                                   #308.15
..LN10470:
        movq      %rdx, %r14                                    #308.15
..LN10471:
	.loc    1  309  is_stmt 1
        movq      400(%rsp), %rsi                               #309.15
..LN10472:
	.loc    1  308  is_stmt 1
        movq      408(%rsp), %r8                                #308.15
..LN10473:
        movq      %rcx, 392(%rsp)                               #308.15
..LN10474:
	.loc    1  309  is_stmt 1
        lea       (%rsi,%r15,8), %rbx                           #309.15
..LN10475:
	.loc    1  308  is_stmt 1
        lea       (%r8,%r15,8), %r12                            #308.15
..LN10476:
                                # LOE rbx r12 r13 r14
..B7.176:                       # Preds ..B7.178 ..B7.175       # Infreq
..L457:         # optimization report
                # %s was not vectorized: vector dependence prevents vectorization%s
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
..LN10477:
	.loc    1  310  is_stmt 1
        movl      %r14d, %r9d                                   #310.12
..LN10478:
        addl      %r9d, %r9d                                    #310.41
..LN10479:
        lea       344(%rsp), %rsi                               #310.12
..LN10480:
        movslq    %r9d, %r9                                     #310.36
..LN10481:
        movq      40(%rsi), %r10                                #310.36
..LN10482:
	.loc    1  308  is_stmt 1
        movq      (%r12,%r14,8), %rcx                           #308.15
..LN10483:
	.loc    1  309  is_stmt 1
        movq      (%rbx,%r14,8), %r8                            #309.15
..LN10484:
	.loc    1  308  is_stmt 1
        movq      %rcx, (%rsi)                                  #308.7
..LN10485:
	.loc    1  310  is_stmt 1
        lea       (%r10,%r9,8), %r15                            #310.36
..LN10486:
        movq      %r15, %rdi                                    #310.12
..LN10487:
	.loc    1  309  is_stmt 1
        movq      %r8, 8(%rsi)                                  #309.7
..___tag_value_calc_c2l_grid_info_.458:
..LN10488:
	.loc    1  310  is_stmt 1
#       great_circle_distance(double *, double *)
        call      great_circle_distance                         #310.12
..___tag_value_calc_c2l_grid_info_.459:
..LN10489:
                                # LOE rbx r12 r13 r14 r15 xmm0
..B7.241:                       # Preds ..B7.176                # Infreq
..LN10490:
        vmovsd    %xmm0, (%rsp)                                 #310.12
..LN10491:
                                # LOE rbx r12 r13 r14 r15
..B7.177:                       # Preds ..B7.241                # Infreq
..LN10492:
	.loc    1  311  is_stmt 1
        addq      $16, %r15                                     #311.12
..LN10493:
        lea       344(%rsp), %rsi                               #311.12
..LN10494:
        movq      %r15, %rdi                                    #311.12
..___tag_value_calc_c2l_grid_info_.460:
..LN10495:
#       great_circle_distance(double *, double *)
        call      great_circle_distance                         #311.12
..___tag_value_calc_c2l_grid_info_.461:
..LN10496:
                                # LOE rbx r12 r13 r14 xmm0
..B7.242:                       # Preds ..B7.177                # Infreq
..LN10497:
        vmovapd   %xmm0, %xmm1                                  #311.12
..LN10498:
                                # LOE rbx r12 r13 r14 xmm1
..B7.178:                       # Preds ..B7.242                # Infreq
..LN10499:
	.loc    1  312  is_stmt 1
        movq      64(%rbp), %rcx                                #312.7
..LN10500:
        vaddsd    (%rsp), %xmm1, %xmm0                          #312.26
..LN10501:
        vdivsd    %xmm0, %xmm1, %xmm1                           #312.26
..LN10502:
        vmovsd    %xmm1, (%rcx,%r14,8)                          #312.7
..LN10503:
	.loc    1  307  is_stmt 1
        incq      %r14                                          #307.27
..LN10504:
        cmpq      %r13, %r14                                    #307.21
..LN10505:
        jl        ..B7.176      # Prob 82%                      #307.21
..LN10506:
                                # LOE rbx r12 r13 r14
..B7.179:                       # Preds ..B7.178                # Infreq
..LN10507:
        movq      392(%rsp), %rcx                               #
..LN10508:
                                # LOE rcx
..B7.180:                       # Preds ..B7.179 ..B7.174 ..B7.166 # Infreq
..LN10509:
	.loc    1  316  is_stmt 1
        movq      384(%rsp), %rdi                               #316.3
..LN10510:
        movq      %rcx, 392(%rsp)                               #316.3
..LN10511:
#       free(void *)
        call      free                                          #316.3
..LN10512:
                                # LOE
..B7.181:                       # Preds ..B7.180                # Infreq
..LN10513:
        movq      392(%rsp), %rcx                               #
..LN10514:
	.loc    1  317  is_stmt 1
        movq      %rcx, %rdi                                    #317.3
..LN10515:
#       free(void *)
        call      free                                          #317.3
..LN10516:
                                # LOE
..B7.182:                       # Preds ..B7.181                # Infreq
..LN10517:
	.loc    1  454  is_stmt 1
        movq      424(%rsp), %rdi                               #454.3
..LN10518:
#       free(void *)
        call      free                                          #454.3
..LN10519:
                                # LOE
..B7.183:                       # Preds ..B7.182                # Infreq
..LN10520:
	.loc    1  455  is_stmt 1
        movq      432(%rsp), %rdi                               #455.3
..LN10521:
#       free(void *)
        call      free                                          #455.3
..LN10522:
                                # LOE
..B7.184:                       # Preds ..B7.183                # Infreq
..LN10523:
	.loc    1  456  is_stmt 1
        movq      440(%rsp), %rdi                               #456.3
..LN10524:
#       free(void *)
        call      free                                          #456.3
..LN10525:
                                # LOE
..B7.185:                       # Preds ..B7.184                # Infreq
..LN10526:
	.loc    1  457  is_stmt 1
        movq      320(%rsp), %rdi                               #457.3
..LN10527:
#       free(void *)
        call      free                                          #457.3
..LN10528:
                                # LOE
..B7.186:                       # Preds ..B7.185                # Infreq
..LN10529:
	.loc    1  458  is_stmt 1
        movq      448(%rsp), %rdi                               #458.3
..LN10530:
#       free(void *)
        call      free                                          #458.3
..LN10531:
                                # LOE
..B7.187:                       # Preds ..B7.186                # Infreq
..LN10532:
	.loc    1  372  epilogue_begin  is_stmt 1
        addq      $568, %rsp                                    #372.1
	.cfi_restore 3
..LN10533:
        popq      %rbx                                          #372.1
	.cfi_restore 15
..LN10534:
        popq      %r15                                          #372.1
	.cfi_restore 14
..LN10535:
        popq      %r14                                          #372.1
	.cfi_restore 13
..LN10536:
        popq      %r13                                          #372.1
	.cfi_restore 12
..LN10537:
        popq      %r12                                          #372.1
..LN10538:
        movq      %rbp, %rsp                                    #372.1
..LN10539:
        popq      %rbp                                          #372.1
	.cfi_def_cfa 7, 8
	.cfi_restore 6
..LN10540:
        ret                                                     #372.1
	.cfi_def_cfa 6, 16
	.cfi_escape 0x10, 0x03, 0x0e, 0x38, 0x1c, 0x0d, 0xe0, 0xff, 0xff, 0xff, 0x1a, 0x0d, 0xd8, 0xff, 0xff, 0xff, 0x22
	.cfi_offset 6, -16
	.cfi_escape 0x10, 0x0c, 0x0e, 0x38, 0x1c, 0x0d, 0xe0, 0xff, 0xff, 0xff, 0x1a, 0x0d, 0xf8, 0xff, 0xff, 0xff, 0x22
	.cfi_escape 0x10, 0x0d, 0x0e, 0x38, 0x1c, 0x0d, 0xe0, 0xff, 0xff, 0xff, 0x1a, 0x0d, 0xf0, 0xff, 0xff, 0xff, 0x22
	.cfi_escape 0x10, 0x0e, 0x0e, 0x38, 0x1c, 0x0d, 0xe0, 0xff, 0xff, 0xff, 0x1a, 0x0d, 0xe8, 0xff, 0xff, 0xff, 0x22
	.cfi_escape 0x10, 0x0f, 0x0e, 0x38, 0x1c, 0x0d, 0xe0, 0xff, 0xff, 0xff, 0x1a, 0x0d, 0xe0, 0xff, 0xff, 0xff, 0x22
..LN10541:
                                # LOE
..B7.188:                       # Preds ..B7.54                 # Infreq
..LN10542:
	.loc    1  446  is_stmt 1
        movl      %ebx, %r10d                                   #446.22
..LN10543:
	.loc    1  447  is_stmt 1
        lea       2(%rbx), %eax                                 #447.35
..LN10544:
	.loc    1  448  is_stmt 1
        movq      360(%rsp), %rdx                               #448.22
..LN10545:
	.loc    1  446  is_stmt 1
        andl      $-4, %r10d                                    #446.22
..LN10546:
	.loc    1  447  is_stmt 1
        movq      368(%rsp), %rcx                               #447.22
..LN10547:
	.loc    1  446  is_stmt 1
        movslq    %eax, %rax                                    #446.26
..LN10548:
        movslq    %r10d, %r10                                   #446.22
..LN10549:
	.loc    1  448  is_stmt 1
        lea       (%rdx,%r13,8), %r9                            #448.22
..LN10550:
	.loc    1  446  is_stmt 1
        movq      320(%rsp), %rdx                               #446.26
..LN10551:
	.loc    1  447  is_stmt 1
        lea       (%rcx,%r13,8), %r8                            #447.22
..LN10552:
	.loc    1  446  is_stmt 1
        movq      %r10, (%rsp)                                  #446.26
..LN10553:
        xorl      %ecx, %ecx                                    #446.26
..LN10554:
        movq      %rax, 16(%rsp)                                #446.26
..LN10555:
        movl      %r14d, 256(%rsp)                              #446.26
..LN10556:
        movl      %r12d, 416(%rsp)                              #446.26
..LN10557:
        movl      %r15d, 456(%rsp)                              #446.26
..LN10558:
        movl      %ebx, 264(%rsp)                               #446.26
..LN10559:
                                # LOE rdx rcx rdi r8 r9 r13 esi
..B7.189:                       # Preds ..B7.205 ..B7.214 ..B7.188 # Infreq
..LN10560:
        cmpq      $4, %r13                                      #446.22
..LN10561:
        jl        ..B7.216      # Prob 10%                      #446.22
..LN10562:
                                # LOE rdx rcx rdi r8 r9 r13 esi
..B7.190:                       # Preds ..B7.189                # Infreq
..LN10563:
	.loc    1  448  is_stmt 1
        movq      448(%rsp), %rax                               #448.5
..LN10564:
        lea       (%rax,%rdi,8), %r15                           #448.5
..LN10565:
	.loc    1  446  is_stmt 1
        cmpq      $239, %r13                                    #446.22
..LN10566:
        jl        ..B7.218      # Prob 10%                      #446.22
..LN10567:
                                # LOE rdx rcx rdi r8 r9 r13 r15 esi
..B7.191:                       # Preds ..B7.190                # Infreq
..LN10568:
        movq      %r15, %rax                                    #446.22
..LN10569:
        andq      $31, %rax                                     #446.22
..LN10570:
        testl     %eax, %eax                                    #446.22
..LN10571:
        je        ..B7.194      # Prob 50%                      #446.22
..LN10572:
                                # LOE rdx rcx rdi r8 r9 r13 r15 eax esi
..B7.192:                       # Preds ..B7.191                # Infreq
..LN10573:
        testb     $7, %al                                       #446.22
..LN10574:
        jne       ..B7.216      # Prob 10%                      #446.22
..LN10575:
                                # LOE rdx rcx rdi r8 r9 r13 r15 eax esi
..B7.193:                       # Preds ..B7.192                # Infreq
..LN10576:
        negl      %eax                                          #446.22
..LN10577:
        addl      $32, %eax                                     #446.22
..LN10578:
        shrl      $3, %eax                                      #446.22
..LN10579:
                                # LOE rdx rcx rdi r8 r9 r13 r15 eax esi
..B7.194:                       # Preds ..B7.193 ..B7.191       # Infreq
..LN10580:
        movl      %eax, %r14d                                   #446.22
..LN10581:
        lea       4(%r14), %rbx                                 #446.22
..LN10582:
        cmpq      %rbx, %r13                                    #446.22
..LN10583:
        jl        ..B7.216      # Prob 10%                      #446.22
..LN10584:
                                # LOE rdx rcx rdi r8 r9 r13 r14 r15 eax esi
..B7.195:                       # Preds ..B7.194                # Infreq
..LN10585:
        negl      %eax                                          #446.22
..LN10586:
        xorl      %r10d, %r10d                                  #446.22
..LN10587:
        movl      264(%rsp), %ebx                               #446.22
..LN10588:
        addl      %ebx, %eax                                    #446.22
..LN10589:
        andl      $3, %eax                                      #446.22
..LN10590:
	.loc    1  448  is_stmt 1
        lea       (%r9,%rcx,8), %r11                            #448.22
..LN10591:
	.loc    1  446  is_stmt 1
        negl      %eax                                          #446.22
..LN10592:
	.loc    1  447  is_stmt 1
        lea       (%rdx,%rdi,8), %r12                           #447.5
..LN10593:
	.loc    1  446  is_stmt 1
        addl      %ebx, %eax                                    #446.22
..LN10594:
	.loc    1  447  is_stmt 1
        lea       (%r8,%rcx,8), %rbx                            #447.22
..LN10595:
	.loc    1  446  is_stmt 1
        movslq    %eax, %rax                                    #446.22
..LN10596:
        testq     %r14, %r14                                    #446.22
..LN10597:
        jbe       ..B7.200      # Prob 9%                       #446.22
..LN10598:
                                # LOE rax rdx rcx rbx rdi r8 r9 r10 r11 r12 r13 r14 r15 esi
..B7.196:                       # Preds ..B7.195                # Infreq
..LN10599:
        movq      %r13, 200(%rsp)                               #
..LN10600:
                                # LOE rax rdx rcx rbx rdi r8 r9 r10 r11 r12 r14 r15 esi
..B7.197:                       # Preds ..B7.196 ..B7.197       # Infreq
..L477:         # optimization report
                # LOOP WAS UNROLLED BY 1
                # PEELED LOOP FOR VECTORIZATION
                # VECTORIZATION SPEEDUP COEFFECIENT 9.648438
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 1.875000
..LN10601:
	.loc    1  447  is_stmt 1
        movq      24(%rbx,%r10,8), %r13                         #447.22
..LN10602:
        movq      %r13, (%r12,%r10,8)                           #447.5
..LN10603:
	.loc    1  448  is_stmt 1
        movq      24(%r11,%r10,8), %r13                         #448.22
..LN10604:
        movq      %r13, (%r15,%r10,8)                           #448.5
..LN10605:
	.loc    1  446  is_stmt 1
        incq      %r10                                          #446.22
..LN10606:
        cmpq      %r14, %r10                                    #446.22
..LN10607:
        jb        ..B7.197      # Prob 82%                      #446.22
..LN10608:
                                # LOE rax rdx rcx rbx rdi r8 r9 r10 r11 r12 r14 r15 esi
..B7.198:                       # Preds ..B7.197                # Infreq
..LN10609:
        movq      200(%rsp), %r13                               #
..LN10610:
                                # LOE rax rdx rcx rbx rdi r8 r9 r11 r12 r13 r14 r15 esi
..B7.200:                       # Preds ..B7.218 ..B7.198 ..B7.195 ..B7.200 # Infreq
..L478:         # optimization report
                # LOOP WAS UNROLLED BY 1
                # LOOP WAS VECTORIZED
                # VECTORIZATION HAS UNALIGNED MEMORY REFERENCES
                # VECTORIZATION SPEEDUP COEFFECIENT 9.648438
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 1.875000
                # MAIN VECTOR TYPE: 64-bits floating point
..LN10611:
	.loc    1  447  is_stmt 1
        vmovupd   24(%rbx,%r14,8), %ymm0                        #447.22
..LN10612:
	.loc    1  448  is_stmt 1
        vmovupd   24(%r11,%r14,8), %ymm1                        #448.22
..LN10613:
	.loc    1  447  is_stmt 1
        vmovupd   %ymm0, (%r12,%r14,8)                          #447.5
..LN10614:
	.loc    1  448  is_stmt 1
        vmovupd   %ymm1, (%r15,%r14,8)                          #448.5
..LN10615:
	.loc    1  446  is_stmt 1
        addq      $4, %r14                                      #446.22
..LN10616:
        cmpq      %rax, %r14                                    #446.22
..LN10617:
        jb        ..B7.200      # Prob 82%                      #446.22
..LN10618:
                                # LOE rax rdx rcx rbx rdi r8 r9 r11 r12 r13 r14 r15 esi
..B7.202:                       # Preds ..B7.200 ..B7.216       # Infreq
..LN10619:
        cmpq      %r13, %rax                                    #446.22
..LN10620:
        jae       ..B7.214      # Prob 9%                       #446.22
..LN10621:
                                # LOE rax rdx rcx rdi r8 r9 r13 esi
..B7.203:                       # Preds ..B7.202                # Infreq
..LN10622:
	.loc    1  448  is_stmt 1
        movq      448(%rsp), %r12                               #448.5
..LN10623:
        lea       (%r9,%rcx,8), %r10                            #448.22
..LN10624:
	.loc    1  447  is_stmt 1
        lea       (%r8,%rcx,8), %r11                            #447.22
..LN10625:
        lea       (%rdx,%rdi,8), %rbx                           #447.5
..LN10626:
	.loc    1  448  is_stmt 1
        lea       (%r12,%rdi,8), %r12                           #448.5
..LN10627:
                                # LOE rax rdx rcx rbx rdi r8 r9 r10 r11 r12 r13 esi
..B7.204:                       # Preds ..B7.204 ..B7.203       # Infreq
..L479:         # optimization report
                # LOOP WAS UNROLLED BY 1
                # REMAINDER LOOP FOR VECTORIZATION
                # VECTORIZATION SPEEDUP COEFFECIENT 9.648438
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 1.875000
..LN10628:
	.loc    1  447  is_stmt 1
        movq      24(%r11,%rax,8), %r14                         #447.22
..LN10629:
	.loc    1  448  is_stmt 1
        movq      24(%r10,%rax,8), %r15                         #448.22
..LN10630:
	.loc    1  447  is_stmt 1
        movq      %r14, (%rbx,%rax,8)                           #447.5
..LN10631:
	.loc    1  448  is_stmt 1
        movq      %r15, (%r12,%rax,8)                           #448.5
..LN10632:
	.loc    1  446  is_stmt 1
        incq      %rax                                          #446.22
..LN10633:
        cmpq      %r13, %rax                                    #446.22
..LN10634:
        jb        ..B7.204      # Prob 82%                      #446.22
..LN10635:
                                # LOE rax rdx rcx rbx rdi r8 r9 r10 r11 r12 r13 esi
..B7.205:                       # Preds ..B7.204                # Infreq
..LN10636:
        incl      %esi                                          #446.3
..LN10637:
        addq      %r13, %rdi                                    #446.3
..LN10638:
        addq      16(%rsp), %rcx                                #446.3
..LN10639:
        cmpl      456(%rsp), %esi                               #446.3
..LN10640:
        jb        ..B7.189      # Prob 81%                      #446.3
..LN10641:
                                # LOE rdx rcx rdi r8 r9 r13 esi
..B7.206:                       # Preds ..B7.205                # Infreq
..LN10642:
        movl      256(%rsp), %r14d                              #
..LN10643:
        movl      416(%rsp), %r12d                              #
..LN10644:
        movl      456(%rsp), %r15d                              #
..LN10645:
        movl      264(%rsp), %ebx                               #
..LN10646:
        jmp       ..B7.55       # Prob 100%                     #
..LN10647:
                                # LOE r13 ebx r12d r14d r15d
..B7.207:                       # Preds ..B7.62 ..B7.64 ..B7.66 # Infreq
..LN10648:
	.loc    1  217  is_stmt 1
        xorl      %ecx, %ecx                                    #217.3
..LN10649:
        jmp       ..B7.74       # Prob 100%                     #217.3
..LN10650:
                                # LOE r13 ecx ebx r12d r14d r15d
..B7.210:                       # Preds ..B7.108                # Infreq
..LN10651:
	.loc    1  221  is_stmt 1
        xorl      %eax, %eax                                    #221.3
..LN10652:
        jmp       ..B7.112      # Prob 100%                     #221.3
..LN10653:
                                # LOE rax rdx r13 ecx ebx r12d r14d r15d
..B7.211:                       # Preds ..B7.95 ..B7.97 ..B7.99 # Infreq
..LN10654:
        xorl      %ecx, %ecx                                    #221.3
..LN10655:
        jmp       ..B7.107      # Prob 100%                     #221.3
..LN10656:
                                # LOE r13 ecx ebx r12d r14d r15d
..B7.214:                       # Preds ..B7.202                # Infreq
..LN10657:
	.loc    1  446  is_stmt 1
        incl      %esi                                          #446.3
..LN10658:
        addq      %r13, %rdi                                    #446.3
..LN10659:
        addq      16(%rsp), %rcx                                #446.3
..LN10660:
        cmpl      456(%rsp), %esi                               #446.3
..LN10661:
        jb        ..B7.189      # Prob 81%                      #446.3
..LN10662:
                                # LOE rdx rcx rdi r8 r9 r13 esi
..B7.215:                       # Preds ..B7.214                # Infreq
..LN10663:
        movl      256(%rsp), %r14d                              #
..LN10664:
        movl      416(%rsp), %r12d                              #
..LN10665:
        movl      456(%rsp), %r15d                              #
..LN10666:
        movl      264(%rsp), %ebx                               #
..LN10667:
        jmp       ..B7.55       # Prob 100%                     #
..LN10668:
                                # LOE r13 ebx r12d r14d r15d
..B7.216:                       # Preds ..B7.189 ..B7.192 ..B7.194 # Infreq
..LN10669:
        xorl      %eax, %eax                                    #446.22
..LN10670:
        jmp       ..B7.202      # Prob 100%                     #446.22
..LN10671:
                                # LOE rax rdx rcx rdi r8 r9 r13 esi
..B7.218:                       # Preds ..B7.190                # Infreq
..LN10672:
        movq      (%rsp), %rax                                  #446.22
..LN10673:
	.loc    1  448  is_stmt 1
        lea       (%r9,%rcx,8), %r11                            #448.22
..LN10674:
	.loc    1  446  is_stmt 1
        xorl      %r14d, %r14d                                  #446.22
..LN10675:
	.loc    1  447  is_stmt 1
        lea       (%r8,%rcx,8), %rbx                            #447.22
..LN10676:
        lea       (%rdx,%rdi,8), %r12                           #447.5
..LN10677:
        jmp       ..B7.200      # Prob 100%                     #447.5
..LN10678:
                                # LOE rax rdx rcx rbx rdi r8 r9 r11 r12 r13 r14 r15 esi
..B7.220:                       # Preds ..B7.75                 # Infreq
..LN10679:
	.loc    1  217  is_stmt 1
        xorl      %eax, %eax                                    #217.3
..LN10680:
        jmp       ..B7.79       # Prob 100%                     #217.3
..LN10681:
                                # LOE rax rdx r13 ecx ebx r12d r14d r15d
..B7.221:                       # Preds ..B7.21                 # Infreq
..LN10682:
	.loc    1  405  is_stmt 1
        incl      %edi                                          #405.3
..LN10683:
        addq      192(%rsp), %rcx                               #405.3
..LN10684:
        addq      200(%rsp), %rsi                               #405.3
..LN10685:
        cmpl      456(%rsp), %edi                               #405.3
..LN10686:
        jb        ..B7.21       # Prob 81%                      #405.3
..LN10687:
        jmp       ..B7.26       # Prob 100%                     #405.3
..LN10688:
        .align    16,0x90
	.cfi_endproc
..LN10689:
                                # LOE rax rdx rcx rsi r10 r11 edi r9d
..LN10690:
# mark_end;
	.type	calc_c2l_grid_info_,@function
	.size	calc_c2l_grid_info_,.-calc_c2l_grid_info_
..LNcalc_c2l_grid_info_.10691:
.LNcalc_c2l_grid_info_:
	.data
# -- End  calc_c2l_grid_info_
	.text
.L_2__routine_start_calc_c2l_grid_info_7:
# -- Begin  calc_c2l_grid_info
	.text
# mark_begin;
       .align    16,0x90
	.globl calc_c2l_grid_info
# --- calc_c2l_grid_info(int *, int *, const double *, const double *, const double *, const double *, double *, double *, double *, double *, double *, double *, double *, double *, double *, double *, double *, int *, int *, int *, int *)
calc_c2l_grid_info:
# parameter 1(nx_pt): %rdi
# parameter 2(ny_pt): %rsi
# parameter 3(xt): %rdx
# parameter 4(yt): %rcx
# parameter 5(xc): %r8
# parameter 6(yc): %r9
# parameter 7(dx): 16 + %rbp
# parameter 8(dy): 24 + %rbp
# parameter 9(area): 32 + %rbp
# parameter 10(edge_w): 40 + %rbp
# parameter 11(edge_e): 48 + %rbp
# parameter 12(edge_s): 56 + %rbp
# parameter 13(edge_n): 64 + %rbp
# parameter 14(en_n): 72 + %rbp
# parameter 15(en_e): 80 + %rbp
# parameter 16(vlon): 88 + %rbp
# parameter 17(vlat): 96 + %rbp
# parameter 18(on_west_edge): 104 + %rbp
# parameter 19(on_east_edge): 112 + %rbp
# parameter 20(on_south_edge): 120 + %rbp
# parameter 21(on_north_edge): 128 + %rbp
..B8.1:                         # Preds ..B8.0
	.cfi_startproc
..___tag_value_calc_c2l_grid_info.483:
..L484:
                                                        #378.1
..LN10692:
	.loc    1  378  is_stmt 1
        pushq     %rbp                                          #378.1
	.cfi_def_cfa_offset 16
..LN10693:
        movq      %rsp, %rbp                                    #378.1
	.cfi_def_cfa 6, 16
	.cfi_offset 6, -16
..LN10694:
        andq      $-32, %rsp                                    #378.1
..LN10695:
        pushq     %r12                                          #378.1
..LN10696:
        pushq     %r13                                          #378.1
..LN10697:
        pushq     %r14                                          #378.1
..LN10698:
        pushq     %r15                                          #378.1
..LN10699:
        pushq     %rbx                                          #378.1
..LN10700:
        subq      $568, %rsp                                    #378.1
..LN10701:
	.loc    1  389  prologue_end  is_stmt 1
        xorl      %eax, %eax                                    #389.3
	.cfi_escape 0x10, 0x03, 0x0e, 0x38, 0x1c, 0x0d, 0xe0, 0xff, 0xff, 0xff, 0x1a, 0x0d, 0xd8, 0xff, 0xff, 0xff, 0x22
	.cfi_escape 0x10, 0x0c, 0x0e, 0x38, 0x1c, 0x0d, 0xe0, 0xff, 0xff, 0xff, 0x1a, 0x0d, 0xf8, 0xff, 0xff, 0xff, 0x22
	.cfi_escape 0x10, 0x0d, 0x0e, 0x38, 0x1c, 0x0d, 0xe0, 0xff, 0xff, 0xff, 0x1a, 0x0d, 0xf0, 0xff, 0xff, 0xff, 0x22
	.cfi_escape 0x10, 0x0e, 0x0e, 0x38, 0x1c, 0x0d, 0xe0, 0xff, 0xff, 0xff, 0x1a, 0x0d, 0xe8, 0xff, 0xff, 0xff, 0x22
	.cfi_escape 0x10, 0x0f, 0x0e, 0x38, 0x1c, 0x0d, 0xe0, 0xff, 0xff, 0xff, 0x1a, 0x0d, 0xe0, 0xff, 0xff, 0xff, 0x22
..LN10702:
	.loc    1  384  is_stmt 1
        movl      (%rdi), %ebx                                  #384.10
..LN10703:
	.loc    1  385  is_stmt 1
        movl      (%rsi), %r15d                                 #385.10
..LN10704:
	.loc    1  378  is_stmt 1
        movq      %rdx, 368(%rsp)                               #378.1
..LN10705:
	.loc    1  389  is_stmt 1
        xorl      %edx, %edx                                    #389.28
..LN10706:
	.loc    1  378  is_stmt 1
        movq      %r9, 400(%rsp)                                #378.1
..LN10707:
	.loc    1  386  is_stmt 1
        lea       1(%rbx), %r12d                                #386.12
..LN10708:
	.loc    1  274  is_stmt 1
        movslq    %r12d, %r12                                   #274.27
..LN10709:
	.loc    1  387  is_stmt 1
        lea       1(%r15), %r14d                                #387.12
..LN10710:
	.loc    1  378  is_stmt 1
        movq      %r8, 408(%rsp)                                #378.1
..LN10711:
        movq      %rcx, 360(%rsp)                               #378.1
..LN10712:
	.loc    1  389  is_stmt 1
        xorl      %ecx, %ecx                                    #389.28
..LN10713:
	.loc    1  405  is_stmt 1
        movslq    %ebx, %r13                                    #405.27
..LN10714:
	.loc    1  274  is_stmt 1
        movq      %r12, 192(%rsp)                               #274.27
..LN10715:
	.loc    1  389  is_stmt 1
        testl     %r14d, %r14d                                  #389.14
..LN10716:
        jle       ..B8.10       # Prob 15%                      #389.14
..LN10717:
                                # LOE r12 r13 eax edx ecx ebx r12d r14d r15d r12b
..B8.2:                         # Preds ..B8.1
..LN10718:
	.loc    1  378  is_stmt 1
        movq      16(%rbp), %rsi                                #378.1
..LN10719:
        movl      %ebx, %r8d                                    #378.1
..LN10720:
        movl      %r12d, 416(%rsp)                              #378.1
..LN10721:
        movl      %r14d, %edi                                   #378.1
..LN10722:
        movl      %r15d, 456(%rsp)                              #378.1
..LN10723:
        movq      408(%rsp), %r9                                #378.1
..LN10724:
        movq      400(%rsp), %r10                               #378.1
..LN10725:
                                # LOE rsi r9 r10 r13 eax edx ecx edi r8d
..B8.3:                         # Preds ..B8.2 ..B8.8
..L494:         # optimization report
                # %s was not vectorized: vector dependence prevents vectorization%s
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
..LN10726:
	.loc    1  389  is_stmt 1
        xorl      %ebx, %ebx                                    #389.24
..LN10727:
        testl     %r8d, %r8d                                    #389.35
..LN10728:
        jle       ..B8.8        # Prob 9%                       #389.35
..LN10729:
                                # LOE rbx rsi r9 r10 r13 eax edx ecx edi r8d
..B8.4:                         # Preds ..B8.3
..LN10730:
	.loc    1  390  is_stmt 1
        movslq    %edx, %rdx                                    #390.13
..LN10731:
	.loc    1  394  is_stmt 1
        movslq    %ecx, %rcx                                    #394.5
..LN10732:
        movl      %eax, 16(%rsp)                                #394.5
..LN10733:
        movl      %edx, 8(%rsp)                                 #394.5
..LN10734:
        movl      %ecx, (%rsp)                                  #394.5
..LN10735:
	.loc    1  391  is_stmt 1
        lea       (%r10,%rdx,8), %r15                           #391.13
..LN10736:
	.loc    1  394  is_stmt 1
        movl      %edi, 256(%rsp)                               #394.5
..LN10737:
	.loc    1  390  is_stmt 1
        lea       (%r9,%rdx,8), %r12                            #390.13
..LN10738:
	.loc    1  394  is_stmt 1
        movl      %r8d, 264(%rsp)                               #394.5
..LN10739:
        lea       (%rsi,%rcx,8), %r14                           #394.5
..LN10740:
                                # LOE rbx r12 r13 r14 r15
..B8.5:                         # Preds ..B8.6 ..B8.4
..L495:         # optimization report
                # %s was not vectorized: vector dependence prevents vectorization%s
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
..LN10741:
        lea       464(%rsp), %rdi                               #394.18
..LN10742:
	.loc    1  390  is_stmt 1
        movq      (%r12,%rbx,8), %rax                           #390.13
..LN10743:
	.loc    1  394  is_stmt 1
        lea       488(%rsp), %rsi                               #394.18
..LN10744:
	.loc    1  392  is_stmt 1
        movq      8(%r12,%rbx,8), %rcx                          #392.13
..LN10745:
	.loc    1  391  is_stmt 1
        movq      (%r15,%rbx,8), %rdx                           #391.13
..LN10746:
	.loc    1  393  is_stmt 1
        movq      8(%r15,%rbx,8), %r8                           #393.13
..LN10747:
	.loc    1  390  is_stmt 1
        movq      %rax, -24(%rsi)                               #390.5
..LN10748:
	.loc    1  391  is_stmt 1
        movq      %rdx, -16(%rsi)                               #391.5
..LN10749:
	.loc    1  392  is_stmt 1
        movq      %rcx, (%rsi)                                  #392.5
..LN10750:
	.loc    1  393  is_stmt 1
        movq      %r8, 8(%rsi)                                  #393.5
..___tag_value_calc_c2l_grid_info.496:
..LN10751:
	.loc    1  394  is_stmt 1
#       great_circle_distance(double *, double *)
        call      great_circle_distance                         #394.18
..___tag_value_calc_c2l_grid_info.497:
..LN10752:
                                # LOE rbx r12 r13 r14 r15 xmm0
..B8.6:                         # Preds ..B8.5
..LN10753:
        vmovsd    %xmm0, (%r14,%rbx,8)                          #394.5
..LN10754:
	.loc    1  389  is_stmt 1
        incq      %rbx                                          #389.24
..LN10755:
        cmpq      %r13, %rbx                                    #389.24
..LN10756:
        jb        ..B8.5        # Prob 81%                      #389.24
..LN10757:
                                # LOE rbx r12 r13 r14 r15
..B8.7:                         # Preds ..B8.6
..LN10758:
        movl      16(%rsp), %eax                                #
..LN10759:
        movl      8(%rsp), %edx                                 #
..LN10760:
        movl      (%rsp), %ecx                                  #
..LN10761:
        movl      256(%rsp), %edi                               #
..LN10762:
        movl      264(%rsp), %r8d                               #
..LN10763:
        movq      408(%rsp), %r9                                #
..LN10764:
        movq      400(%rsp), %r10                               #
..LN10765:
        movq      16(%rbp), %rsi                                #
..LN10766:
                                # LOE rsi r9 r10 r13 eax edx ecx edi r8d
..B8.8:                         # Preds ..B8.3 ..B8.7
..LN10767:
        incl      %eax                                          #389.3
..LN10768:
        addl      %r8d, %ecx                                    #389.3
..LN10769:
        lea       1(%rdx,%r8), %edx                             #389.3
..LN10770:
        cmpl      %edi, %eax                                    #389.3
..LN10771:
        jb        ..B8.3        # Prob 82%                      #389.3
..LN10772:
                                # LOE rsi r9 r10 r13 eax edx ecx edi r8d
..B8.9:                         # Preds ..B8.8
..LN10773:
        movl      416(%rsp), %r12d                              #
..LN10774:
        movl      %edi, %r14d                                   #
..LN10775:
        movl      456(%rsp), %r15d                              #
..LN10776:
        movl      %r8d, %ebx                                    #
..LN10777:
                                # LOE r13 ebx r12d r14d r15d
..B8.10:                        # Preds ..B8.1 ..B8.9
..LN10778:
	.loc    1  397  is_stmt 1
        xorl      %r10d, %r10d                                  #397.3
..LN10779:
        xorl      %esi, %esi                                    #397.27
..LN10780:
        testl     %r15d, %r15d                                  #397.14
..LN10781:
        jle       ..B8.19       # Prob 15%                      #397.14
..LN10782:
                                # LOE r13 ebx esi r10d r12d r14d r15d
..B8.11:                        # Preds ..B8.10
..LN10783:
	.loc    1  401  is_stmt 1
        movq      400(%rsp), %rcx                               #401.13
..LN10784:
	.loc    1  386  is_stmt 1
        lea       1(%r13), %r11                                 #386.3
..LN10785:
	.loc    1  400  is_stmt 1
        movq      408(%rsp), %rax                               #400.13
..LN10786:
        movl      %ebx, %r9d                                    #400.13
..LN10787:
        movq      %r11, 32(%rsp)                                #400.13
..LN10788:
        movl      %r12d, %r8d                                   #400.13
..LN10789:
	.loc    1  378  is_stmt 1
        movq      24(%rbp), %rdx                                #378.1
..LN10790:
	.loc    1  401  is_stmt 1
        lea       (%rcx,%r13,8), %rcx                           #401.13
..LN10791:
	.loc    1  400  is_stmt 1
        movl      %r14d, 256(%rsp)                              #400.13
..LN10792:
        lea       (%rax,%r13,8), %rax                           #400.13
..LN10793:
        movl      %r15d, 456(%rsp)                              #400.13
..LN10794:
        movq      %r13, 200(%rsp)                               #400.13
..LN10795:
        movq      400(%rsp), %r11                               #400.13
..LN10796:
                                # LOE rax rdx rcx r11 esi r8d r9d r10d
..B8.12:                        # Preds ..B8.17 ..B8.11
..L498:         # optimization report
                # %s was not vectorized: vector dependence prevents vectorization%s
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
..LN10797:
	.loc    1  397  is_stmt 1
        xorl      %r15d, %r15d                                  #397.23
..LN10798:
        testl     %r8d, %r8d                                    #397.34
..LN10799:
        jle       ..B8.17       # Prob 10%                      #397.34
..LN10800:
                                # LOE rax rdx rcx r11 r15 esi r8d r9d r10d
..B8.13:                        # Preds ..B8.12
..LN10801:
	.loc    1  398  is_stmt 1
        movslq    %esi, %rsi                                    #398.13
..LN10802:
        movq      408(%rsp), %rdi                               #398.13
..LN10803:
	.loc    1  400  is_stmt 1
        movq      %rax, 24(%rsp)                                #400.13
..LN10804:
        movq      %rcx, 16(%rsp)                                #400.13
..LN10805:
        movl      %esi, 8(%rsp)                                 #400.13
..LN10806:
	.loc    1  398  is_stmt 1
        lea       (%rdi,%rsi,8), %rdi                           #398.13
..LN10807:
	.loc    1  400  is_stmt 1
        movq      %rdi, 40(%rsp)                                #400.13
..LN10808:
	.loc    1  402  is_stmt 1
        lea       (%rdx,%rsi,8), %r14                           #402.5
..LN10809:
	.loc    1  400  is_stmt 1
        movl      %r10d, (%rsp)                                 #400.13
..LN10810:
	.loc    1  399  is_stmt 1
        lea       (%r11,%rsi,8), %rbx                           #399.13
..LN10811:
	.loc    1  400  is_stmt 1
        movl      %r8d, 416(%rsp)                               #400.13
..LN10812:
	.loc    1  401  is_stmt 1
        lea       (%rcx,%rsi,8), %r13                           #401.13
..LN10813:
	.loc    1  400  is_stmt 1
        movl      %r9d, 264(%rsp)                               #400.13
..LN10814:
        lea       (%rax,%rsi,8), %r12                           #400.13
..LN10815:
                                # LOE rbx r12 r13 r14 r15
..B8.14:                        # Preds ..B8.15 ..B8.13
..L499:         # optimization report
                # %s was not vectorized: vector dependence prevents vectorization%s
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
..LN10816:
	.loc    1  402  is_stmt 1
        lea       464(%rsp), %rdi                               #402.19
..LN10817:
	.loc    1  398  is_stmt 1
        movq      40(%rsp), %rax                                #398.13
..LN10818:
	.loc    1  402  is_stmt 1
        lea       488(%rsp), %rsi                               #402.19
..LN10819:
	.loc    1  399  is_stmt 1
        movq      (%rbx,%r15,8), %rcx                           #399.13
..LN10820:
	.loc    1  400  is_stmt 1
        movq      8(%r12,%r15,8), %r8                           #400.13
..LN10821:
	.loc    1  398  is_stmt 1
        movq      (%rax,%r15,8), %rdx                           #398.13
..LN10822:
	.loc    1  401  is_stmt 1
        movq      8(%r13,%r15,8), %r9                           #401.13
..LN10823:
	.loc    1  398  is_stmt 1
        movq      %rdx, -24(%rsi)                               #398.5
..LN10824:
	.loc    1  399  is_stmt 1
        movq      %rcx, -16(%rsi)                               #399.5
..LN10825:
	.loc    1  400  is_stmt 1
        movq      %r8, (%rsi)                                   #400.5
..LN10826:
	.loc    1  401  is_stmt 1
        movq      %r9, 8(%rsi)                                  #401.5
..___tag_value_calc_c2l_grid_info.500:
..LN10827:
	.loc    1  402  is_stmt 1
#       great_circle_distance(double *, double *)
        call      great_circle_distance                         #402.19
..___tag_value_calc_c2l_grid_info.501:
..LN10828:
                                # LOE rbx r12 r13 r14 r15 xmm0
..B8.15:                        # Preds ..B8.14
..LN10829:
        vmovsd    %xmm0, (%r14,%r15,8)                          #402.5
..LN10830:
	.loc    1  397  is_stmt 1
        incq      %r15                                          #397.23
..LN10831:
        cmpq      32(%rsp), %r15                                #397.23
..LN10832:
        jb        ..B8.14       # Prob 82%                      #397.23
..LN10833:
                                # LOE rbx r12 r13 r14 r15
..B8.16:                        # Preds ..B8.15
..LN10834:
        movq      24(%rsp), %rax                                #
..LN10835:
        movq      16(%rsp), %rcx                                #
..LN10836:
        movl      8(%rsp), %esi                                 #
..LN10837:
        movl      (%rsp), %r10d                                 #
..LN10838:
        movl      416(%rsp), %r8d                               #
..LN10839:
        movl      264(%rsp), %r9d                               #
..LN10840:
        movq      400(%rsp), %r11                               #
..LN10841:
        movq      24(%rbp), %rdx                                #
..LN10842:
                                # LOE rax rdx rcx r11 esi r8d r9d r10d
..B8.17:                        # Preds ..B8.12 ..B8.16
..LN10843:
        incl      %r10d                                         #397.3
..LN10844:
        lea       1(%rsi,%r9), %esi                             #397.3
..LN10845:
        cmpl      456(%rsp), %r10d                              #397.3
..LN10846:
        jb        ..B8.12       # Prob 82%                      #397.3
..LN10847:
                                # LOE rax rdx rcx r11 esi r8d r9d r10d
..B8.18:                        # Preds ..B8.17
..LN10848:
        movl      456(%rsp), %r15d                              #
..LN10849:
        movl      %r8d, %r12d                                   #
..LN10850:
        movl      256(%rsp), %r14d                              #
..LN10851:
        movl      %r9d, %ebx                                    #
..LN10852:
        movq      200(%rsp), %r13                               #
..LN10853:
        testl     %r15d, %r15d                                  #397.14
..LN10854:
                                # LOE r13 ebx r12d r14d r15d
..B8.19:                        # Preds ..B8.10 ..B8.18
..LN10855:
	.loc    1  405  is_stmt 1
        movl      $0, %ecx                                      #405.27
..LN10856:
        movl      $0, %edi                                      #405.3
..LN10857:
        movq      %rcx, %rsi                                    #405.27
..LN10858:
        jle       ..B8.27       # Prob 9%                       #405.14
..LN10859:
                                # LOE rcx rsi r13 ebx edi r12d r14d r15d
..B8.20:                        # Preds ..B8.19
..LN10860:
	.loc    1  408  is_stmt 1
        movq      408(%rsp), %r10                               #408.13
..LN10861:
        movl      %ebx, %r9d                                    #408.13
..LN10862:
	.loc    1  409  is_stmt 1
        movq      400(%rsp), %rdx                               #409.13
..LN10863:
	.loc    1  408  is_stmt 1
        movq      %rdx, %r11                                    #408.13
..LN10864:
	.loc    1  378  is_stmt 1
        movq      32(%rbp), %rax                                #378.1
..LN10865:
	.loc    1  408  is_stmt 1
        lea       (%r10,%r13,8), %r10                           #408.13
..LN10866:
        movq      %r10, (%rsp)                                  #408.13
..LN10867:
	.loc    1  409  is_stmt 1
        lea       (%rdx,%r13,8), %rdx                           #409.13
..LN10868:
	.loc    1  408  is_stmt 1
        movl      %r14d, 256(%rsp)                              #408.13
..LN10869:
        movl      %r12d, 416(%rsp)                              #408.13
..LN10870:
        movl      %r15d, 456(%rsp)                              #408.13
..LN10871:
        movq      %r13, 200(%rsp)                               #408.13
..LN10872:
        movq      408(%rsp), %r10                               #408.13
..LN10873:
                                # LOE rax rdx rcx rsi r10 r11 edi r9d
..B8.21:                        # Preds ..B8.25 ..B8.221 ..B8.20
..L502:         # optimization report
                # %s was not vectorized: vector dependence prevents vectorization%s
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
..LN10874:
	.loc    1  405  is_stmt 1
        xorl      %r15d, %r15d                                  #405.23
..LN10875:
        testl     %r9d, %r9d                                    #405.34
..LN10876:
        jle       ..B8.221      # Prob 9%                       #405.34
..LN10877:
                                # LOE rax rdx rcx rsi r10 r11 r15 edi r9d
..B8.22:                        # Preds ..B8.21
..LN10878:
	.loc    1  408  is_stmt 1
        movq      (%rsp), %rbx                                  #408.13
..LN10879:
	.loc    1  414  is_stmt 1
        lea       (%rax,%rsi,8), %r8                            #414.5
..LN10880:
        movq      %r8, 40(%rsp)                                 #414.5
..LN10881:
	.loc    1  407  is_stmt 1
        lea       (%r11,%rcx,8), %r14                           #407.13
..LN10882:
	.loc    1  414  is_stmt 1
        movq      %rdx, 32(%rsp)                                #414.5
..LN10883:
	.loc    1  406  is_stmt 1
        lea       (%r10,%rcx,8), %r13                           #406.13
..LN10884:
	.loc    1  414  is_stmt 1
        movq      %rsi, 24(%rsp)                                #414.5
..LN10885:
	.loc    1  409  is_stmt 1
        lea       (%rdx,%rcx,8), %r12                           #409.13
..LN10886:
	.loc    1  414  is_stmt 1
        movq      %rcx, 16(%rsp)                                #414.5
..LN10887:
	.loc    1  408  is_stmt 1
        lea       (%rbx,%rcx,8), %rbx                           #408.13
..LN10888:
	.loc    1  414  is_stmt 1
        movl      %edi, 8(%rsp)                                 #414.5
..LN10889:
        movl      %r9d, 264(%rsp)                               #414.5
..LN10890:
                                # LOE rbx r12 r13 r14 r15
..B8.23:                        # Preds ..B8.24 ..B8.22
..L503:         # optimization report
                # %s was not vectorized: vector dependence prevents vectorization%s
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
..LN10891:
        lea       464(%rsp), %rdi                               #414.20
..LN10892:
	.loc    1  406  is_stmt 1
        movq      (%r13,%r15,8), %rax                           #406.13
..LN10893:
	.loc    1  414  is_stmt 1
        lea       488(%rsp), %rsi                               #414.20
..LN10894:
	.loc    1  412  is_stmt 1
        movq      16(%rbx,%r15,8), %rdx                         #412.13
..LN10895:
	.loc    1  413  is_stmt 1
        movq      16(%r12,%r15,8), %rcx                         #413.13
..LN10896:
	.loc    1  406  is_stmt 1
        movq      %rax, -24(%rsi)                               #406.5
..LN10897:
	.loc    1  407  is_stmt 1
        movq      (%r14,%r15,8), %r8                            #407.13
..LN10898:
	.loc    1  411  is_stmt 1
        movq      8(%r14,%r15,8), %rax                          #411.13
..LN10899:
	.loc    1  408  is_stmt 1
        movq      8(%rbx,%r15,8), %r9                           #408.13
..LN10900:
	.loc    1  409  is_stmt 1
        movq      8(%r12,%r15,8), %r10                          #409.13
..LN10901:
	.loc    1  410  is_stmt 1
        movq      8(%r13,%r15,8), %r11                          #410.13
..LN10902:
	.loc    1  412  is_stmt 1
        movq      %rdx, 48(%rsi)                                #412.5
..LN10903:
	.loc    1  414  is_stmt 1
        lea       512(%rsp), %rdx                               #414.20
..LN10904:
	.loc    1  413  is_stmt 1
        movq      %rcx, 32(%rdx)                                #413.5
..LN10905:
	.loc    1  414  is_stmt 1
        lea       536(%rsp), %rcx                               #414.20
..LN10906:
	.loc    1  407  is_stmt 1
        movq      %r8, -40(%rdx)                                #407.5
..LN10907:
	.loc    1  408  is_stmt 1
        movq      %r9, -24(%rdx)                                #408.5
..LN10908:
	.loc    1  409  is_stmt 1
        movq      %r10, -16(%rdx)                               #409.5
..LN10909:
	.loc    1  410  is_stmt 1
        movq      %r11, (%rdx)                                  #410.5
..LN10910:
	.loc    1  411  is_stmt 1
        movq      %rax, 8(%rdx)                                 #411.5
..LN10911:
	.loc    1  414  is_stmt 1
        vmovsd    .L_2il0floatpacket.10(%rip), %xmm0            #414.20
..___tag_value_calc_c2l_grid_info.504:
..LN10912:
#       spherical_excess_area(const double *, const double *, const double *, const double *, double)
        call      spherical_excess_area                         #414.20
..___tag_value_calc_c2l_grid_info.505:
..LN10913:
                                # LOE rbx r12 r13 r14 r15 xmm0
..B8.24:                        # Preds ..B8.23
..LN10914:
        movq      40(%rsp), %rax                                #414.5
..LN10915:
        vmovsd    %xmm0, (%rax,%r15,8)                          #414.5
..LN10916:
	.loc    1  405  is_stmt 1
        incq      %r15                                          #405.23
..LN10917:
        cmpq      200(%rsp), %r15                               #405.23
..LN10918:
        jb        ..B8.23       # Prob 82%                      #405.23
..LN10919:
                                # LOE rbx r12 r13 r14 r15
..B8.25:                        # Preds ..B8.24
..LN10920:
        movq      24(%rsp), %rsi                                #
..LN10921:
        movq      16(%rsp), %rcx                                #
..LN10922:
        movl      8(%rsp), %edi                                 #
..LN10923:
        incl      %edi                                          #405.3
..LN10924:
        addq      192(%rsp), %rcx                               #405.3
..LN10925:
        addq      200(%rsp), %rsi                               #405.3
..LN10926:
        movq      32(%rsp), %rdx                                #
..LN10927:
        movl      264(%rsp), %r9d                               #
..LN10928:
        movq      408(%rsp), %r10                               #
..LN10929:
        movq      400(%rsp), %r11                               #
..LN10930:
        movq      32(%rbp), %rax                                #
..LN10931:
        cmpl      456(%rsp), %edi                               #405.3
..LN10932:
        jb        ..B8.21       # Prob 81%                      #405.3
..LN10933:
                                # LOE rax rdx rcx rsi r9 r10 r11 edi r9d r9b
..B8.26:                        # Preds ..B8.221 ..B8.25        # Infreq
..LN10934:
        movl      256(%rsp), %r14d                              #
..LN10935:
        movl      %r9d, %ebx                                    #
..LN10936:
        movl      416(%rsp), %r12d                              #
..LN10937:
        movl      456(%rsp), %r15d                              #
..LN10938:
        movq      200(%rsp), %r13                               #
..LN10939:
                                # LOE r13 ebx r12d r14d r15d
..B8.27:                        # Preds ..B8.26 ..B8.19         # Infreq
..LN10940:
	.loc    1  417  is_stmt 1
        movl      %r12d, %edi                                   #417.28
..LN10941:
        imull     %r14d, %edi                                   #417.28
..LN10942:
        movl      %edi, (%rsp)                                  #417.28
..LN10943:
        movslq    %edi, %rdi                                    #417.28
..LN10944:
        shlq      $3, %rdi                                      #417.32
..LN10945:
        movq      %rdi, 8(%rsp)                                 #417.32
..LN10946:
#       malloc(size_t)
        call      malloc                                        #417.17
..LN10947:
                                # LOE rax r13 ebx r12d r14d r15d
..B8.228:                       # Preds ..B8.27                 # Infreq
..LN10948:
        movq      %rax, 424(%rsp)                               #417.17
..LN10949:
                                # LOE r13 ebx r12d r14d r15d
..B8.28:                        # Preds ..B8.228                # Infreq
..LN10950:
	.loc    1  418  is_stmt 1
        movq      8(%rsp), %rdi                                 #418.17
..LN10951:
#       malloc(size_t)
        call      malloc                                        #418.17
..LN10952:
                                # LOE rax r13 ebx r12d r14d r15d
..B8.229:                       # Preds ..B8.28                 # Infreq
..LN10953:
        movq      %rax, 432(%rsp)                               #418.17
..LN10954:
                                # LOE r13 ebx r12d r14d r15d
..B8.29:                        # Preds ..B8.229                # Infreq
..LN10955:
	.loc    1  419  is_stmt 1
        movq      8(%rsp), %rdi                                 #419.17
..LN10956:
#       malloc(size_t)
        call      malloc                                        #419.17
..LN10957:
                                # LOE rax r13 ebx r12d r14d r15d
..B8.230:                       # Preds ..B8.29                 # Infreq
..LN10958:
        movq      %rax, 440(%rsp)                               #419.17
..LN10959:
                                # LOE rax r13 eax ebx r12d r14d r15d al ah
..B8.30:                        # Preds ..B8.230                # Infreq
..LN10960:
	.loc    1  421  is_stmt 1
        movl      (%rsp), %edi                                  #421.3
..LN10961:
        movq      408(%rsp), %rsi                               #421.3
..LN10962:
        movq      400(%rsp), %rdx                               #421.3
..LN10963:
        movq      424(%rsp), %rcx                               #421.3
..LN10964:
        movq      432(%rsp), %r8                                #421.3
..LN10965:
        movq      %rax, %r9                                     #421.3
..___tag_value_calc_c2l_grid_info.506:
..LN10966:
#       latlon2xyz(int, const double *, const double *, double *, double *, double *)
        call      latlon2xyz                                    #421.3
..___tag_value_calc_c2l_grid_info.507:
..LN10967:
                                # LOE r13 ebx r12d r14d r15d
..B8.31:                        # Preds ..B8.30                 # Infreq
..LN10968:
	.loc    1  422  is_stmt 1
        xorl      %edx, %edx                                    #422.3
..LN10969:
        xorl      %ecx, %ecx                                    #422.28
..LN10970:
        testl     %r14d, %r14d                                  #422.14
..LN10971:
        jle       ..B8.41       # Prob 15%                      #422.14
..LN10972:
                                # LOE r13 edx ecx ebx r12d r14d r15d
..B8.32:                        # Preds ..B8.31                 # Infreq
..LN10973:
	.loc    1  429  is_stmt 1
        lea       (%rbx,%rbx,2), %esi                           #429.37
..LN10974:
	.loc    1  422  is_stmt 1
        movl      %r12d, 416(%rsp)                              #422.28
..LN10975:
        xorl      %eax, %eax                                    #422.28
..LN10976:
        movl      %r15d, 456(%rsp)                              #422.28
..LN10977:
        movl      %ebx, %r9d                                    #422.28
..LN10978:
        movq      %r13, 200(%rsp)                               #422.28
..LN10979:
        movq      440(%rsp), %r10                               #422.28
..LN10980:
        movq      432(%rsp), %r11                               #422.28
..LN10981:
        movq      424(%rsp), %rdi                               #422.28
..LN10982:
                                # LOE rdi r10 r11 eax edx ecx esi r9d r14d
..B8.33:                        # Preds ..B8.39 ..B8.32         # Infreq
..L508:         # optimization report
                # %s was not vectorized: vector dependence prevents vectorization%s
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
..LN10983:
        xorl      %r13d, %r13d                                  #422.24
..LN10984:
        testl     %r9d, %r9d                                    #422.35
..LN10985:
        jle       ..B8.39       # Prob 10%                      #422.35
..LN10986:
                                # LOE rdi r10 r11 r13 eax edx ecx esi r9d r14d
..B8.34:                        # Preds ..B8.33                 # Infreq
..LN10987:
	.loc    1  423  is_stmt 1
        movslq    %ecx, %rcx                                    #423.13
..LN10988:
        movl      %eax, 24(%rsp)                                #423.13
..LN10989:
        movl      %esi, 16(%rsp)                                #423.13
..LN10990:
        movl      %ecx, 8(%rsp)                                 #423.13
..LN10991:
        movl      %edx, (%rsp)                                  #423.13
..LN10992:
	.loc    1  425  is_stmt 1
        lea       (%r10,%rcx,8), %r12                           #425.13
..LN10993:
	.loc    1  423  is_stmt 1
        movl      %r14d, 256(%rsp)                              #423.13
..LN10994:
	.loc    1  424  is_stmt 1
        lea       (%r11,%rcx,8), %r15                           #424.13
..LN10995:
	.loc    1  423  is_stmt 1
        movl      %r9d, 264(%rsp)                               #423.13
..LN10996:
        lea       (%rdi,%rcx,8), %rbx                           #423.13
..LN10997:
                                # LOE rbx r12 r13 r15
..B8.35:                        # Preds ..B8.37 ..B8.34         # Infreq
..L509:         # optimization report
                # %s was not vectorized: vector dependence prevents vectorization%s
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
..LN10998:
	.loc    1  429  is_stmt 1
        lea       464(%rsp), %rdi                               #429.5
..LN10999:
	.loc    1  423  is_stmt 1
        movq      (%rbx,%r13,8), %rax                           #423.13
..LN11000:
	.loc    1  429  is_stmt 1
        lea       488(%rsp), %rsi                               #429.5
..LN11001:
	.loc    1  426  is_stmt 1
        movq      8(%rbx,%r13,8), %r9                           #426.13
..LN11002:
	.loc    1  424  is_stmt 1
        movq      (%r15,%r13,8), %rcx                           #424.13
..LN11003:
	.loc    1  427  is_stmt 1
        movq      8(%r15,%r13,8), %r10                          #427.13
..LN11004:
	.loc    1  425  is_stmt 1
        movq      (%r12,%r13,8), %r8                            #425.13
..LN11005:
	.loc    1  428  is_stmt 1
        movq      8(%r12,%r13,8), %r11                          #428.13
..LN11006:
	.loc    1  429  is_stmt 1
        lea       (%r13,%r13,2), %r14d                          #429.37
..LN11007:
        addl      24(%rsp), %r14d                               #429.37
..LN11008:
        movslq    %r14d, %r14                                   #429.24
..LN11009:
	.loc    1  423  is_stmt 1
        movq      %rax, -24(%rsi)                               #423.5
..LN11010:
	.loc    1  429  is_stmt 1
        movq      72(%rbp), %rax                                #429.24
..LN11011:
	.loc    1  424  is_stmt 1
        movq      %rcx, -16(%rsi)                               #424.5
..LN11012:
	.loc    1  425  is_stmt 1
        movq      %r8, -8(%rsi)                                 #425.5
..LN11013:
	.loc    1  426  is_stmt 1
        movq      %r9, (%rsi)                                   #426.5
..LN11014:
	.loc    1  429  is_stmt 1
        lea       (%rax,%r14,8), %r14                           #429.24
..LN11015:
        movq      %r14, %rdx                                    #429.5
..LN11016:
	.loc    1  427  is_stmt 1
        movq      %r10, 8(%rsi)                                 #427.5
..LN11017:
	.loc    1  428  is_stmt 1
        movq      %r11, 16(%rsi)                                #428.5
..___tag_value_calc_c2l_grid_info.510:
..LN11018:
	.loc    1  429  is_stmt 1
#       vect_cross(const double *, const double *, double *)
        call      vect_cross                                    #429.5
..___tag_value_calc_c2l_grid_info.511:
..LN11019:
                                # LOE rbx r12 r13 r14 r15
..B8.36:                        # Preds ..B8.35                 # Infreq
..LN11020:
	.loc    1  430  is_stmt 1
        movq      %r14, %rdi                                    #430.5
..___tag_value_calc_c2l_grid_info.512:
..LN11021:
#       normalize_vect(double *)
        call      normalize_vect                                #430.5
..___tag_value_calc_c2l_grid_info.513:
..LN11022:
                                # LOE rbx r12 r13 r15
..B8.37:                        # Preds ..B8.36                 # Infreq
..LN11023:
	.loc    1  422  is_stmt 1
        incq      %r13                                          #422.24
..LN11024:
        cmpq      200(%rsp), %r13                               #422.24
..LN11025:
        jb        ..B8.35       # Prob 82%                      #422.24
..LN11026:
                                # LOE rbx r12 r13 r15
..B8.38:                        # Preds ..B8.37                 # Infreq
..LN11027:
        movl      24(%rsp), %eax                                #
..LN11028:
        movl      16(%rsp), %esi                                #
..LN11029:
        movl      8(%rsp), %ecx                                 #
..LN11030:
        movl      (%rsp), %edx                                  #
..LN11031:
        movq      440(%rsp), %r10                               #
..LN11032:
        movq      432(%rsp), %r11                               #
..LN11033:
        movq      424(%rsp), %rdi                               #
..LN11034:
        movl      256(%rsp), %r14d                              #
..LN11035:
        movl      264(%rsp), %r9d                               #
..LN11036:
                                # LOE rdi r10 r11 eax edx ecx esi r9d r14d
..B8.39:                        # Preds ..B8.33 ..B8.38         # Infreq
..LN11037:
        incl      %edx                                          #422.3
..LN11038:
        addl      %esi, %eax                                    #422.3
..LN11039:
        lea       1(%rcx,%r9), %ecx                             #422.3
..LN11040:
        cmpl      %r14d, %edx                                   #422.3
..LN11041:
        jb        ..B8.33       # Prob 82%                      #422.3
..LN11042:
                                # LOE rdi r10 r11 eax edx ecx esi r9d r14d
..B8.40:                        # Preds ..B8.39                 # Infreq
..LN11043:
        movl      416(%rsp), %r12d                              #
..LN11044:
        movl      %r9d, %ebx                                    #
..LN11045:
        movl      456(%rsp), %r15d                              #
..LN11046:
        movq      200(%rsp), %r13                               #
..LN11047:
                                # LOE r13 ebx r12d r14d r15d
..B8.41:                        # Preds ..B8.31 ..B8.40         # Infreq
..LN11048:
	.loc    1  433  is_stmt 1
        xorl      %eax, %eax                                    #433.3
..LN11049:
        xorl      %esi, %esi                                    #433.27
..LN11050:
        testl     %r15d, %r15d                                  #433.14
..LN11051:
        jle       ..B8.51       # Prob 9%                       #433.14
..LN11052:
                                # LOE r13 eax ebx esi r12d r14d r15d
..B8.42:                        # Preds ..B8.41                 # Infreq
..LN11053:
	.loc    1  438  is_stmt 1
        movq      432(%rsp), %rdx                               #438.13
..LN11054:
	.loc    1  386  is_stmt 1
        lea       1(%r13), %r10                                 #386.3
..LN11055:
	.loc    1  439  is_stmt 1
        movq      440(%rsp), %rcx                               #439.13
..LN11056:
	.loc    1  440  is_stmt 1
        lea       3(%rbx,%rbx,2), %r8d                          #440.38
..LN11057:
	.loc    1  378  is_stmt 1
        movq      80(%rbp), %r11                                #378.1
..LN11058:
	.loc    1  433  is_stmt 1
        movl      %r8d, 40(%rsp)                                #433.27
..LN11059:
	.loc    1  438  is_stmt 1
        lea       (%rdx,%r13,8), %rdi                           #438.13
..LN11060:
	.loc    1  437  is_stmt 1
        movq      424(%rsp), %rdx                               #437.13
..LN11061:
	.loc    1  439  is_stmt 1
        lea       (%rcx,%r13,8), %rcx                           #439.13
..LN11062:
	.loc    1  433  is_stmt 1
        movq      %r10, 48(%rsp)                                #433.27
..LN11063:
        movl      %r14d, 256(%rsp)                              #433.27
..LN11064:
        movl      %r15d, 456(%rsp)                              #433.27
..LN11065:
	.loc    1  437  is_stmt 1
        lea       (%rdx,%r13,8), %r9                            #437.13
..LN11066:
	.loc    1  433  is_stmt 1
        movq      %r9, (%rsp)                                   #433.27
..LN11067:
        xorl      %edx, %edx                                    #433.27
..LN11068:
        movq      %r13, 200(%rsp)                               #433.27
..LN11069:
                                # LOE rcx rdi eax edx ebx esi r12d
..B8.43:                        # Preds ..B8.49 ..B8.42         # Infreq
..L514:         # optimization report
                # %s was not vectorized: vector dependence prevents vectorization%s
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
..LN11070:
        xorl      %r14d, %r14d                                  #433.23
..LN11071:
        testl     %r12d, %r12d                                  #433.34
..LN11072:
        jle       ..B8.49       # Prob 9%                       #433.34
..LN11073:
                                # LOE rcx rdi r14 eax edx ebx esi r12d
..B8.44:                        # Preds ..B8.43                 # Infreq
..LN11074:
	.loc    1  434  is_stmt 1
        movslq    %esi, %rsi                                    #434.13
..LN11075:
	.loc    1  436  is_stmt 1
        movq      440(%rsp), %r11                               #436.13
..LN11076:
	.loc    1  435  is_stmt 1
        movq      432(%rsp), %r10                               #435.13
..LN11077:
	.loc    1  434  is_stmt 1
        movq      424(%rsp), %r13                               #434.13
..LN11078:
	.loc    1  437  is_stmt 1
        movq      (%rsp), %r15                                  #437.13
..LN11079:
	.loc    1  436  is_stmt 1
        lea       (%r11,%rsi,8), %r8                            #436.13
..LN11080:
	.loc    1  437  is_stmt 1
        movl      %ebx, 264(%rsp)                               #437.13
..LN11081:
	.loc    1  435  is_stmt 1
        lea       (%r10,%rsi,8), %r11                           #435.13
..LN11082:
	.loc    1  437  is_stmt 1
        movq      %r11, 80(%rsp)                                #437.13
..LN11083:
	.loc    1  434  is_stmt 1
        lea       (%r13,%rsi,8), %r9                            #434.13
..LN11084:
	.loc    1  437  is_stmt 1
        movq      %r9, 72(%rsp)                                 #437.13
..LN11085:
	.loc    1  439  is_stmt 1
        lea       (%rcx,%rsi,8), %r10                           #439.13
..LN11086:
	.loc    1  437  is_stmt 1
        movq      %r10, 64(%rsp)                                #437.13
..LN11087:
	.loc    1  438  is_stmt 1
        lea       (%rdi,%rsi,8), %r13                           #438.13
..LN11088:
	.loc    1  437  is_stmt 1
        movq      %r8, 88(%rsp)                                 #437.13
..LN11089:
        lea       (%r15,%rsi,8), %r15                           #437.13
..LN11090:
        movl      %edx, 56(%rsp)                                #437.13
..LN11091:
        movq      %rdi, 32(%rsp)                                #437.13
..LN11092:
        movq      %rcx, 24(%rsp)                                #437.13
..LN11093:
        movl      %esi, 16(%rsp)                                #437.13
..LN11094:
        movl      %eax, 8(%rsp)                                 #437.13
..LN11095:
        movl      %r12d, 416(%rsp)                              #437.13
..LN11096:
        movq      80(%rbp), %rbx                                #437.13
..LN11097:
                                # LOE rbx r13 r14 r15
..B8.45:                        # Preds ..B8.47 ..B8.44         # Infreq
..L515:         # optimization report
                # %s was not vectorized: vector dependence prevents vectorization%s
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
..LN11098:
	.loc    1  440  is_stmt 1
        lea       464(%rsp), %rdi                               #440.5
..LN11099:
	.loc    1  434  is_stmt 1
        movq      72(%rsp), %rax                                #434.13
..LN11100:
	.loc    1  435  is_stmt 1
        movq      80(%rsp), %r8                                 #435.13
..LN11101:
	.loc    1  436  is_stmt 1
        movq      88(%rsp), %r10                                #436.13
..LN11102:
	.loc    1  439  is_stmt 1
        movq      64(%rsp), %rdx                                #439.13
..LN11103:
	.loc    1  434  is_stmt 1
        movq      (%rax,%r14,8), %rcx                           #434.13
..LN11104:
        movq      %rcx, 24(%rdi)                                #434.5
..LN11105:
	.loc    1  435  is_stmt 1
        movq      (%r8,%r14,8), %r9                             #435.13
..LN11106:
	.loc    1  436  is_stmt 1
        movq      (%r10,%r14,8), %r11                           #436.13
..LN11107:
	.loc    1  437  is_stmt 1
        movq      8(%r15,%r14,8), %r12                          #437.13
..LN11108:
	.loc    1  438  is_stmt 1
        movq      8(%r13,%r14,8), %rax                          #438.13
..LN11109:
	.loc    1  439  is_stmt 1
        movq      8(%rdx,%r14,8), %rcx                          #439.13
..LN11110:
	.loc    1  440  is_stmt 1
        lea       (%r14,%r14,2), %esi                           #440.38
..LN11111:
        addl      56(%rsp), %esi                                #440.38
..LN11112:
        movslq    %esi, %rsi                                    #440.24
..LN11113:
	.loc    1  437  is_stmt 1
        movq      %r12, (%rdi)                                  #437.5
..LN11114:
	.loc    1  435  is_stmt 1
        movq      %r9, 32(%rdi)                                 #435.5
..LN11115:
	.loc    1  436  is_stmt 1
        movq      %r11, 40(%rdi)                                #436.5
..LN11116:
	.loc    1  438  is_stmt 1
        movq      %rax, 8(%rdi)                                 #438.5
..LN11117:
	.loc    1  440  is_stmt 1
        lea       (%rbx,%rsi,8), %r12                           #440.24
..LN11118:
        movq      %r12, %rdx                                    #440.5
..LN11119:
        lea       488(%rsp), %rsi                               #440.5
..LN11120:
	.loc    1  439  is_stmt 1
        movq      %rcx, -8(%rsi)                                #439.5
..___tag_value_calc_c2l_grid_info.516:
..LN11121:
	.loc    1  440  is_stmt 1
#       vect_cross(const double *, const double *, double *)
        call      vect_cross                                    #440.5
..___tag_value_calc_c2l_grid_info.517:
..LN11122:
                                # LOE rbx r12 r13 r14 r15
..B8.46:                        # Preds ..B8.45                 # Infreq
..LN11123:
	.loc    1  441  is_stmt 1
        movq      %r12, %rdi                                    #441.5
..___tag_value_calc_c2l_grid_info.518:
..LN11124:
#       normalize_vect(double *)
        call      normalize_vect                                #441.5
..___tag_value_calc_c2l_grid_info.519:
..LN11125:
                                # LOE rbx r13 r14 r15
..B8.47:                        # Preds ..B8.46                 # Infreq
..LN11126:
	.loc    1  433  is_stmt 1
        incq      %r14                                          #433.23
..LN11127:
        cmpq      48(%rsp), %r14                                #433.23
..LN11128:
        jb        ..B8.45       # Prob 82%                      #433.23
..LN11129:
                                # LOE rbx r13 r14 r15
..B8.48:                        # Preds ..B8.47                 # Infreq
..LN11130:
        movl      56(%rsp), %edx                                #
..LN11131:
        movq      32(%rsp), %rdi                                #
..LN11132:
        movq      24(%rsp), %rcx                                #
..LN11133:
        movl      16(%rsp), %esi                                #
..LN11134:
        movl      8(%rsp), %eax                                 #
..LN11135:
        movl      416(%rsp), %r12d                              #
..LN11136:
        movl      264(%rsp), %ebx                               #
..LN11137:
                                # LOE rcx rdi eax edx ebx esi r12d
..B8.49:                        # Preds ..B8.43 ..B8.48         # Infreq
..LN11138:
        incl      %eax                                          #433.3
..LN11139:
        lea       1(%rsi,%rbx), %esi                            #433.3
..LN11140:
        addl      40(%rsp), %edx                                #433.3
..LN11141:
        cmpl      456(%rsp), %eax                               #433.3
..LN11142:
        jb        ..B8.43       # Prob 81%                      #433.3
..LN11143:
                                # LOE rcx rdi eax edx ebx esi r12d
..B8.50:                        # Preds ..B8.49                 # Infreq
..LN11144:
        movl      256(%rsp), %r14d                              #
..LN11145:
        movl      456(%rsp), %r15d                              #
..LN11146:
        movq      200(%rsp), %r13                               #
..LN11147:
                                # LOE r13 ebx r12d r14d r15d
..B8.51:                        # Preds ..B8.41 ..B8.50         # Infreq
..LN11148:
	.loc    1  444  is_stmt 1
        movl      %ebx, %edi                                    #444.32
..LN11149:
        imull     %r15d, %edi                                   #444.32
..LN11150:
        movl      %edi, 8(%rsp)                                 #444.32
..LN11151:
        movslq    %edi, %rdi                                    #444.32
..LN11152:
        shlq      $3, %rdi                                      #444.35
..LN11153:
        movq      %rdi, (%rsp)                                  #444.35
..LN11154:
#       malloc(size_t)
        call      malloc                                        #444.22
..LN11155:
                                # LOE rax r13 ebx r12d r14d r15d
..B8.231:                       # Preds ..B8.51                 # Infreq
..LN11156:
        movq      %rax, 320(%rsp)                               #444.22
..LN11157:
                                # LOE r13 ebx r12d r14d r15d
..B8.52:                        # Preds ..B8.231                # Infreq
..LN11158:
	.loc    1  445  is_stmt 1
        movq      (%rsp), %rdi                                  #445.22
..LN11159:
#       malloc(size_t)
        call      malloc                                        #445.22
..LN11160:
                                # LOE rax r13 ebx r12d r14d r15d
..B8.232:                       # Preds ..B8.52                 # Infreq
..LN11161:
        movq      %rax, 448(%rsp)                               #445.22
..LN11162:
                                # LOE r13 ebx r12d r14d r15d
..B8.53:                        # Preds ..B8.232                # Infreq
..LN11163:
	.loc    1  446  is_stmt 1
        xorl      %esi, %esi                                    #446.3
..LN11164:
        xorl      %edi, %edi                                    #446.26
..LN11165:
        testl     %r15d, %r15d                                  #446.14
..LN11166:
        jle       ..B8.55       # Prob 9%                       #446.14
..LN11167:
                                # LOE rdi r13 ebx esi r12d r14d r15d
..B8.54:                        # Preds ..B8.53                 # Infreq
..L520:         # optimization report
                # %s was not vectorized: inner loop was already vectorized
..LN11168:
        testl     %ebx, %ebx                                    #446.33
..LN11169:
        jg        ..B8.188      # Prob 50%                      #446.33
..LN11170:
                                # LOE rdi r13 ebx esi r12d r14d r15d
..B8.55:                        # Preds ..B8.215 ..B8.206 ..B8.53 ..B8.54 # Infreq
..LN11171:
	.loc    1  450  is_stmt 1
        vzeroupper                                              #450.3
..LN11172:
        movl      8(%rsp), %edi                                 #450.3
..LN11173:
        movq      320(%rsp), %rsi                               #450.3
..LN11174:
        movq      448(%rsp), %rdx                               #450.3
..LN11175:
        movq      88(%rbp), %rcx                                #450.3
..LN11176:
        movq      96(%rbp), %r8                                 #450.3
..___tag_value_calc_c2l_grid_info.521:
..LN11177:
#       unit_vect_latlon(int, const double *, const double *, double *, double *)
        call      unit_vect_latlon                              #450.3
..___tag_value_calc_c2l_grid_info.522:
..LN11178:
                                # LOE r13 ebx r12d r14d r15d
..B8.56:                        # Preds ..B8.55                 # Infreq
..LN11179:
	.loc    1  378  is_stmt 1
        movq      104(%rbp), %rax                               #378.1
..LN11180:
        movq      112(%rbp), %rcx                               #378.1
..LN11181:
        movq      120(%rbp), %r10                               #378.1
..LN11182:
	.loc    1  451  is_stmt 1
        movl      (%rax), %edx                                  #451.69
..LN11183:
	.loc    1  378  is_stmt 1
        movq      128(%rbp), %rax                               #378.1
..LN11184:
	.loc    1  451  is_stmt 1
        movl      (%rcx), %esi                                  #451.84
..LN11185:
	.loc    1  452  is_stmt 1
        movl      (%r10), %r11d                                 #452.6
..LN11186:
        movl      (%rax), %eax                                  #452.22
..LN11187:
	.loc    1  451  is_stmt 1
        movl      %edx, (%rsp)                                  #451.69
..LN11188:
        movl      %esi, 104(%rsp)                               #451.84
..LN11189:
	.loc    1  452  is_stmt 1
        movl      %r11d, 176(%rsp)                              #452.6
..LN11190:
        movl      %eax, 248(%rsp)                               #452.22
..LN11191:
	.loc    1  217  is_stmt 1
        testl     %r12d, %r12d                                  #217.14
..LN11192:
        jle       ..B8.89       # Prob 50%                      #217.14
..LN11193:
                                # LOE r13 ebx r12d r14d r15d
..B8.57:                        # Preds ..B8.56                 # Infreq
..LN11194:
        cmpl      $6, %r12d                                     #217.3
..LN11195:
        jle       ..B8.83       # Prob 50%                      #217.3
..LN11196:
                                # LOE r13 ebx r12d r14d r15d
..B8.58:                        # Preds ..B8.57                 # Infreq
..LN11197:
	.loc    1  218  is_stmt 1
        movq      64(%rbp), %rax                                #218.5
..LN11198:
        cmpq      56(%rbp), %rax                                #218.5
..LN11199:
        jbe       ..B8.60       # Prob 50%                      #218.5
..LN11200:
                                # LOE r13 ebx r12d r14d r15d
..B8.59:                        # Preds ..B8.58                 # Infreq
..LN11201:
        movq      64(%rbp), %rdx                                #218.5
..LN11202:
        lea       8(,%r13,8), %rax                              #218.5
..LN11203:
        subq      56(%rbp), %rdx                                #218.5
..LN11204:
        cmpq      %rdx, %rax                                    #218.5
..LN11205:
        jle       ..B8.62       # Prob 50%                      #218.5
..LN11206:
                                # LOE r13 ebx r12d r14d r15d
..B8.60:                        # Preds ..B8.58 ..B8.59         # Infreq
..LN11207:
        movq      64(%rbp), %rax                                #218.5
..LN11208:
        cmpq      56(%rbp), %rax                                #218.5
..LN11209:
        jae       ..B8.83       # Prob 50%                      #218.5
..LN11210:
                                # LOE r13 ebx r12d r14d r15d
..B8.61:                        # Preds ..B8.60                 # Infreq
..LN11211:
        movq      56(%rbp), %rax                                #218.5
..LN11212:
        lea       8(,%r13,8), %rdx                              #218.5
..LN11213:
        subq      64(%rbp), %rax                                #218.5
..LN11214:
        cmpq      %rdx, %rax                                    #218.5
..LN11215:
        jl        ..B8.83       # Prob 50%                      #218.5
..LN11216:
                                # LOE r13 ebx r12d r14d r15d
..B8.62:                        # Preds ..B8.59 ..B8.61         # Infreq
..LN11217:
	.loc    1  217  is_stmt 1
        cmpl      $16, %r12d                                    #217.3
..LN11218:
        jl        ..B8.207      # Prob 10%                      #217.3
..LN11219:
                                # LOE r13 ebx r12d r14d r15d
..B8.63:                        # Preds ..B8.62                 # Infreq
..LN11220:
        movq      64(%rbp), %rdx                                #217.3
..LN11221:
        andq      $31, %rdx                                     #217.3
..LN11222:
        movl      %edx, %edx                                    #217.3
..LN11223:
        testl     %edx, %edx                                    #217.3
..LN11224:
        je        ..B8.66       # Prob 50%                      #217.3
..LN11225:
                                # LOE rdx r13 ebx r12d r14d r15d
..B8.64:                        # Preds ..B8.63                 # Infreq
..LN11226:
        testb     $7, %dl                                       #217.3
..LN11227:
        jne       ..B8.207      # Prob 10%                      #217.3
..LN11228:
                                # LOE rdx r13 ebx r12d r14d r15d
..B8.65:                        # Preds ..B8.64                 # Infreq
..LN11229:
        negl      %edx                                          #217.3
..LN11230:
        addl      $32, %edx                                     #217.3
..LN11231:
        shrl      $3, %edx                                      #217.3
..LN11232:
                                # LOE rdx r13 ebx r12d r14d r15d
..B8.66:                        # Preds ..B8.65 ..B8.63         # Infreq
..LN11233:
        lea       16(%rdx), %eax                                #217.3
..LN11234:
        cmpl      %eax, %r12d                                   #217.3
..LN11235:
        jl        ..B8.207      # Prob 10%                      #217.3
..LN11236:
                                # LOE rdx r13 ebx r12d r14d r15d
..B8.67:                        # Preds ..B8.66                 # Infreq
..LN11237:
        movl      %r12d, %ecx                                   #217.3
..LN11238:
        xorl      %esi, %esi                                    #217.3
..LN11239:
        subl      %edx, %ecx                                    #217.3
..LN11240:
        andl      $15, %ecx                                     #217.3
..LN11241:
        negl      %ecx                                          #217.3
..LN11242:
        addl      %r12d, %ecx                                   #217.3
..LN11243:
        testq     %rdx, %rdx                                    #217.3
..LN11244:
        jbe       ..B8.71       # Prob 9%                       #217.3
..LN11245:
                                # LOE rdx rsi r13 ecx ebx r12d r14d r15d
..B8.68:                        # Preds ..B8.67                 # Infreq
..LN11246:
	.loc    1  218  is_stmt 1
        movq      64(%rbp), %r10                                #218.17
..LN11247:
        movq      $0x3fe0000000000000, %rax                     #218.17
..LN11248:
        movq      56(%rbp), %r11                                #218.17
..LN11249:
                                # LOE rax rdx rsi r10 r11 r13 ecx ebx r12d r14d r15d
..B8.69:                        # Preds ..B8.69 ..B8.68         # Infreq
..L523:         # optimization report
                # MULTIVERSIONED FOR DATA DEPENDENCE, VER 1
                # LOOP WAS UNROLLED BY 4
                # PEELED LOOP FOR VECTORIZATION
                # VECTORIZATION SPEEDUP COEFFECIENT 3.875000
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 0.406250
..LN11250:
        movq      %rax, (%r11,%rsi,8)                           #218.5
..LN11251:
	.loc    1  219  is_stmt 1
        movq      %rax, (%r10,%rsi,8)                           #219.5
..LN11252:
	.loc    1  217  is_stmt 1
        incq      %rsi                                          #217.3
..LN11253:
        cmpq      %rdx, %rsi                                    #217.3
..LN11254:
        jb        ..B8.69       # Prob 81%                      #217.3
..LN11255:
                                # LOE rax rdx rsi r10 r11 r13 ecx ebx r12d r14d r15d
..B8.71:                        # Preds ..B8.69 ..B8.67         # Infreq
..LN11256:
	.loc    1  218  is_stmt 1
        vmovupd   .L_2il0floatpacket.4(%rip), %ymm0             #218.17
..LN11257:
	.loc    1  217  is_stmt 1
        movslq    %ecx, %rax                                    #217.3
..LN11258:
        movq      64(%rbp), %rsi                                #217.3
..LN11259:
        movq      56(%rbp), %r10                                #217.3
..LN11260:
                                # LOE rax rdx rsi r10 r13 ecx ebx r12d r14d r15d ymm0
..B8.72:                        # Preds ..B8.72 ..B8.71         # Infreq
..L524:         # optimization report
                # MULTIVERSIONED FOR DATA DEPENDENCE, VER 1
                # LOOP WAS UNROLLED BY 4
                # LOOP WAS VECTORIZED
                # VECTORIZATION HAS UNALIGNED MEMORY REFERENCES
                # VECTORIZATION SPEEDUP COEFFECIENT 3.875000
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 0.406250
                # MAIN VECTOR TYPE: 64-bits floating point
..LN11261:
	.loc    1  218  is_stmt 1
        vmovupd   %ymm0, (%r10,%rdx,8)                          #218.5
..LN11262:
	.loc    1  219  is_stmt 1
        vmovupd   %ymm0, (%rsi,%rdx,8)                          #219.5
..LN11263:
	.loc    1  218  is_stmt 1
        vmovupd   %ymm0, 32(%r10,%rdx,8)                        #218.5
..LN11264:
	.loc    1  219  is_stmt 1
        vmovupd   %ymm0, 32(%rsi,%rdx,8)                        #219.5
..LN11265:
	.loc    1  218  is_stmt 1
        vmovupd   %ymm0, 64(%r10,%rdx,8)                        #218.5
..LN11266:
	.loc    1  219  is_stmt 1
        vmovupd   %ymm0, 64(%rsi,%rdx,8)                        #219.5
..LN11267:
	.loc    1  218  is_stmt 1
        vmovupd   %ymm0, 96(%r10,%rdx,8)                        #218.5
..LN11268:
	.loc    1  219  is_stmt 1
        vmovupd   %ymm0, 96(%rsi,%rdx,8)                        #219.5
..LN11269:
	.loc    1  217  is_stmt 1
        addq      $16, %rdx                                     #217.3
..LN11270:
        cmpq      %rax, %rdx                                    #217.3
..LN11271:
        jb        ..B8.72       # Prob 81%                      #217.3
..LN11272:
                                # LOE rax rdx rsi r10 r13 ecx ebx r12d r14d r15d ymm0
..B8.74:                        # Preds ..B8.72 ..B8.207        # Infreq
..LN11273:
        lea       1(%rcx), %eax                                 #217.3
..LN11274:
        cmpl      %eax, %r12d                                   #217.3
..LN11275:
        jb        ..B8.89       # Prob 50%                      #217.3
..LN11276:
                                # LOE r13 ecx ebx r12d r14d r15d
..B8.75:                        # Preds ..B8.74                 # Infreq
..LN11277:
        movslq    %ecx, %rdx                                    #217.3
..LN11278:
        negq      %rdx                                          #217.3
..LN11279:
        addq      192(%rsp), %rdx                               #217.3
..LN11280:
        cmpq      $4, %rdx                                      #217.3
..LN11281:
        jl        ..B8.220      # Prob 10%                      #217.3
..LN11282:
                                # LOE rdx r13 ecx ebx r12d r14d r15d
..B8.76:                        # Preds ..B8.75                 # Infreq
..LN11283:
	.loc    1  218  is_stmt 1
        movslq    %ecx, %rcx                                    #218.5
..LN11284:
	.loc    1  217  is_stmt 1
        movl      %edx, %eax                                    #217.3
..LN11285:
	.loc    1  219  is_stmt 1
        movq      64(%rbp), %r10                                #219.5
..LN11286:
	.loc    1  217  is_stmt 1
        andl      $-4, %eax                                     #217.3
..LN11287:
	.loc    1  218  is_stmt 1
        movq      56(%rbp), %rsi                                #218.5
..LN11288:
	.loc    1  217  is_stmt 1
        xorl      %r11d, %r11d                                  #217.3
..LN11289:
        movslq    %eax, %rax                                    #217.3
..LN11290:
	.loc    1  218  is_stmt 1
        vmovupd   .L_2il0floatpacket.9(%rip), %ymm0             #218.17
..LN11291:
	.loc    1  219  is_stmt 1
        lea       (%r10,%rcx,8), %r10                           #219.5
..LN11292:
	.loc    1  218  is_stmt 1
        lea       (%rsi,%rcx,8), %rsi                           #218.5
..LN11293:
                                # LOE rax rdx rsi r10 r11 r13 ecx ebx r12d r14d r15d ymm0
..B8.77:                        # Preds ..B8.77 ..B8.76         # Infreq
..L525:         # optimization report
                # MULTIVERSIONED FOR DATA DEPENDENCE, VER 1
                # LOOP WAS VECTORIZED
                # REMAINDER LOOP FOR VECTORIZATION
                # VECTORIZATION HAS UNALIGNED MEMORY REFERENCES
                # VECTORIZATION SPEEDUP COEFFECIENT 1.849609
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 1.625000
                # MAIN VECTOR TYPE: 64-bits floating point
..LN11294:
        vmovupd   %ymm0, (%rsi,%r11,8)                          #218.5
..LN11295:
	.loc    1  219  is_stmt 1
        vmovupd   %ymm0, (%r10,%r11,8)                          #219.5
..LN11296:
	.loc    1  217  is_stmt 1
        addq      $4, %r11                                      #217.3
..LN11297:
        cmpq      %rax, %r11                                    #217.3
..LN11298:
        jb        ..B8.77       # Prob 81%                      #217.3
..LN11299:
                                # LOE rax rdx rsi r10 r11 r13 ecx ebx r12d r14d r15d ymm0
..B8.79:                        # Preds ..B8.77 ..B8.220        # Infreq
..LN11300:
        cmpq      %rdx, %rax                                    #217.3
..LN11301:
        jae       ..B8.89       # Prob 9%                       #217.3
..LN11302:
                                # LOE rax rdx r13 ecx ebx r12d r14d r15d
..B8.80:                        # Preds ..B8.79                 # Infreq
..LN11303:
	.loc    1  218  is_stmt 1
        movslq    %ecx, %rcx                                    #218.5
..LN11304:
        movq      $0x3fe0000000000000, %r10                     #218.17
..LN11305:
	.loc    1  219  is_stmt 1
        movq      64(%rbp), %rsi                                #219.5
..LN11306:
	.loc    1  218  is_stmt 1
        movq      56(%rbp), %r11                                #218.5
..LN11307:
	.loc    1  219  is_stmt 1
        lea       (%rsi,%rcx,8), %rsi                           #219.5
..LN11308:
	.loc    1  218  is_stmt 1
        lea       (%r11,%rcx,8), %rcx                           #218.5
..LN11309:
                                # LOE rax rdx rcx rsi r10 r13 ebx r12d r14d r15d
..B8.81:                        # Preds ..B8.81 ..B8.80         # Infreq
..L526:         # optimization report
                # MULTIVERSIONED FOR DATA DEPENDENCE, VER 1
                # REMAINDER LOOP FOR VECTORIZATION
                # VECTORIZATION SPEEDUP COEFFECIENT 1.849609
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 1.625000
..LN11310:
        movq      %r10, (%rcx,%rax,8)                           #218.5
..LN11311:
	.loc    1  219  is_stmt 1
        movq      %r10, (%rsi,%rax,8)                           #219.5
..LN11312:
	.loc    1  217  is_stmt 1
        incq      %rax                                          #217.3
..LN11313:
        cmpq      %rdx, %rax                                    #217.3
..LN11314:
        jb        ..B8.81       # Prob 81%                      #217.3
..LN11315:
        jmp       ..B8.89       # Prob 100%                     #217.3
..LN11316:
                                # LOE rax rdx rcx rsi r10 r13 ebx r12d r14d r15d
..B8.83:                        # Preds ..B8.57 ..B8.60 ..B8.61 # Infreq
..LN11317:
        movl      %r12d, %eax                                   #217.3
..LN11318:
        movl      $1, %esi                                      #217.3
..LN11319:
        shrl      $31, %eax                                     #217.3
..LN11320:
        xorl      %ecx, %ecx                                    #217.3
..LN11321:
        lea       1(%rbx,%rax), %edx                            #217.3
..LN11322:
        sarl      $1, %edx                                      #217.3
..LN11323:
        testl     %edx, %edx                                    #217.3
..LN11324:
        jbe       ..B8.87       # Prob 9%                       #217.3
..LN11325:
                                # LOE r13 edx ecx ebx esi r12d r14d r15d
..B8.84:                        # Preds ..B8.83                 # Infreq
..LN11326:
	.loc    1  218  is_stmt 1
        movq      64(%rbp), %r10                                #218.17
..LN11327:
        movq      $0x3fe0000000000000, %rax                     #218.17
..LN11328:
        movq      56(%rbp), %r11                                #218.17
..LN11329:
                                # LOE rax r10 r11 r13 edx ecx ebx r12d r14d r15d
..B8.85:                        # Preds ..B8.85 ..B8.84         # Infreq
..L527:         # optimization report
                # MULTIVERSIONED FOR DATA DEPENDENCE, VER 2
                # LOOP WAS UNROLLED BY 2
                # %s was not vectorized: non-vectorizable loop instance from multiversioning
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
..LN11330:
        lea       (%rcx,%rcx), %esi                             #218.5
..LN11331:
        movslq    %esi, %rsi                                    #218.5
..LN11332:
	.loc    1  217  is_stmt 1
        incl      %ecx                                          #217.3
..LN11333:
	.loc    1  218  is_stmt 1
        movq      %rax, (%r11,%rsi,8)                           #218.5
..LN11334:
	.loc    1  219  is_stmt 1
        movq      %rax, (%r10,%rsi,8)                           #219.5
..LN11335:
	.loc    1  218  is_stmt 1
        movq      %rax, 8(%r11,%rsi,8)                          #218.5
..LN11336:
	.loc    1  219  is_stmt 1
        movq      %rax, 8(%r10,%rsi,8)                          #219.5
..LN11337:
	.loc    1  217  is_stmt 1
        cmpl      %edx, %ecx                                    #217.3
..LN11338:
        jb        ..B8.85       # Prob 63%                      #217.3
..LN11339:
                                # LOE rax r10 r11 r13 edx ecx ebx r12d r14d r15d
..B8.86:                        # Preds ..B8.85                 # Infreq
..LN11340:
	.loc    1  218  is_stmt 1
        lea       1(%rcx,%rcx), %esi                            #218.5
..LN11341:
                                # LOE r13 ebx esi r12d r14d r15d
..B8.87:                        # Preds ..B8.86 ..B8.83         # Infreq
..LN11342:
	.loc    1  217  is_stmt 1
        lea       -1(%rsi), %eax                                #217.3
..LN11343:
        cmpl      %eax, %r12d                                   #217.3
..LN11344:
        jbe       ..B8.89       # Prob 9%                       #217.3
..LN11345:
                                # LOE r13 ebx esi r12d r14d r15d
..B8.88:                        # Preds ..B8.87                 # Infreq
..L528:         # optimization report
                # REMAINDER LOOP
                # MULTIVERSIONED FOR DATA DEPENDENCE, VER 2
                # %s was not vectorized: non-vectorizable loop instance from multiversioning
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
..LN11346:
	.loc    1  218  is_stmt 1
        movq      $0x3fe0000000000000, %rdx                     #218.17
..LN11347:
        movslq    %esi, %rsi                                    #218.5
..LN11348:
        movq      56(%rbp), %rax                                #218.5
..LN11349:
	.loc    1  219  is_stmt 1
        movq      64(%rbp), %rcx                                #219.5
..LN11350:
	.loc    1  218  is_stmt 1
        movq      %rdx, -8(%rax,%rsi,8)                         #218.5
..LN11351:
	.loc    1  219  is_stmt 1
        movq      %rdx, -8(%rcx,%rsi,8)                         #219.5
..LN11352:
                                # LOE r13 ebx r12d r14d r15d
..B8.89:                        # Preds ..B8.74 ..B8.79 ..B8.56 ..B8.81 ..B8.87
                                #       ..B8.88                 # Infreq
..LN11353:
	.loc    1  221  is_stmt 1
        testl     %r14d, %r14d                                  #221.14
..LN11354:
        jle       ..B8.122      # Prob 50%                      #221.14
..LN11355:
                                # LOE r13 ebx r12d r14d r15d
..B8.90:                        # Preds ..B8.89                 # Infreq
..LN11356:
        cmpl      $6, %r14d                                     #221.3
..LN11357:
        jle       ..B8.116      # Prob 50%                      #221.3
..LN11358:
                                # LOE r13 ebx r12d r14d r15d
..B8.91:                        # Preds ..B8.90                 # Infreq
..LN11359:
	.loc    1  222  is_stmt 1
        movq      48(%rbp), %rax                                #222.5
..LN11360:
        cmpq      40(%rbp), %rax                                #222.5
..LN11361:
        jbe       ..B8.93       # Prob 50%                      #222.5
..LN11362:
                                # LOE r13 ebx r12d r14d r15d
..B8.92:                        # Preds ..B8.91                 # Infreq
..LN11363:
	.loc    1  221  is_stmt 1
        movslq    %r15d, %r15                                   #221.3
..LN11364:
	.loc    1  222  is_stmt 1
        movq      48(%rbp), %rdx                                #222.5
..LN11365:
        subq      40(%rbp), %rdx                                #222.5
..LN11366:
        lea       8(,%r15,8), %rax                              #222.5
..LN11367:
        cmpq      %rdx, %rax                                    #222.5
..LN11368:
        jle       ..B8.95       # Prob 50%                      #222.5
..LN11369:
                                # LOE r13 ebx r12d r14d r15d
..B8.93:                        # Preds ..B8.91 ..B8.92         # Infreq
..LN11370:
        movq      48(%rbp), %rax                                #222.5
..LN11371:
        cmpq      40(%rbp), %rax                                #222.5
..LN11372:
        jae       ..B8.116      # Prob 50%                      #222.5
..LN11373:
                                # LOE r13 ebx r12d r14d r15d
..B8.94:                        # Preds ..B8.93                 # Infreq
..LN11374:
	.loc    1  221  is_stmt 1
        movslq    %r15d, %r15                                   #221.3
..LN11375:
	.loc    1  222  is_stmt 1
        movq      40(%rbp), %rax                                #222.5
..LN11376:
        subq      48(%rbp), %rax                                #222.5
..LN11377:
        lea       8(,%r15,8), %rdx                              #222.5
..LN11378:
        cmpq      %rdx, %rax                                    #222.5
..LN11379:
        jl        ..B8.116      # Prob 50%                      #222.5
..LN11380:
                                # LOE r13 ebx r12d r14d r15d
..B8.95:                        # Preds ..B8.92 ..B8.94         # Infreq
..LN11381:
	.loc    1  221  is_stmt 1
        cmpl      $16, %r14d                                    #221.3
..LN11382:
        jl        ..B8.211      # Prob 10%                      #221.3
..LN11383:
                                # LOE r13 ebx r12d r14d r15d
..B8.96:                        # Preds ..B8.95                 # Infreq
..LN11384:
        movq      48(%rbp), %rdx                                #221.3
..LN11385:
        andq      $31, %rdx                                     #221.3
..LN11386:
        movl      %edx, %edx                                    #221.3
..LN11387:
        testl     %edx, %edx                                    #221.3
..LN11388:
        je        ..B8.99       # Prob 50%                      #221.3
..LN11389:
                                # LOE rdx r13 ebx r12d r14d r15d
..B8.97:                        # Preds ..B8.96                 # Infreq
..LN11390:
        testb     $7, %dl                                       #221.3
..LN11391:
        jne       ..B8.211      # Prob 10%                      #221.3
..LN11392:
                                # LOE rdx r13 ebx r12d r14d r15d
..B8.98:                        # Preds ..B8.97                 # Infreq
..LN11393:
        negl      %edx                                          #221.3
..LN11394:
        addl      $32, %edx                                     #221.3
..LN11395:
        shrl      $3, %edx                                      #221.3
..LN11396:
                                # LOE rdx r13 ebx r12d r14d r15d
..B8.99:                        # Preds ..B8.98 ..B8.96         # Infreq
..LN11397:
        lea       16(%rdx), %eax                                #221.3
..LN11398:
        cmpl      %eax, %r14d                                   #221.3
..LN11399:
        jl        ..B8.211      # Prob 10%                      #221.3
..LN11400:
                                # LOE rdx r13 ebx r12d r14d r15d
..B8.100:                       # Preds ..B8.99                 # Infreq
..LN11401:
        movl      %r14d, %ecx                                   #221.3
..LN11402:
        xorl      %esi, %esi                                    #221.3
..LN11403:
        subl      %edx, %ecx                                    #221.3
..LN11404:
        andl      $15, %ecx                                     #221.3
..LN11405:
        negl      %ecx                                          #221.3
..LN11406:
        addl      %r14d, %ecx                                   #221.3
..LN11407:
        testq     %rdx, %rdx                                    #221.3
..LN11408:
        jbe       ..B8.104      # Prob 9%                       #221.3
..LN11409:
                                # LOE rdx rsi r13 ecx ebx r12d r14d r15d
..B8.101:                       # Preds ..B8.100                # Infreq
..LN11410:
	.loc    1  222  is_stmt 1
        movq      48(%rbp), %r10                                #222.17
..LN11411:
        movq      $0x3fe0000000000000, %rax                     #222.17
..LN11412:
        movq      40(%rbp), %r11                                #222.17
..LN11413:
                                # LOE rax rdx rsi r10 r11 r13 ecx ebx r12d r14d r15d
..B8.102:                       # Preds ..B8.102 ..B8.101       # Infreq
..L529:         # optimization report
                # MULTIVERSIONED FOR DATA DEPENDENCE, VER 1
                # LOOP WAS UNROLLED BY 4
                # PEELED LOOP FOR VECTORIZATION
                # VECTORIZATION SPEEDUP COEFFECIENT 3.875000
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 0.406250
..LN11414:
        movq      %rax, (%r11,%rsi,8)                           #222.5
..LN11415:
	.loc    1  223  is_stmt 1
        movq      %rax, (%r10,%rsi,8)                           #223.5
..LN11416:
	.loc    1  221  is_stmt 1
        incq      %rsi                                          #221.3
..LN11417:
        cmpq      %rdx, %rsi                                    #221.3
..LN11418:
        jb        ..B8.102      # Prob 81%                      #221.3
..LN11419:
                                # LOE rax rdx rsi r10 r11 r13 ecx ebx r12d r14d r15d
..B8.104:                       # Preds ..B8.102 ..B8.100       # Infreq
..LN11420:
	.loc    1  222  is_stmt 1
        vmovupd   .L_2il0floatpacket.4(%rip), %ymm0             #222.17
..LN11421:
	.loc    1  221  is_stmt 1
        movslq    %ecx, %rax                                    #221.3
..LN11422:
        movq      48(%rbp), %rsi                                #221.3
..LN11423:
        movq      40(%rbp), %r10                                #221.3
..LN11424:
                                # LOE rax rdx rsi r10 r13 ecx ebx r12d r14d r15d ymm0
..B8.105:                       # Preds ..B8.105 ..B8.104       # Infreq
..L530:         # optimization report
                # MULTIVERSIONED FOR DATA DEPENDENCE, VER 1
                # LOOP WAS UNROLLED BY 4
                # LOOP WAS VECTORIZED
                # VECTORIZATION HAS UNALIGNED MEMORY REFERENCES
                # VECTORIZATION SPEEDUP COEFFECIENT 3.875000
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 0.406250
                # MAIN VECTOR TYPE: 64-bits floating point
..LN11425:
	.loc    1  222  is_stmt 1
        vmovupd   %ymm0, (%r10,%rdx,8)                          #222.5
..LN11426:
	.loc    1  223  is_stmt 1
        vmovupd   %ymm0, (%rsi,%rdx,8)                          #223.5
..LN11427:
	.loc    1  222  is_stmt 1
        vmovupd   %ymm0, 32(%r10,%rdx,8)                        #222.5
..LN11428:
	.loc    1  223  is_stmt 1
        vmovupd   %ymm0, 32(%rsi,%rdx,8)                        #223.5
..LN11429:
	.loc    1  222  is_stmt 1
        vmovupd   %ymm0, 64(%r10,%rdx,8)                        #222.5
..LN11430:
	.loc    1  223  is_stmt 1
        vmovupd   %ymm0, 64(%rsi,%rdx,8)                        #223.5
..LN11431:
	.loc    1  222  is_stmt 1
        vmovupd   %ymm0, 96(%r10,%rdx,8)                        #222.5
..LN11432:
	.loc    1  223  is_stmt 1
        vmovupd   %ymm0, 96(%rsi,%rdx,8)                        #223.5
..LN11433:
	.loc    1  221  is_stmt 1
        addq      $16, %rdx                                     #221.3
..LN11434:
        cmpq      %rax, %rdx                                    #221.3
..LN11435:
        jb        ..B8.105      # Prob 81%                      #221.3
..LN11436:
                                # LOE rax rdx rsi r10 r13 ecx ebx r12d r14d r15d ymm0
..B8.107:                       # Preds ..B8.105 ..B8.211       # Infreq
..LN11437:
        lea       1(%rcx), %eax                                 #221.3
..LN11438:
        cmpl      %eax, %r14d                                   #221.3
..LN11439:
        jb        ..B8.122      # Prob 50%                      #221.3
..LN11440:
                                # LOE r13 ecx ebx r12d r14d r15d
..B8.108:                       # Preds ..B8.107                # Infreq
..LN11441:
        movslq    %r14d, %rdx                                   #221.3
..LN11442:
        movslq    %ecx, %rcx                                    #221.3
..LN11443:
        subq      %rcx, %rdx                                    #221.3
..LN11444:
        cmpq      $4, %rdx                                      #221.3
..LN11445:
        jl        ..B8.210      # Prob 10%                      #221.3
..LN11446:
                                # LOE rdx r13 ecx ebx r12d r14d r15d
..B8.109:                       # Preds ..B8.108                # Infreq
..LN11447:
	.loc    1  222  is_stmt 1
        movslq    %ecx, %rcx                                    #222.5
..LN11448:
	.loc    1  221  is_stmt 1
        movl      %edx, %eax                                    #221.3
..LN11449:
	.loc    1  223  is_stmt 1
        movq      48(%rbp), %r10                                #223.5
..LN11450:
	.loc    1  221  is_stmt 1
        andl      $-4, %eax                                     #221.3
..LN11451:
	.loc    1  222  is_stmt 1
        movq      40(%rbp), %rsi                                #222.5
..LN11452:
	.loc    1  221  is_stmt 1
        xorl      %r11d, %r11d                                  #221.3
..LN11453:
        movslq    %eax, %rax                                    #221.3
..LN11454:
	.loc    1  222  is_stmt 1
        vmovupd   .L_2il0floatpacket.9(%rip), %ymm0             #222.17
..LN11455:
	.loc    1  223  is_stmt 1
        lea       (%r10,%rcx,8), %r10                           #223.5
..LN11456:
	.loc    1  222  is_stmt 1
        lea       (%rsi,%rcx,8), %rsi                           #222.5
..LN11457:
                                # LOE rax rdx rsi r10 r11 r13 ecx ebx r12d r14d r15d ymm0
..B8.110:                       # Preds ..B8.110 ..B8.109       # Infreq
..L531:         # optimization report
                # MULTIVERSIONED FOR DATA DEPENDENCE, VER 1
                # LOOP WAS VECTORIZED
                # REMAINDER LOOP FOR VECTORIZATION
                # VECTORIZATION HAS UNALIGNED MEMORY REFERENCES
                # VECTORIZATION SPEEDUP COEFFECIENT 1.849609
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 1.625000
                # MAIN VECTOR TYPE: 64-bits floating point
..LN11458:
        vmovupd   %ymm0, (%rsi,%r11,8)                          #222.5
..LN11459:
	.loc    1  223  is_stmt 1
        vmovupd   %ymm0, (%r10,%r11,8)                          #223.5
..LN11460:
	.loc    1  221  is_stmt 1
        addq      $4, %r11                                      #221.3
..LN11461:
        cmpq      %rax, %r11                                    #221.3
..LN11462:
        jb        ..B8.110      # Prob 81%                      #221.3
..LN11463:
                                # LOE rax rdx rsi r10 r11 r13 ecx ebx r12d r14d r15d ymm0
..B8.112:                       # Preds ..B8.110 ..B8.210       # Infreq
..LN11464:
        cmpq      %rdx, %rax                                    #221.3
..LN11465:
        jae       ..B8.122      # Prob 9%                       #221.3
..LN11466:
                                # LOE rax rdx r13 ecx ebx r12d r14d r15d
..B8.113:                       # Preds ..B8.112                # Infreq
..LN11467:
	.loc    1  222  is_stmt 1
        movslq    %ecx, %rcx                                    #222.5
..LN11468:
        movq      $0x3fe0000000000000, %r10                     #222.17
..LN11469:
	.loc    1  223  is_stmt 1
        movq      48(%rbp), %rsi                                #223.5
..LN11470:
	.loc    1  222  is_stmt 1
        movq      40(%rbp), %r11                                #222.5
..LN11471:
	.loc    1  223  is_stmt 1
        lea       (%rsi,%rcx,8), %rsi                           #223.5
..LN11472:
	.loc    1  222  is_stmt 1
        lea       (%r11,%rcx,8), %rcx                           #222.5
..LN11473:
                                # LOE rax rdx rcx rsi r10 r13 ebx r12d r14d r15d
..B8.114:                       # Preds ..B8.114 ..B8.113       # Infreq
..L532:         # optimization report
                # MULTIVERSIONED FOR DATA DEPENDENCE, VER 1
                # REMAINDER LOOP FOR VECTORIZATION
                # VECTORIZATION SPEEDUP COEFFECIENT 1.849609
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 1.625000
..LN11474:
        movq      %r10, (%rcx,%rax,8)                           #222.5
..LN11475:
	.loc    1  223  is_stmt 1
        movq      %r10, (%rsi,%rax,8)                           #223.5
..LN11476:
	.loc    1  221  is_stmt 1
        incq      %rax                                          #221.3
..LN11477:
        cmpq      %rdx, %rax                                    #221.3
..LN11478:
        jb        ..B8.114      # Prob 81%                      #221.3
..LN11479:
        jmp       ..B8.122      # Prob 100%                     #221.3
..LN11480:
                                # LOE rax rdx rcx rsi r10 r13 ebx r12d r14d r15d
..B8.116:                       # Preds ..B8.90 ..B8.93 ..B8.94 # Infreq
..LN11481:
        movl      %r14d, %eax                                   #221.3
..LN11482:
        xorl      %ecx, %ecx                                    #221.3
..LN11483:
        shrl      $31, %eax                                     #221.3
..LN11484:
        movl      $1, %esi                                      #221.3
..LN11485:
        lea       1(%r15,%rax), %edx                            #221.3
..LN11486:
        sarl      $1, %edx                                      #221.3
..LN11487:
        testl     %edx, %edx                                    #221.3
..LN11488:
        jbe       ..B8.120      # Prob 9%                       #221.3
..LN11489:
                                # LOE r13 edx ecx ebx esi r12d r14d r15d
..B8.117:                       # Preds ..B8.116                # Infreq
..LN11490:
	.loc    1  222  is_stmt 1
        movq      48(%rbp), %r10                                #222.17
..LN11491:
        movq      $0x3fe0000000000000, %rax                     #222.17
..LN11492:
        movq      40(%rbp), %r11                                #222.17
..LN11493:
                                # LOE rax r10 r11 r13 edx ecx ebx r12d r14d r15d
..B8.118:                       # Preds ..B8.118 ..B8.117       # Infreq
..L533:         # optimization report
                # MULTIVERSIONED FOR DATA DEPENDENCE, VER 2
                # LOOP WAS UNROLLED BY 2
                # %s was not vectorized: non-vectorizable loop instance from multiversioning
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
..LN11494:
        lea       (%rcx,%rcx), %esi                             #222.5
..LN11495:
        movslq    %esi, %rsi                                    #222.5
..LN11496:
	.loc    1  221  is_stmt 1
        incl      %ecx                                          #221.3
..LN11497:
	.loc    1  222  is_stmt 1
        movq      %rax, (%r11,%rsi,8)                           #222.5
..LN11498:
	.loc    1  223  is_stmt 1
        movq      %rax, (%r10,%rsi,8)                           #223.5
..LN11499:
	.loc    1  222  is_stmt 1
        movq      %rax, 8(%r11,%rsi,8)                          #222.5
..LN11500:
	.loc    1  223  is_stmt 1
        movq      %rax, 8(%r10,%rsi,8)                          #223.5
..LN11501:
	.loc    1  221  is_stmt 1
        cmpl      %edx, %ecx                                    #221.3
..LN11502:
        jb        ..B8.118      # Prob 63%                      #221.3
..LN11503:
                                # LOE rax r10 r11 r13 edx ecx ebx r12d r14d r15d
..B8.119:                       # Preds ..B8.118                # Infreq
..LN11504:
	.loc    1  222  is_stmt 1
        lea       1(%rcx,%rcx), %esi                            #222.5
..LN11505:
                                # LOE r13 ebx esi r12d r14d r15d
..B8.120:                       # Preds ..B8.119 ..B8.116       # Infreq
..LN11506:
	.loc    1  221  is_stmt 1
        lea       -1(%rsi), %eax                                #221.3
..LN11507:
        cmpl      %eax, %r14d                                   #221.3
..LN11508:
        jbe       ..B8.122      # Prob 9%                       #221.3
..LN11509:
                                # LOE r13 ebx esi r12d r14d r15d
..B8.121:                       # Preds ..B8.120                # Infreq
..L534:         # optimization report
                # REMAINDER LOOP
                # MULTIVERSIONED FOR DATA DEPENDENCE, VER 2
                # %s was not vectorized: non-vectorizable loop instance from multiversioning
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
..LN11510:
	.loc    1  222  is_stmt 1
        movq      $0x3fe0000000000000, %rdx                     #222.17
..LN11511:
        movslq    %esi, %rsi                                    #222.5
..LN11512:
        movq      40(%rbp), %rax                                #222.5
..LN11513:
	.loc    1  223  is_stmt 1
        movq      48(%rbp), %rcx                                #223.5
..LN11514:
	.loc    1  222  is_stmt 1
        movq      %rdx, -8(%rax,%rsi,8)                         #222.5
..LN11515:
	.loc    1  223  is_stmt 1
        movq      %rdx, -8(%rcx,%rsi,8)                         #223.5
..LN11516:
                                # LOE r13 ebx r12d r14d r15d
..B8.122:                       # Preds ..B8.114 ..B8.120 ..B8.89 ..B8.107 ..B8.112
                                #       ..B8.121                # Infreq
..LN11517:
	.loc    1  226  is_stmt 1
        vzeroupper                                              #226.18
..LN11518:
        lea       (%rbx,%rbx), %eax                             #226.18
..LN11519:
        movslq    %eax, %rax                                    #226.18
..LN11520:
        lea       32(,%rax,8), %rdi                             #226.18
..LN11521:
#       malloc(size_t)
        call      malloc                                        #226.18
..LN11522:
                                # LOE rax r13 ebx r12d r14d r15d
..B8.233:                       # Preds ..B8.122                # Infreq
..LN11523:
        movq      %rax, 384(%rsp)                               #226.18
..LN11524:
                                # LOE r13 ebx r12d r14d r15d
..B8.123:                       # Preds ..B8.233                # Infreq
..LN11525:
	.loc    1  227  is_stmt 1
        lea       (%r15,%r15), %eax                             #227.18
..LN11526:
        movslq    %eax, %rax                                    #227.18
..LN11527:
        lea       32(,%rax,8), %rdi                             #227.18
..LN11528:
#       malloc(size_t)
        call      malloc                                        #227.18
..LN11529:
                                # LOE rax r13 ebx r12d r14d r15d
..B8.234:                       # Preds ..B8.123                # Infreq
..LN11530:
        movq      %rax, %rcx                                    #227.18
..LN11531:
                                # LOE rcx r13 ebx r12d r14d r15d
..B8.124:                       # Preds ..B8.234                # Infreq
..LN11532:
	.loc    1  232  is_stmt 1
        movl      (%rsp), %r10d                                 #232.5
..LN11533:
        movl      $1, %eax                                      #232.5
..LN11534:
        xorl      %edx, %edx                                    #232.5
..LN11535:
        testl     %r10d, %r10d                                  #232.5
..LN11536:
        cmovne    %rax, %rdx                                    #232.5
..LN11537:
	.loc    1  214  is_stmt 1
        lea       1(%r13), %rax                                 #214.14
..LN11538:
	.loc    1  236  is_stmt 1
        cmpl      $0, 104(%rsp)                                 #236.5
..LN11539:
	.loc    1  240  is_stmt 1
        movl      176(%rsp), %esi                               #240.5
..LN11540:
	.loc    1  236  is_stmt 1
        cmovne    %r13, %rax                                    #236.5
..LN11541:
        movl      $1, %edi                                      #236.5
..LN11542:
	.loc    1  240  is_stmt 1
        testl     %esi, %esi                                    #240.5
..LN11543:
        cmove     %esi, %edi                                    #240.5
..LN11544:
	.loc    1  244  is_stmt 1
        movl      %r14d, %esi                                   #244.5
..LN11545:
        cmpl      $0, 248(%rsp)                                 #244.5
..LN11546:
        cmovne    %r15d, %esi                                   #244.5
..LN11547:
	.loc    1  247  is_stmt 1
        testl     %r10d, %r10d                                  #247.6
..LN11548:
        je        ..B8.138      # Prob 50%                      #247.6
..LN11549:
                                # LOE rax rdx rcx r13 ebx esi edi r12d r14d r15d
..B8.125:                       # Preds ..B8.124                # Infreq
..LN11550:
	.loc    1  249  is_stmt 1
        movl      %edi, 24(%rsp)                                #249.9
..LN11551:
        lea       (%rdi,%rdi), %r10d                            #249.9
..LN11552:
        movl      %edi, (%rsp)                                  #249.9
..LN11553:
	.loc    1  227  is_stmt 1
        lea       (%rcx,%r10,8), %r8                            #227.18
..LN11554:
	.loc    1  249  is_stmt 1
        cmpl      %esi, %edi                                    #249.22
..LN11555:
        jg        ..B8.132      # Prob 15%                      #249.22
..LN11556:
                                # LOE rax rdx rcx rdi r8 r13 ebx esi edi r12d r14d r15d dil
..B8.126:                       # Preds ..B8.125                # Infreq
..LN11557:
        movl      %edi, %r9d                                    #249.9
..LN11558:
	.loc    1  251  is_stmt 1
        lea       2(%rbx), %r10d                                #251.26
..LN11559:
	.loc    1  249  is_stmt 1
        imull     %r10d, %r9d                                   #249.9
..LN11560:
        movslq    %r9d, %r9                                     #249.9
..LN11561:
        movslq    %r10d, %r10                                   #249.28
..LN11562:
        movl      %r12d, 416(%rsp)                              #249.28
..LN11563:
        movl      %r15d, 456(%rsp)                              #249.28
..LN11564:
        movq      %r13, 200(%rsp)                               #249.28
..LN11565:
        movq      %r10, 112(%rsp)                               #249.28
..LN11566:
        movl      %esi, 184(%rsp)                               #249.28
..LN11567:
        movl      %edi, 16(%rsp)                                #249.28
..LN11568:
        movq      %rax, 376(%rsp)                               #249.28
..LN11569:
        movq      %rdx, 8(%rsp)                                 #249.28
..LN11570:
        movq      %rcx, 392(%rsp)                               #249.28
..LN11571:
        movl      %r14d, 256(%rsp)                              #249.28
..LN11572:
        movq      %r8, %r14                                     #249.28
..LN11573:
        movl      %ebx, 264(%rsp)                               #249.28
..LN11574:
        movq      %r9, %rbx                                     #249.28
..LN11575:
        movl      24(%rsp), %r12d                               #249.28
..LN11576:
        movq      368(%rsp), %r13                               #249.28
..LN11577:
        movq      360(%rsp), %r15                               #249.28
..LN11578:
                                # LOE rbx r13 r14 r15 r12d
..B8.127:                       # Preds ..B8.130 ..B8.126       # Infreq
..L535:         # optimization report
                # %s was not vectorized: vector dependence prevents vectorization%s
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
..LN11579:
	.loc    1  325  is_stmt 1
        lea       344(%rsp), %rsi                               #325.3
..LN11580:
	.loc    1  251  is_stmt 1
        movq      (%r13,%rbx,8), %rax                           #251.15
..LN11581:
	.loc    1  325  is_stmt 1
        movl      $1, %edi                                      #325.3
..LN11582:
	.loc    1  251  is_stmt 1
        movq      %rax, (%rsi)                                  #251.7
..LN11583:
	.loc    1  325  is_stmt 1
        lea       352(%rsp), %rdx                               #325.3
..LN11584:
	.loc    1  251  is_stmt 1
        movq      (%r15,%rbx,8), %r10                           #251.43
..LN11585:
	.loc    1  325  is_stmt 1
        lea       32(%rsp), %rcx                                #325.3
..LN11586:
	.loc    1  252  is_stmt 1
        movq      8(%r15,%rbx,8), %rax                          #252.43
..LN11587:
	.loc    1  325  is_stmt 1
        lea       40(%rsp), %r8                                 #325.3
..LN11588:
	.loc    1  252  is_stmt 1
        movq      8(%r13,%rbx,8), %r11                          #252.15
..LN11589:
	.loc    1  325  is_stmt 1
        lea       48(%rsp), %r9                                 #325.3
..LN11590:
	.loc    1  251  is_stmt 1
        movq      %r10, (%rdx)                                  #251.35
..LN11591:
	.loc    1  252  is_stmt 1
        movq      %r11, -24(%rdx)                               #252.7
..LN11592:
        movq      %rax, -16(%rdx)                               #252.35
..___tag_value_calc_c2l_grid_info.536:
..LN11593:
	.loc    1  325  is_stmt 1
#       latlon2xyz(int, const double *, const double *, double *, double *, double *)
        call      latlon2xyz                                    #325.3
..___tag_value_calc_c2l_grid_info.537:
..LN11594:
                                # LOE rbx r13 r14 r15 r12d
..B8.128:                       # Preds ..B8.127                # Infreq
..LN11595:
	.loc    1  326  is_stmt 1
        movl      $1, %edi                                      #326.3
..LN11596:
        lea       328(%rsp), %rsi                               #326.3
..LN11597:
        lea       336(%rsp), %rdx                               #326.3
..LN11598:
        lea       56(%rsp), %rcx                                #326.3
..LN11599:
        lea       64(%rsp), %r8                                 #326.3
..LN11600:
        lea       72(%rsp), %r9                                 #326.3
..___tag_value_calc_c2l_grid_info.538:
..LN11601:
#       latlon2xyz(int, const double *, const double *, double *, double *, double *)
        call      latlon2xyz                                    #326.3
..___tag_value_calc_c2l_grid_info.539:
..LN11602:
                                # LOE rbx r13 r14 r15 r12d
..B8.129:                       # Preds ..B8.128                # Infreq
..LN11603:
	.loc    1  327  is_stmt 1
        vmovsd    48(%rsp), %xmm2                               #327.16
..LN11604:
	.loc    1  328  is_stmt 1
        lea       8(%r14), %r9                                  #328.3
..LN11605:
	.loc    1  327  is_stmt 1
        vmovsd    40(%rsp), %xmm1                               #327.16
..LN11606:
	.loc    1  328  is_stmt 1
        lea       80(%rsp), %rsi                                #328.3
..LN11607:
	.loc    1  327  is_stmt 1
        vmovsd    -48(%rsi), %xmm0                              #327.16
..LN11608:
	.loc    1  328  is_stmt 1
        lea       88(%rsp), %rdx                                #328.3
..LN11609:
        movl      $1, %edi                                      #328.3
..LN11610:
        lea       96(%rsp), %rcx                                #328.3
..LN11611:
        movq      %r14, %r8                                     #328.3
..LN11612:
	.loc    1  338  is_stmt 1
        vaddsd    -16(%rdx), %xmm2, %xmm8                       #338.18
..LN11613:
	.loc    1  337  is_stmt 1
        vaddsd    -24(%rdx), %xmm1, %xmm6                       #337.18
..LN11614:
	.loc    1  336  is_stmt 1
        vaddsd    -32(%rdx), %xmm0, %xmm4                       #336.18
..LN11615:
	.loc    1  339  is_stmt 1
        vmulsd    %xmm8, %xmm8, %xmm3                           #339.43
..LN11616:
        vfmadd231sd %xmm6, %xmm6, %xmm3                         #339.8
..LN11617:
        vfmadd231sd %xmm4, %xmm4, %xmm3                         #339.8
..LN11618:
        vsqrtsd   %xmm3, %xmm3, %xmm3                           #339.8
..LN11619:
	.loc    1  340  is_stmt 1
        vdivsd    %xmm3, %xmm4, %xmm5                           #340.3
..LN11620:
	.loc    1  341  is_stmt 1
        vdivsd    %xmm3, %xmm6, %xmm7                           #341.3
..LN11621:
	.loc    1  342  is_stmt 1
        vdivsd    %xmm3, %xmm8, %xmm9                           #342.3
..LN11622:
	.loc    1  327  is_stmt 1
        vmovsd    %xmm5, -8(%rdx)                               #327.24
..LN11623:
        vmovsd    %xmm7, (%rdx)                                 #327.24
..LN11624:
        vmovsd    %xmm9, 8(%rdx)                                #327.24
..___tag_value_calc_c2l_grid_info.540:
..LN11625:
	.loc    1  328  is_stmt 1
#       xyz2latlon(int, const double *, const double *, const double *, double *, double *)
        call      xyz2latlon                                    #328.3
..___tag_value_calc_c2l_grid_info.541:
..LN11626:
                                # LOE rbx r13 r14 r15 r12d
..B8.130:                       # Preds ..B8.129                # Infreq
..LN11627:
	.loc    1  249  is_stmt 1
        incl      %r12d                                         #249.28
..LN11628:
        addq      $16, %r14                                     #249.28
..LN11629:
        addq      112(%rsp), %rbx                               #249.28
..LN11630:
        cmpl      184(%rsp), %r12d                              #249.22
..LN11631:
        jle       ..B8.127      # Prob 82%                      #249.22
..LN11632:
                                # LOE rbx r13 r14 r15 r12d
..B8.131:                       # Preds ..B8.130                # Infreq
..LN11633:
        movl      184(%rsp), %esi                               #
..LN11634:
        movl      16(%rsp), %edi                                #
..LN11635:
        movq      376(%rsp), %rax                               #
..LN11636:
        movq      8(%rsp), %rdx                                 #
..LN11637:
        movq      392(%rsp), %rcx                               #
..LN11638:
        movl      256(%rsp), %r14d                              #
..LN11639:
        movl      416(%rsp), %r12d                              #
..LN11640:
        movl      456(%rsp), %r15d                              #
..LN11641:
        movq      200(%rsp), %r13                               #
..LN11642:
        movl      264(%rsp), %ebx                               #
..LN11643:
                                # LOE rax rdx rcx r13 ebx esi edi r12d r14d r15d
..B8.132:                       # Preds ..B8.125 ..B8.131       # Infreq
..LN11644:
	.loc    1  256  is_stmt 1
        movl      %r12d, %r8d                                   #256.9
..LN11645:
        imull     %edi, %r8d                                    #256.9
..LN11646:
        movl      %edi, %r9d                                    #256.9
..LN11647:
        movslq    %r8d, %r8                                     #256.9
..LN11648:
        cmpl      %esi, %edi                                    #256.21
..LN11649:
        jge       ..B8.138      # Prob 10%                      #256.21
..LN11650:
                                # LOE rax rdx rcx r8 r9 r13 ebx esi edi r12d r14d r15d
..B8.133:                       # Preds ..B8.132                # Infreq
..LN11651:
        movl      %r14d, 256(%rsp)                              #
..LN11652:
        movl      %esi, 184(%rsp)                               #
..LN11653:
        movl      %edi, 16(%rsp)                                #
..LN11654:
        movq      %rax, 376(%rsp)                               #
..LN11655:
        movq      %rdx, 8(%rsp)                                 #
..LN11656:
        movl      %r12d, 416(%rsp)                              #
..LN11657:
        movq      %r9, %r12                                     #
..LN11658:
        movl      %r15d, 456(%rsp)                              #
..LN11659:
        movq      %r13, 200(%rsp)                               #
..LN11660:
        movq      %r8, %r13                                     #
..LN11661:
        movl      %ebx, 264(%rsp)                               #
..LN11662:
        movq      %rcx, %rbx                                    #
..LN11663:
        movl      (%rsp), %r14d                                 #
..LN11664:
                                # LOE rbx r12 r13 r14d
..B8.134:                       # Preds ..B8.136 ..B8.133       # Infreq
..L542:         # optimization report
                # %s was not vectorized: vector dependence prevents vectorization%s
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
..LN11665:
	.loc    1  259  is_stmt 1
        lea       (%r14,%r14), %r15d                            #259.39
..LN11666:
        movslq    %r15d, %r15                                   #259.34
..LN11667:
        lea       344(%rsp), %rsi                               #259.12
..LN11668:
	.loc    1  257  is_stmt 1
        movq      64(%rsi), %rax                                #257.15
..LN11669:
	.loc    1  258  is_stmt 1
        movq      56(%rsi), %r10                                #258.15
..LN11670:
	.loc    1  257  is_stmt 1
        movq      (%rax,%r13,8), %rdx                           #257.15
..LN11671:
	.loc    1  259  is_stmt 1
        lea       (%rbx,%r15,8), %r15                           #259.34
..LN11672:
	.loc    1  258  is_stmt 1
        movq      (%r10,%r13,8), %r11                           #258.15
..LN11673:
	.loc    1  259  is_stmt 1
        movq      %r15, %rdi                                    #259.12
..LN11674:
	.loc    1  257  is_stmt 1
        movq      %rdx, (%rsi)                                  #257.7
..LN11675:
	.loc    1  258  is_stmt 1
        movq      %r11, 8(%rsi)                                 #258.7
..___tag_value_calc_c2l_grid_info.543:
..LN11676:
	.loc    1  259  is_stmt 1
#       great_circle_distance(double *, double *)
        call      great_circle_distance                         #259.12
..___tag_value_calc_c2l_grid_info.544:
..LN11677:
                                # LOE rbx r12 r13 r15 r14d xmm0
..B8.235:                       # Preds ..B8.134                # Infreq
..LN11678:
        vmovsd    %xmm0, (%rsp)                                 #259.12
..LN11679:
                                # LOE rbx r12 r13 r15 r14d
..B8.135:                       # Preds ..B8.235                # Infreq
..LN11680:
	.loc    1  260  is_stmt 1
        addq      $16, %r15                                     #260.12
..LN11681:
        lea       344(%rsp), %rsi                               #260.12
..LN11682:
        movq      %r15, %rdi                                    #260.12
..___tag_value_calc_c2l_grid_info.545:
..LN11683:
#       great_circle_distance(double *, double *)
        call      great_circle_distance                         #260.12
..___tag_value_calc_c2l_grid_info.546:
..LN11684:
                                # LOE rbx r12 r13 r14d xmm0
..B8.236:                       # Preds ..B8.135                # Infreq
..LN11685:
        vmovapd   %xmm0, %xmm1                                  #260.12
..LN11686:
                                # LOE rbx r12 r13 r14d xmm1
..B8.136:                       # Preds ..B8.236                # Infreq
..LN11687:
	.loc    1  261  is_stmt 1
        movq      40(%rbp), %rax                                #261.7
..LN11688:
	.loc    1  256  is_stmt 1
        incl      %r14d                                         #256.27
..LN11689:
        addq      192(%rsp), %r13                               #256.27
..LN11690:
	.loc    1  261  is_stmt 1
        vaddsd    (%rsp), %xmm1, %xmm0                          #261.26
..LN11691:
        vdivsd    %xmm0, %xmm1, %xmm1                           #261.26
..LN11692:
        vmovsd    %xmm1, (%rax,%r12,8)                          #261.7
..LN11693:
	.loc    1  256  is_stmt 1
        incq      %r12                                          #256.27
..LN11694:
        cmpl      184(%rsp), %r14d                              #256.21
..LN11695:
        jl        ..B8.134      # Prob 82%                      #256.21
..LN11696:
                                # LOE rbx r12 r13 r14d
..B8.137:                       # Preds ..B8.136                # Infreq
..LN11697:
        movl      184(%rsp), %esi                               #
..LN11698:
        movq      %rbx, %rcx                                    #
..LN11699:
        movl      16(%rsp), %edi                                #
..LN11700:
        movq      376(%rsp), %rax                               #
..LN11701:
        movq      8(%rsp), %rdx                                 #
..LN11702:
        movl      256(%rsp), %r14d                              #
..LN11703:
        movl      416(%rsp), %r12d                              #
..LN11704:
        movl      456(%rsp), %r15d                              #
..LN11705:
        movq      200(%rsp), %r13                               #
..LN11706:
        movl      264(%rsp), %ebx                               #
..LN11707:
                                # LOE rax rdx rcx r13 ebx esi edi r12d r14d r15d
..B8.138:                       # Preds ..B8.137 ..B8.124 ..B8.132 # Infreq
..LN11708:
	.loc    1  265  is_stmt 1
        cmpl      $0, 104(%rsp)                                 #265.6
..LN11709:
        je        ..B8.152      # Prob 50%                      #265.6
..LN11710:
                                # LOE rax rdx rcx r13 ebx esi edi r12d r14d r15d
..B8.139:                       # Preds ..B8.138                # Infreq
..LN11711:
	.loc    1  267  is_stmt 1
        lea       (%rdi,%rdi), %r10d                            #267.9
..LN11712:
	.loc    1  227  is_stmt 1
        lea       (%rcx,%r10,8), %r9                            #227.18
..LN11713:
	.loc    1  267  is_stmt 1
        cmpl      %esi, %edi                                    #267.22
..LN11714:
        jg        ..B8.146      # Prob 15%                      #267.22
..LN11715:
                                # LOE rax rdx rcx rdi r9 r13 ebx esi edi r12d r14d r15d dil
..B8.140:                       # Preds ..B8.139                # Infreq
..LN11716:
        movl      %edi, %r11d                                   #267.9
..LN11717:
	.loc    1  269  is_stmt 1
        lea       2(%rbx), %r10d                                #269.26
..LN11718:
	.loc    1  267  is_stmt 1
        imull     %r10d, %r11d                                  #267.9
..LN11719:
        movslq    %r11d, %r11                                   #267.9
..LN11720:
        movq      %r11, (%rsp)                                  #267.9
..LN11721:
	.loc    1  269  is_stmt 1
        movq      360(%rsp), %r11                               #269.43
..LN11722:
	.loc    1  267  is_stmt 1
        movslq    %r10d, %r10                                   #267.28
..LN11723:
	.loc    1  269  is_stmt 1
        movl      %r12d, 416(%rsp)                              #269.15
..LN11724:
        movl      %r15d, 456(%rsp)                              #269.15
..LN11725:
        lea       (%r11,%r13,8), %r8                            #269.43
..LN11726:
        movq      368(%rsp), %r11                               #269.15
..LN11727:
        movq      (%rsp), %r12                                  #269.15
..LN11728:
        movl      %edi, %r15d                                   #269.15
..LN11729:
        movq      %r10, 24(%rsp)                                #269.15
..LN11730:
        lea       (%r11,%r13,8), %r11                           #269.15
..LN11731:
        movl      %esi, 184(%rsp)                               #269.15
..LN11732:
        movl      %edi, 16(%rsp)                                #269.15
..LN11733:
        movq      %rax, 376(%rsp)                               #269.15
..LN11734:
        movq      %rdx, 8(%rsp)                                 #269.15
..LN11735:
        movq      %rcx, 392(%rsp)                               #269.15
..LN11736:
        movl      %r14d, 256(%rsp)                              #269.15
..LN11737:
        movq      %r9, %r14                                     #269.15
..LN11738:
        movq      %r13, 200(%rsp)                               #269.15
..LN11739:
        movq      %r8, %r13                                     #269.15
..LN11740:
        movl      %ebx, 264(%rsp)                               #269.15
..LN11741:
        movq      %r11, %rbx                                    #269.15
..LN11742:
                                # LOE rbx r12 r13 r14 r15d
..B8.141:                       # Preds ..B8.144 ..B8.140       # Infreq
..L547:         # optimization report
                # %s was not vectorized: vector dependence prevents vectorization%s
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
..LN11743:
	.loc    1  325  is_stmt 1
        lea       344(%rsp), %rsi                               #325.3
..LN11744:
	.loc    1  269  is_stmt 1
        movq      (%rbx,%r12,8), %rax                           #269.15
..LN11745:
	.loc    1  325  is_stmt 1
        movl      $1, %edi                                      #325.3
..LN11746:
	.loc    1  269  is_stmt 1
        movq      %rax, (%rsi)                                  #269.7
..LN11747:
	.loc    1  325  is_stmt 1
        lea       352(%rsp), %rdx                               #325.3
..LN11748:
	.loc    1  270  is_stmt 1
        movq      8(%rbx,%r12,8), %rax                          #270.15
..LN11749:
	.loc    1  325  is_stmt 1
        lea       104(%rsp), %rcx                               #325.3
..LN11750:
	.loc    1  270  is_stmt 1
        movq      %rax, -24(%rdx)                               #270.7
..LN11751:
	.loc    1  325  is_stmt 1
        lea       112(%rsp), %r8                                #325.3
..LN11752:
	.loc    1  269  is_stmt 1
        movq      (%r13,%r12,8), %r10                           #269.43
..LN11753:
	.loc    1  325  is_stmt 1
        lea       120(%rsp), %r9                                #325.3
..LN11754:
	.loc    1  270  is_stmt 1
        movq      8(%r13,%r12,8), %rax                          #270.43
..LN11755:
	.loc    1  269  is_stmt 1
        movq      %r10, (%rdx)                                  #269.35
..LN11756:
	.loc    1  270  is_stmt 1
        movq      %rax, -16(%rdx)                               #270.35
..___tag_value_calc_c2l_grid_info.548:
..LN11757:
	.loc    1  325  is_stmt 1
#       latlon2xyz(int, const double *, const double *, double *, double *, double *)
        call      latlon2xyz                                    #325.3
..___tag_value_calc_c2l_grid_info.549:
..LN11758:
                                # LOE rbx r12 r13 r14 r15d
..B8.142:                       # Preds ..B8.141                # Infreq
..LN11759:
	.loc    1  326  is_stmt 1
        movl      $1, %edi                                      #326.3
..LN11760:
        lea       328(%rsp), %rsi                               #326.3
..LN11761:
        lea       336(%rsp), %rdx                               #326.3
..LN11762:
        lea       128(%rsp), %rcx                               #326.3
..LN11763:
        lea       136(%rsp), %r8                                #326.3
..LN11764:
        lea       144(%rsp), %r9                                #326.3
..___tag_value_calc_c2l_grid_info.550:
..LN11765:
#       latlon2xyz(int, const double *, const double *, double *, double *, double *)
        call      latlon2xyz                                    #326.3
..___tag_value_calc_c2l_grid_info.551:
..LN11766:
                                # LOE rbx r12 r13 r14 r15d
..B8.143:                       # Preds ..B8.142                # Infreq
..LN11767:
	.loc    1  327  is_stmt 1
        vmovsd    120(%rsp), %xmm2                              #327.16
..LN11768:
	.loc    1  328  is_stmt 1
        lea       8(%r14), %r9                                  #328.3
..LN11769:
	.loc    1  327  is_stmt 1
        vmovsd    112(%rsp), %xmm1                              #327.16
..LN11770:
	.loc    1  328  is_stmt 1
        lea       152(%rsp), %rsi                               #328.3
..LN11771:
	.loc    1  327  is_stmt 1
        vmovsd    -48(%rsi), %xmm0                              #327.16
..LN11772:
	.loc    1  328  is_stmt 1
        lea       160(%rsp), %rdx                               #328.3
..LN11773:
        movl      $1, %edi                                      #328.3
..LN11774:
        lea       168(%rsp), %rcx                               #328.3
..LN11775:
        movq      %r14, %r8                                     #328.3
..LN11776:
	.loc    1  338  is_stmt 1
        vaddsd    -16(%rdx), %xmm2, %xmm8                       #338.18
..LN11777:
	.loc    1  337  is_stmt 1
        vaddsd    -24(%rdx), %xmm1, %xmm6                       #337.18
..LN11778:
	.loc    1  336  is_stmt 1
        vaddsd    -32(%rdx), %xmm0, %xmm4                       #336.18
..LN11779:
	.loc    1  339  is_stmt 1
        vmulsd    %xmm8, %xmm8, %xmm3                           #339.43
..LN11780:
        vfmadd231sd %xmm6, %xmm6, %xmm3                         #339.8
..LN11781:
        vfmadd231sd %xmm4, %xmm4, %xmm3                         #339.8
..LN11782:
        vsqrtsd   %xmm3, %xmm3, %xmm3                           #339.8
..LN11783:
	.loc    1  340  is_stmt 1
        vdivsd    %xmm3, %xmm4, %xmm5                           #340.3
..LN11784:
	.loc    1  341  is_stmt 1
        vdivsd    %xmm3, %xmm6, %xmm7                           #341.3
..LN11785:
	.loc    1  342  is_stmt 1
        vdivsd    %xmm3, %xmm8, %xmm9                           #342.3
..LN11786:
	.loc    1  327  is_stmt 1
        vmovsd    %xmm5, -8(%rdx)                               #327.24
..LN11787:
        vmovsd    %xmm7, (%rdx)                                 #327.24
..LN11788:
        vmovsd    %xmm9, 8(%rdx)                                #327.24
..___tag_value_calc_c2l_grid_info.552:
..LN11789:
	.loc    1  328  is_stmt 1
#       xyz2latlon(int, const double *, const double *, const double *, double *, double *)
        call      xyz2latlon                                    #328.3
..___tag_value_calc_c2l_grid_info.553:
..LN11790:
                                # LOE rbx r12 r13 r14 r15d
..B8.144:                       # Preds ..B8.143                # Infreq
..LN11791:
	.loc    1  267  is_stmt 1
        incl      %r15d                                         #267.28
..LN11792:
        addq      $16, %r14                                     #267.28
..LN11793:
        addq      24(%rsp), %r12                                #267.28
..LN11794:
        cmpl      184(%rsp), %r15d                              #267.22
..LN11795:
        jle       ..B8.141      # Prob 82%                      #267.22
..LN11796:
                                # LOE rbx r12 r13 r14 r15d
..B8.145:                       # Preds ..B8.144                # Infreq
..LN11797:
        movl      184(%rsp), %esi                               #
..LN11798:
        movl      16(%rsp), %edi                                #
..LN11799:
        movq      376(%rsp), %rax                               #
..LN11800:
        movq      8(%rsp), %rdx                                 #
..LN11801:
        movq      392(%rsp), %rcx                               #
..LN11802:
        movl      256(%rsp), %r14d                              #
..LN11803:
        movl      416(%rsp), %r12d                              #
..LN11804:
        movl      456(%rsp), %r15d                              #
..LN11805:
        movq      200(%rsp), %r13                               #
..LN11806:
        movl      264(%rsp), %ebx                               #
..LN11807:
                                # LOE rax rdx rcx r13 ebx esi edi r12d r14d r15d
..B8.146:                       # Preds ..B8.145 ..B8.139       # Infreq
..LN11808:
	.loc    1  274  is_stmt 1
        movl      %r12d, %r8d                                   #274.9
..LN11809:
        imull     %edi, %r8d                                    #274.9
..LN11810:
        movl      %edi, %r9d                                    #274.9
..LN11811:
        movslq    %r8d, %r8                                     #274.9
..LN11812:
        cmpl      %esi, %edi                                    #274.21
..LN11813:
        jge       ..B8.152      # Prob 10%                      #274.21
..LN11814:
                                # LOE rax rdx rcx r8 r9 r13 ebx esi edi r12d r14d r15d
..B8.147:                       # Preds ..B8.146                # Infreq
..LN11815:
	.loc    1  276  is_stmt 1
        movq      400(%rsp), %r10                               #276.15
..LN11816:
	.loc    1  275  is_stmt 1
        movq      408(%rsp), %r11                               #275.15
..LN11817:
        movl      %esi, 184(%rsp)                               #275.15
..LN11818:
        movq      %rax, 376(%rsp)                               #275.15
..LN11819:
	.loc    1  276  is_stmt 1
        lea       (%r10,%r13,8), %r10                           #276.15
..LN11820:
	.loc    1  275  is_stmt 1
        movq      %r10, (%rsp)                                  #275.15
..LN11821:
        lea       (%r11,%r13,8), %r11                           #275.15
..LN11822:
        movq      %rdx, 8(%rsp)                                 #275.15
..LN11823:
        movq      %rcx, 392(%rsp)                               #275.15
..LN11824:
        movl      %r14d, 256(%rsp)                              #275.15
..LN11825:
        movq      %r8, %r14                                     #275.15
..LN11826:
        movl      %r12d, 416(%rsp)                              #275.15
..LN11827:
        movl      %edi, %r12d                                   #275.15
..LN11828:
        movl      %r15d, 456(%rsp)                              #275.15
..LN11829:
        movq      %r13, 200(%rsp)                               #275.15
..LN11830:
        movq      %r9, %r13                                     #275.15
..LN11831:
        movl      %ebx, 264(%rsp)                               #275.15
..LN11832:
        movq      %r11, %rbx                                    #275.15
..LN11833:
                                # LOE rbx r13 r14 r12d
..B8.148:                       # Preds ..B8.150 ..B8.147       # Infreq
..L554:         # optimization report
                # %s was not vectorized: vector dependence prevents vectorization%s
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
..LN11834:
	.loc    1  277  is_stmt 1
        lea       (%r12,%r12), %r10d                            #277.41
..LN11835:
        movslq    %r10d, %r10                                   #277.36
..LN11836:
        lea       344(%rsp), %rsi                               #277.12
..LN11837:
        movq      48(%rsi), %r15                                #277.36
..LN11838:
	.loc    1  276  is_stmt 1
        movq      (%rsp), %rdx                                  #276.15
..LN11839:
	.loc    1  275  is_stmt 1
        movq      (%rbx,%r14,8), %rax                           #275.15
..LN11840:
        movq      %rax, (%rsi)                                  #275.7
..LN11841:
	.loc    1  277  is_stmt 1
        lea       (%r15,%r10,8), %r15                           #277.36
..LN11842:
	.loc    1  276  is_stmt 1
        movq      (%rdx,%r14,8), %rcx                           #276.15
..LN11843:
	.loc    1  277  is_stmt 1
        movq      %r15, %rdi                                    #277.12
..LN11844:
	.loc    1  276  is_stmt 1
        movq      %rcx, 8(%rsi)                                 #276.7
..___tag_value_calc_c2l_grid_info.555:
..LN11845:
	.loc    1  277  is_stmt 1
#       great_circle_distance(double *, double *)
        call      great_circle_distance                         #277.12
..___tag_value_calc_c2l_grid_info.556:
..LN11846:
                                # LOE rbx r13 r14 r15 r12d xmm0
..B8.237:                       # Preds ..B8.148                # Infreq
..LN11847:
        vmovsd    %xmm0, 16(%rsp)                               #277.12
..LN11848:
                                # LOE rbx r13 r14 r15 r12d
..B8.149:                       # Preds ..B8.237                # Infreq
..LN11849:
	.loc    1  278  is_stmt 1
        addq      $16, %r15                                     #278.12
..LN11850:
        lea       344(%rsp), %rsi                               #278.12
..LN11851:
        movq      %r15, %rdi                                    #278.12
..___tag_value_calc_c2l_grid_info.557:
..LN11852:
#       great_circle_distance(double *, double *)
        call      great_circle_distance                         #278.12
..___tag_value_calc_c2l_grid_info.558:
..LN11853:
                                # LOE rbx r13 r14 r12d xmm0
..B8.238:                       # Preds ..B8.149                # Infreq
..LN11854:
        vmovapd   %xmm0, %xmm1                                  #278.12
..LN11855:
                                # LOE rbx r13 r14 r12d xmm1
..B8.150:                       # Preds ..B8.238                # Infreq
..LN11856:
	.loc    1  279  is_stmt 1
        movq      48(%rbp), %rax                                #279.7
..LN11857:
	.loc    1  274  is_stmt 1
        incl      %r12d                                         #274.27
..LN11858:
        addq      192(%rsp), %r14                               #274.27
..LN11859:
	.loc    1  279  is_stmt 1
        vaddsd    16(%rsp), %xmm1, %xmm0                        #279.26
..LN11860:
        vdivsd    %xmm0, %xmm1, %xmm1                           #279.26
..LN11861:
        vmovsd    %xmm1, (%rax,%r13,8)                          #279.7
..LN11862:
	.loc    1  274  is_stmt 1
        incq      %r13                                          #274.27
..LN11863:
        cmpl      184(%rsp), %r12d                              #274.21
..LN11864:
        jl        ..B8.148      # Prob 82%                      #274.21
..LN11865:
                                # LOE rbx r13 r14 r12d
..B8.151:                       # Preds ..B8.150                # Infreq
..LN11866:
        movq      376(%rsp), %rax                               #
..LN11867:
        movq      8(%rsp), %rdx                                 #
..LN11868:
        movq      392(%rsp), %rcx                               #
..LN11869:
        movl      256(%rsp), %r14d                              #
..LN11870:
        movl      416(%rsp), %r12d                              #
..LN11871:
        movl      456(%rsp), %r15d                              #
..LN11872:
        movq      200(%rsp), %r13                               #
..LN11873:
        movl      264(%rsp), %ebx                               #
..LN11874:
                                # LOE rax rdx rcx r13 ebx r12d r14d r15d
..B8.152:                       # Preds ..B8.151 ..B8.146 ..B8.138 # Infreq
..LN11875:
	.loc    1  284  is_stmt 1
        cmpl      $0, 176(%rsp)                                 #284.6
..LN11876:
        je        ..B8.166      # Prob 50%                      #284.6
..LN11877:
                                # LOE rax rdx rcx r13 ebx r12d r14d r15d
..B8.153:                       # Preds ..B8.152                # Infreq
..LN11878:
	.loc    1  286  is_stmt 1
        movq      %rdx, %rdi                                    #286.9
..LN11879:
        movq      %rdi, %r9                                     #286.9
..LN11880:
        cmpq      %rax, %rdx                                    #286.22
..LN11881:
        jg        ..B8.160      # Prob 15%                      #286.22
..LN11882:
                                # LOE rax rdx rcx rdi r9 r13 ebx r12d r14d r15d
..B8.154:                       # Preds ..B8.153                # Infreq
..LN11883:
	.loc    1  288  is_stmt 1
        movq      360(%rsp), %rsi                               #288.45
..LN11884:
        movq      368(%rsp), %r10                               #288.15
..LN11885:
        movq      %r9, (%rsp)                                   #288.15
..LN11886:
        movq      %rdx, 8(%rsp)                                 #288.15
..LN11887:
        lea       (%rsi,%r13,8), %rsi                           #288.45
..LN11888:
        movq      %rcx, 392(%rsp)                               #288.15
..LN11889:
        lea       (%r10,%r13,8), %r8                            #288.15
..LN11890:
        movl      %r14d, 256(%rsp)                              #288.15
..LN11891:
        movq      %rsi, %r14                                    #288.15
..LN11892:
        movl      %r12d, 416(%rsp)                              #288.15
..LN11893:
        movq      %rax, %r12                                    #288.15
..LN11894:
        movl      %r15d, 456(%rsp)                              #288.15
..LN11895:
        movq      %rdi, %r13                                    #288.15
..LN11896:
        movl      %ebx, 264(%rsp)                               #288.15
..LN11897:
        movq      %r8, %r15                                     #288.15
..LN11898:
                                # LOE r12 r13 r14 r15
..B8.155:                       # Preds ..B8.158 ..B8.154       # Infreq
..L559:         # optimization report
                # %s was not vectorized: vector dependence prevents vectorization%s
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
..LN11899:
	.loc    1  325  is_stmt 1
        lea       344(%rsp), %rsi                               #325.3
..LN11900:
	.loc    1  287  is_stmt 1
        movq      16(%rsi), %r11                                #287.45
..LN11901:
	.loc    1  325  is_stmt 1
        movl      $1, %edi                                      #325.3
..LN11902:
	.loc    1  287  is_stmt 1
        movq      24(%rsi), %rbx                                #287.15
..LN11903:
	.loc    1  325  is_stmt 1
        lea       184(%rsp), %r8                                #325.3
..LN11904:
	.loc    1  289  is_stmt 1
        movq      40(%rsi), %rcx                                #289.31
..LN11905:
	.loc    1  325  is_stmt 1
        lea       192(%rsp), %r9                                #325.3
..LN11906:
	.loc    1  287  is_stmt 1
        movq      (%r11,%r13,8), %rdx                           #287.45
..LN11907:
        movq      %rdx, 8(%rsi)                                 #287.37
..LN11908:
	.loc    1  288  is_stmt 1
        movq      16(%r15,%r13,8), %rdx                         #288.15
..LN11909:
        movq      %rdx, -16(%rsi)                               #288.7
..LN11910:
        movq      16(%r14,%r13,8), %rdx                         #288.45
..LN11911:
        movq      %rdx, -8(%rsi)                                #288.37
..LN11912:
	.loc    1  289  is_stmt 1
        movl      %r13d, %edx                                   #289.7
..LN11913:
        addl      %edx, %edx                                    #289.36
..LN11914:
        movslq    %edx, %rdx                                    #289.31
..LN11915:
	.loc    1  287  is_stmt 1
        movq      (%rbx,%r13,8), %r10                           #287.15
..LN11916:
        movq      %r10, (%rsi)                                  #287.7
..LN11917:
	.loc    1  289  is_stmt 1
        lea       (%rcx,%rdx,8), %rbx                           #289.31
..LN11918:
	.loc    1  325  is_stmt 1
        lea       352(%rsp), %rdx                               #325.3
..LN11919:
        lea       176(%rsp), %rcx                               #325.3
..___tag_value_calc_c2l_grid_info.560:
..LN11920:
#       latlon2xyz(int, const double *, const double *, double *, double *, double *)
        call      latlon2xyz                                    #325.3
..___tag_value_calc_c2l_grid_info.561:
..LN11921:
                                # LOE rbx r12 r13 r14 r15
..B8.156:                       # Preds ..B8.155                # Infreq
..LN11922:
	.loc    1  326  is_stmt 1
        movl      $1, %edi                                      #326.3
..LN11923:
        lea       328(%rsp), %rsi                               #326.3
..LN11924:
        lea       336(%rsp), %rdx                               #326.3
..LN11925:
        lea       200(%rsp), %rcx                               #326.3
..LN11926:
        lea       208(%rsp), %r8                                #326.3
..LN11927:
        lea       216(%rsp), %r9                                #326.3
..___tag_value_calc_c2l_grid_info.562:
..LN11928:
#       latlon2xyz(int, const double *, const double *, double *, double *, double *)
        call      latlon2xyz                                    #326.3
..___tag_value_calc_c2l_grid_info.563:
..LN11929:
                                # LOE rbx r12 r13 r14 r15
..B8.157:                       # Preds ..B8.156                # Infreq
..LN11930:
	.loc    1  327  is_stmt 1
        vmovsd    192(%rsp), %xmm2                              #327.16
..LN11931:
	.loc    1  328  is_stmt 1
        lea       8(%rbx), %r9                                  #328.3
..LN11932:
	.loc    1  327  is_stmt 1
        vmovsd    184(%rsp), %xmm1                              #327.16
..LN11933:
	.loc    1  328  is_stmt 1
        lea       224(%rsp), %rsi                               #328.3
..LN11934:
	.loc    1  327  is_stmt 1
        vmovsd    -48(%rsi), %xmm0                              #327.16
..LN11935:
	.loc    1  328  is_stmt 1
        lea       232(%rsp), %rdx                               #328.3
..LN11936:
        movl      $1, %edi                                      #328.3
..LN11937:
        lea       240(%rsp), %rcx                               #328.3
..LN11938:
        movq      %rbx, %r8                                     #328.3
..LN11939:
	.loc    1  338  is_stmt 1
        vaddsd    -16(%rdx), %xmm2, %xmm8                       #338.18
..LN11940:
	.loc    1  337  is_stmt 1
        vaddsd    -24(%rdx), %xmm1, %xmm6                       #337.18
..LN11941:
	.loc    1  336  is_stmt 1
        vaddsd    -32(%rdx), %xmm0, %xmm4                       #336.18
..LN11942:
	.loc    1  339  is_stmt 1
        vmulsd    %xmm8, %xmm8, %xmm3                           #339.43
..LN11943:
        vfmadd231sd %xmm6, %xmm6, %xmm3                         #339.8
..LN11944:
        vfmadd231sd %xmm4, %xmm4, %xmm3                         #339.8
..LN11945:
        vsqrtsd   %xmm3, %xmm3, %xmm3                           #339.8
..LN11946:
	.loc    1  340  is_stmt 1
        vdivsd    %xmm3, %xmm4, %xmm5                           #340.3
..LN11947:
	.loc    1  341  is_stmt 1
        vdivsd    %xmm3, %xmm6, %xmm7                           #341.3
..LN11948:
	.loc    1  342  is_stmt 1
        vdivsd    %xmm3, %xmm8, %xmm9                           #342.3
..LN11949:
	.loc    1  327  is_stmt 1
        vmovsd    %xmm5, -8(%rdx)                               #327.24
..LN11950:
        vmovsd    %xmm7, (%rdx)                                 #327.24
..LN11951:
        vmovsd    %xmm9, 8(%rdx)                                #327.24
..___tag_value_calc_c2l_grid_info.564:
..LN11952:
	.loc    1  328  is_stmt 1
#       xyz2latlon(int, const double *, const double *, const double *, double *, double *)
        call      xyz2latlon                                    #328.3
..___tag_value_calc_c2l_grid_info.565:
..LN11953:
                                # LOE r12 r13 r14 r15
..B8.158:                       # Preds ..B8.157                # Infreq
..LN11954:
	.loc    1  286  is_stmt 1
        incq      %r13                                          #286.28
..LN11955:
        cmpq      %r12, %r13                                    #286.22
..LN11956:
        jle       ..B8.155      # Prob 82%                      #286.22
..LN11957:
                                # LOE r12 r13 r14 r15
..B8.159:                       # Preds ..B8.158                # Infreq
..LN11958:
        movq      %r12, %rax                                    #
..LN11959:
        movq      8(%rsp), %rdx                                 #
..LN11960:
        cmpq      %rax, %rdx                                    #286.22
..LN11961:
        movq      (%rsp), %r9                                   #
..LN11962:
        movq      392(%rsp), %rcx                               #
..LN11963:
        movl      256(%rsp), %r14d                              #
..LN11964:
        movl      416(%rsp), %r12d                              #
..LN11965:
        movl      456(%rsp), %r15d                              #
..LN11966:
        movl      264(%rsp), %ebx                               #
..LN11967:
                                # LOE rax rdx rcx r9 ebx r12d r14d r15d
..B8.160:                       # Preds ..B8.159 ..B8.153       # Infreq
..LN11968:
	.loc    1  291  is_stmt 1
        jge       ..B8.166      # Prob 10%                      #291.21
..LN11969:
                                # LOE rax rdx rcx r9 ebx r12d r14d r15d
..B8.161:                       # Preds ..B8.160                # Infreq
..LN11970:
        movl      %r14d, 256(%rsp)                              #
..LN11971:
        movq      %r9, %r13                                     #
..LN11972:
        movl      %ebx, 264(%rsp)                               #
..LN11973:
        movq      %rdx, 8(%rsp)                                 #
..LN11974:
        movq      %rcx, 392(%rsp)                               #
..LN11975:
        movl      %r12d, 416(%rsp)                              #
..LN11976:
        movq      %rax, %r12                                    #
..LN11977:
        movl      %r15d, 456(%rsp)                              #
..LN11978:
        movq      408(%rsp), %rbx                               #
..LN11979:
        movq      400(%rsp), %r14                               #
..LN11980:
                                # LOE rbx r12 r13 r14
..B8.162:                       # Preds ..B8.164 ..B8.161       # Infreq
..L566:         # optimization report
                # %s was not vectorized: vector dependence prevents vectorization%s
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
..LN11981:
	.loc    1  294  is_stmt 1
        movl      %r13d, %r8d                                   #294.12
..LN11982:
        addl      %r8d, %r8d                                    #294.41
..LN11983:
        lea       344(%rsp), %rsi                               #294.12
..LN11984:
        movslq    %r8d, %r8                                     #294.36
..LN11985:
        movq      40(%rsi), %r10                                #294.36
..LN11986:
	.loc    1  292  is_stmt 1
        movq      (%rbx,%r13,8), %rdx                           #292.15
..LN11987:
	.loc    1  293  is_stmt 1
        movq      (%r14,%r13,8), %rcx                           #293.15
..LN11988:
	.loc    1  292  is_stmt 1
        movq      %rdx, (%rsi)                                  #292.7
..LN11989:
	.loc    1  294  is_stmt 1
        lea       (%r10,%r8,8), %r15                            #294.36
..LN11990:
        movq      %r15, %rdi                                    #294.12
..LN11991:
	.loc    1  293  is_stmt 1
        movq      %rcx, 8(%rsi)                                 #293.7
..___tag_value_calc_c2l_grid_info.567:
..LN11992:
	.loc    1  294  is_stmt 1
#       great_circle_distance(double *, double *)
        call      great_circle_distance                         #294.12
..___tag_value_calc_c2l_grid_info.568:
..LN11993:
                                # LOE rbx r12 r13 r14 r15 xmm0
..B8.239:                       # Preds ..B8.162                # Infreq
..LN11994:
        vmovsd    %xmm0, (%rsp)                                 #294.12
..LN11995:
                                # LOE rbx r12 r13 r14 r15
..B8.163:                       # Preds ..B8.239                # Infreq
..LN11996:
	.loc    1  295  is_stmt 1
        addq      $16, %r15                                     #295.12
..LN11997:
        lea       344(%rsp), %rsi                               #295.12
..LN11998:
        movq      %r15, %rdi                                    #295.12
..___tag_value_calc_c2l_grid_info.569:
..LN11999:
#       great_circle_distance(double *, double *)
        call      great_circle_distance                         #295.12
..___tag_value_calc_c2l_grid_info.570:
..LN12000:
                                # LOE rbx r12 r13 r14 xmm0
..B8.240:                       # Preds ..B8.163                # Infreq
..LN12001:
        vmovapd   %xmm0, %xmm1                                  #295.12
..LN12002:
                                # LOE rbx r12 r13 r14 xmm1
..B8.164:                       # Preds ..B8.240                # Infreq
..LN12003:
	.loc    1  296  is_stmt 1
        movq      56(%rbp), %rdx                                #296.7
..LN12004:
        vaddsd    (%rsp), %xmm1, %xmm0                          #296.26
..LN12005:
        vdivsd    %xmm0, %xmm1, %xmm1                           #296.26
..LN12006:
        vmovsd    %xmm1, (%rdx,%r13,8)                          #296.7
..LN12007:
	.loc    1  291  is_stmt 1
        incq      %r13                                          #291.27
..LN12008:
        cmpq      %r12, %r13                                    #291.21
..LN12009:
        jl        ..B8.162      # Prob 82%                      #291.21
..LN12010:
                                # LOE rbx r12 r13 r14
..B8.165:                       # Preds ..B8.164                # Infreq
..LN12011:
        movq      8(%rsp), %rdx                                 #
..LN12012:
        movq      %r12, %rax                                    #
..LN12013:
        movq      392(%rsp), %rcx                               #
..LN12014:
        movl      256(%rsp), %r14d                              #
..LN12015:
        movl      416(%rsp), %r12d                              #
..LN12016:
        movl      456(%rsp), %r15d                              #
..LN12017:
        movl      264(%rsp), %ebx                               #
..LN12018:
                                # LOE rax rdx rcx ebx r12d r14d r15d
..B8.166:                       # Preds ..B8.165 ..B8.160 ..B8.152 # Infreq
..LN12019:
	.loc    1  300  is_stmt 1
        cmpl      $0, 248(%rsp)                                 #300.6
..LN12020:
        je        ..B8.180      # Prob 50%                      #300.6
..LN12021:
                                # LOE rax rdx rcx ebx r12d r14d r15d
..B8.167:                       # Preds ..B8.166                # Infreq
..LN12022:
	.loc    1  302  is_stmt 1
        movq      %rdx, %rsi                                    #302.9
..LN12023:
        cmpq      %rax, %rdx                                    #302.22
..LN12024:
        jg        ..B8.174      # Prob 15%                      #302.22
..LN12025:
                                # LOE rax rdx rcx rsi ebx r12d r14d r15d
..B8.168:                       # Preds ..B8.167                # Infreq
..LN12026:
	.loc    1  303  is_stmt 1
        addl      $2, %ebx                                      #303.30
..LN12027:
	.loc    1  304  is_stmt 1
        imull     %ebx, %r14d                                   #304.30
..LN12028:
	.loc    1  303  is_stmt 1
        imull     %r15d, %ebx                                   #303.30
..LN12029:
	.loc    1  304  is_stmt 1
        movslq    %r14d, %rdi                                   #304.15
..LN12030:
	.loc    1  303  is_stmt 1
        movq      368(%rsp), %r11                               #303.15
..LN12031:
        movslq    %ebx, %rbx                                    #303.15
..LN12032:
	.loc    1  304  is_stmt 1
        movq      %rax, 376(%rsp)                               #304.15
..LN12033:
	.loc    1  303  is_stmt 1
        movq      360(%rsp), %r10                               #303.45
..LN12034:
	.loc    1  304  is_stmt 1
        lea       (%r11,%rdi,8), %r9                            #304.15
..LN12035:
        movq      %r9, (%rsp)                                   #304.15
..LN12036:
        movq      %rdx, 8(%rsp)                                 #304.15
..LN12037:
	.loc    1  303  is_stmt 1
        lea       (%r11,%rbx,8), %r14                           #303.15
..LN12038:
	.loc    1  304  is_stmt 1
        movq      %rcx, 392(%rsp)                               #304.15
..LN12039:
	.loc    1  303  is_stmt 1
        lea       (%r10,%rbx,8), %r13                           #303.45
..LN12040:
	.loc    1  304  is_stmt 1
        movl      %r12d, 416(%rsp)                              #304.15
..LN12041:
        lea       (%r10,%rdi,8), %rbx                           #304.45
..LN12042:
        movl      %r15d, 456(%rsp)                              #304.15
..LN12043:
        movq      %rsi, %r15                                    #304.15
..LN12044:
                                # LOE rbx r13 r14 r15
..B8.169:                       # Preds ..B8.172 ..B8.168       # Infreq
..L571:         # optimization report
                # %s was not vectorized: vector dependence prevents vectorization%s
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
..LN12045:
	.loc    1  305  is_stmt 1
        movl      %r15d, %edx                                   #305.7
..LN12046:
        addl      %edx, %edx                                    #305.36
..LN12047:
	.loc    1  325  is_stmt 1
        movl      $1, %edi                                      #325.3
..LN12048:
	.loc    1  304  is_stmt 1
        movq      (%rsp), %r11                                  #304.15
..LN12049:
	.loc    1  325  is_stmt 1
        lea       344(%rsp), %rsi                               #325.3
..LN12050:
	.loc    1  305  is_stmt 1
        movslq    %edx, %rdx                                    #305.31
..LN12051:
	.loc    1  325  is_stmt 1
        lea       256(%rsp), %r8                                #325.3
..LN12052:
	.loc    1  305  is_stmt 1
        movq      40(%rsi), %rcx                                #305.31
..LN12053:
	.loc    1  325  is_stmt 1
        lea       264(%rsp), %r9                                #325.3
..LN12054:
	.loc    1  303  is_stmt 1
        movq      (%r14,%r15,8), %rax                           #303.15
..LN12055:
	.loc    1  304  is_stmt 1
        movq      (%r11,%r15,8), %r12                           #304.15
..LN12056:
	.loc    1  303  is_stmt 1
        movq      %rax, (%rsi)                                  #303.7
..LN12057:
        movq      (%r13,%r15,8), %r10                           #303.45
..LN12058:
	.loc    1  304  is_stmt 1
        movq      %r12, -16(%rsi)                               #304.7
..LN12059:
	.loc    1  305  is_stmt 1
        lea       (%rcx,%rdx,8), %r12                           #305.31
..LN12060:
	.loc    1  304  is_stmt 1
        movq      (%rbx,%r15,8), %rax                           #304.45
..LN12061:
	.loc    1  325  is_stmt 1
        lea       352(%rsp), %rdx                               #325.3
..LN12062:
	.loc    1  303  is_stmt 1
        movq      %r10, (%rdx)                                  #303.37
..LN12063:
	.loc    1  325  is_stmt 1
        lea       248(%rsp), %rcx                               #325.3
..LN12064:
	.loc    1  304  is_stmt 1
        movq      %rax, -16(%rdx)                               #304.37
..___tag_value_calc_c2l_grid_info.572:
..LN12065:
	.loc    1  325  is_stmt 1
#       latlon2xyz(int, const double *, const double *, double *, double *, double *)
        call      latlon2xyz                                    #325.3
..___tag_value_calc_c2l_grid_info.573:
..LN12066:
                                # LOE rbx r12 r13 r14 r15
..B8.170:                       # Preds ..B8.169                # Infreq
..LN12067:
	.loc    1  326  is_stmt 1
        movl      $1, %edi                                      #326.3
..LN12068:
        lea       328(%rsp), %rsi                               #326.3
..LN12069:
        lea       336(%rsp), %rdx                               #326.3
..LN12070:
        lea       272(%rsp), %rcx                               #326.3
..LN12071:
        lea       280(%rsp), %r8                                #326.3
..LN12072:
        lea       288(%rsp), %r9                                #326.3
..___tag_value_calc_c2l_grid_info.574:
..LN12073:
#       latlon2xyz(int, const double *, const double *, double *, double *, double *)
        call      latlon2xyz                                    #326.3
..___tag_value_calc_c2l_grid_info.575:
..LN12074:
                                # LOE rbx r12 r13 r14 r15
..B8.171:                       # Preds ..B8.170                # Infreq
..LN12075:
	.loc    1  327  is_stmt 1
        vmovsd    264(%rsp), %xmm2                              #327.16
..LN12076:
	.loc    1  328  is_stmt 1
        lea       8(%r12), %r9                                  #328.3
..LN12077:
	.loc    1  327  is_stmt 1
        vmovsd    256(%rsp), %xmm1                              #327.16
..LN12078:
	.loc    1  328  is_stmt 1
        lea       296(%rsp), %rsi                               #328.3
..LN12079:
	.loc    1  327  is_stmt 1
        vmovsd    -48(%rsi), %xmm0                              #327.16
..LN12080:
	.loc    1  328  is_stmt 1
        lea       304(%rsp), %rdx                               #328.3
..LN12081:
        movl      $1, %edi                                      #328.3
..LN12082:
        lea       312(%rsp), %rcx                               #328.3
..LN12083:
        movq      %r12, %r8                                     #328.3
..LN12084:
	.loc    1  338  is_stmt 1
        vaddsd    -16(%rdx), %xmm2, %xmm8                       #338.18
..LN12085:
	.loc    1  337  is_stmt 1
        vaddsd    -24(%rdx), %xmm1, %xmm6                       #337.18
..LN12086:
	.loc    1  336  is_stmt 1
        vaddsd    -32(%rdx), %xmm0, %xmm4                       #336.18
..LN12087:
	.loc    1  339  is_stmt 1
        vmulsd    %xmm8, %xmm8, %xmm3                           #339.43
..LN12088:
        vfmadd231sd %xmm6, %xmm6, %xmm3                         #339.8
..LN12089:
        vfmadd231sd %xmm4, %xmm4, %xmm3                         #339.8
..LN12090:
        vsqrtsd   %xmm3, %xmm3, %xmm3                           #339.8
..LN12091:
	.loc    1  340  is_stmt 1
        vdivsd    %xmm3, %xmm4, %xmm5                           #340.3
..LN12092:
	.loc    1  341  is_stmt 1
        vdivsd    %xmm3, %xmm6, %xmm7                           #341.3
..LN12093:
	.loc    1  342  is_stmt 1
        vdivsd    %xmm3, %xmm8, %xmm9                           #342.3
..LN12094:
	.loc    1  327  is_stmt 1
        vmovsd    %xmm5, -8(%rdx)                               #327.24
..LN12095:
        vmovsd    %xmm7, (%rdx)                                 #327.24
..LN12096:
        vmovsd    %xmm9, 8(%rdx)                                #327.24
..___tag_value_calc_c2l_grid_info.576:
..LN12097:
	.loc    1  328  is_stmt 1
#       xyz2latlon(int, const double *, const double *, const double *, double *, double *)
        call      xyz2latlon                                    #328.3
..___tag_value_calc_c2l_grid_info.577:
..LN12098:
                                # LOE rbx r13 r14 r15
..B8.172:                       # Preds ..B8.171                # Infreq
..LN12099:
	.loc    1  302  is_stmt 1
        incq      %r15                                          #302.28
..LN12100:
        cmpq      376(%rsp), %r15                               #302.22
..LN12101:
        jle       ..B8.169      # Prob 82%                      #302.22
..LN12102:
                                # LOE rbx r13 r14 r15
..B8.173:                       # Preds ..B8.172                # Infreq
..LN12103:
        movq      376(%rsp), %rax                               #
..LN12104:
        movq      8(%rsp), %rdx                                 #
..LN12105:
	.loc    1  286  is_stmt 1
        cmpq      %rax, %rdx                                    #286.22
..LN12106:
        movq      392(%rsp), %rcx                               #
..LN12107:
        movl      416(%rsp), %r12d                              #
..LN12108:
        movl      456(%rsp), %r15d                              #
..LN12109:
                                # LOE rax rdx rcx r12d r15d
..B8.174:                       # Preds ..B8.173 ..B8.167       # Infreq
..LN12110:
	.loc    1  307  is_stmt 1
        jge       ..B8.180      # Prob 10%                      #307.21
..LN12111:
                                # LOE rax rdx rcx r12d r15d
..B8.175:                       # Preds ..B8.174                # Infreq
..LN12112:
	.loc    1  308  is_stmt 1
        imull     %r12d, %r15d                                  #308.22
..LN12113:
        movq      %rax, %r13                                    #308.15
..LN12114:
        movslq    %r15d, %r15                                   #308.15
..LN12115:
        movq      %rdx, %r14                                    #308.15
..LN12116:
	.loc    1  309  is_stmt 1
        movq      400(%rsp), %rsi                               #309.15
..LN12117:
	.loc    1  308  is_stmt 1
        movq      408(%rsp), %r8                                #308.15
..LN12118:
        movq      %rcx, 392(%rsp)                               #308.15
..LN12119:
	.loc    1  309  is_stmt 1
        lea       (%rsi,%r15,8), %rbx                           #309.15
..LN12120:
	.loc    1  308  is_stmt 1
        lea       (%r8,%r15,8), %r12                            #308.15
..LN12121:
                                # LOE rbx r12 r13 r14
..B8.176:                       # Preds ..B8.178 ..B8.175       # Infreq
..L578:         # optimization report
                # %s was not vectorized: vector dependence prevents vectorization%s
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
..LN12122:
	.loc    1  310  is_stmt 1
        movl      %r14d, %r9d                                   #310.12
..LN12123:
        addl      %r9d, %r9d                                    #310.41
..LN12124:
        lea       344(%rsp), %rsi                               #310.12
..LN12125:
        movslq    %r9d, %r9                                     #310.36
..LN12126:
        movq      40(%rsi), %r10                                #310.36
..LN12127:
	.loc    1  308  is_stmt 1
        movq      (%r12,%r14,8), %rcx                           #308.15
..LN12128:
	.loc    1  309  is_stmt 1
        movq      (%rbx,%r14,8), %r8                            #309.15
..LN12129:
	.loc    1  308  is_stmt 1
        movq      %rcx, (%rsi)                                  #308.7
..LN12130:
	.loc    1  310  is_stmt 1
        lea       (%r10,%r9,8), %r15                            #310.36
..LN12131:
        movq      %r15, %rdi                                    #310.12
..LN12132:
	.loc    1  309  is_stmt 1
        movq      %r8, 8(%rsi)                                  #309.7
..___tag_value_calc_c2l_grid_info.579:
..LN12133:
	.loc    1  310  is_stmt 1
#       great_circle_distance(double *, double *)
        call      great_circle_distance                         #310.12
..___tag_value_calc_c2l_grid_info.580:
..LN12134:
                                # LOE rbx r12 r13 r14 r15 xmm0
..B8.241:                       # Preds ..B8.176                # Infreq
..LN12135:
        vmovsd    %xmm0, (%rsp)                                 #310.12
..LN12136:
                                # LOE rbx r12 r13 r14 r15
..B8.177:                       # Preds ..B8.241                # Infreq
..LN12137:
	.loc    1  311  is_stmt 1
        addq      $16, %r15                                     #311.12
..LN12138:
        lea       344(%rsp), %rsi                               #311.12
..LN12139:
        movq      %r15, %rdi                                    #311.12
..___tag_value_calc_c2l_grid_info.581:
..LN12140:
#       great_circle_distance(double *, double *)
        call      great_circle_distance                         #311.12
..___tag_value_calc_c2l_grid_info.582:
..LN12141:
                                # LOE rbx r12 r13 r14 xmm0
..B8.242:                       # Preds ..B8.177                # Infreq
..LN12142:
        vmovapd   %xmm0, %xmm1                                  #311.12
..LN12143:
                                # LOE rbx r12 r13 r14 xmm1
..B8.178:                       # Preds ..B8.242                # Infreq
..LN12144:
	.loc    1  312  is_stmt 1
        movq      64(%rbp), %rcx                                #312.7
..LN12145:
        vaddsd    (%rsp), %xmm1, %xmm0                          #312.26
..LN12146:
        vdivsd    %xmm0, %xmm1, %xmm1                           #312.26
..LN12147:
        vmovsd    %xmm1, (%rcx,%r14,8)                          #312.7
..LN12148:
	.loc    1  307  is_stmt 1
        incq      %r14                                          #307.27
..LN12149:
        cmpq      %r13, %r14                                    #307.21
..LN12150:
        jl        ..B8.176      # Prob 82%                      #307.21
..LN12151:
                                # LOE rbx r12 r13 r14
..B8.179:                       # Preds ..B8.178                # Infreq
..LN12152:
        movq      392(%rsp), %rcx                               #
..LN12153:
                                # LOE rcx
..B8.180:                       # Preds ..B8.179 ..B8.174 ..B8.166 # Infreq
..LN12154:
	.loc    1  316  is_stmt 1
        movq      384(%rsp), %rdi                               #316.3
..LN12155:
        movq      %rcx, 392(%rsp)                               #316.3
..LN12156:
#       free(void *)
        call      free                                          #316.3
..LN12157:
                                # LOE
..B8.181:                       # Preds ..B8.180                # Infreq
..LN12158:
        movq      392(%rsp), %rcx                               #
..LN12159:
	.loc    1  317  is_stmt 1
        movq      %rcx, %rdi                                    #317.3
..LN12160:
#       free(void *)
        call      free                                          #317.3
..LN12161:
                                # LOE
..B8.182:                       # Preds ..B8.181                # Infreq
..LN12162:
	.loc    1  454  is_stmt 1
        movq      424(%rsp), %rdi                               #454.3
..LN12163:
#       free(void *)
        call      free                                          #454.3
..LN12164:
                                # LOE
..B8.183:                       # Preds ..B8.182                # Infreq
..LN12165:
	.loc    1  455  is_stmt 1
        movq      432(%rsp), %rdi                               #455.3
..LN12166:
#       free(void *)
        call      free                                          #455.3
..LN12167:
                                # LOE
..B8.184:                       # Preds ..B8.183                # Infreq
..LN12168:
	.loc    1  456  is_stmt 1
        movq      440(%rsp), %rdi                               #456.3
..LN12169:
#       free(void *)
        call      free                                          #456.3
..LN12170:
                                # LOE
..B8.185:                       # Preds ..B8.184                # Infreq
..LN12171:
	.loc    1  457  is_stmt 1
        movq      320(%rsp), %rdi                               #457.3
..LN12172:
#       free(void *)
        call      free                                          #457.3
..LN12173:
                                # LOE
..B8.186:                       # Preds ..B8.185                # Infreq
..LN12174:
	.loc    1  458  is_stmt 1
        movq      448(%rsp), %rdi                               #458.3
..LN12175:
#       free(void *)
        call      free                                          #458.3
..LN12176:
                                # LOE
..B8.187:                       # Preds ..B8.186                # Infreq
..LN12177:
	.loc    1  460  epilogue_begin  is_stmt 1
        addq      $568, %rsp                                    #460.1
	.cfi_restore 3
..LN12178:
        popq      %rbx                                          #460.1
	.cfi_restore 15
..LN12179:
        popq      %r15                                          #460.1
	.cfi_restore 14
..LN12180:
        popq      %r14                                          #460.1
	.cfi_restore 13
..LN12181:
        popq      %r13                                          #460.1
	.cfi_restore 12
..LN12182:
        popq      %r12                                          #460.1
..LN12183:
        movq      %rbp, %rsp                                    #460.1
..LN12184:
        popq      %rbp                                          #460.1
	.cfi_def_cfa 7, 8
	.cfi_restore 6
..LN12185:
        ret                                                     #460.1
	.cfi_def_cfa 6, 16
	.cfi_escape 0x10, 0x03, 0x0e, 0x38, 0x1c, 0x0d, 0xe0, 0xff, 0xff, 0xff, 0x1a, 0x0d, 0xd8, 0xff, 0xff, 0xff, 0x22
	.cfi_offset 6, -16
	.cfi_escape 0x10, 0x0c, 0x0e, 0x38, 0x1c, 0x0d, 0xe0, 0xff, 0xff, 0xff, 0x1a, 0x0d, 0xf8, 0xff, 0xff, 0xff, 0x22
	.cfi_escape 0x10, 0x0d, 0x0e, 0x38, 0x1c, 0x0d, 0xe0, 0xff, 0xff, 0xff, 0x1a, 0x0d, 0xf0, 0xff, 0xff, 0xff, 0x22
	.cfi_escape 0x10, 0x0e, 0x0e, 0x38, 0x1c, 0x0d, 0xe0, 0xff, 0xff, 0xff, 0x1a, 0x0d, 0xe8, 0xff, 0xff, 0xff, 0x22
	.cfi_escape 0x10, 0x0f, 0x0e, 0x38, 0x1c, 0x0d, 0xe0, 0xff, 0xff, 0xff, 0x1a, 0x0d, 0xe0, 0xff, 0xff, 0xff, 0x22
..LN12186:
                                # LOE
..B8.188:                       # Preds ..B8.54                 # Infreq
..LN12187:
	.loc    1  446  is_stmt 1
        movl      %ebx, %r10d                                   #446.22
..LN12188:
	.loc    1  447  is_stmt 1
        lea       2(%rbx), %eax                                 #447.35
..LN12189:
	.loc    1  448  is_stmt 1
        movq      360(%rsp), %rdx                               #448.22
..LN12190:
	.loc    1  446  is_stmt 1
        andl      $-4, %r10d                                    #446.22
..LN12191:
	.loc    1  447  is_stmt 1
        movq      368(%rsp), %rcx                               #447.22
..LN12192:
	.loc    1  446  is_stmt 1
        movslq    %eax, %rax                                    #446.26
..LN12193:
        movslq    %r10d, %r10                                   #446.22
..LN12194:
	.loc    1  448  is_stmt 1
        lea       (%rdx,%r13,8), %r9                            #448.22
..LN12195:
	.loc    1  446  is_stmt 1
        movq      320(%rsp), %rdx                               #446.26
..LN12196:
	.loc    1  447  is_stmt 1
        lea       (%rcx,%r13,8), %r8                            #447.22
..LN12197:
	.loc    1  446  is_stmt 1
        movq      %r10, (%rsp)                                  #446.26
..LN12198:
        xorl      %ecx, %ecx                                    #446.26
..LN12199:
        movq      %rax, 16(%rsp)                                #446.26
..LN12200:
        movl      %r14d, 256(%rsp)                              #446.26
..LN12201:
        movl      %r12d, 416(%rsp)                              #446.26
..LN12202:
        movl      %r15d, 456(%rsp)                              #446.26
..LN12203:
        movl      %ebx, 264(%rsp)                               #446.26
..LN12204:
                                # LOE rdx rcx rdi r8 r9 r13 esi
..B8.189:                       # Preds ..B8.205 ..B8.214 ..B8.188 # Infreq
..LN12205:
        cmpq      $4, %r13                                      #446.22
..LN12206:
        jl        ..B8.216      # Prob 10%                      #446.22
..LN12207:
                                # LOE rdx rcx rdi r8 r9 r13 esi
..B8.190:                       # Preds ..B8.189                # Infreq
..LN12208:
	.loc    1  448  is_stmt 1
        movq      448(%rsp), %rax                               #448.5
..LN12209:
        lea       (%rax,%rdi,8), %r15                           #448.5
..LN12210:
	.loc    1  446  is_stmt 1
        cmpq      $239, %r13                                    #446.22
..LN12211:
        jl        ..B8.218      # Prob 10%                      #446.22
..LN12212:
                                # LOE rdx rcx rdi r8 r9 r13 r15 esi
..B8.191:                       # Preds ..B8.190                # Infreq
..LN12213:
        movq      %r15, %rax                                    #446.22
..LN12214:
        andq      $31, %rax                                     #446.22
..LN12215:
        testl     %eax, %eax                                    #446.22
..LN12216:
        je        ..B8.194      # Prob 50%                      #446.22
..LN12217:
                                # LOE rdx rcx rdi r8 r9 r13 r15 eax esi
..B8.192:                       # Preds ..B8.191                # Infreq
..LN12218:
        testb     $7, %al                                       #446.22
..LN12219:
        jne       ..B8.216      # Prob 10%                      #446.22
..LN12220:
                                # LOE rdx rcx rdi r8 r9 r13 r15 eax esi
..B8.193:                       # Preds ..B8.192                # Infreq
..LN12221:
        negl      %eax                                          #446.22
..LN12222:
        addl      $32, %eax                                     #446.22
..LN12223:
        shrl      $3, %eax                                      #446.22
..LN12224:
                                # LOE rdx rcx rdi r8 r9 r13 r15 eax esi
..B8.194:                       # Preds ..B8.193 ..B8.191       # Infreq
..LN12225:
        movl      %eax, %r14d                                   #446.22
..LN12226:
        lea       4(%r14), %rbx                                 #446.22
..LN12227:
        cmpq      %rbx, %r13                                    #446.22
..LN12228:
        jl        ..B8.216      # Prob 10%                      #446.22
..LN12229:
                                # LOE rdx rcx rdi r8 r9 r13 r14 r15 eax esi
..B8.195:                       # Preds ..B8.194                # Infreq
..LN12230:
        negl      %eax                                          #446.22
..LN12231:
        xorl      %r10d, %r10d                                  #446.22
..LN12232:
        movl      264(%rsp), %ebx                               #446.22
..LN12233:
        addl      %ebx, %eax                                    #446.22
..LN12234:
        andl      $3, %eax                                      #446.22
..LN12235:
	.loc    1  448  is_stmt 1
        lea       (%r9,%rcx,8), %r11                            #448.22
..LN12236:
	.loc    1  446  is_stmt 1
        negl      %eax                                          #446.22
..LN12237:
	.loc    1  447  is_stmt 1
        lea       (%rdx,%rdi,8), %r12                           #447.5
..LN12238:
	.loc    1  446  is_stmt 1
        addl      %ebx, %eax                                    #446.22
..LN12239:
	.loc    1  447  is_stmt 1
        lea       (%r8,%rcx,8), %rbx                            #447.22
..LN12240:
	.loc    1  446  is_stmt 1
        movslq    %eax, %rax                                    #446.22
..LN12241:
        testq     %r14, %r14                                    #446.22
..LN12242:
        jbe       ..B8.200      # Prob 9%                       #446.22
..LN12243:
                                # LOE rax rdx rcx rbx rdi r8 r9 r10 r11 r12 r13 r14 r15 esi
..B8.196:                       # Preds ..B8.195                # Infreq
..LN12244:
        movq      %r13, 200(%rsp)                               #
..LN12245:
                                # LOE rax rdx rcx rbx rdi r8 r9 r10 r11 r12 r14 r15 esi
..B8.197:                       # Preds ..B8.196 ..B8.197       # Infreq
..L598:         # optimization report
                # LOOP WAS UNROLLED BY 1
                # PEELED LOOP FOR VECTORIZATION
                # VECTORIZATION SPEEDUP COEFFECIENT 9.648438
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 1.875000
..LN12246:
	.loc    1  447  is_stmt 1
        movq      24(%rbx,%r10,8), %r13                         #447.22
..LN12247:
        movq      %r13, (%r12,%r10,8)                           #447.5
..LN12248:
	.loc    1  448  is_stmt 1
        movq      24(%r11,%r10,8), %r13                         #448.22
..LN12249:
        movq      %r13, (%r15,%r10,8)                           #448.5
..LN12250:
	.loc    1  446  is_stmt 1
        incq      %r10                                          #446.22
..LN12251:
        cmpq      %r14, %r10                                    #446.22
..LN12252:
        jb        ..B8.197      # Prob 82%                      #446.22
..LN12253:
                                # LOE rax rdx rcx rbx rdi r8 r9 r10 r11 r12 r14 r15 esi
..B8.198:                       # Preds ..B8.197                # Infreq
..LN12254:
        movq      200(%rsp), %r13                               #
..LN12255:
                                # LOE rax rdx rcx rbx rdi r8 r9 r11 r12 r13 r14 r15 esi
..B8.200:                       # Preds ..B8.218 ..B8.198 ..B8.195 ..B8.200 # Infreq
..L599:         # optimization report
                # LOOP WAS UNROLLED BY 1
                # LOOP WAS VECTORIZED
                # VECTORIZATION HAS UNALIGNED MEMORY REFERENCES
                # VECTORIZATION SPEEDUP COEFFECIENT 9.648438
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 1.875000
                # MAIN VECTOR TYPE: 64-bits floating point
..LN12256:
	.loc    1  447  is_stmt 1
        vmovupd   24(%rbx,%r14,8), %ymm0                        #447.22
..LN12257:
	.loc    1  448  is_stmt 1
        vmovupd   24(%r11,%r14,8), %ymm1                        #448.22
..LN12258:
	.loc    1  447  is_stmt 1
        vmovupd   %ymm0, (%r12,%r14,8)                          #447.5
..LN12259:
	.loc    1  448  is_stmt 1
        vmovupd   %ymm1, (%r15,%r14,8)                          #448.5
..LN12260:
	.loc    1  446  is_stmt 1
        addq      $4, %r14                                      #446.22
..LN12261:
        cmpq      %rax, %r14                                    #446.22
..LN12262:
        jb        ..B8.200      # Prob 82%                      #446.22
..LN12263:
                                # LOE rax rdx rcx rbx rdi r8 r9 r11 r12 r13 r14 r15 esi
..B8.202:                       # Preds ..B8.200 ..B8.216       # Infreq
..LN12264:
        cmpq      %r13, %rax                                    #446.22
..LN12265:
        jae       ..B8.214      # Prob 9%                       #446.22
..LN12266:
                                # LOE rax rdx rcx rdi r8 r9 r13 esi
..B8.203:                       # Preds ..B8.202                # Infreq
..LN12267:
	.loc    1  448  is_stmt 1
        movq      448(%rsp), %r12                               #448.5
..LN12268:
        lea       (%r9,%rcx,8), %r10                            #448.22
..LN12269:
	.loc    1  447  is_stmt 1
        lea       (%r8,%rcx,8), %r11                            #447.22
..LN12270:
        lea       (%rdx,%rdi,8), %rbx                           #447.5
..LN12271:
	.loc    1  448  is_stmt 1
        lea       (%r12,%rdi,8), %r12                           #448.5
..LN12272:
                                # LOE rax rdx rcx rbx rdi r8 r9 r10 r11 r12 r13 esi
..B8.204:                       # Preds ..B8.204 ..B8.203       # Infreq
..L600:         # optimization report
                # LOOP WAS UNROLLED BY 1
                # REMAINDER LOOP FOR VECTORIZATION
                # VECTORIZATION SPEEDUP COEFFECIENT 9.648438
                # VECTOR TRIP COUNT IS ESTIMATED CONSTANT
                # VECTOR LENGTH 4
                # NORMALIZED VECTORIZATION OVERHEAD 1.875000
..LN12273:
	.loc    1  447  is_stmt 1
        movq      24(%r11,%rax,8), %r14                         #447.22
..LN12274:
	.loc    1  448  is_stmt 1
        movq      24(%r10,%rax,8), %r15                         #448.22
..LN12275:
	.loc    1  447  is_stmt 1
        movq      %r14, (%rbx,%rax,8)                           #447.5
..LN12276:
	.loc    1  448  is_stmt 1
        movq      %r15, (%r12,%rax,8)                           #448.5
..LN12277:
	.loc    1  446  is_stmt 1
        incq      %rax                                          #446.22
..LN12278:
        cmpq      %r13, %rax                                    #446.22
..LN12279:
        jb        ..B8.204      # Prob 82%                      #446.22
..LN12280:
                                # LOE rax rdx rcx rbx rdi r8 r9 r10 r11 r12 r13 esi
..B8.205:                       # Preds ..B8.204                # Infreq
..LN12281:
        incl      %esi                                          #446.3
..LN12282:
        addq      %r13, %rdi                                    #446.3
..LN12283:
        addq      16(%rsp), %rcx                                #446.3
..LN12284:
        cmpl      456(%rsp), %esi                               #446.3
..LN12285:
        jb        ..B8.189      # Prob 81%                      #446.3
..LN12286:
                                # LOE rdx rcx rdi r8 r9 r13 esi
..B8.206:                       # Preds ..B8.205                # Infreq
..LN12287:
        movl      256(%rsp), %r14d                              #
..LN12288:
        movl      416(%rsp), %r12d                              #
..LN12289:
        movl      456(%rsp), %r15d                              #
..LN12290:
        movl      264(%rsp), %ebx                               #
..LN12291:
        jmp       ..B8.55       # Prob 100%                     #
..LN12292:
                                # LOE r13 ebx r12d r14d r15d
..B8.207:                       # Preds ..B8.62 ..B8.64 ..B8.66 # Infreq
..LN12293:
	.loc    1  217  is_stmt 1
        xorl      %ecx, %ecx                                    #217.3
..LN12294:
        jmp       ..B8.74       # Prob 100%                     #217.3
..LN12295:
                                # LOE r13 ecx ebx r12d r14d r15d
..B8.210:                       # Preds ..B8.108                # Infreq
..LN12296:
	.loc    1  221  is_stmt 1
        xorl      %eax, %eax                                    #221.3
..LN12297:
        jmp       ..B8.112      # Prob 100%                     #221.3
..LN12298:
                                # LOE rax rdx r13 ecx ebx r12d r14d r15d
..B8.211:                       # Preds ..B8.95 ..B8.97 ..B8.99 # Infreq
..LN12299:
        xorl      %ecx, %ecx                                    #221.3
..LN12300:
        jmp       ..B8.107      # Prob 100%                     #221.3
..LN12301:
                                # LOE r13 ecx ebx r12d r14d r15d
..B8.214:                       # Preds ..B8.202                # Infreq
..LN12302:
	.loc    1  446  is_stmt 1
        incl      %esi                                          #446.3
..LN12303:
        addq      %r13, %rdi                                    #446.3
..LN12304:
        addq      16(%rsp), %rcx                                #446.3
..LN12305:
        cmpl      456(%rsp), %esi                               #446.3
..LN12306:
        jb        ..B8.189      # Prob 81%                      #446.3
..LN12307:
                                # LOE rdx rcx rdi r8 r9 r13 esi
..B8.215:                       # Preds ..B8.214                # Infreq
..LN12308:
        movl      256(%rsp), %r14d                              #
..LN12309:
        movl      416(%rsp), %r12d                              #
..LN12310:
        movl      456(%rsp), %r15d                              #
..LN12311:
        movl      264(%rsp), %ebx                               #
..LN12312:
        jmp       ..B8.55       # Prob 100%                     #
..LN12313:
                                # LOE r13 ebx r12d r14d r15d
..B8.216:                       # Preds ..B8.189 ..B8.192 ..B8.194 # Infreq
..LN12314:
        xorl      %eax, %eax                                    #446.22
..LN12315:
        jmp       ..B8.202      # Prob 100%                     #446.22
..LN12316:
                                # LOE rax rdx rcx rdi r8 r9 r13 esi
..B8.218:                       # Preds ..B8.190                # Infreq
..LN12317:
        movq      (%rsp), %rax                                  #446.22
..LN12318:
	.loc    1  448  is_stmt 1
        lea       (%r9,%rcx,8), %r11                            #448.22
..LN12319:
	.loc    1  446  is_stmt 1
        xorl      %r14d, %r14d                                  #446.22
..LN12320:
	.loc    1  447  is_stmt 1
        lea       (%r8,%rcx,8), %rbx                            #447.22
..LN12321:
        lea       (%rdx,%rdi,8), %r12                           #447.5
..LN12322:
        jmp       ..B8.200      # Prob 100%                     #447.5
..LN12323:
                                # LOE rax rdx rcx rbx rdi r8 r9 r11 r12 r13 r14 r15 esi
..B8.220:                       # Preds ..B8.75                 # Infreq
..LN12324:
	.loc    1  217  is_stmt 1
        xorl      %eax, %eax                                    #217.3
..LN12325:
        jmp       ..B8.79       # Prob 100%                     #217.3
..LN12326:
                                # LOE rax rdx r13 ecx ebx r12d r14d r15d
..B8.221:                       # Preds ..B8.21                 # Infreq
..LN12327:
	.loc    1  405  is_stmt 1
        incl      %edi                                          #405.3
..LN12328:
        addq      192(%rsp), %rcx                               #405.3
..LN12329:
        addq      200(%rsp), %rsi                               #405.3
..LN12330:
        cmpl      456(%rsp), %edi                               #405.3
..LN12331:
        jb        ..B8.21       # Prob 81%                      #405.3
..LN12332:
        jmp       ..B8.26       # Prob 100%                     #405.3
..LN12333:
        .align    16,0x90
	.cfi_endproc
..LN12334:
                                # LOE rax rdx rcx rsi r10 r11 edi r9d
..LN12335:
# mark_end;
	.type	calc_c2l_grid_info,@function
	.size	calc_c2l_grid_info,.-calc_c2l_grid_info
..LNcalc_c2l_grid_info.12336:
.LNcalc_c2l_grid_info:
	.data
# -- End  calc_c2l_grid_info
	.section .rodata, "a"
	.align 32
.L_2il0floatpacket.0:
	.long	0x00000000,0x3fd00000,0x00000000,0x3fd00000,0x00000000,0x3fd00000,0x00000000,0x3fd00000
	.type	.L_2il0floatpacket.0,@object
	.size	.L_2il0floatpacket.0,32
	.align 32
.L_2il0floatpacket.4:
	.long	0x00000000,0x3fe00000,0x00000000,0x3fe00000,0x00000000,0x3fe00000,0x00000000,0x3fe00000
	.type	.L_2il0floatpacket.4,@object
	.size	.L_2il0floatpacket.4,32
	.align 32
.L_2il0floatpacket.7:
	.long	0x00000000,0x3ff00000,0x00000000,0x3ff00000,0x00000000,0x3ff00000,0x00000000,0x3ff00000
	.type	.L_2il0floatpacket.7,@object
	.size	.L_2il0floatpacket.7,32
	.align 32
.L_2il0floatpacket.8:
	.long	0x00000000,0x3ff00000,0x00000000,0x3ff00000,0x00000000,0x3ff00000,0x00000000,0x3ff00000
	.type	.L_2il0floatpacket.8,@object
	.size	.L_2il0floatpacket.8,32
	.align 32
.L_2il0floatpacket.9:
	.long	0x00000000,0x3fe00000,0x00000000,0x3fe00000,0x00000000,0x3fe00000,0x00000000,0x3fe00000
	.type	.L_2il0floatpacket.9,@object
	.size	.L_2il0floatpacket.9,32
	.align 16
.L_2il0floatpacket.5:
	.long	0x00000000,0x3fe00000,0x00000000,0x3fe00000
	.type	.L_2il0floatpacket.5,@object
	.size	.L_2il0floatpacket.5,16
	.align 16
.L_2il0floatpacket.6:
	.long	0x00000000,0x3fe00000,0x00000000,0x3fe00000
	.type	.L_2il0floatpacket.6,@object
	.size	.L_2il0floatpacket.6,16
	.align 8
.L_2il0floatpacket.1:
	.long	0x00000000,0x3fd00000
	.type	.L_2il0floatpacket.1,@object
	.size	.L_2il0floatpacket.1,8
	.align 8
.L_2il0floatpacket.2:
	.long	0x55555555,0x3fd55555
	.type	.L_2il0floatpacket.2,@object
	.size	.L_2il0floatpacket.2,8
	.align 8
.L_2il0floatpacket.3:
	.long	0x00000000,0x3fe00000
	.type	.L_2il0floatpacket.3,@object
	.size	.L_2il0floatpacket.3,8
	.align 8
.L_2il0floatpacket.10:
	.long	0x00000000,0x41584dae
	.type	.L_2il0floatpacket.10,@object
	.size	.L_2il0floatpacket.10,8
	.data
	.section .debug_opt_report, ""
..L603:
	.ascii ".itt_notify_tab\0"
	.word	258
	.word	48
	.long	238
	.long	..L604 - ..L603
	.long	48
	.long	..L605 - ..L603
	.long	4178
	.long	0x00000008,0x00000000
	.long	0
	.long	0
	.long	0
	.long	0
	.quad	..L13
	.long	28
	.long	4
	.quad	..L14
	.long	28
	.long	18
	.quad	..L15
	.long	28
	.long	37
	.quad	..L16
	.long	28
	.long	56
	.quad	..L17
	.long	28
	.long	75
	.quad	..L18
	.long	28
	.long	94
	.quad	..L19
	.long	28
	.long	113
	.quad	..L20
	.long	28
	.long	132
	.quad	..L21
	.long	28
	.long	151
	.quad	..L22
	.long	28
	.long	170
	.quad	..L23
	.long	28
	.long	189
	.quad	..L24
	.long	28
	.long	208
	.quad	..L25
	.long	28
	.long	227
	.quad	..L26
	.long	28
	.long	246
	.quad	..L27
	.long	28
	.long	265
	.quad	..L28
	.long	28
	.long	284
	.quad	..L29
	.long	28
	.long	303
	.quad	..L30
	.long	28
	.long	322
	.quad	..L31
	.long	28
	.long	341
	.quad	..L32
	.long	28
	.long	360
	.quad	..L33
	.long	28
	.long	379
	.quad	..L34
	.long	28
	.long	398
	.quad	..L35
	.long	28
	.long	417
	.quad	..L36
	.long	28
	.long	436
	.quad	..L37
	.long	28
	.long	455
	.quad	..L38
	.long	28
	.long	474
	.quad	..L39
	.long	28
	.long	493
	.quad	..L40
	.long	28
	.long	512
	.quad	..L41
	.long	28
	.long	531
	.quad	..L42
	.long	28
	.long	550
	.quad	..L43
	.long	28
	.long	569
	.quad	..L44
	.long	28
	.long	588
	.quad	..L45
	.long	28
	.long	607
	.quad	..L46
	.long	28
	.long	626
	.quad	..L47
	.long	28
	.long	645
	.quad	..L48
	.long	28
	.long	664
	.quad	..L49
	.long	28
	.long	683
	.quad	..L50
	.long	28
	.long	702
	.quad	..L51
	.long	28
	.long	716
	.quad	..L53
	.long	28
	.long	735
	.quad	..L52
	.long	28
	.long	743
	.quad	..L54
	.long	28
	.long	762
	.quad	..L55
	.long	28
	.long	781
	.quad	..L56
	.long	28
	.long	795
	.quad	..L58
	.long	28
	.long	814
	.quad	..L57
	.long	28
	.long	822
	.quad	..L59
	.long	28
	.long	841
	.quad	..L60
	.long	28
	.long	860
	.quad	..L61
	.long	28
	.long	874
	.quad	..L62
	.long	28
	.long	890
	.quad	..L64
	.long	28
	.long	906
	.quad	..L63
	.long	28
	.long	914
	.quad	..L65
	.long	28
	.long	933
	.quad	..L96
	.long	28
	.long	952
	.quad	..L97
	.long	28
	.long	966
	.quad	..L98
	.long	28
	.long	985
	.quad	..L99
	.long	28
	.long	1004
	.quad	..L100
	.long	28
	.long	1023
	.quad	..L101
	.long	28
	.long	1042
	.quad	..L102
	.long	28
	.long	1061
	.quad	..L103
	.long	28
	.long	1080
	.quad	..L104
	.long	28
	.long	1099
	.quad	..L105
	.long	28
	.long	1118
	.quad	..L106
	.long	28
	.long	1137
	.quad	..L107
	.long	28
	.long	1156
	.quad	..L108
	.long	28
	.long	1175
	.quad	..L109
	.long	28
	.long	1194
	.quad	..L110
	.long	28
	.long	1213
	.quad	..L111
	.long	28
	.long	1232
	.quad	..L112
	.long	28
	.long	1251
	.quad	..L113
	.long	28
	.long	1270
	.quad	..L114
	.long	28
	.long	1289
	.quad	..L115
	.long	28
	.long	1308
	.quad	..L116
	.long	28
	.long	1327
	.quad	..L117
	.long	28
	.long	1346
	.quad	..L118
	.long	28
	.long	1365
	.quad	..L119
	.long	28
	.long	1384
	.quad	..L120
	.long	28
	.long	1403
	.quad	..L121
	.long	28
	.long	1422
	.quad	..L122
	.long	28
	.long	1441
	.quad	..L123
	.long	28
	.long	1460
	.quad	..L124
	.long	28
	.long	1479
	.quad	..L125
	.long	28
	.long	1498
	.quad	..L126
	.long	28
	.long	1517
	.quad	..L127
	.long	28
	.long	1536
	.quad	..L128
	.long	28
	.long	1555
	.quad	..L129
	.long	28
	.long	1574
	.quad	..L130
	.long	28
	.long	1593
	.quad	..L131
	.long	28
	.long	1612
	.quad	..L132
	.long	28
	.long	1631
	.quad	..L133
	.long	28
	.long	1650
	.quad	..L134
	.long	28
	.long	1664
	.quad	..L136
	.long	28
	.long	1683
	.quad	..L135
	.long	28
	.long	1691
	.quad	..L137
	.long	28
	.long	1710
	.quad	..L138
	.long	28
	.long	1729
	.quad	..L139
	.long	28
	.long	1743
	.quad	..L141
	.long	28
	.long	1762
	.quad	..L140
	.long	28
	.long	1770
	.quad	..L142
	.long	28
	.long	1789
	.quad	..L143
	.long	28
	.long	1808
	.quad	..L144
	.long	28
	.long	1822
	.quad	..L145
	.long	28
	.long	1838
	.quad	..L147
	.long	28
	.long	1854
	.quad	..L146
	.long	28
	.long	1862
	.quad	..L148
	.long	28
	.long	1881
	.quad	..L179
	.long	28
	.long	1900
	.quad	..L180
	.long	28
	.long	1916
	.quad	..L181
	.long	28
	.long	1932
	.quad	..L182
	.long	28
	.long	1948
	.quad	..L183
	.long	28
	.long	1967
	.quad	..L184
	.long	28
	.long	1986
	.quad	..L185
	.long	28
	.long	2005
	.quad	..L186
	.long	28
	.long	2024
	.quad	..L187
	.long	28
	.long	2043
	.quad	..L188
	.long	28
	.long	2062
	.quad	..L189
	.long	28
	.long	2081
	.quad	..L190
	.long	28
	.long	2100
	.quad	..L191
	.long	28
	.long	2116
	.quad	..L192
	.long	28
	.long	2132
	.quad	..L193
	.long	28
	.long	2151
	.quad	..L194
	.long	28
	.long	2170
	.quad	..L195
	.long	28
	.long	2189
	.quad	..L196
	.long	28
	.long	2208
	.quad	..L197
	.long	28
	.long	2227
	.quad	..L198
	.long	28
	.long	2246
	.quad	..L199
	.long	28
	.long	2265
	.quad	..L200
	.long	28
	.long	2284
	.quad	..L201
	.long	28
	.long	2300
	.quad	..L202
	.long	28
	.long	2316
	.quad	..L203
	.long	28
	.long	2335
	.quad	..L204
	.long	28
	.long	2354
	.quad	..L205
	.long	28
	.long	2373
	.quad	..L206
	.long	28
	.long	2392
	.quad	..L207
	.long	28
	.long	2411
	.quad	..L208
	.long	28
	.long	2430
	.quad	..L209
	.long	28
	.long	2449
	.quad	..L210
	.long	28
	.long	2468
	.quad	..L211
	.long	28
	.long	2484
	.quad	..L212
	.long	28
	.long	2500
	.quad	..L213
	.long	28
	.long	2519
	.quad	..L214
	.long	28
	.long	2538
	.quad	..L215
	.long	28
	.long	2557
	.quad	..L216
	.long	28
	.long	2576
	.quad	..L217
	.long	28
	.long	2595
	.quad	..L218
	.long	28
	.long	2614
	.quad	..L219
	.long	28
	.long	2633
	.quad	..L220
	.long	28
	.long	2652
	.quad	..L221
	.long	28
	.long	2668
	.quad	..L252
	.long	28
	.long	2684
	.quad	..L253
	.long	28
	.long	2703
	.quad	..L254
	.long	28
	.long	2722
	.quad	..L255
	.long	28
	.long	2741
	.quad	..L256
	.long	28
	.long	2760
	.quad	..L257
	.long	28
	.long	2776
	.quad	..L258
	.long	28
	.long	2792
	.quad	..L259
	.long	28
	.long	2811
	.quad	..L260
	.long	28
	.long	2830
	.quad	..L261
	.long	28
	.long	2849
	.quad	..L262
	.long	28
	.long	2868
	.quad	..L263
	.long	28
	.long	2884
	.quad	..L264
	.long	28
	.long	2900
	.quad	..L271
	.long	28
	.long	2916
	.quad	..L276
	.long	28
	.long	2932
	.quad	..L283
	.long	28
	.long	2948
	.quad	..L288
	.long	28
	.long	2964
	.quad	..L295
	.long	28
	.long	2980
	.quad	..L300
	.long	28
	.long	2996
	.quad	..L307
	.long	28
	.long	3012
	.quad	..L373
	.long	28
	.long	3028
	.quad	..L374
	.long	28
	.long	3044
	.quad	..L377
	.long	28
	.long	3060
	.quad	..L378
	.long	28
	.long	3076
	.quad	..L381
	.long	28
	.long	3092
	.quad	..L382
	.long	28
	.long	3108
	.quad	..L387
	.long	28
	.long	3124
	.quad	..L388
	.long	28
	.long	3140
	.quad	..L393
	.long	28
	.long	3156
	.quad	..L394
	.long	28
	.long	3172
	.quad	..L399
	.long	28
	.long	3188
	.quad	..L402
	.long	28
	.long	3202
	.quad	..L403
	.long	28
	.long	3221
	.quad	..L404
	.long	28
	.long	3240
	.quad	..L405
	.long	28
	.long	3259
	.quad	..L406
	.long	28
	.long	3278
	.quad	..L407
	.long	28
	.long	3294
	.quad	..L408
	.long	28
	.long	3310
	.quad	..L409
	.long	28
	.long	3329
	.quad	..L410
	.long	28
	.long	3348
	.quad	..L411
	.long	28
	.long	3367
	.quad	..L412
	.long	28
	.long	3386
	.quad	..L413
	.long	28
	.long	3402
	.quad	..L414
	.long	28
	.long	3418
	.quad	..L421
	.long	28
	.long	3434
	.quad	..L426
	.long	28
	.long	3450
	.quad	..L433
	.long	28
	.long	3466
	.quad	..L438
	.long	28
	.long	3482
	.quad	..L445
	.long	28
	.long	3498
	.quad	..L450
	.long	28
	.long	3514
	.quad	..L457
	.long	28
	.long	3530
	.quad	..L477
	.long	28
	.long	3546
	.quad	..L478
	.long	28
	.long	3565
	.quad	..L479
	.long	28
	.long	3584
	.quad	..L494
	.long	28
	.long	3603
	.quad	..L495
	.long	28
	.long	3619
	.quad	..L498
	.long	28
	.long	3635
	.quad	..L499
	.long	28
	.long	3651
	.quad	..L502
	.long	28
	.long	3667
	.quad	..L503
	.long	28
	.long	3683
	.quad	..L508
	.long	28
	.long	3699
	.quad	..L509
	.long	28
	.long	3715
	.quad	..L514
	.long	28
	.long	3731
	.quad	..L515
	.long	28
	.long	3747
	.quad	..L520
	.long	28
	.long	3763
	.quad	..L523
	.long	28
	.long	3777
	.quad	..L524
	.long	28
	.long	3796
	.quad	..L525
	.long	28
	.long	3815
	.quad	..L526
	.long	28
	.long	3834
	.quad	..L527
	.long	28
	.long	3853
	.quad	..L528
	.long	28
	.long	3869
	.quad	..L529
	.long	28
	.long	3885
	.quad	..L530
	.long	28
	.long	3904
	.quad	..L531
	.long	28
	.long	3923
	.quad	..L532
	.long	28
	.long	3942
	.quad	..L533
	.long	28
	.long	3961
	.quad	..L534
	.long	28
	.long	3977
	.quad	..L535
	.long	28
	.long	3993
	.quad	..L542
	.long	28
	.long	4009
	.quad	..L547
	.long	28
	.long	4025
	.quad	..L554
	.long	28
	.long	4041
	.quad	..L559
	.long	28
	.long	4057
	.quad	..L566
	.long	28
	.long	4073
	.quad	..L571
	.long	28
	.long	4089
	.quad	..L578
	.long	28
	.long	4105
	.quad	..L598
	.long	28
	.long	4121
	.quad	..L599
	.long	28
	.long	4140
	.quad	..L600
	.long	28
	.long	4159
..L604:
	.long	1769238639
	.long	1635412333
	.long	1852795252
	.long	1885696607
	.long	1601466991
	.long	1936876918
	.long	7237481
	.long	1769238639
	.long	1635412333
	.long	1852795252
	.long	1885696607
	.long	7631471
..L605:
	.long	42078211
	.long	-2139090931
	.long	-2139062144
	.long	-2139062144
	.long	269617096
	.long	-2139062144
	.long	-2139059840
	.long	-1065319296
	.long	-612054789
	.long	-2146430462
	.long	-2139062144
	.long	-2139062135
	.long	-71269758
	.long	47940808
	.long	-2139090926
	.long	-2139062144
	.long	-1971289984
	.long	-928843646
	.long	302178180
	.long	-2139062256
	.long	-2139062144
	.long	-2138537856
	.long	-2067225864
	.long	269615839
	.long	-2139062144
	.long	-2139059840
	.long	-2004843392
	.long	-639448923
	.long	-2146430462
	.long	-2139062144
	.long	-2139062135
	.long	-1517780862
	.long	47833800
	.long	-2139090926
	.long	-2139062144
	.long	-1971289984
	.long	-940654462
	.long	302177762
	.long	-2139062256
	.long	-2139062144
	.long	-2138537856
	.long	-490213696
	.long	269615837
	.long	-2139062144
	.long	-2139060864
	.long	-1199537024
	.long	-645478212
	.long	-2146430462
	.long	-2139062144
	.long	-2139062139
	.long	-1128758654
	.long	47810248
	.long	-2139090926
	.long	-2139062144
	.long	-1971289984
	.long	-930578302
	.long	302177700
	.long	-2139062256
	.long	-2139062144
	.long	-2138537856
	.long	-1530361728
	.long	269615837
	.long	-2139062144
	.long	-2139059840
	.long	-394230656
	.long	-639448913
	.long	-2146430462
	.long	-2139062144
	.long	-2139062135
	.long	-1343717246
	.long	47833800
	.long	-2139090926
	.long	-2139062144
	.long	-1971289984
	.long	-940064638
	.long	302177762
	.long	-2139062256
	.long	-2139062144
	.long	-2138537856
	.long	-490211392
	.long	269615837
	.long	-2139062144
	.long	-2139060864
	.long	-1199537024
	.long	-645478208
	.long	-2146430462
	.long	-2139062144
	.long	-2139062139
	.long	-1061649790
	.long	47810248
	.long	-2139090926
	.long	-2139062144
	.long	-1971289984
	.long	-930492286
	.long	302177700
	.long	-2139062256
	.long	-2139062144
	.long	-2138537856
	.long	-1530361392
	.long	269615837
	.long	-2139062144
	.long	-2139059840
	.long	-1467972480
	.long	-607860523
	.long	-2146430462
	.long	-2139062144
	.long	-2139062135
	.long	-710376830
	.long	47957192
	.long	-2139090926
	.long	-2139062144
	.long	-1971289984
	.long	-930439038
	.long	302178244
	.long	-2139062256
	.long	-2139062144
	.long	-2138537856
	.long	-993490272
	.long	269615839
	.long	-2139062144
	.long	-2139059840
	.long	-1065319296
	.long	-624637747
	.long	-2146430462
	.long	-2139062144
	.long	-2139062135
	.long	-843021694
	.long	47891656
	.long	-2139090926
	.long	-2139062144
	.long	-1971289984
	.long	-930228094
	.long	302178020
	.long	-2139062256
	.long	-2139062144
	.long	-2138537856
	.long	-456618536
	.long	269615838
	.long	-2139062144
	.long	-2139059840
	.long	-1602190208
	.long	-607860502
	.long	-2146430462
	.long	-2139062144
	.long	-2139062135
	.long	-358579582
	.long	47957192
	.long	-2139090926
	.long	-2139062144
	.long	-1971289984
	.long	-929701758
	.long	302178244
	.long	-2139062256
	.long	-2139062144
	.long	-2138537856
	.long	-993487392
	.long	269615839
	.long	-2139062144
	.long	-2139059840
	.long	-394230656
	.long	-624637739
	.long	-2146430462
	.long	-2139062144
	.long	-2139062135
	.long	-706182526
	.long	47891656
	.long	-2139090926
	.long	-2139062144
	.long	-1971289984
	.long	-929896318
	.long	302178020
	.long	-2139062256
	.long	-2139062144
	.long	-2138537856
	.long	-456617240
	.long	269288158
	.long	-2139062144
	.long	-2139062144
	.long	130580608
	.long	-2139090926
	.long	-2088730496
	.long	-2071953280
	.long	-927807360
	.long	117627108
	.long	-2139062256
	.long	302432384
	.long	-2139062256
	.long	-2138865536
	.long	-2105376640
	.long	-456609080
	.long	269615832
	.long	-2139062144
	.long	-2139061376
	.long	-931100544
	.long	-656095054
	.long	-2146431742
	.long	-2139062144
	.long	-2139062144
	.long	302499968
	.long	-2139062256
	.long	-2138865536
	.long	-2138800000
	.long	-1530350176
	.long	268894937
	.long	-2139062144
	.long	269616832
	.long	-2139062144
	.long	-2139061376
	.long	-1602059648
	.long	-643512139
	.long	-2146430462
	.long	-2139062144
	.long	-2139062141
	.long	-1247772536
	.long	47817928
	.long	-2139090931
	.long	-2139062144
	.long	-2139062144
	.long	269420488
	.long	-2139062144
	.long	-2139062144
	.long	-2119139200
	.long	269435008
	.long	-2139062144
	.long	-2139062144
	.long	-2119139200
	.long	268910720
	.long	-2139062144
	.long	269616832
	.long	-2139062144
	.long	-2139061376
	.long	-1870626176
	.long	-813381484
	.long	-2146430462
	.long	-2139062144
	.long	-2139062141
	.long	-1802469240
	.long	47154376
	.long	-2139090931
	.long	-2139062144
	.long	-2139062144
	.long	269617096
	.long	-2139062144
	.long	-2139059840
	.long	-1065319296
	.long	-612054789
	.long	-2146430462
	.long	-2139062144
	.long	-2139062135
	.long	-71269758
	.long	47940808
	.long	-2139090926
	.long	-2139062144
	.long	-1971289984
	.long	-928843646
	.long	302178180
	.long	-2139062256
	.long	-2139062144
	.long	-2138537856
	.long	-2067225864
	.long	269615839
	.long	-2139062144
	.long	-2139059840
	.long	-2004843392
	.long	-639448923
	.long	-2146430462
	.long	-2139062144
	.long	-2139062135
	.long	-1517780862
	.long	47833800
	.long	-2139090926
	.long	-2139062144
	.long	-1971289984
	.long	-940654462
	.long	302177762
	.long	-2139062256
	.long	-2139062144
	.long	-2138537856
	.long	-490213696
	.long	269615837
	.long	-2139062144
	.long	-2139060864
	.long	-1199537024
	.long	-645478212
	.long	-2146430462
	.long	-2139062144
	.long	-2139062139
	.long	-1128758654
	.long	47810248
	.long	-2139090926
	.long	-2139062144
	.long	-1971289984
	.long	-930578302
	.long	302177700
	.long	-2139062256
	.long	-2139062144
	.long	-2138537856
	.long	-1530361728
	.long	269615837
	.long	-2139062144
	.long	-2139059840
	.long	-394230656
	.long	-639448913
	.long	-2146430462
	.long	-2139062144
	.long	-2139062135
	.long	-1343717246
	.long	47833800
	.long	-2139090926
	.long	-2139062144
	.long	-1971289984
	.long	-940064638
	.long	302177762
	.long	-2139062256
	.long	-2139062144
	.long	-2138537856
	.long	-490211392
	.long	269615837
	.long	-2139062144
	.long	-2139060864
	.long	-1199537024
	.long	-645478208
	.long	-2146430462
	.long	-2139062144
	.long	-2139062139
	.long	-1061649790
	.long	47810248
	.long	-2139090926
	.long	-2139062144
	.long	-1971289984
	.long	-930492286
	.long	302177700
	.long	-2139062256
	.long	-2139062144
	.long	-2138537856
	.long	-1530361392
	.long	269615837
	.long	-2139062144
	.long	-2139059840
	.long	-1467972480
	.long	-607860523
	.long	-2146430462
	.long	-2139062144
	.long	-2139062135
	.long	-710376830
	.long	47957192
	.long	-2139090926
	.long	-2139062144
	.long	-1971289984
	.long	-930439038
	.long	302178244
	.long	-2139062256
	.long	-2139062144
	.long	-2138537856
	.long	-993490272
	.long	269615839
	.long	-2139062144
	.long	-2139059840
	.long	-1065319296
	.long	-624637747
	.long	-2146430462
	.long	-2139062144
	.long	-2139062135
	.long	-843021694
	.long	47891656
	.long	-2139090926
	.long	-2139062144
	.long	-1971289984
	.long	-930228094
	.long	302178020
	.long	-2139062256
	.long	-2139062144
	.long	-2138537856
	.long	-456618536
	.long	269615838
	.long	-2139062144
	.long	-2139059840
	.long	-1602190208
	.long	-607860502
	.long	-2146430462
	.long	-2139062144
	.long	-2139062135
	.long	-358579582
	.long	47957192
	.long	-2139090926
	.long	-2139062144
	.long	-1971289984
	.long	-929701758
	.long	302178244
	.long	-2139062256
	.long	-2139062144
	.long	-2138537856
	.long	-993487392
	.long	269615839
	.long	-2139062144
	.long	-2139059840
	.long	-394230656
	.long	-624637739
	.long	-2146430462
	.long	-2139062144
	.long	-2139062135
	.long	-706182526
	.long	47891656
	.long	-2139090926
	.long	-2139062144
	.long	-1971289984
	.long	-929896318
	.long	302178020
	.long	-2139062256
	.long	-2139062144
	.long	-2138537856
	.long	-456617240
	.long	269288158
	.long	-2139062144
	.long	-2139062144
	.long	130580608
	.long	-2139090926
	.long	-2088730496
	.long	-2071953280
	.long	-927807360
	.long	117627108
	.long	-2139062256
	.long	302432384
	.long	-2139062256
	.long	-2138865536
	.long	-2105376640
	.long	-456609080
	.long	269615832
	.long	-2139062144
	.long	-2139061376
	.long	-931100544
	.long	-656095054
	.long	-2146431742
	.long	-2139062144
	.long	-2139062144
	.long	302499968
	.long	-2139062256
	.long	-2138865536
	.long	-2138800000
	.long	-1530350176
	.long	268894937
	.long	-2139062144
	.long	269616832
	.long	-2139062144
	.long	-2139061376
	.long	-1602059648
	.long	-643512139
	.long	-2146430462
	.long	-2139062144
	.long	-2139062141
	.long	-1247772536
	.long	47817928
	.long	-2139090931
	.long	-2139062144
	.long	-2139062144
	.long	269420488
	.long	-2139062144
	.long	-2139062144
	.long	-2119139200
	.long	269435008
	.long	-2139062144
	.long	-2139062144
	.long	-2119139200
	.long	268910720
	.long	-2139062144
	.long	269616832
	.long	-2139062144
	.long	-2139061376
	.long	-1870626176
	.long	-813381484
	.long	-2146430462
	.long	-2139062144
	.long	-2139062141
	.long	-1802469240
	.long	47154376
	.long	-2139090929
	.long	-2139062144
	.long	-2139062144
	.long	1082163632
	.long	-2139090929
	.long	-1988067200
	.long	-2139062144
	.long	1082163632
	.long	-2004873201
	.long	-2139062144
	.long	-2139062144
	.long	1082163632
	.long	-2139090926
	.long	-1988067200
	.long	-2071953280
	.long	-928675712
	.long	302176738
	.long	-2139062256
	.long	-2138472320
	.long	-2138931072
	.long	-490166904
	.long	269615833
	.long	-2139062144
	.long	-2139062144
	.long	-1065186688
	.long	-572340242
	.long	-2146430462
	.long	-2139062144
	.long	-2139062144
	.long	-289374072
	.long	48095943
	.long	-2139090926
	.long	-2055175800
	.long	-2071953280
	.long	-927156096
	.long	302176646
	.long	-2004844528
	.long	-2138734463
	.long	-2105376640
	.long	-2033664840
	.long	269615833
	.long	-2121760640
	.long	-2139062144
	.long	-2138928512
	.long	-576403320
	.long	-2146430462
	.long	-2138994560
	.long	-2139062144
	.long	-2004844408
	.long	48080072
	.long	-2139090929
	.long	-1988066680
	.long	-2139062144
	.long	1082163344
	.long	-2004873201
	.long	-2139061624
	.long	-2139062144
	.long	1082163344
	.long	-2139090926
	.long	-1988067200
	.long	-2071953280
	.long	-927995776
	.long	302176738
	.long	-2139062256
	.long	-2138472320
	.long	-2138931072
	.long	-490164248
	.long	269615833
	.long	-2139062144
	.long	-2139062144
	.long	-1065186688
	.long	-572340233
	.long	-2146430462
	.long	-2139062144
	.long	-2139062144
	.long	-138379128
	.long	48095943
	.long	-2139090926
	.long	-2055175800
	.long	-2071953280
	.long	-926893952
	.long	302176646
	.long	-2004844528
	.long	-2138734463
	.long	-2105376640
	.long	-2033663816
	.long	269615833
	.long	-2121760640
	.long	-2139062144
	.long	-796751232
	.long	-576403319
	.long	-2146430462
	.long	-2138994560
	.long	-2139062144
	.long	-1982824312
	.long	48080072
	.long	-2139090929
	.long	-1988066680
	.long	-2139062144
	.long	1082163344
	.long	-2004873201
	.long	-2139061624
	.long	-2139062144
	.long	1082163344
	.long	-2139090926
	.long	-1988067200
	.long	-2071953280
	.long	-925521792
	.long	302177220
	.long	-2139062256
	.long	-2138472320
	.long	-2105376640
	.long	-993471064
	.long	269615835
	.long	-2139062144
	.long	-2139062144
	.long	-1602057600
	.long	-540751734
	.long	-2146430462
	.long	-2139062144
	.long	-2139062144
	.long	-1969192824
	.long	48219336
	.long	-2139090926
	.long	-1988066936
	.long	-2071953280
	.long	-926039936
	.long	302176964
	.long	-2004844528
	.long	-2138472319
	.long	-2105376640
	.long	-993473088
	.long	269615834
	.long	-2121760640
	.long	-2139062144
	.long	-662533504
	.long	-555431795
	.long	-2146430462
	.long	-2138994560
	.long	-2139062144
	.long	-1915191160
	.long	48161992
	.long	-2139090929
	.long	-1988066680
	.long	-2139062144
	.long	1082163344
	.long	-2004873201
	.long	-2139061624
	.long	-2139062144
	.long	1082163344
	.long	-2139090926
	.long	-1988067200
	.long	-2071953280
	.long	-924147584
	.long	302177220
	.long	-2139062256
	.long	-2138472320
	.long	-2105376640
	.long	-993465696
	.long	269615835
	.long	-2139062144
	.long	-2139062144
	.long	-528315776
	.long	-540751723
	.long	-2146430462
	.long	-2139062144
	.long	-2139062144
	.long	-1780449144
	.long	48219336
	.long	-2139090926
	.long	-1988066936
	.long	-2071953280
	.long	-925505408
	.long	302176964
	.long	-2004844528
	.long	-2138472319
	.long	-2105376640
	.long	-993471000
	.long	269615834
	.long	-2121760640
	.long	-2139062144
	.long	-394098048
	.long	-555431790
	.long	-2146430462
	.long	-2138994560
	.long	-2139062144
	.long	-1830256504
	.long	48161992
	.long	-2139090929
	.long	-1988066680
	.long	-2139062144
	.long	1082163344
	.long	-2004873201
	.long	-2139061624
	.long	-2139062144
	.long	1082163344
	.long	-2139090926
	.long	-1988066936
	.long	-2071953280
	.long	-927170432
	.long	302177188
	.long	-2004844528
	.long	-2138472319
	.long	-2105376640
	.long	-1530348416
	.long	269615835
	.long	-2121760640
	.long	-2139062144
	.long	-1333622144
	.long	-542849034
	.long	-2146430462
	.long	-2138994560
	.long	-2139062144
	.long	-156204920
	.long	48211143
	.long	-2139090929
	.long	-2055175544
	.long	-2139062144
	.long	1082163344
	.long	-2004873201
	.long	-2139061624
	.long	-2139062144
	.long	1082163344
	.long	-2139090926
	.long	-1988066936
	.long	-2071953280
	.long	-927170432
	.long	302177188
	.long	-2004844528
	.long	-2138472319
	.long	-2105376640
	.long	-1530348416
	.long	269615835
	.long	-2121760640
	.long	-2139062144
	.long	-1333622144
	.long	-542849034
	.long	-2146430462
	.long	-2138994560
	.long	-2139062144
	.long	-156204920
	.long	48211143
	.long	-2139090929
	.long	-2055175544
	.long	-2139062144
	.long	1082163344
	.long	-2004873201
	.long	-2139061624
	.long	-2139062144
	.long	1082163344
	.long	-2139090929
	.long	-2139062144
	.long	-2139062144
	.long	1082163632
	.long	-2139090929
	.long	-2139062144
	.long	-2139062144
	.long	1082163632
	.long	-2139090929
	.long	-2139062144
	.long	-2139062144
	.long	1082163632
	.long	-2139090929
	.long	-2139062144
	.long	-2139062144
	.long	1082163632
	.long	-2139090929
	.long	-2139062144
	.long	-2139062144
	.long	1082163632
	.long	-2139090929
	.long	-2139062144
	.long	-2139062144
	.long	1082163632
	.long	-2139090929
	.long	-2139062144
	.long	-2139062144
	.long	1082163632
	.long	-2139090929
	.long	-2139062144
	.long	-2139062144
	.long	1082163632
	.long	-2139090929
	.long	-2139062144
	.long	-2139062144
	.long	1082163632
	.long	-2139090929
	.long	-2139062144
	.long	-2139062144
	.long	1082163632
	.long	-2139090929
	.long	-2139062144
	.long	-2139062144
	.long	1082163632
	.long	-2139090929
	.long	-2139062144
	.long	-2139062144
	.long	1082163632
	.long	-2139090929
	.long	-2139062144
	.long	-2139062144
	.long	1082163632
	.long	-2139090929
	.long	-2139062144
	.long	-2139062144
	.long	1082163632
	.long	-2139090929
	.long	-2139062144
	.long	-2139062144
	.long	1082163632
	.long	-2139090929
	.long	-2139062144
	.long	-2139062144
	.long	1082163632
	.long	-2139090929
	.long	-2139062144
	.long	-2139062144
	.long	1082163632
	.long	-2139090929
	.long	-2139062144
	.long	-2139062144
	.long	1082163632
	.long	-2139090931
	.long	-2139062144
	.long	-2139062144
	.long	269617096
	.long	-2121760640
	.long	-2139059840
	.long	-2139061120
	.long	-609957700
	.long	-2146430462
	.long	-2138994560
	.long	-2139062135
	.long	-1132428670
	.long	47949000
	.long	-2139090926
	.long	-2139061880
	.long	-1971289984
	.long	-940134270
	.long	302178212
	.long	-2004844528
	.long	-2139062143
	.long	-2138537856
	.long	-1530399056
	.long	269419231
	.long	-2104983424
	.long	-2139060864
	.long	-2138013568
	.long	269435008
	.long	-2104981376
	.long	-2139062144
	.long	-2138013568
	.long	269631616
	.long	-2121760640
	.long	-2139059840
	.long	-2139061120
	.long	-609957700
	.long	-2146430462
	.long	-2138994560
	.long	-2139062135
	.long	-1132428670
	.long	47949000
	.long	-2139090926
	.long	-2139061880
	.long	-1971289984
	.long	-940134270
	.long	302178212
	.long	-2004844528
	.long	-2139062143
	.long	-2138537856
	.long	-1530399056
	.long	269419231
	.long	-2104983424
	.long	-2139060864
	.long	-2138013568
	.long	269435008
	.long	-2104981376
	.long	-2139062144
	.long	-2138013568
	.long	269435008
	.long	-2139062144
	.long	-2139062144
	.long	-2119139200
	.long	269435008
	.long	-2139062144
	.long	-2139062144
	.long	-2119139200
	.long	269435008
	.long	-2139062144
	.long	-2139062144
	.long	-2119139200
	.long	269435008
	.long	-2139062144
	.long	-2139062144
	.long	-2119139200
	.long	269435008
	.long	-2139062144
	.long	-2139062144
	.long	-2119139200
	.long	269435008
	.long	-2139062144
	.long	-2139062144
	.long	-2119139200
	.long	269435008
	.long	-2139062144
	.long	-2139062144
	.long	-2119139200
	.long	269435008
	.long	-2139062144
	.long	-2139062144
	.long	-2119139200
	.long	269631616
	.long	-2139062144
	.long	-2139061376
	.long	-1736407936
	.long	-538654323
	.long	-2146430462
	.long	-2139062144
	.long	-2139062141
	.long	-1919384958
	.long	48227529
	.long	-2139090926
	.long	-2088730496
	.long	-2004844416
	.long	-913467264
	.long	251846628
	.long	-2139062256
	.long	-2139062144
	.long	-1333755776
	.long	255885441
	.long	-2139062256
	.long	-2139062144
	.long	-1333755776
	.long	255885441
	.long	-2139062256
	.long	-2139062144
	.long	-1333755776
	.long	255885441
	.long	-2139062256
	.long	-2139062144
	.long	-1333755776
	.long	255885441
	.long	-2139062256
	.long	-2139062144
	.long	-1333755776
	.long	255885441
	.long	-2139062256
	.long	-2139062144
	.long	-1333755776
	.long	255885441
	.long	-2139062256
	.long	-2139062144
	.long	-1333755776
	.long	255885441
	.long	-2139062256
	.long	-2139062144
	.long	-1333755776
	.long	255885441
	.long	-2139062256
	.long	-2139062144
	.long	-1333755776
	.long	255885441
	.long	-2139062256
	.long	-2139062144
	.long	-1333755776
	.long	222331009
	.long	-2139062256
	.long	-2139062144
	.long	-931102592
	.long	-2146430457
	.long	-2138994560
	.long	-2139062135
	.long	-1132429180
	.long	47949000
	.long	-2139090926
	.long	-1988066936
	.long	-2105507712
	.long	-927170430
	.long	302177188
	.long	-2004844528
	.long	-2139062143
	.long	-2104852352
	.long	-1530399056
	.long	269615839
	.long	-2121760640
	.long	-2139062144
	.long	-1333753728
	.long	-542849034
	.long	-2146431230
	.long	-2138929024
	.long	-2139062139
	.long	-2139058048
	.long	-2146431168
	.long	-2138929016
	.long	-2139062144
	.long	-2139058048
	.long	-2146430400
	.long	-2138994560
	.long	-2139062135
	.long	-1132429180
	.long	47949000
	.long	-2139090926
	.long	-1988066936
	.long	-2105507712
	.long	-927170430
	.long	302177188
	.long	-2004844528
	.long	-2139062143
	.long	-2104852352
	.long	-1530399056
	.long	269615839
	.long	-2121760640
	.long	-2139062144
	.long	-1333753728
	.long	-542849034
	.long	-2146431230
	.long	-2138929024
	.long	-2139062139
	.long	-2139058048
	.long	-2146431168
	.long	-2138929016
	.long	-2139062144
	.long	-2139058048
	.long	-2146431168
	.long	-2139062144
	.long	-2139062144
	.long	-2138984320
	.long	-2146431168
	.long	-2139062144
	.long	-2139062144
	.long	-2138984320
	.long	-2146431168
	.long	-2139062144
	.long	-2139062144
	.long	-2138984320
	.long	-2146431168
	.long	-2139062144
	.long	-2139062144
	.long	-2138984320
	.long	-2146431168
	.long	-2139062144
	.long	-2139062144
	.long	-2138984320
	.long	-2146431168
	.long	-2139062144
	.long	-2139062144
	.long	-2138984320
	.long	-2146431168
	.long	-2139062144
	.long	-2139062144
	.long	-2138984320
	.long	-2146431168
	.long	-2139062144
	.long	-2139062144
	.long	-2138984320
	.long	-2146430400
	.long	-2139062144
	.long	-2139062141
	.long	-1919385468
	.long	48227529
	.long	-2139090926
	.long	-2088730496
	.long	-2105507712
	.long	-913467262
	.long	302178276
	.long	-2139062256
	.long	-2138865536
	.long	-2138537856
	.long	-456553064
	.word	735
	.section .note.GNU-stack, ""
// -- Begin DWARF2 SEGMENT .debug_info
	.section .debug_info
.debug_info_seg:
	.align 1
.debug_info_seg:
	.4byte 0x00001c91
	.2byte 0x0003
	.4byte .debug_abbrev_seg
	.byte 0x08
//	DW_TAG_compile_unit:
	.byte 0x01
//	DW_AT_comp_dir:
	.4byte .debug_str
//	DW_AT_name:
	.4byte .debug_str+0x4d
//	DW_AT_producer:
	.4byte .debug_str+0x98
	.4byte .debug_str+0x104
//	DW_AT_language:
	.byte 0x01
//	DW_AT_use_UTF8:
	.byte 0x01
//	DW_AT_low_pc:
	.8byte 0x0000000000000000
//	DW_AT_ranges:
	.4byte .debug_ranges_seg+0x8b0
//	DW_AT_stmt_list:
	.4byte .debug_line_seg
//	DW_TAG_subprogram:
	.byte 0x02
//	DW_AT_decl_line:
	.byte 0x39
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_prototyped:
	.byte 0x01
//	DW_AT_name:
	.4byte .debug_str+0x4d0
	.4byte .debug_str+0x4d0
//	DW_AT_low_pc:
	.8byte ..L3
//	DW_AT_high_pc:
	.8byte ..LNgrad_c2l_.2743
//	DW_AT_external:
	.byte 0x01
//	DW_TAG_formal_parameter:
	.byte 0x03
//	DW_AT_decl_line:
	.byte 0x39
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x000003f6
//	DW_AT_name:
	.4byte .debug_str+0x4da
//	DW_AT_location:
	.2byte 0x5501
//	DW_TAG_formal_parameter:
	.byte 0x03
//	DW_AT_decl_line:
	.byte 0x39
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x000003f6
//	DW_AT_name:
	.4byte .debug_str+0x4df
//	DW_AT_location:
	.2byte 0x5401
//	DW_TAG_formal_parameter:
	.byte 0x04
//	DW_AT_decl_line:
	.byte 0x39
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.4byte 0x006e6970
//	DW_AT_location:
	.2byte 0x5101
//	DW_TAG_formal_parameter:
	.byte 0x04
//	DW_AT_decl_line:
	.byte 0x39
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.2byte 0x7864
	.byte 0x00
//	DW_AT_location:
	.2byte 0x5201
//	DW_TAG_formal_parameter:
	.byte 0x04
//	DW_AT_decl_line:
	.byte 0x39
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.2byte 0x7964
	.byte 0x00
//	DW_AT_location:
	.2byte 0x5801
//	DW_TAG_formal_parameter:
	.byte 0x03
//	DW_AT_decl_line:
	.byte 0x39
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.4byte .debug_str+0x4eb
//	DW_AT_location:
	.2byte 0x5901
//	DW_TAG_formal_parameter:
	.byte 0x03
//	DW_AT_decl_line:
	.byte 0x3a
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.4byte .debug_str+0x4f0
//	DW_AT_location:
	.2byte 0x7602
	.byte 0x10
//	DW_TAG_formal_parameter:
	.byte 0x03
//	DW_AT_decl_line:
	.byte 0x3a
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.4byte .debug_str+0x4f7
//	DW_AT_location:
	.2byte 0x7602
	.byte 0x18
//	DW_TAG_formal_parameter:
	.byte 0x03
//	DW_AT_decl_line:
	.byte 0x3a
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.4byte .debug_str+0x4fe
//	DW_AT_location:
	.2byte 0x7602
	.byte 0x20
//	DW_TAG_formal_parameter:
	.byte 0x03
//	DW_AT_decl_line:
	.byte 0x3a
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.4byte .debug_str+0x505
//	DW_AT_location:
	.2byte 0x7602
	.byte 0x28
//	DW_TAG_formal_parameter:
	.byte 0x03
//	DW_AT_decl_line:
	.byte 0x3b
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.4byte .debug_str+0x50c
//	DW_AT_location:
	.2byte 0x7602
	.byte 0x30
//	DW_TAG_formal_parameter:
	.byte 0x03
//	DW_AT_decl_line:
	.byte 0x3b
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.4byte .debug_str+0x511
//	DW_AT_location:
	.2byte 0x7602
	.byte 0x38
//	DW_TAG_formal_parameter:
	.byte 0x03
//	DW_AT_decl_line:
	.byte 0x3b
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.4byte .debug_str+0x516
//	DW_AT_location:
	.4byte 0x00c07603
//	DW_TAG_formal_parameter:
	.byte 0x03
//	DW_AT_decl_line:
	.byte 0x3b
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.4byte .debug_str+0x51b
//	DW_AT_location:
	.4byte 0x00c87603
//	DW_TAG_formal_parameter:
	.byte 0x03
//	DW_AT_decl_line:
	.byte 0x3c
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000418
//	DW_AT_name:
	.4byte .debug_str+0x520
//	DW_AT_location:
	.4byte 0x00d07603
//	DW_TAG_formal_parameter:
	.byte 0x03
//	DW_AT_decl_line:
	.byte 0x3c
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000418
//	DW_AT_name:
	.4byte .debug_str+0x527
//	DW_AT_location:
	.4byte 0x00d87603
//	DW_TAG_formal_parameter:
	.byte 0x03
//	DW_AT_decl_line:
	.byte 0x3c
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x000003f6
//	DW_AT_name:
	.4byte .debug_str+0x52e
//	DW_AT_location:
	.4byte 0x00e07603
//	DW_TAG_formal_parameter:
	.byte 0x03
//	DW_AT_decl_line:
	.byte 0x3c
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x000003f6
//	DW_AT_name:
	.4byte .debug_str+0x53b
//	DW_AT_location:
	.4byte 0x00e87603
//	DW_TAG_formal_parameter:
	.byte 0x03
//	DW_AT_decl_line:
	.byte 0x3d
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x000003f6
//	DW_AT_name:
	.4byte .debug_str+0x548
//	DW_AT_location:
	.4byte 0x00f07603
//	DW_TAG_formal_parameter:
	.byte 0x03
//	DW_AT_decl_line:
	.byte 0x3d
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x000003f6
//	DW_AT_name:
	.4byte .debug_str+0x556
//	DW_AT_location:
	.4byte 0x00f87603
//	DW_TAG_inlined_subroutine:
	.byte 0x05
//	DW_AT_ranges:
	.4byte .debug_ranges_seg
//	DW_AT_entry_pc:
	.8byte ..LN10
//	DW_AT_abstract_origin:
	.4byte 0x0000041d
//	DW_AT_call_line:
	.byte 0x3f
//	DW_AT_call_column:
	.byte 0x03
//	DW_AT_call_file:
	.byte 0x01
//	DW_TAG_formal_parameter:
	.byte 0x06
//	DW_AT_decl_line:
	.byte 0x43
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x000003f6
//	DW_AT_name:
	.4byte .debug_str+0x4da
//	DW_TAG_formal_parameter:
	.byte 0x06
//	DW_AT_decl_line:
	.byte 0x43
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x000003f6
//	DW_AT_name:
	.4byte .debug_str+0x4df
//	DW_TAG_formal_parameter:
	.byte 0x07
//	DW_AT_decl_line:
	.byte 0x43
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.4byte 0x006e6970
//	DW_TAG_formal_parameter:
	.byte 0x07
//	DW_AT_decl_line:
	.byte 0x43
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.2byte 0x7864
	.byte 0x00
//	DW_TAG_formal_parameter:
	.byte 0x07
//	DW_AT_decl_line:
	.byte 0x43
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.2byte 0x7964
	.byte 0x00
//	DW_TAG_formal_parameter:
	.byte 0x06
//	DW_AT_decl_line:
	.byte 0x43
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.4byte .debug_str+0x4eb
//	DW_TAG_formal_parameter:
	.byte 0x06
//	DW_AT_decl_line:
	.byte 0x44
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.4byte .debug_str+0x4f0
//	DW_TAG_formal_parameter:
	.byte 0x06
//	DW_AT_decl_line:
	.byte 0x44
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.4byte .debug_str+0x4f7
//	DW_TAG_formal_parameter:
	.byte 0x06
//	DW_AT_decl_line:
	.byte 0x44
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.4byte .debug_str+0x4fe
//	DW_TAG_formal_parameter:
	.byte 0x06
//	DW_AT_decl_line:
	.byte 0x44
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.4byte .debug_str+0x505
//	DW_TAG_formal_parameter:
	.byte 0x06
//	DW_AT_decl_line:
	.byte 0x45
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.4byte .debug_str+0x50c
//	DW_TAG_formal_parameter:
	.byte 0x06
//	DW_AT_decl_line:
	.byte 0x45
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.4byte .debug_str+0x511
//	DW_TAG_formal_parameter:
	.byte 0x06
//	DW_AT_decl_line:
	.byte 0x45
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.4byte .debug_str+0x516
//	DW_TAG_formal_parameter:
	.byte 0x06
//	DW_AT_decl_line:
	.byte 0x45
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.4byte .debug_str+0x51b
//	DW_TAG_formal_parameter:
	.byte 0x06
//	DW_AT_decl_line:
	.byte 0x46
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000418
//	DW_AT_name:
	.4byte .debug_str+0x520
//	DW_TAG_formal_parameter:
	.byte 0x06
//	DW_AT_decl_line:
	.byte 0x46
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000418
//	DW_AT_name:
	.4byte .debug_str+0x527
//	DW_TAG_formal_parameter:
	.byte 0x06
//	DW_AT_decl_line:
	.byte 0x46
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x000003f6
//	DW_AT_name:
	.4byte .debug_str+0x52e
//	DW_TAG_formal_parameter:
	.byte 0x06
//	DW_AT_decl_line:
	.byte 0x46
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x000003f6
//	DW_AT_name:
	.4byte .debug_str+0x53b
//	DW_TAG_formal_parameter:
	.byte 0x06
//	DW_AT_decl_line:
	.byte 0x47
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x000003f6
//	DW_AT_name:
	.4byte .debug_str+0x548
//	DW_TAG_formal_parameter:
	.byte 0x06
//	DW_AT_decl_line:
	.byte 0x47
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x000003f6
//	DW_AT_name:
	.4byte .debug_str+0x556
//	DW_TAG_variable:
	.byte 0x08
//	DW_AT_decl_line:
	.byte 0x4a
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x6270
	.byte 0x00
//	DW_AT_type:
	.4byte 0x00000418
//	DW_TAG_variable:
	.byte 0x08
//	DW_AT_decl_line:
	.byte 0x4a
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.4byte 0x00786470
//	DW_AT_type:
	.4byte 0x00000418
//	DW_TAG_variable:
	.byte 0x08
//	DW_AT_decl_line:
	.byte 0x4a
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.4byte 0x00796470
//	DW_AT_type:
	.4byte 0x00000418
//	DW_TAG_variable:
	.byte 0x09
//	DW_AT_decl_line:
	.byte 0x4a
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.4byte .debug_str+0x580
//	DW_AT_type:
	.4byte 0x00000418
//	DW_TAG_variable:
	.byte 0x0a
//	DW_AT_decl_line:
	.byte 0x4b
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x786e
	.byte 0x00
//	DW_AT_type:
	.4byte 0x00000400
//	DW_AT_location:
	.2byte 0x5f01
//	DW_TAG_variable:
	.byte 0x08
//	DW_AT_decl_line:
	.byte 0x4b
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x796e
	.byte 0x00
//	DW_AT_type:
	.4byte 0x00000400
//	DW_TAG_variable:
	.byte 0x08
//	DW_AT_decl_line:
	.byte 0x4b
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.4byte 0x0070786e
//	DW_AT_type:
	.4byte 0x00000400
//	DW_TAG_variable:
	.byte 0x08
//	DW_AT_decl_line:
	.byte 0x4b
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.4byte 0x0070796e
//	DW_AT_type:
	.4byte 0x00000400
//	DW_TAG_variable:
	.byte 0x08
//	DW_AT_decl_line:
	.byte 0x4b
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x0069
//	DW_AT_type:
	.4byte 0x00000400
//	DW_TAG_variable:
	.byte 0x08
//	DW_AT_decl_line:
	.byte 0x4b
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x006a
//	DW_AT_type:
	.4byte 0x00000400
//	DW_TAG_variable:
	.byte 0x08
//	DW_AT_decl_line:
	.byte 0x4b
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x306d
	.byte 0x00
//	DW_AT_type:
	.4byte 0x00000400
//	DW_TAG_variable:
	.byte 0x08
//	DW_AT_decl_line:
	.byte 0x4b
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x316d
	.byte 0x00
//	DW_AT_type:
	.4byte 0x00000400
//	DW_TAG_variable:
	.byte 0x08
//	DW_AT_decl_line:
	.byte 0x4b
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x326d
	.byte 0x00
//	DW_AT_type:
	.4byte 0x00000400
//	DW_TAG_variable:
	.byte 0x08
//	DW_AT_decl_line:
	.byte 0x4b
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x006e
//	DW_AT_type:
	.4byte 0x00000400
//	DW_TAG_inlined_subroutine:
	.byte 0x05
//	DW_AT_ranges:
	.4byte .debug_ranges_seg+0x90
//	DW_AT_entry_pc:
	.8byte ..LN60
//	DW_AT_abstract_origin:
	.4byte 0x00000777
//	DW_AT_call_line:
	.byte 0x55
//	DW_AT_call_column:
	.byte 0x03
//	DW_AT_call_file:
	.byte 0x01
//	DW_TAG_formal_parameter:
	.byte 0x07
//	DW_AT_decl_line:
	.byte 0x85
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000400
//	DW_AT_name:
	.2byte 0x786e
	.byte 0x00
//	DW_TAG_formal_parameter:
	.byte 0x07
//	DW_AT_decl_line:
	.byte 0x85
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000400
//	DW_AT_name:
	.2byte 0x796e
	.byte 0x00
//	DW_TAG_formal_parameter:
	.byte 0x07
//	DW_AT_decl_line:
	.byte 0x85
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.4byte 0x006e6971
//	DW_TAG_formal_parameter:
	.byte 0x06
//	DW_AT_decl_line:
	.byte 0x85
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.4byte .debug_str+0x4f0
//	DW_TAG_formal_parameter:
	.byte 0x06
//	DW_AT_decl_line:
	.byte 0x85
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.4byte .debug_str+0x4f7
//	DW_TAG_formal_parameter:
	.byte 0x06
//	DW_AT_decl_line:
	.byte 0x86
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.4byte .debug_str+0x4fe
//	DW_TAG_formal_parameter:
	.byte 0x06
//	DW_AT_decl_line:
	.byte 0x86
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.4byte .debug_str+0x505
//	DW_TAG_formal_parameter:
	.byte 0x06
//	DW_AT_decl_line:
	.byte 0x86
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000418
//	DW_AT_name:
	.4byte .debug_str+0x58f
//	DW_TAG_formal_parameter:
	.byte 0x03
//	DW_AT_decl_line:
	.byte 0x87
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000400
//	DW_AT_name:
	.4byte .debug_str+0x52e
//	DW_AT_location:
	.2byte 0x5301
//	DW_TAG_formal_parameter:
	.byte 0x03
//	DW_AT_decl_line:
	.byte 0x87
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000400
//	DW_AT_name:
	.4byte .debug_str+0x53b
//	DW_AT_location:
	.2byte 0x5d01
//	DW_TAG_formal_parameter:
	.byte 0x03
//	DW_AT_decl_line:
	.byte 0x87
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000400
//	DW_AT_name:
	.4byte .debug_str+0x548
//	DW_AT_location:
	.2byte 0x5101
//	DW_TAG_formal_parameter:
	.byte 0x03
//	DW_AT_decl_line:
	.byte 0x87
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000400
//	DW_AT_name:
	.4byte .debug_str+0x556
//	DW_AT_location:
	.2byte 0x5401
//	DW_TAG_variable:
	.byte 0x08
//	DW_AT_decl_line:
	.byte 0x89
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.4byte 0x0070786e
//	DW_AT_type:
	.4byte 0x00000400
//	DW_TAG_variable:
	.byte 0x08
//	DW_AT_decl_line:
	.byte 0x89
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.4byte 0x0070796e
//	DW_AT_type:
	.4byte 0x00000400
//	DW_TAG_variable:
	.byte 0x08
//	DW_AT_decl_line:
	.byte 0x89
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x0069
//	DW_AT_type:
	.4byte 0x00000400
//	DW_TAG_variable:
	.byte 0x08
//	DW_AT_decl_line:
	.byte 0x89
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x006a
//	DW_AT_type:
	.4byte 0x00000400
//	DW_TAG_variable:
	.byte 0x09
//	DW_AT_decl_line:
	.byte 0x8a
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.4byte .debug_str+0x594
//	DW_AT_type:
	.4byte 0x00000400
//	DW_TAG_variable:
	.byte 0x09
//	DW_AT_decl_line:
	.byte 0x8a
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.4byte .debug_str+0x59b
//	DW_AT_type:
	.4byte 0x00000400
//	DW_TAG_variable:
	.byte 0x0b
//	DW_AT_decl_line:
	.byte 0x8a
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.4byte .debug_str+0x5a0
//	DW_AT_type:
	.4byte 0x00000400
//	DW_AT_location:
	.2byte 0x5101
//	DW_TAG_variable:
	.byte 0x09
//	DW_AT_decl_line:
	.byte 0x8a
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.4byte .debug_str+0x5a7
//	DW_AT_type:
	.4byte 0x00000400
//	DW_TAG_variable:
	.byte 0x08
//	DW_AT_decl_line:
	.byte 0x8b
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x3171
	.byte 0x00
//	DW_AT_type:
	.4byte 0x00000418
//	DW_TAG_variable:
	.byte 0x08
//	DW_AT_decl_line:
	.byte 0x8b
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x3271
	.byte 0x00
//	DW_AT_type:
	.4byte 0x00000418
//	DW_TAG_variable:
	.byte 0x08
//	DW_AT_decl_line:
	.byte 0x8c
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x3372
	.byte 0x00
//	DW_AT_type:
	.4byte 0x0000040c
	.byte 0x00
	.byte 0x00
	.byte 0x00
//	DW_TAG_pointer_type:
	.byte 0x0c
//	DW_AT_type:
	.4byte 0x000003fb
//	DW_TAG_const_type:
	.byte 0x0d
//	DW_AT_type:
	.4byte 0x00000400
//	DW_TAG_base_type:
	.byte 0x0e
//	DW_AT_byte_size:
	.byte 0x04
//	DW_AT_encoding:
	.byte 0x05
//	DW_AT_name:
	.4byte 0x00746e69
//	DW_TAG_pointer_type:
	.byte 0x0c
//	DW_AT_type:
	.4byte 0x0000040c
//	DW_TAG_const_type:
	.byte 0x0d
//	DW_AT_type:
	.4byte 0x00000411
//	DW_TAG_base_type:
	.byte 0x0f
//	DW_AT_byte_size:
	.byte 0x08
//	DW_AT_encoding:
	.byte 0x04
//	DW_AT_name:
	.4byte .debug_str+0x4e4
//	DW_TAG_pointer_type:
	.byte 0x0c
//	DW_AT_type:
	.4byte 0x00000411
//	DW_TAG_subprogram:
	.byte 0x10
//	DW_AT_decl_line:
	.byte 0x43
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_declaration:
	.byte 0x01
//	DW_AT_prototyped:
	.byte 0x01
//	DW_AT_name:
	.4byte .debug_str+0x564
	.4byte .debug_str+0x564
//	DW_AT_external:
	.byte 0x01
//	DW_AT_inline:
	.byte 0x01
//	DW_TAG_formal_parameter:
	.byte 0x11
//	DW_AT_type:
	.4byte 0x000003f6
//	DW_TAG_formal_parameter:
	.byte 0x11
//	DW_AT_type:
	.4byte 0x000003f6
//	DW_TAG_formal_parameter:
	.byte 0x11
//	DW_AT_type:
	.4byte 0x00000407
//	DW_TAG_formal_parameter:
	.byte 0x11
//	DW_AT_type:
	.4byte 0x00000407
//	DW_TAG_formal_parameter:
	.byte 0x11
//	DW_AT_type:
	.4byte 0x00000407
//	DW_TAG_formal_parameter:
	.byte 0x11
//	DW_AT_type:
	.4byte 0x00000407
//	DW_TAG_formal_parameter:
	.byte 0x11
//	DW_AT_type:
	.4byte 0x00000407
//	DW_TAG_formal_parameter:
	.byte 0x11
//	DW_AT_type:
	.4byte 0x00000407
//	DW_TAG_formal_parameter:
	.byte 0x11
//	DW_AT_type:
	.4byte 0x00000407
//	DW_TAG_formal_parameter:
	.byte 0x11
//	DW_AT_type:
	.4byte 0x00000407
//	DW_TAG_formal_parameter:
	.byte 0x11
//	DW_AT_type:
	.4byte 0x00000407
//	DW_TAG_formal_parameter:
	.byte 0x11
//	DW_AT_type:
	.4byte 0x00000407
//	DW_TAG_formal_parameter:
	.byte 0x11
//	DW_AT_type:
	.4byte 0x00000407
//	DW_TAG_formal_parameter:
	.byte 0x11
//	DW_AT_type:
	.4byte 0x00000407
//	DW_TAG_formal_parameter:
	.byte 0x11
//	DW_AT_type:
	.4byte 0x00000418
//	DW_TAG_formal_parameter:
	.byte 0x11
//	DW_AT_type:
	.4byte 0x00000418
//	DW_TAG_formal_parameter:
	.byte 0x11
//	DW_AT_type:
	.4byte 0x000003f6
//	DW_TAG_formal_parameter:
	.byte 0x11
//	DW_AT_type:
	.4byte 0x000003f6
//	DW_TAG_formal_parameter:
	.byte 0x11
//	DW_AT_type:
	.4byte 0x000003f6
//	DW_TAG_formal_parameter:
	.byte 0x11
//	DW_AT_type:
	.4byte 0x000003f6
	.byte 0x00
//	DW_TAG_base_type:
	.byte 0x0f
//	DW_AT_byte_size:
	.byte 0x08
//	DW_AT_encoding:
	.byte 0x07
//	DW_AT_name:
	.4byte .debug_str+0x56d
//	DW_TAG_pointer_type:
	.byte 0x0c
//	DW_AT_type:
	.4byte 0x0000049d
//	DW_TAG_base_type:
	.byte 0x0f
//	DW_AT_byte_size:
	.byte 0x00
//	DW_AT_encoding:
	.byte 0x05
//	DW_AT_name:
	.4byte .debug_str+0x57b
//	DW_TAG_subprogram:
	.byte 0x12
//	DW_AT_decl_line:
	.byte 0x43
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_abstract_origin:
	.4byte 0x0000041d
//	DW_AT_low_pc:
	.8byte ..L86
//	DW_AT_high_pc:
	.8byte ..LNgrad_c2l.5487
//	DW_TAG_formal_parameter:
	.byte 0x03
//	DW_AT_decl_line:
	.byte 0x43
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x000003f6
//	DW_AT_name:
	.4byte .debug_str+0x4da
//	DW_AT_location:
	.2byte 0x5501
//	DW_TAG_formal_parameter:
	.byte 0x03
//	DW_AT_decl_line:
	.byte 0x43
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x000003f6
//	DW_AT_name:
	.4byte .debug_str+0x4df
//	DW_AT_location:
	.2byte 0x5401
//	DW_TAG_formal_parameter:
	.byte 0x04
//	DW_AT_decl_line:
	.byte 0x43
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.4byte 0x006e6970
//	DW_AT_location:
	.2byte 0x5101
//	DW_TAG_formal_parameter:
	.byte 0x04
//	DW_AT_decl_line:
	.byte 0x43
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.2byte 0x7864
	.byte 0x00
//	DW_AT_location:
	.2byte 0x5201
//	DW_TAG_formal_parameter:
	.byte 0x04
//	DW_AT_decl_line:
	.byte 0x43
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.2byte 0x7964
	.byte 0x00
//	DW_AT_location:
	.2byte 0x5801
//	DW_TAG_formal_parameter:
	.byte 0x03
//	DW_AT_decl_line:
	.byte 0x43
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.4byte .debug_str+0x4eb
//	DW_AT_location:
	.2byte 0x5901
//	DW_TAG_formal_parameter:
	.byte 0x03
//	DW_AT_decl_line:
	.byte 0x44
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.4byte .debug_str+0x4f0
//	DW_AT_location:
	.2byte 0x7602
	.byte 0x10
//	DW_TAG_formal_parameter:
	.byte 0x03
//	DW_AT_decl_line:
	.byte 0x44
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.4byte .debug_str+0x4f7
//	DW_AT_location:
	.2byte 0x7602
	.byte 0x18
//	DW_TAG_formal_parameter:
	.byte 0x03
//	DW_AT_decl_line:
	.byte 0x44
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.4byte .debug_str+0x4fe
//	DW_AT_location:
	.2byte 0x7602
	.byte 0x20
//	DW_TAG_formal_parameter:
	.byte 0x03
//	DW_AT_decl_line:
	.byte 0x44
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.4byte .debug_str+0x505
//	DW_AT_location:
	.2byte 0x7602
	.byte 0x28
//	DW_TAG_formal_parameter:
	.byte 0x03
//	DW_AT_decl_line:
	.byte 0x45
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.4byte .debug_str+0x50c
//	DW_AT_location:
	.2byte 0x7602
	.byte 0x30
//	DW_TAG_formal_parameter:
	.byte 0x03
//	DW_AT_decl_line:
	.byte 0x45
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.4byte .debug_str+0x511
//	DW_AT_location:
	.2byte 0x7602
	.byte 0x38
//	DW_TAG_formal_parameter:
	.byte 0x03
//	DW_AT_decl_line:
	.byte 0x45
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.4byte .debug_str+0x516
//	DW_AT_location:
	.4byte 0x00c07603
//	DW_TAG_formal_parameter:
	.byte 0x03
//	DW_AT_decl_line:
	.byte 0x45
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.4byte .debug_str+0x51b
//	DW_AT_location:
	.4byte 0x00c87603
//	DW_TAG_formal_parameter:
	.byte 0x03
//	DW_AT_decl_line:
	.byte 0x46
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000418
//	DW_AT_name:
	.4byte .debug_str+0x520
//	DW_AT_location:
	.4byte 0x00d07603
//	DW_TAG_formal_parameter:
	.byte 0x03
//	DW_AT_decl_line:
	.byte 0x46
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000418
//	DW_AT_name:
	.4byte .debug_str+0x527
//	DW_AT_location:
	.4byte 0x00d87603
//	DW_TAG_formal_parameter:
	.byte 0x03
//	DW_AT_decl_line:
	.byte 0x46
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x000003f6
//	DW_AT_name:
	.4byte .debug_str+0x52e
//	DW_AT_location:
	.4byte 0x00e07603
//	DW_TAG_formal_parameter:
	.byte 0x03
//	DW_AT_decl_line:
	.byte 0x46
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x000003f6
//	DW_AT_name:
	.4byte .debug_str+0x53b
//	DW_AT_location:
	.4byte 0x00e87603
//	DW_TAG_formal_parameter:
	.byte 0x03
//	DW_AT_decl_line:
	.byte 0x47
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x000003f6
//	DW_AT_name:
	.4byte .debug_str+0x548
//	DW_AT_location:
	.4byte 0x00f07603
//	DW_TAG_formal_parameter:
	.byte 0x03
//	DW_AT_decl_line:
	.byte 0x47
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x000003f6
//	DW_AT_name:
	.4byte .debug_str+0x556
//	DW_AT_location:
	.4byte 0x00f87603
//	DW_TAG_variable:
	.byte 0x08
//	DW_AT_decl_line:
	.byte 0x4a
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x6270
	.byte 0x00
//	DW_AT_type:
	.4byte 0x00000418
//	DW_TAG_variable:
	.byte 0x08
//	DW_AT_decl_line:
	.byte 0x4a
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.4byte 0x00786470
//	DW_AT_type:
	.4byte 0x00000418
//	DW_TAG_variable:
	.byte 0x08
//	DW_AT_decl_line:
	.byte 0x4a
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.4byte 0x00796470
//	DW_AT_type:
	.4byte 0x00000418
//	DW_TAG_variable:
	.byte 0x09
//	DW_AT_decl_line:
	.byte 0x4a
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.4byte .debug_str+0x580
//	DW_AT_type:
	.4byte 0x00000418
//	DW_TAG_variable:
	.byte 0x0a
//	DW_AT_decl_line:
	.byte 0x4b
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x786e
	.byte 0x00
//	DW_AT_type:
	.4byte 0x00000400
//	DW_AT_location:
	.2byte 0x5f01
//	DW_TAG_variable:
	.byte 0x08
//	DW_AT_decl_line:
	.byte 0x4b
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x796e
	.byte 0x00
//	DW_AT_type:
	.4byte 0x00000400
//	DW_TAG_variable:
	.byte 0x08
//	DW_AT_decl_line:
	.byte 0x4b
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.4byte 0x0070786e
//	DW_AT_type:
	.4byte 0x00000400
//	DW_TAG_variable:
	.byte 0x08
//	DW_AT_decl_line:
	.byte 0x4b
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.4byte 0x0070796e
//	DW_AT_type:
	.4byte 0x00000400
//	DW_TAG_variable:
	.byte 0x08
//	DW_AT_decl_line:
	.byte 0x4b
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x0069
//	DW_AT_type:
	.4byte 0x00000400
//	DW_TAG_variable:
	.byte 0x08
//	DW_AT_decl_line:
	.byte 0x4b
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x006a
//	DW_AT_type:
	.4byte 0x00000400
//	DW_TAG_variable:
	.byte 0x08
//	DW_AT_decl_line:
	.byte 0x4b
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x306d
	.byte 0x00
//	DW_AT_type:
	.4byte 0x00000400
//	DW_TAG_variable:
	.byte 0x08
//	DW_AT_decl_line:
	.byte 0x4b
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x316d
	.byte 0x00
//	DW_AT_type:
	.4byte 0x00000400
//	DW_TAG_variable:
	.byte 0x08
//	DW_AT_decl_line:
	.byte 0x4b
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x326d
	.byte 0x00
//	DW_AT_type:
	.4byte 0x00000400
//	DW_TAG_variable:
	.byte 0x08
//	DW_AT_decl_line:
	.byte 0x4b
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x006e
//	DW_AT_type:
	.4byte 0x00000400
//	DW_TAG_inlined_subroutine:
	.byte 0x05
//	DW_AT_ranges:
	.4byte .debug_ranges_seg+0x100
//	DW_AT_entry_pc:
	.8byte ..LN2804
//	DW_AT_abstract_origin:
	.4byte 0x00000777
//	DW_AT_call_line:
	.byte 0x55
//	DW_AT_call_column:
	.byte 0x03
//	DW_AT_call_file:
	.byte 0x01
//	DW_TAG_formal_parameter:
	.byte 0x07
//	DW_AT_decl_line:
	.byte 0x85
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000400
//	DW_AT_name:
	.2byte 0x786e
	.byte 0x00
//	DW_TAG_formal_parameter:
	.byte 0x07
//	DW_AT_decl_line:
	.byte 0x85
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000400
//	DW_AT_name:
	.2byte 0x796e
	.byte 0x00
//	DW_TAG_formal_parameter:
	.byte 0x07
//	DW_AT_decl_line:
	.byte 0x85
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.4byte 0x006e6971
//	DW_TAG_formal_parameter:
	.byte 0x06
//	DW_AT_decl_line:
	.byte 0x85
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.4byte .debug_str+0x4f0
//	DW_TAG_formal_parameter:
	.byte 0x06
//	DW_AT_decl_line:
	.byte 0x85
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.4byte .debug_str+0x4f7
//	DW_TAG_formal_parameter:
	.byte 0x06
//	DW_AT_decl_line:
	.byte 0x86
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.4byte .debug_str+0x4fe
//	DW_TAG_formal_parameter:
	.byte 0x06
//	DW_AT_decl_line:
	.byte 0x86
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.4byte .debug_str+0x505
//	DW_TAG_formal_parameter:
	.byte 0x06
//	DW_AT_decl_line:
	.byte 0x86
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000418
//	DW_AT_name:
	.4byte .debug_str+0x58f
//	DW_TAG_formal_parameter:
	.byte 0x03
//	DW_AT_decl_line:
	.byte 0x87
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000400
//	DW_AT_name:
	.4byte .debug_str+0x52e
//	DW_AT_location:
	.2byte 0x5301
//	DW_TAG_formal_parameter:
	.byte 0x03
//	DW_AT_decl_line:
	.byte 0x87
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000400
//	DW_AT_name:
	.4byte .debug_str+0x53b
//	DW_AT_location:
	.2byte 0x5d01
//	DW_TAG_formal_parameter:
	.byte 0x03
//	DW_AT_decl_line:
	.byte 0x87
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000400
//	DW_AT_name:
	.4byte .debug_str+0x548
//	DW_AT_location:
	.2byte 0x5101
//	DW_TAG_formal_parameter:
	.byte 0x03
//	DW_AT_decl_line:
	.byte 0x87
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000400
//	DW_AT_name:
	.4byte .debug_str+0x556
//	DW_AT_location:
	.2byte 0x5401
//	DW_TAG_variable:
	.byte 0x08
//	DW_AT_decl_line:
	.byte 0x89
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.4byte 0x0070786e
//	DW_AT_type:
	.4byte 0x00000400
//	DW_TAG_variable:
	.byte 0x08
//	DW_AT_decl_line:
	.byte 0x89
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.4byte 0x0070796e
//	DW_AT_type:
	.4byte 0x00000400
//	DW_TAG_variable:
	.byte 0x08
//	DW_AT_decl_line:
	.byte 0x89
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x0069
//	DW_AT_type:
	.4byte 0x00000400
//	DW_TAG_variable:
	.byte 0x08
//	DW_AT_decl_line:
	.byte 0x89
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x006a
//	DW_AT_type:
	.4byte 0x00000400
//	DW_TAG_variable:
	.byte 0x09
//	DW_AT_decl_line:
	.byte 0x8a
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.4byte .debug_str+0x594
//	DW_AT_type:
	.4byte 0x00000400
//	DW_TAG_variable:
	.byte 0x09
//	DW_AT_decl_line:
	.byte 0x8a
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.4byte .debug_str+0x59b
//	DW_AT_type:
	.4byte 0x00000400
//	DW_TAG_variable:
	.byte 0x0b
//	DW_AT_decl_line:
	.byte 0x8a
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.4byte .debug_str+0x5a0
//	DW_AT_type:
	.4byte 0x00000400
//	DW_AT_location:
	.2byte 0x5101
//	DW_TAG_variable:
	.byte 0x09
//	DW_AT_decl_line:
	.byte 0x8a
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.4byte .debug_str+0x5a7
//	DW_AT_type:
	.4byte 0x00000400
//	DW_TAG_variable:
	.byte 0x08
//	DW_AT_decl_line:
	.byte 0x8b
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x3171
	.byte 0x00
//	DW_AT_type:
	.4byte 0x00000418
//	DW_TAG_variable:
	.byte 0x08
//	DW_AT_decl_line:
	.byte 0x8b
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x3271
	.byte 0x00
//	DW_AT_type:
	.4byte 0x00000418
//	DW_TAG_variable:
	.byte 0x08
//	DW_AT_decl_line:
	.byte 0x8c
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x3372
	.byte 0x00
//	DW_AT_type:
	.4byte 0x0000040c
	.byte 0x00
	.byte 0x00
//	DW_TAG_subprogram:
	.byte 0x10
//	DW_AT_decl_line:
	.byte 0x85
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_declaration:
	.byte 0x01
//	DW_AT_prototyped:
	.byte 0x01
//	DW_AT_name:
	.4byte .debug_str+0x586
	.4byte .debug_str+0x586
//	DW_AT_external:
	.byte 0x01
//	DW_AT_inline:
	.byte 0x01
//	DW_TAG_formal_parameter:
	.byte 0x11
//	DW_AT_type:
	.4byte 0x00000400
//	DW_TAG_formal_parameter:
	.byte 0x11
//	DW_AT_type:
	.4byte 0x00000400
//	DW_TAG_formal_parameter:
	.byte 0x11
//	DW_AT_type:
	.4byte 0x00000407
//	DW_TAG_formal_parameter:
	.byte 0x11
//	DW_AT_type:
	.4byte 0x00000407
//	DW_TAG_formal_parameter:
	.byte 0x11
//	DW_AT_type:
	.4byte 0x00000407
//	DW_TAG_formal_parameter:
	.byte 0x11
//	DW_AT_type:
	.4byte 0x00000407
//	DW_TAG_formal_parameter:
	.byte 0x11
//	DW_AT_type:
	.4byte 0x00000407
//	DW_TAG_formal_parameter:
	.byte 0x11
//	DW_AT_type:
	.4byte 0x00000418
//	DW_TAG_formal_parameter:
	.byte 0x11
//	DW_AT_type:
	.4byte 0x00000400
//	DW_TAG_formal_parameter:
	.byte 0x11
//	DW_AT_type:
	.4byte 0x00000400
//	DW_TAG_formal_parameter:
	.byte 0x11
//	DW_AT_type:
	.4byte 0x00000400
//	DW_TAG_formal_parameter:
	.byte 0x11
//	DW_AT_type:
	.4byte 0x00000400
	.byte 0x00
//	DW_TAG_subprogram:
	.byte 0x12
//	DW_AT_decl_line:
	.byte 0x85
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_abstract_origin:
	.4byte 0x00000777
//	DW_AT_low_pc:
	.8byte ..L169
//	DW_AT_high_pc:
	.8byte ..LNa2b_ord2.7938
//	DW_TAG_formal_parameter:
	.byte 0x04
//	DW_AT_decl_line:
	.byte 0x85
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000400
//	DW_AT_name:
	.2byte 0x786e
	.byte 0x00
//	DW_AT_location:
	.2byte 0x5501
//	DW_TAG_formal_parameter:
	.byte 0x04
//	DW_AT_decl_line:
	.byte 0x85
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000400
//	DW_AT_name:
	.2byte 0x796e
	.byte 0x00
//	DW_AT_location:
	.2byte 0x5401
//	DW_TAG_formal_parameter:
	.byte 0x04
//	DW_AT_decl_line:
	.byte 0x85
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.4byte 0x006e6971
//	DW_AT_location:
	.2byte 0x5101
//	DW_TAG_formal_parameter:
	.byte 0x03
//	DW_AT_decl_line:
	.byte 0x85
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.4byte .debug_str+0x4f0
//	DW_AT_location:
	.2byte 0x5201
//	DW_TAG_formal_parameter:
	.byte 0x03
//	DW_AT_decl_line:
	.byte 0x85
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.4byte .debug_str+0x4f7
//	DW_AT_location:
	.2byte 0x5801
//	DW_TAG_formal_parameter:
	.byte 0x03
//	DW_AT_decl_line:
	.byte 0x86
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.4byte .debug_str+0x4fe
//	DW_AT_location:
	.2byte 0x5901
//	DW_TAG_formal_parameter:
	.byte 0x03
//	DW_AT_decl_line:
	.byte 0x86
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.4byte .debug_str+0x505
//	DW_AT_location:
	.2byte 0x7602
	.byte 0x10
//	DW_TAG_formal_parameter:
	.byte 0x03
//	DW_AT_decl_line:
	.byte 0x86
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000418
//	DW_AT_name:
	.4byte .debug_str+0x58f
//	DW_AT_location:
	.2byte 0x7602
	.byte 0x18
//	DW_TAG_formal_parameter:
	.byte 0x03
//	DW_AT_decl_line:
	.byte 0x87
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000400
//	DW_AT_name:
	.4byte .debug_str+0x52e
//	DW_AT_location:
	.2byte 0x7602
	.byte 0x20
//	DW_TAG_formal_parameter:
	.byte 0x03
//	DW_AT_decl_line:
	.byte 0x87
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000400
//	DW_AT_name:
	.4byte .debug_str+0x53b
//	DW_AT_location:
	.2byte 0x7602
	.byte 0x28
//	DW_TAG_formal_parameter:
	.byte 0x03
//	DW_AT_decl_line:
	.byte 0x87
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000400
//	DW_AT_name:
	.4byte .debug_str+0x548
//	DW_AT_location:
	.2byte 0x7602
	.byte 0x30
//	DW_TAG_formal_parameter:
	.byte 0x03
//	DW_AT_decl_line:
	.byte 0x87
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000400
//	DW_AT_name:
	.4byte .debug_str+0x556
//	DW_AT_location:
	.2byte 0x7602
	.byte 0x38
//	DW_TAG_variable:
	.byte 0x08
//	DW_AT_decl_line:
	.byte 0x89
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.4byte 0x0070786e
//	DW_AT_type:
	.4byte 0x00000400
//	DW_TAG_variable:
	.byte 0x08
//	DW_AT_decl_line:
	.byte 0x89
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.4byte 0x0070796e
//	DW_AT_type:
	.4byte 0x00000400
//	DW_TAG_variable:
	.byte 0x08
//	DW_AT_decl_line:
	.byte 0x89
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x0069
//	DW_AT_type:
	.4byte 0x00000400
//	DW_TAG_variable:
	.byte 0x08
//	DW_AT_decl_line:
	.byte 0x89
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x006a
//	DW_AT_type:
	.4byte 0x00000400
//	DW_TAG_variable:
	.byte 0x0b
//	DW_AT_decl_line:
	.byte 0x8a
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.4byte .debug_str+0x594
//	DW_AT_type:
	.4byte 0x00000400
//	DW_AT_location:
	.2byte 0x5e01
//	DW_TAG_variable:
	.byte 0x09
//	DW_AT_decl_line:
	.byte 0x8a
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.4byte .debug_str+0x59b
//	DW_AT_type:
	.4byte 0x00000400
//	DW_TAG_variable:
	.byte 0x0b
//	DW_AT_decl_line:
	.byte 0x8a
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.4byte .debug_str+0x5a0
//	DW_AT_type:
	.4byte 0x00000400
//	DW_AT_location:
	.2byte 0x5901
//	DW_TAG_variable:
	.byte 0x09
//	DW_AT_decl_line:
	.byte 0x8a
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.4byte .debug_str+0x5a7
//	DW_AT_type:
	.4byte 0x00000400
//	DW_TAG_variable:
	.byte 0x08
//	DW_AT_decl_line:
	.byte 0x8b
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x3171
	.byte 0x00
//	DW_AT_type:
	.4byte 0x00000418
//	DW_TAG_variable:
	.byte 0x0a
//	DW_AT_decl_line:
	.byte 0x8b
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x3271
	.byte 0x00
//	DW_AT_type:
	.4byte 0x00000418
//	DW_AT_location:
	.2byte 0x5b01
//	DW_TAG_variable:
	.byte 0x08
//	DW_AT_decl_line:
	.byte 0x8c
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x3372
	.byte 0x00
//	DW_AT_type:
	.4byte 0x0000040c
	.byte 0x00
//	DW_TAG_subprogram:
	.byte 0x13
//	DW_AT_decl_line:
	.byte 0xcc
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_prototyped:
	.byte 0x01
//	DW_AT_name:
	.4byte .debug_str+0x5ac
	.4byte .debug_str+0x5ac
//	DW_AT_frame_base:
	.2byte 0x7702
	.byte 0x00
//	DW_AT_low_pc:
	.8byte ..L242
//	DW_AT_high_pc:
	.8byte ..LNget_edge.8969
//	DW_AT_external:
	.byte 0x01
//	DW_TAG_formal_parameter:
	.byte 0x04
//	DW_AT_decl_line:
	.byte 0xcc
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000400
//	DW_AT_name:
	.2byte 0x786e
	.byte 0x00
//	DW_AT_location:
	.2byte 0x5501
//	DW_TAG_formal_parameter:
	.byte 0x04
//	DW_AT_decl_line:
	.byte 0xcc
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000400
//	DW_AT_name:
	.2byte 0x796e
	.byte 0x00
//	DW_AT_location:
	.2byte 0x5401
//	DW_TAG_formal_parameter:
	.byte 0x03
//	DW_AT_decl_line:
	.byte 0xcc
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.4byte .debug_str+0x5b5
//	DW_AT_location:
	.2byte 0x5101
//	DW_TAG_formal_parameter:
	.byte 0x03
//	DW_AT_decl_line:
	.byte 0xcc
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.4byte .debug_str+0x5ba
//	DW_AT_location:
	.2byte 0x5201
//	DW_TAG_formal_parameter:
	.byte 0x03
//	DW_AT_decl_line:
	.byte 0xcd
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.4byte .debug_str+0x5bf
//	DW_AT_location:
	.2byte 0x5801
//	DW_TAG_formal_parameter:
	.byte 0x03
//	DW_AT_decl_line:
	.byte 0xcd
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.4byte .debug_str+0x5c4
//	DW_AT_location:
	.2byte 0x5901
//	DW_TAG_formal_parameter:
	.byte 0x03
//	DW_AT_decl_line:
	.byte 0xcd
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000418
//	DW_AT_name:
	.4byte .debug_str+0x4f0
//	DW_AT_location:
	.2byte 0x7602
	.byte 0x10
//	DW_TAG_formal_parameter:
	.byte 0x03
//	DW_AT_decl_line:
	.byte 0xcd
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000418
//	DW_AT_name:
	.4byte .debug_str+0x4f7
//	DW_AT_location:
	.2byte 0x7602
	.byte 0x18
//	DW_TAG_formal_parameter:
	.byte 0x03
//	DW_AT_decl_line:
	.byte 0xcd
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000418
//	DW_AT_name:
	.4byte .debug_str+0x4fe
//	DW_AT_location:
	.2byte 0x7602
	.byte 0x20
//	DW_TAG_formal_parameter:
	.byte 0x03
//	DW_AT_decl_line:
	.byte 0xcd
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000418
//	DW_AT_name:
	.4byte .debug_str+0x505
//	DW_AT_location:
	.2byte 0x7602
	.byte 0x28
//	DW_TAG_formal_parameter:
	.byte 0x03
//	DW_AT_decl_line:
	.byte 0xce
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000400
//	DW_AT_name:
	.4byte .debug_str+0x52e
//	DW_AT_location:
	.2byte 0x7602
	.byte 0x30
//	DW_TAG_formal_parameter:
	.byte 0x03
//	DW_AT_decl_line:
	.byte 0xce
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000400
//	DW_AT_name:
	.4byte .debug_str+0x53b
//	DW_AT_location:
	.2byte 0x7602
	.byte 0x38
//	DW_TAG_formal_parameter:
	.byte 0x03
//	DW_AT_decl_line:
	.byte 0xce
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000400
//	DW_AT_name:
	.4byte .debug_str+0x548
//	DW_AT_location:
	.4byte 0x00c07603
//	DW_TAG_formal_parameter:
	.byte 0x03
//	DW_AT_decl_line:
	.byte 0xce
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000400
//	DW_AT_name:
	.4byte .debug_str+0x556
//	DW_AT_location:
	.4byte 0x00c87603
//	DW_TAG_variable:
	.byte 0x08
//	DW_AT_decl_line:
	.byte 0xd0
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x0069
//	DW_AT_type:
	.4byte 0x00000400
//	DW_TAG_variable:
	.byte 0x08
//	DW_AT_decl_line:
	.byte 0xd0
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x006a
//	DW_AT_type:
	.4byte 0x00000400
//	DW_TAG_variable:
	.byte 0x08
//	DW_AT_decl_line:
	.byte 0xd0
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.4byte 0x0070786e
//	DW_AT_type:
	.4byte 0x00000400
//	DW_TAG_variable:
	.byte 0x08
//	DW_AT_decl_line:
	.byte 0xd0
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.4byte 0x0070796e
//	DW_AT_type:
	.4byte 0x00000400
//	DW_TAG_variable:
	.byte 0x09
//	DW_AT_decl_line:
	.byte 0xd1
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.4byte .debug_str+0x594
//	DW_AT_type:
	.4byte 0x00000400
//	DW_TAG_variable:
	.byte 0x09
//	DW_AT_decl_line:
	.byte 0xd1
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.4byte .debug_str+0x59b
//	DW_AT_type:
	.4byte 0x00000400
//	DW_TAG_variable:
	.byte 0x09
//	DW_AT_decl_line:
	.byte 0xd1
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.4byte .debug_str+0x5a0
//	DW_AT_type:
	.4byte 0x00000400
//	DW_TAG_variable:
	.byte 0x0b
//	DW_AT_decl_line:
	.byte 0xd1
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.4byte .debug_str+0x5a7
//	DW_AT_type:
	.4byte 0x00000400
//	DW_AT_location:
	.2byte 0x5101
//	DW_TAG_variable:
	.byte 0x0a
//	DW_AT_decl_line:
	.byte 0xd2
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x3170
	.byte 0x00
//	DW_AT_type:
	.4byte 0x00000d18
//	DW_AT_location:
	.4byte 0x02e89103
//	DW_TAG_variable:
	.byte 0x0a
//	DW_AT_decl_line:
	.byte 0xd2
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x3270
	.byte 0x00
//	DW_AT_type:
	.4byte 0x00000d21
//	DW_AT_location:
	.4byte 0x02d89103
//	DW_TAG_variable:
	.byte 0x08
//	DW_AT_decl_line:
	.byte 0xd3
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x7970
	.byte 0x00
//	DW_AT_type:
	.4byte 0x00000418
//	DW_TAG_variable:
	.byte 0x08
//	DW_AT_decl_line:
	.byte 0xd3
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x7870
	.byte 0x00
//	DW_AT_type:
	.4byte 0x00000418
//	DW_TAG_variable:
	.byte 0x08
//	DW_AT_decl_line:
	.byte 0xd4
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x3164
	.byte 0x00
//	DW_AT_type:
	.4byte 0x00000411
//	DW_TAG_variable:
	.byte 0x0a
//	DW_AT_decl_line:
	.byte 0xd4
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x3264
	.byte 0x00
//	DW_AT_type:
	.4byte 0x00000411
//	DW_AT_location:
	.2byte 0x6201
//	DW_TAG_inlined_subroutine:
	.byte 0x05
//	DW_AT_ranges:
	.4byte .debug_ranges_seg+0x170
//	DW_AT_entry_pc:
	.8byte ..LN8360
//	DW_AT_abstract_origin:
	.4byte 0x00000d80
//	DW_AT_call_line:
	.byte 0xfd
//	DW_AT_call_column:
	.byte 0x07
//	DW_AT_call_file:
	.byte 0x01
//	DW_TAG_formal_parameter:
	.byte 0x14
//	DW_AT_decl_line:
	.2byte 0x0141
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.2byte 0x3170
	.byte 0x00
//	DW_TAG_formal_parameter:
	.byte 0x14
//	DW_AT_decl_line:
	.2byte 0x0141
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.2byte 0x3270
	.byte 0x00
//	DW_TAG_formal_parameter:
	.byte 0x15
//	DW_AT_decl_line:
	.2byte 0x0141
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000418
//	DW_AT_name:
	.2byte 0x6d70
	.byte 0x00
//	DW_AT_location:
	.2byte 0x5d01
//	DW_TAG_variable:
	.byte 0x16
//	DW_AT_decl_line:
	.2byte 0x0143
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x3165
	.byte 0x00
//	DW_AT_type:
	.4byte 0x00000da0
//	DW_AT_location:
	.4byte 0x00c89103
//	DW_TAG_variable:
	.byte 0x16
//	DW_AT_decl_line:
	.2byte 0x0143
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x3265
	.byte 0x00
//	DW_AT_type:
	.4byte 0x00000da9
//	DW_AT_location:
	.4byte 0x00e09103
//	DW_TAG_variable:
	.byte 0x16
//	DW_AT_decl_line:
	.2byte 0x0143
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x3365
	.byte 0x00
//	DW_AT_type:
	.4byte 0x00000db2
//	DW_AT_location:
	.4byte 0x00f89103
//	DW_TAG_inlined_subroutine:
	.byte 0x17
//	DW_AT_low_pc:
	.8byte ..LN8393
//	DW_AT_high_pc:
	.8byte ..LN8403
//	DW_AT_abstract_origin:
	.4byte 0x00000e69
//	DW_AT_call_line:
	.2byte 0x0147
//	DW_AT_call_column:
	.byte 0x03
//	DW_AT_call_file:
	.byte 0x01
//	DW_TAG_formal_parameter:
	.byte 0x14
//	DW_AT_decl_line:
	.2byte 0x014c
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.2byte 0x3170
	.byte 0x00
//	DW_TAG_formal_parameter:
	.byte 0x14
//	DW_AT_decl_line:
	.2byte 0x014c
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.2byte 0x3270
	.byte 0x00
//	DW_TAG_formal_parameter:
	.byte 0x14
//	DW_AT_decl_line:
	.2byte 0x014c
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000418
//	DW_AT_name:
	.2byte 0x0065
//	DW_TAG_variable:
	.byte 0x18
//	DW_AT_decl_line:
	.2byte 0x014e
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x6464
	.byte 0x00
//	DW_AT_type:
	.4byte 0x00000411
	.byte 0x00
	.byte 0x00
//	DW_TAG_inlined_subroutine:
	.byte 0x19
//	DW_AT_ranges:
	.4byte .debug_ranges_seg+0x1f0
//	DW_AT_entry_pc:
	.8byte ..LN8524
//	DW_AT_abstract_origin:
	.4byte 0x00000d80
//	DW_AT_call_line:
	.2byte 0x010f
//	DW_AT_call_column:
	.byte 0x07
//	DW_AT_call_file:
	.byte 0x01
//	DW_TAG_formal_parameter:
	.byte 0x14
//	DW_AT_decl_line:
	.2byte 0x0141
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.2byte 0x3170
	.byte 0x00
//	DW_TAG_formal_parameter:
	.byte 0x14
//	DW_AT_decl_line:
	.2byte 0x0141
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.2byte 0x3270
	.byte 0x00
//	DW_TAG_formal_parameter:
	.byte 0x15
//	DW_AT_decl_line:
	.2byte 0x0141
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000418
//	DW_AT_name:
	.2byte 0x6d70
	.byte 0x00
//	DW_AT_location:
	.2byte 0x5e01
//	DW_TAG_variable:
	.byte 0x16
//	DW_AT_decl_line:
	.2byte 0x0143
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x3165
	.byte 0x00
//	DW_AT_type:
	.4byte 0x00000da0
//	DW_AT_location:
	.4byte 0x01909103
//	DW_TAG_variable:
	.byte 0x16
//	DW_AT_decl_line:
	.2byte 0x0143
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x3265
	.byte 0x00
//	DW_AT_type:
	.4byte 0x00000da9
//	DW_AT_location:
	.4byte 0x01a89103
//	DW_TAG_variable:
	.byte 0x16
//	DW_AT_decl_line:
	.2byte 0x0143
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x3365
	.byte 0x00
//	DW_AT_type:
	.4byte 0x00000db2
//	DW_AT_location:
	.4byte 0x01c09103
//	DW_TAG_inlined_subroutine:
	.byte 0x17
//	DW_AT_low_pc:
	.8byte ..LN8557
//	DW_AT_high_pc:
	.8byte ..LN8567
//	DW_AT_abstract_origin:
	.4byte 0x00000e69
//	DW_AT_call_line:
	.2byte 0x0147
//	DW_AT_call_column:
	.byte 0x03
//	DW_AT_call_file:
	.byte 0x01
//	DW_TAG_formal_parameter:
	.byte 0x14
//	DW_AT_decl_line:
	.2byte 0x014c
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.2byte 0x3170
	.byte 0x00
//	DW_TAG_formal_parameter:
	.byte 0x14
//	DW_AT_decl_line:
	.2byte 0x014c
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.2byte 0x3270
	.byte 0x00
//	DW_TAG_formal_parameter:
	.byte 0x14
//	DW_AT_decl_line:
	.2byte 0x014c
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000418
//	DW_AT_name:
	.2byte 0x0065
//	DW_TAG_variable:
	.byte 0x18
//	DW_AT_decl_line:
	.2byte 0x014e
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x6464
	.byte 0x00
//	DW_AT_type:
	.4byte 0x00000411
	.byte 0x00
	.byte 0x00
//	DW_TAG_inlined_subroutine:
	.byte 0x19
//	DW_AT_ranges:
	.4byte .debug_ranges_seg+0x270
//	DW_AT_entry_pc:
	.8byte ..LN8681
//	DW_AT_abstract_origin:
	.4byte 0x00000d80
//	DW_AT_call_line:
	.2byte 0x0121
//	DW_AT_call_column:
	.byte 0x07
//	DW_AT_call_file:
	.byte 0x01
//	DW_TAG_formal_parameter:
	.byte 0x14
//	DW_AT_decl_line:
	.2byte 0x0141
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.2byte 0x3170
	.byte 0x00
//	DW_TAG_formal_parameter:
	.byte 0x14
//	DW_AT_decl_line:
	.2byte 0x0141
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.2byte 0x3270
	.byte 0x00
//	DW_TAG_formal_parameter:
	.byte 0x15
//	DW_AT_decl_line:
	.2byte 0x0141
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000418
//	DW_AT_name:
	.2byte 0x6d70
	.byte 0x00
//	DW_AT_location:
	.2byte 0x5c01
//	DW_TAG_variable:
	.byte 0x16
//	DW_AT_decl_line:
	.2byte 0x0143
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x3165
	.byte 0x00
//	DW_AT_type:
	.4byte 0x00000da0
//	DW_AT_location:
	.4byte 0x01d89103
//	DW_TAG_variable:
	.byte 0x16
//	DW_AT_decl_line:
	.2byte 0x0143
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x3265
	.byte 0x00
//	DW_AT_type:
	.4byte 0x00000da9
//	DW_AT_location:
	.4byte 0x01f09103
//	DW_TAG_variable:
	.byte 0x16
//	DW_AT_decl_line:
	.2byte 0x0143
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x3365
	.byte 0x00
//	DW_AT_type:
	.4byte 0x00000db2
//	DW_AT_location:
	.4byte 0x02889103
//	DW_TAG_inlined_subroutine:
	.byte 0x17
//	DW_AT_low_pc:
	.8byte ..LN8720
//	DW_AT_high_pc:
	.8byte ..LN8730
//	DW_AT_abstract_origin:
	.4byte 0x00000e69
//	DW_AT_call_line:
	.2byte 0x0147
//	DW_AT_call_column:
	.byte 0x03
//	DW_AT_call_file:
	.byte 0x01
//	DW_TAG_formal_parameter:
	.byte 0x14
//	DW_AT_decl_line:
	.2byte 0x014c
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.2byte 0x3170
	.byte 0x00
//	DW_TAG_formal_parameter:
	.byte 0x14
//	DW_AT_decl_line:
	.2byte 0x014c
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.2byte 0x3270
	.byte 0x00
//	DW_TAG_formal_parameter:
	.byte 0x14
//	DW_AT_decl_line:
	.2byte 0x014c
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000418
//	DW_AT_name:
	.2byte 0x0065
//	DW_TAG_variable:
	.byte 0x18
//	DW_AT_decl_line:
	.2byte 0x014e
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x6464
	.byte 0x00
//	DW_AT_type:
	.4byte 0x00000411
	.byte 0x00
	.byte 0x00
//	DW_TAG_inlined_subroutine:
	.byte 0x19
//	DW_AT_ranges:
	.4byte .debug_ranges_seg+0x2d0
//	DW_AT_entry_pc:
	.8byte ..LN8828
//	DW_AT_abstract_origin:
	.4byte 0x00000d80
//	DW_AT_call_line:
	.2byte 0x0131
//	DW_AT_call_column:
	.byte 0x07
//	DW_AT_call_file:
	.byte 0x01
//	DW_TAG_formal_parameter:
	.byte 0x14
//	DW_AT_decl_line:
	.2byte 0x0141
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.2byte 0x3170
	.byte 0x00
//	DW_TAG_formal_parameter:
	.byte 0x14
//	DW_AT_decl_line:
	.2byte 0x0141
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.2byte 0x3270
	.byte 0x00
//	DW_TAG_formal_parameter:
	.byte 0x15
//	DW_AT_decl_line:
	.2byte 0x0141
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000418
//	DW_AT_name:
	.2byte 0x6d70
	.byte 0x00
//	DW_AT_location:
	.2byte 0x5301
//	DW_TAG_variable:
	.byte 0x16
//	DW_AT_decl_line:
	.2byte 0x0143
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x3165
	.byte 0x00
//	DW_AT_type:
	.4byte 0x00000da0
//	DW_AT_location:
	.2byte 0x9102
	.byte 0x20
//	DW_TAG_variable:
	.byte 0x16
//	DW_AT_decl_line:
	.2byte 0x0143
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x3265
	.byte 0x00
//	DW_AT_type:
	.4byte 0x00000da9
//	DW_AT_location:
	.4byte 0x02a09103
//	DW_TAG_variable:
	.byte 0x16
//	DW_AT_decl_line:
	.2byte 0x0143
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x3365
	.byte 0x00
//	DW_AT_type:
	.4byte 0x00000db2
//	DW_AT_location:
	.4byte 0x02b89103
//	DW_TAG_inlined_subroutine:
	.byte 0x17
//	DW_AT_low_pc:
	.8byte ..LN8867
//	DW_AT_high_pc:
	.8byte ..LN8877
//	DW_AT_abstract_origin:
	.4byte 0x00000e69
//	DW_AT_call_line:
	.2byte 0x0147
//	DW_AT_call_column:
	.byte 0x03
//	DW_AT_call_file:
	.byte 0x01
//	DW_TAG_formal_parameter:
	.byte 0x14
//	DW_AT_decl_line:
	.2byte 0x014c
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.2byte 0x3170
	.byte 0x00
//	DW_TAG_formal_parameter:
	.byte 0x14
//	DW_AT_decl_line:
	.2byte 0x014c
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.2byte 0x3270
	.byte 0x00
//	DW_TAG_formal_parameter:
	.byte 0x14
//	DW_AT_decl_line:
	.2byte 0x014c
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000418
//	DW_AT_name:
	.2byte 0x0065
//	DW_TAG_variable:
	.byte 0x18
//	DW_AT_decl_line:
	.2byte 0x014e
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x6464
	.byte 0x00
//	DW_AT_type:
	.4byte 0x00000411
	.byte 0x00
	.byte 0x00
	.byte 0x00
//	DW_TAG_array_type:
	.byte 0x1a
//	DW_AT_type:
	.4byte 0x00000411
//	DW_AT_byte_size:
	.byte 0x10
//	DW_TAG_subrange_type:
	.byte 0x1b
//	DW_AT_upper_bound:
	.byte 0x01
	.byte 0x00
//	DW_TAG_array_type:
	.byte 0x1a
//	DW_AT_type:
	.4byte 0x00000411
//	DW_AT_byte_size:
	.byte 0x10
//	DW_TAG_subrange_type:
	.byte 0x1b
//	DW_AT_upper_bound:
	.byte 0x01
	.byte 0x00
//	DW_TAG_subprogram:
	.byte 0x10
//	DW_AT_decl_line:
	.byte 0xcc
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_declaration:
	.byte 0x01
//	DW_AT_prototyped:
	.byte 0x01
//	DW_AT_name:
	.4byte .debug_str+0x5ac
	.4byte .debug_str+0x5ac
//	DW_AT_external:
	.byte 0x01
//	DW_AT_inline:
	.byte 0x01
//	DW_TAG_formal_parameter:
	.byte 0x11
//	DW_AT_type:
	.4byte 0x00000400
//	DW_TAG_formal_parameter:
	.byte 0x11
//	DW_AT_type:
	.4byte 0x00000400
//	DW_TAG_formal_parameter:
	.byte 0x11
//	DW_AT_type:
	.4byte 0x00000407
//	DW_TAG_formal_parameter:
	.byte 0x11
//	DW_AT_type:
	.4byte 0x00000407
//	DW_TAG_formal_parameter:
	.byte 0x11
//	DW_AT_type:
	.4byte 0x00000407
//	DW_TAG_formal_parameter:
	.byte 0x11
//	DW_AT_type:
	.4byte 0x00000407
//	DW_TAG_formal_parameter:
	.byte 0x11
//	DW_AT_type:
	.4byte 0x00000418
//	DW_TAG_formal_parameter:
	.byte 0x11
//	DW_AT_type:
	.4byte 0x00000418
//	DW_TAG_formal_parameter:
	.byte 0x11
//	DW_AT_type:
	.4byte 0x00000418
//	DW_TAG_formal_parameter:
	.byte 0x11
//	DW_AT_type:
	.4byte 0x00000418
//	DW_TAG_formal_parameter:
	.byte 0x11
//	DW_AT_type:
	.4byte 0x00000400
//	DW_TAG_formal_parameter:
	.byte 0x11
//	DW_AT_type:
	.4byte 0x00000400
//	DW_TAG_formal_parameter:
	.byte 0x11
//	DW_AT_type:
	.4byte 0x00000400
//	DW_TAG_formal_parameter:
	.byte 0x11
//	DW_AT_type:
	.4byte 0x00000400
	.byte 0x00
//	DW_TAG_subprogram:
	.byte 0x1c
//	DW_AT_decl_line:
	.2byte 0x0141
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_declaration:
	.byte 0x01
//	DW_AT_prototyped:
	.byte 0x01
//	DW_AT_name:
	.4byte .debug_str+0x5c9
	.4byte .debug_str+0x5c9
//	DW_AT_external:
	.byte 0x01
//	DW_AT_inline:
	.byte 0x01
//	DW_TAG_formal_parameter:
	.byte 0x11
//	DW_AT_type:
	.4byte 0x00000407
//	DW_TAG_formal_parameter:
	.byte 0x11
//	DW_AT_type:
	.4byte 0x00000407
//	DW_TAG_formal_parameter:
	.byte 0x11
//	DW_AT_type:
	.4byte 0x00000418
	.byte 0x00
//	DW_TAG_array_type:
	.byte 0x1a
//	DW_AT_type:
	.4byte 0x00000411
//	DW_AT_byte_size:
	.byte 0x18
//	DW_TAG_subrange_type:
	.byte 0x1b
//	DW_AT_upper_bound:
	.byte 0x02
	.byte 0x00
//	DW_TAG_array_type:
	.byte 0x1a
//	DW_AT_type:
	.4byte 0x00000411
//	DW_AT_byte_size:
	.byte 0x18
//	DW_TAG_subrange_type:
	.byte 0x1b
//	DW_AT_upper_bound:
	.byte 0x02
	.byte 0x00
//	DW_TAG_array_type:
	.byte 0x1a
//	DW_AT_type:
	.4byte 0x00000411
//	DW_AT_byte_size:
	.byte 0x18
//	DW_TAG_subrange_type:
	.byte 0x1b
//	DW_AT_upper_bound:
	.byte 0x02
	.byte 0x00
//	DW_TAG_subprogram:
	.byte 0x1d
//	DW_AT_decl_line:
	.2byte 0x0141
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_abstract_origin:
	.4byte 0x00000d80
//	DW_AT_frame_base:
	.2byte 0x7702
	.byte 0x00
//	DW_AT_low_pc:
	.8byte ..L332
//	DW_AT_high_pc:
	.8byte ..LNmid_pt_sphere.9022
//	DW_TAG_formal_parameter:
	.byte 0x15
//	DW_AT_decl_line:
	.2byte 0x0141
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.2byte 0x3170
	.byte 0x00
//	DW_AT_location:
	.2byte 0x5501
//	DW_TAG_formal_parameter:
	.byte 0x15
//	DW_AT_decl_line:
	.2byte 0x0141
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.2byte 0x3270
	.byte 0x00
//	DW_AT_location:
	.2byte 0x5401
//	DW_TAG_formal_parameter:
	.byte 0x15
//	DW_AT_decl_line:
	.2byte 0x0141
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000418
//	DW_AT_name:
	.2byte 0x6d70
	.byte 0x00
//	DW_AT_location:
	.2byte 0x5101
//	DW_TAG_variable:
	.byte 0x16
//	DW_AT_decl_line:
	.2byte 0x0143
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x3165
	.byte 0x00
//	DW_AT_type:
	.4byte 0x00000da0
//	DW_AT_location:
	.2byte 0x9102
	.byte 0x00
//	DW_TAG_variable:
	.byte 0x16
//	DW_AT_decl_line:
	.2byte 0x0143
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x3265
	.byte 0x00
//	DW_AT_type:
	.4byte 0x00000da9
//	DW_AT_location:
	.2byte 0x9102
	.byte 0x18
//	DW_TAG_variable:
	.byte 0x16
//	DW_AT_decl_line:
	.2byte 0x0143
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x3365
	.byte 0x00
//	DW_AT_type:
	.4byte 0x00000db2
//	DW_AT_location:
	.2byte 0x9102
	.byte 0x30
//	DW_TAG_inlined_subroutine:
	.byte 0x19
//	DW_AT_ranges:
	.4byte .debug_ranges_seg+0x340
//	DW_AT_entry_pc:
	.8byte ..LN8994
//	DW_AT_abstract_origin:
	.4byte 0x00000e69
//	DW_AT_call_line:
	.2byte 0x0147
//	DW_AT_call_column:
	.byte 0x03
//	DW_AT_call_file:
	.byte 0x01
//	DW_TAG_formal_parameter:
	.byte 0x14
//	DW_AT_decl_line:
	.2byte 0x014c
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.2byte 0x3170
	.byte 0x00
//	DW_TAG_formal_parameter:
	.byte 0x14
//	DW_AT_decl_line:
	.2byte 0x014c
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.2byte 0x3270
	.byte 0x00
//	DW_TAG_formal_parameter:
	.byte 0x14
//	DW_AT_decl_line:
	.2byte 0x014c
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000418
//	DW_AT_name:
	.2byte 0x0065
//	DW_TAG_variable:
	.byte 0x18
//	DW_AT_decl_line:
	.2byte 0x014e
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x6464
	.byte 0x00
//	DW_AT_type:
	.4byte 0x00000411
	.byte 0x00
	.byte 0x00
//	DW_TAG_subprogram:
	.byte 0x1c
//	DW_AT_decl_line:
	.2byte 0x014c
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_declaration:
	.byte 0x01
//	DW_AT_prototyped:
	.byte 0x01
//	DW_AT_name:
	.4byte .debug_str+0x5d7
	.4byte .debug_str+0x5d7
//	DW_AT_external:
	.byte 0x01
//	DW_AT_inline:
	.byte 0x01
//	DW_TAG_formal_parameter:
	.byte 0x11
//	DW_AT_type:
	.4byte 0x00000407
//	DW_TAG_formal_parameter:
	.byte 0x11
//	DW_AT_type:
	.4byte 0x00000407
//	DW_TAG_formal_parameter:
	.byte 0x11
//	DW_AT_type:
	.4byte 0x00000418
	.byte 0x00
//	DW_TAG_subprogram:
	.byte 0x1e
//	DW_AT_decl_line:
	.2byte 0x014c
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_abstract_origin:
	.4byte 0x00000e69
//	DW_AT_low_pc:
	.8byte ..L356
//	DW_AT_high_pc:
	.8byte ..LNmid_pt3_cart.9046
//	DW_TAG_formal_parameter:
	.byte 0x15
//	DW_AT_decl_line:
	.2byte 0x014c
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.2byte 0x3170
	.byte 0x00
//	DW_AT_location:
	.2byte 0x5501
//	DW_TAG_formal_parameter:
	.byte 0x15
//	DW_AT_decl_line:
	.2byte 0x014c
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.2byte 0x3270
	.byte 0x00
//	DW_AT_location:
	.2byte 0x5401
//	DW_TAG_formal_parameter:
	.byte 0x15
//	DW_AT_decl_line:
	.2byte 0x014c
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000418
//	DW_AT_name:
	.2byte 0x0065
//	DW_AT_location:
	.2byte 0x5101
//	DW_TAG_variable:
	.byte 0x16
//	DW_AT_decl_line:
	.2byte 0x014e
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x6464
	.byte 0x00
//	DW_AT_type:
	.4byte 0x00000411
//	DW_AT_location:
	.2byte 0x6401
	.byte 0x00
//	DW_TAG_subprogram:
	.byte 0x1f
//	DW_AT_decl_line:
	.2byte 0x016c
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_prototyped:
	.byte 0x01
//	DW_AT_name:
	.4byte .debug_str+0x5e4
	.4byte .debug_str+0x5e4
//	DW_AT_frame_base:
	.2byte 0x7702
	.byte 0x00
//	DW_AT_low_pc:
	.8byte ..L363
//	DW_AT_high_pc:
	.8byte ..LNcalc_c2l_grid_info_.10691
//	DW_AT_external:
	.byte 0x01
//	DW_TAG_formal_parameter:
	.byte 0x20
//	DW_AT_decl_line:
	.2byte 0x016c
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x000015ec
//	DW_AT_name:
	.4byte .debug_str+0x5f8
//	DW_AT_location:
	.2byte 0x5501
//	DW_TAG_formal_parameter:
	.byte 0x20
//	DW_AT_decl_line:
	.2byte 0x016c
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x000015ec
//	DW_AT_name:
	.4byte .debug_str+0x5fe
//	DW_AT_location:
	.2byte 0x5401
//	DW_TAG_formal_parameter:
	.byte 0x15
//	DW_AT_decl_line:
	.2byte 0x016c
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.2byte 0x7478
	.byte 0x00
//	DW_AT_location:
	.2byte 0x5101
//	DW_TAG_formal_parameter:
	.byte 0x15
//	DW_AT_decl_line:
	.2byte 0x016c
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.2byte 0x7479
	.byte 0x00
//	DW_AT_location:
	.2byte 0x5201
//	DW_TAG_formal_parameter:
	.byte 0x15
//	DW_AT_decl_line:
	.2byte 0x016c
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.2byte 0x6378
	.byte 0x00
//	DW_AT_location:
	.2byte 0x5801
//	DW_TAG_formal_parameter:
	.byte 0x15
//	DW_AT_decl_line:
	.2byte 0x016c
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.2byte 0x6379
	.byte 0x00
//	DW_AT_location:
	.2byte 0x5901
//	DW_TAG_formal_parameter:
	.byte 0x15
//	DW_AT_decl_line:
	.2byte 0x016d
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000418
//	DW_AT_name:
	.2byte 0x7864
	.byte 0x00
//	DW_AT_location:
	.2byte 0x7602
	.byte 0x10
//	DW_TAG_formal_parameter:
	.byte 0x15
//	DW_AT_decl_line:
	.2byte 0x016d
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000418
//	DW_AT_name:
	.2byte 0x7964
	.byte 0x00
//	DW_AT_location:
	.2byte 0x7602
	.byte 0x18
//	DW_TAG_formal_parameter:
	.byte 0x20
//	DW_AT_decl_line:
	.2byte 0x016d
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000418
//	DW_AT_name:
	.4byte .debug_str+0x4eb
//	DW_AT_location:
	.2byte 0x7602
	.byte 0x20
//	DW_TAG_formal_parameter:
	.byte 0x20
//	DW_AT_decl_line:
	.2byte 0x016d
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000418
//	DW_AT_name:
	.4byte .debug_str+0x4f0
//	DW_AT_location:
	.2byte 0x7602
	.byte 0x28
//	DW_TAG_formal_parameter:
	.byte 0x20
//	DW_AT_decl_line:
	.2byte 0x016d
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000418
//	DW_AT_name:
	.4byte .debug_str+0x4f7
//	DW_AT_location:
	.2byte 0x7602
	.byte 0x30
//	DW_TAG_formal_parameter:
	.byte 0x20
//	DW_AT_decl_line:
	.2byte 0x016d
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000418
//	DW_AT_name:
	.4byte .debug_str+0x4fe
//	DW_AT_location:
	.2byte 0x7602
	.byte 0x38
//	DW_TAG_formal_parameter:
	.byte 0x20
//	DW_AT_decl_line:
	.2byte 0x016e
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000418
//	DW_AT_name:
	.4byte .debug_str+0x505
//	DW_AT_location:
	.4byte 0x00c07603
//	DW_TAG_formal_parameter:
	.byte 0x20
//	DW_AT_decl_line:
	.2byte 0x016e
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000418
//	DW_AT_name:
	.4byte .debug_str+0x50c
//	DW_AT_location:
	.4byte 0x00c87603
//	DW_TAG_formal_parameter:
	.byte 0x20
//	DW_AT_decl_line:
	.2byte 0x016e
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000418
//	DW_AT_name:
	.4byte .debug_str+0x511
//	DW_AT_location:
	.4byte 0x00d07603
//	DW_TAG_formal_parameter:
	.byte 0x20
//	DW_AT_decl_line:
	.2byte 0x016e
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000418
//	DW_AT_name:
	.4byte .debug_str+0x516
//	DW_AT_location:
	.4byte 0x00d87603
//	DW_TAG_formal_parameter:
	.byte 0x20
//	DW_AT_decl_line:
	.2byte 0x016e
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000418
//	DW_AT_name:
	.4byte .debug_str+0x51b
//	DW_AT_location:
	.4byte 0x00e07603
//	DW_TAG_formal_parameter:
	.byte 0x20
//	DW_AT_decl_line:
	.2byte 0x016f
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x000015ec
//	DW_AT_name:
	.4byte .debug_str+0x52e
//	DW_AT_location:
	.4byte 0x00e87603
//	DW_TAG_formal_parameter:
	.byte 0x20
//	DW_AT_decl_line:
	.2byte 0x016f
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x000015ec
//	DW_AT_name:
	.4byte .debug_str+0x53b
//	DW_AT_location:
	.4byte 0x00f07603
//	DW_TAG_formal_parameter:
	.byte 0x20
//	DW_AT_decl_line:
	.2byte 0x016f
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x000015ec
//	DW_AT_name:
	.4byte .debug_str+0x548
//	DW_AT_location:
	.4byte 0x00f87603
//	DW_TAG_formal_parameter:
	.byte 0x20
//	DW_AT_decl_line:
	.2byte 0x016f
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x000015ec
//	DW_AT_name:
	.4byte .debug_str+0x556
//	DW_AT_location:
	.4byte 0x01807603
//	DW_TAG_inlined_subroutine:
	.byte 0x19
//	DW_AT_ranges:
	.4byte .debug_ranges_seg+0x370
//	DW_AT_entry_pc:
	.8byte ..LN9056
//	DW_AT_abstract_origin:
	.4byte 0x000015f1
//	DW_AT_call_line:
	.2byte 0x0171
//	DW_AT_call_column:
	.byte 0x05
//	DW_AT_call_file:
	.byte 0x01
//	DW_TAG_formal_parameter:
	.byte 0x21
//	DW_AT_decl_line:
	.2byte 0x0176
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x000015ec
//	DW_AT_name:
	.4byte .debug_str+0x5f8
//	DW_TAG_formal_parameter:
	.byte 0x21
//	DW_AT_decl_line:
	.2byte 0x0176
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x000015ec
//	DW_AT_name:
	.4byte .debug_str+0x5fe
//	DW_TAG_formal_parameter:
	.byte 0x14
//	DW_AT_decl_line:
	.2byte 0x0176
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.2byte 0x7478
	.byte 0x00
//	DW_TAG_formal_parameter:
	.byte 0x14
//	DW_AT_decl_line:
	.2byte 0x0176
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.2byte 0x7479
	.byte 0x00
//	DW_TAG_formal_parameter:
	.byte 0x14
//	DW_AT_decl_line:
	.2byte 0x0176
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.2byte 0x6378
	.byte 0x00
//	DW_TAG_formal_parameter:
	.byte 0x14
//	DW_AT_decl_line:
	.2byte 0x0176
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.2byte 0x6379
	.byte 0x00
//	DW_TAG_formal_parameter:
	.byte 0x14
//	DW_AT_decl_line:
	.2byte 0x0177
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000418
//	DW_AT_name:
	.2byte 0x7864
	.byte 0x00
//	DW_TAG_formal_parameter:
	.byte 0x14
//	DW_AT_decl_line:
	.2byte 0x0177
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000418
//	DW_AT_name:
	.2byte 0x7964
	.byte 0x00
//	DW_TAG_formal_parameter:
	.byte 0x21
//	DW_AT_decl_line:
	.2byte 0x0177
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000418
//	DW_AT_name:
	.4byte .debug_str+0x4eb
//	DW_TAG_formal_parameter:
	.byte 0x21
//	DW_AT_decl_line:
	.2byte 0x0177
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000418
//	DW_AT_name:
	.4byte .debug_str+0x4f0
//	DW_TAG_formal_parameter:
	.byte 0x21
//	DW_AT_decl_line:
	.2byte 0x0177
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000418
//	DW_AT_name:
	.4byte .debug_str+0x4f7
//	DW_TAG_formal_parameter:
	.byte 0x21
//	DW_AT_decl_line:
	.2byte 0x0177
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000418
//	DW_AT_name:
	.4byte .debug_str+0x4fe
//	DW_TAG_formal_parameter:
	.byte 0x21
//	DW_AT_decl_line:
	.2byte 0x0178
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000418
//	DW_AT_name:
	.4byte .debug_str+0x505
//	DW_TAG_formal_parameter:
	.byte 0x21
//	DW_AT_decl_line:
	.2byte 0x0178
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000418
//	DW_AT_name:
	.4byte .debug_str+0x50c
//	DW_TAG_formal_parameter:
	.byte 0x21
//	DW_AT_decl_line:
	.2byte 0x0178
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000418
//	DW_AT_name:
	.4byte .debug_str+0x511
//	DW_TAG_formal_parameter:
	.byte 0x21
//	DW_AT_decl_line:
	.2byte 0x0178
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000418
//	DW_AT_name:
	.4byte .debug_str+0x516
//	DW_TAG_formal_parameter:
	.byte 0x21
//	DW_AT_decl_line:
	.2byte 0x0178
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000418
//	DW_AT_name:
	.4byte .debug_str+0x51b
//	DW_TAG_formal_parameter:
	.byte 0x21
//	DW_AT_decl_line:
	.2byte 0x0179
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x000015ec
//	DW_AT_name:
	.4byte .debug_str+0x52e
//	DW_TAG_formal_parameter:
	.byte 0x21
//	DW_AT_decl_line:
	.2byte 0x0179
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x000015ec
//	DW_AT_name:
	.4byte .debug_str+0x53b
//	DW_TAG_formal_parameter:
	.byte 0x21
//	DW_AT_decl_line:
	.2byte 0x0179
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x000015ec
//	DW_AT_name:
	.4byte .debug_str+0x548
//	DW_TAG_formal_parameter:
	.byte 0x21
//	DW_AT_decl_line:
	.2byte 0x0179
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x000015ec
//	DW_AT_name:
	.4byte .debug_str+0x556
//	DW_TAG_variable:
	.byte 0x18
//	DW_AT_decl_line:
	.2byte 0x017b
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x0078
//	DW_AT_type:
	.4byte 0x00000418
//	DW_TAG_variable:
	.byte 0x18
//	DW_AT_decl_line:
	.2byte 0x017b
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x0079
//	DW_AT_type:
	.4byte 0x00000418
//	DW_TAG_variable:
	.byte 0x18
//	DW_AT_decl_line:
	.2byte 0x017b
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x007a
//	DW_AT_type:
	.4byte 0x00000418
//	DW_TAG_variable:
	.byte 0x22
//	DW_AT_decl_line:
	.2byte 0x017b
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.4byte .debug_str+0x617
//	DW_AT_type:
	.4byte 0x00000418
//	DW_TAG_variable:
	.byte 0x22
//	DW_AT_decl_line:
	.2byte 0x017b
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.4byte .debug_str+0x61e
//	DW_AT_type:
	.4byte 0x00000418
//	DW_TAG_variable:
	.byte 0x18
//	DW_AT_decl_line:
	.2byte 0x017c
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x786e
	.byte 0x00
//	DW_AT_type:
	.4byte 0x00000400
//	DW_TAG_variable:
	.byte 0x16
//	DW_AT_decl_line:
	.2byte 0x017c
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x796e
	.byte 0x00
//	DW_AT_type:
	.4byte 0x00000400
//	DW_AT_location:
	.2byte 0x5f01
//	DW_TAG_variable:
	.byte 0x18
//	DW_AT_decl_line:
	.2byte 0x017c
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.4byte 0x0070786e
//	DW_AT_type:
	.4byte 0x00000400
//	DW_TAG_variable:
	.byte 0x18
//	DW_AT_decl_line:
	.2byte 0x017c
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.4byte 0x0070796e
//	DW_AT_type:
	.4byte 0x00000400
//	DW_TAG_variable:
	.byte 0x18
//	DW_AT_decl_line:
	.2byte 0x017c
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x0069
//	DW_AT_type:
	.4byte 0x00000400
//	DW_TAG_variable:
	.byte 0x18
//	DW_AT_decl_line:
	.2byte 0x017c
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x006a
//	DW_AT_type:
	.4byte 0x00000400
//	DW_TAG_variable:
	.byte 0x16
//	DW_AT_decl_line:
	.2byte 0x017d
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x3170
	.byte 0x00
//	DW_AT_type:
	.4byte 0x0000166b
//	DW_AT_location:
	.4byte 0x03d09103
//	DW_TAG_variable:
	.byte 0x16
//	DW_AT_decl_line:
	.2byte 0x017d
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x3270
	.byte 0x00
//	DW_AT_type:
	.4byte 0x00001674
//	DW_AT_location:
	.4byte 0x03e89103
//	DW_TAG_variable:
	.byte 0x16
//	DW_AT_decl_line:
	.2byte 0x017d
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x3370
	.byte 0x00
//	DW_AT_type:
	.4byte 0x0000167d
//	DW_AT_location:
	.4byte 0x04809103
//	DW_TAG_variable:
	.byte 0x16
//	DW_AT_decl_line:
	.2byte 0x017d
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x3470
	.byte 0x00
//	DW_AT_type:
	.4byte 0x00001686
//	DW_AT_location:
	.4byte 0x04989103
//	DW_TAG_inlined_subroutine:
	.byte 0x19
//	DW_AT_ranges:
	.4byte .debug_ranges_seg+0x430
//	DW_AT_entry_pc:
	.8byte ..LN9063
//	DW_AT_abstract_origin:
	.4byte 0x00000d2a
//	DW_AT_call_line:
	.2byte 0x01c3
//	DW_AT_call_column:
	.byte 0x03
//	DW_AT_call_file:
	.byte 0x01
//	DW_TAG_formal_parameter:
	.byte 0x07
//	DW_AT_decl_line:
	.byte 0xcc
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000400
//	DW_AT_name:
	.2byte 0x786e
	.byte 0x00
//	DW_TAG_formal_parameter:
	.byte 0x07
//	DW_AT_decl_line:
	.byte 0xcc
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000400
//	DW_AT_name:
	.2byte 0x796e
	.byte 0x00
//	DW_TAG_formal_parameter:
	.byte 0x06
//	DW_AT_decl_line:
	.byte 0xcc
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.4byte .debug_str+0x5b5
//	DW_TAG_formal_parameter:
	.byte 0x06
//	DW_AT_decl_line:
	.byte 0xcc
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.4byte .debug_str+0x5ba
//	DW_TAG_formal_parameter:
	.byte 0x06
//	DW_AT_decl_line:
	.byte 0xcd
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.4byte .debug_str+0x5bf
//	DW_TAG_formal_parameter:
	.byte 0x06
//	DW_AT_decl_line:
	.byte 0xcd
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.4byte .debug_str+0x5c4
//	DW_TAG_formal_parameter:
	.byte 0x06
//	DW_AT_decl_line:
	.byte 0xcd
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000418
//	DW_AT_name:
	.4byte .debug_str+0x4f0
//	DW_TAG_formal_parameter:
	.byte 0x06
//	DW_AT_decl_line:
	.byte 0xcd
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000418
//	DW_AT_name:
	.4byte .debug_str+0x4f7
//	DW_TAG_formal_parameter:
	.byte 0x06
//	DW_AT_decl_line:
	.byte 0xcd
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000418
//	DW_AT_name:
	.4byte .debug_str+0x4fe
//	DW_TAG_formal_parameter:
	.byte 0x06
//	DW_AT_decl_line:
	.byte 0xcd
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000418
//	DW_AT_name:
	.4byte .debug_str+0x505
//	DW_TAG_formal_parameter:
	.byte 0x03
//	DW_AT_decl_line:
	.byte 0xce
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000400
//	DW_AT_name:
	.4byte .debug_str+0x52e
//	DW_AT_location:
	.2byte 0x5101
//	DW_TAG_formal_parameter:
	.byte 0x03
//	DW_AT_decl_line:
	.byte 0xce
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000400
//	DW_AT_name:
	.4byte .debug_str+0x53b
//	DW_AT_location:
	.2byte 0x5401
//	DW_TAG_formal_parameter:
	.byte 0x03
//	DW_AT_decl_line:
	.byte 0xce
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000400
//	DW_AT_name:
	.4byte .debug_str+0x548
//	DW_AT_location:
	.2byte 0x5b01
//	DW_TAG_formal_parameter:
	.byte 0x03
//	DW_AT_decl_line:
	.byte 0xce
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000400
//	DW_AT_name:
	.4byte .debug_str+0x556
//	DW_AT_location:
	.2byte 0x5001
//	DW_TAG_variable:
	.byte 0x08
//	DW_AT_decl_line:
	.byte 0xd0
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x0069
//	DW_AT_type:
	.4byte 0x00000400
//	DW_TAG_variable:
	.byte 0x08
//	DW_AT_decl_line:
	.byte 0xd0
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x006a
//	DW_AT_type:
	.4byte 0x00000400
//	DW_TAG_variable:
	.byte 0x08
//	DW_AT_decl_line:
	.byte 0xd0
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.4byte 0x0070786e
//	DW_AT_type:
	.4byte 0x00000400
//	DW_TAG_variable:
	.byte 0x08
//	DW_AT_decl_line:
	.byte 0xd0
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.4byte 0x0070796e
//	DW_AT_type:
	.4byte 0x00000400
//	DW_TAG_variable:
	.byte 0x09
//	DW_AT_decl_line:
	.byte 0xd1
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.4byte .debug_str+0x594
//	DW_AT_type:
	.4byte 0x00000400
//	DW_TAG_variable:
	.byte 0x09
//	DW_AT_decl_line:
	.byte 0xd1
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.4byte .debug_str+0x59b
//	DW_AT_type:
	.4byte 0x00000400
//	DW_TAG_variable:
	.byte 0x09
//	DW_AT_decl_line:
	.byte 0xd1
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.4byte .debug_str+0x5a0
//	DW_AT_type:
	.4byte 0x00000400
//	DW_TAG_variable:
	.byte 0x0b
//	DW_AT_decl_line:
	.byte 0xd1
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.4byte .debug_str+0x5a7
//	DW_AT_type:
	.4byte 0x00000400
//	DW_AT_location:
	.2byte 0x5401
//	DW_TAG_variable:
	.byte 0x0a
//	DW_AT_decl_line:
	.byte 0xd2
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x3170
	.byte 0x00
//	DW_AT_type:
	.4byte 0x00000d18
//	DW_AT_location:
	.4byte 0x02d89103
//	DW_TAG_variable:
	.byte 0x0a
//	DW_AT_decl_line:
	.byte 0xd2
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x3270
	.byte 0x00
//	DW_AT_type:
	.4byte 0x00000d21
//	DW_AT_location:
	.4byte 0x02c89103
//	DW_TAG_variable:
	.byte 0x08
//	DW_AT_decl_line:
	.byte 0xd3
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x7970
	.byte 0x00
//	DW_AT_type:
	.4byte 0x00000418
//	DW_TAG_variable:
	.byte 0x08
//	DW_AT_decl_line:
	.byte 0xd3
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x7870
	.byte 0x00
//	DW_AT_type:
	.4byte 0x00000418
//	DW_TAG_variable:
	.byte 0x08
//	DW_AT_decl_line:
	.byte 0xd4
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x3164
	.byte 0x00
//	DW_AT_type:
	.4byte 0x00000411
//	DW_TAG_variable:
	.byte 0x0a
//	DW_AT_decl_line:
	.byte 0xd4
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x3264
	.byte 0x00
//	DW_AT_type:
	.4byte 0x00000411
//	DW_AT_location:
	.2byte 0x6201
//	DW_TAG_inlined_subroutine:
	.byte 0x05
//	DW_AT_ranges:
	.4byte .debug_ranges_seg+0x490
//	DW_AT_entry_pc:
	.8byte ..LN9934
//	DW_AT_abstract_origin:
	.4byte 0x00000d80
//	DW_AT_call_line:
	.byte 0xfd
//	DW_AT_call_column:
	.byte 0x07
//	DW_AT_call_file:
	.byte 0x01
//	DW_TAG_formal_parameter:
	.byte 0x14
//	DW_AT_decl_line:
	.2byte 0x0141
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.2byte 0x3170
	.byte 0x00
//	DW_TAG_formal_parameter:
	.byte 0x14
//	DW_AT_decl_line:
	.2byte 0x0141
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.2byte 0x3270
	.byte 0x00
//	DW_TAG_formal_parameter:
	.byte 0x15
//	DW_AT_decl_line:
	.2byte 0x0141
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000418
//	DW_AT_name:
	.2byte 0x6d70
	.byte 0x00
//	DW_AT_location:
	.2byte 0x5e01
//	DW_TAG_variable:
	.byte 0x16
//	DW_AT_decl_line:
	.2byte 0x0143
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x3165
	.byte 0x00
//	DW_AT_type:
	.4byte 0x00000da0
//	DW_AT_location:
	.2byte 0x9102
	.byte 0x20
//	DW_TAG_variable:
	.byte 0x16
//	DW_AT_decl_line:
	.2byte 0x0143
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x3265
	.byte 0x00
//	DW_AT_type:
	.4byte 0x00000da9
//	DW_AT_location:
	.2byte 0x9102
	.byte 0x38
//	DW_TAG_variable:
	.byte 0x16
//	DW_AT_decl_line:
	.2byte 0x0143
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x3365
	.byte 0x00
//	DW_AT_type:
	.4byte 0x00000db2
//	DW_AT_location:
	.4byte 0x00d09103
//	DW_TAG_inlined_subroutine:
	.byte 0x17
//	DW_AT_low_pc:
	.8byte ..LN9967
//	DW_AT_high_pc:
	.8byte ..LN9977
//	DW_AT_abstract_origin:
	.4byte 0x00000e69
//	DW_AT_call_line:
	.2byte 0x0147
//	DW_AT_call_column:
	.byte 0x03
//	DW_AT_call_file:
	.byte 0x01
//	DW_TAG_formal_parameter:
	.byte 0x14
//	DW_AT_decl_line:
	.2byte 0x014c
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.2byte 0x3170
	.byte 0x00
//	DW_TAG_formal_parameter:
	.byte 0x14
//	DW_AT_decl_line:
	.2byte 0x014c
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.2byte 0x3270
	.byte 0x00
//	DW_TAG_formal_parameter:
	.byte 0x14
//	DW_AT_decl_line:
	.2byte 0x014c
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000418
//	DW_AT_name:
	.2byte 0x0065
//	DW_TAG_variable:
	.byte 0x18
//	DW_AT_decl_line:
	.2byte 0x014e
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x6464
	.byte 0x00
//	DW_AT_type:
	.4byte 0x00000411
	.byte 0x00
	.byte 0x00
//	DW_TAG_inlined_subroutine:
	.byte 0x19
//	DW_AT_ranges:
	.4byte .debug_ranges_seg+0x510
//	DW_AT_entry_pc:
	.8byte ..LN10098
//	DW_AT_abstract_origin:
	.4byte 0x00000d80
//	DW_AT_call_line:
	.2byte 0x010f
//	DW_AT_call_column:
	.byte 0x07
//	DW_AT_call_file:
	.byte 0x01
//	DW_TAG_formal_parameter:
	.byte 0x14
//	DW_AT_decl_line:
	.2byte 0x0141
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.2byte 0x3170
	.byte 0x00
//	DW_TAG_formal_parameter:
	.byte 0x14
//	DW_AT_decl_line:
	.2byte 0x0141
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.2byte 0x3270
	.byte 0x00
//	DW_TAG_formal_parameter:
	.byte 0x15
//	DW_AT_decl_line:
	.2byte 0x0141
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000418
//	DW_AT_name:
	.2byte 0x6d70
	.byte 0x00
//	DW_AT_location:
	.2byte 0x5e01
//	DW_TAG_variable:
	.byte 0x16
//	DW_AT_decl_line:
	.2byte 0x0143
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x3165
	.byte 0x00
//	DW_AT_type:
	.4byte 0x00000da0
//	DW_AT_location:
	.4byte 0x00e89103
//	DW_TAG_variable:
	.byte 0x16
//	DW_AT_decl_line:
	.2byte 0x0143
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x3265
	.byte 0x00
//	DW_AT_type:
	.4byte 0x00000da9
//	DW_AT_location:
	.4byte 0x01809103
//	DW_TAG_variable:
	.byte 0x16
//	DW_AT_decl_line:
	.2byte 0x0143
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x3365
	.byte 0x00
//	DW_AT_type:
	.4byte 0x00000db2
//	DW_AT_location:
	.4byte 0x01989103
//	DW_TAG_inlined_subroutine:
	.byte 0x17
//	DW_AT_low_pc:
	.8byte ..LN10131
//	DW_AT_high_pc:
	.8byte ..LN10141
//	DW_AT_abstract_origin:
	.4byte 0x00000e69
//	DW_AT_call_line:
	.2byte 0x0147
//	DW_AT_call_column:
	.byte 0x03
//	DW_AT_call_file:
	.byte 0x01
//	DW_TAG_formal_parameter:
	.byte 0x14
//	DW_AT_decl_line:
	.2byte 0x014c
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.2byte 0x3170
	.byte 0x00
//	DW_TAG_formal_parameter:
	.byte 0x14
//	DW_AT_decl_line:
	.2byte 0x014c
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.2byte 0x3270
	.byte 0x00
//	DW_TAG_formal_parameter:
	.byte 0x14
//	DW_AT_decl_line:
	.2byte 0x014c
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000418
//	DW_AT_name:
	.2byte 0x0065
//	DW_TAG_variable:
	.byte 0x18
//	DW_AT_decl_line:
	.2byte 0x014e
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x6464
	.byte 0x00
//	DW_AT_type:
	.4byte 0x00000411
	.byte 0x00
	.byte 0x00
//	DW_TAG_inlined_subroutine:
	.byte 0x19
//	DW_AT_ranges:
	.4byte .debug_ranges_seg+0x590
//	DW_AT_entry_pc:
	.8byte ..LN10254
//	DW_AT_abstract_origin:
	.4byte 0x00000d80
//	DW_AT_call_line:
	.2byte 0x0121
//	DW_AT_call_column:
	.byte 0x07
//	DW_AT_call_file:
	.byte 0x01
//	DW_TAG_formal_parameter:
	.byte 0x14
//	DW_AT_decl_line:
	.2byte 0x0141
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.2byte 0x3170
	.byte 0x00
//	DW_TAG_formal_parameter:
	.byte 0x14
//	DW_AT_decl_line:
	.2byte 0x0141
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.2byte 0x3270
	.byte 0x00
//	DW_TAG_formal_parameter:
	.byte 0x15
//	DW_AT_decl_line:
	.2byte 0x0141
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000418
//	DW_AT_name:
	.2byte 0x6d70
	.byte 0x00
//	DW_AT_location:
	.2byte 0x5301
//	DW_TAG_variable:
	.byte 0x16
//	DW_AT_decl_line:
	.2byte 0x0143
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x3165
	.byte 0x00
//	DW_AT_type:
	.4byte 0x00000da0
//	DW_AT_location:
	.4byte 0x01b09103
//	DW_TAG_variable:
	.byte 0x16
//	DW_AT_decl_line:
	.2byte 0x0143
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x3265
	.byte 0x00
//	DW_AT_type:
	.4byte 0x00000da9
//	DW_AT_location:
	.4byte 0x01c89103
//	DW_TAG_variable:
	.byte 0x16
//	DW_AT_decl_line:
	.2byte 0x0143
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x3365
	.byte 0x00
//	DW_AT_type:
	.4byte 0x00000db2
//	DW_AT_location:
	.4byte 0x01e09103
//	DW_TAG_inlined_subroutine:
	.byte 0x17
//	DW_AT_low_pc:
	.8byte ..LN10294
//	DW_AT_high_pc:
	.8byte ..LN10304
//	DW_AT_abstract_origin:
	.4byte 0x00000e69
//	DW_AT_call_line:
	.2byte 0x0147
//	DW_AT_call_column:
	.byte 0x03
//	DW_AT_call_file:
	.byte 0x01
//	DW_TAG_formal_parameter:
	.byte 0x14
//	DW_AT_decl_line:
	.2byte 0x014c
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.2byte 0x3170
	.byte 0x00
//	DW_TAG_formal_parameter:
	.byte 0x14
//	DW_AT_decl_line:
	.2byte 0x014c
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.2byte 0x3270
	.byte 0x00
//	DW_TAG_formal_parameter:
	.byte 0x14
//	DW_AT_decl_line:
	.2byte 0x014c
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000418
//	DW_AT_name:
	.2byte 0x0065
//	DW_TAG_variable:
	.byte 0x18
//	DW_AT_decl_line:
	.2byte 0x014e
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x6464
	.byte 0x00
//	DW_AT_type:
	.4byte 0x00000411
	.byte 0x00
	.byte 0x00
//	DW_TAG_inlined_subroutine:
	.byte 0x19
//	DW_AT_ranges:
	.4byte .debug_ranges_seg+0x5f0
//	DW_AT_entry_pc:
	.8byte ..LN10402
//	DW_AT_abstract_origin:
	.4byte 0x00000d80
//	DW_AT_call_line:
	.2byte 0x0131
//	DW_AT_call_column:
	.byte 0x07
//	DW_AT_call_file:
	.byte 0x01
//	DW_TAG_formal_parameter:
	.byte 0x14
//	DW_AT_decl_line:
	.2byte 0x0141
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.2byte 0x3170
	.byte 0x00
//	DW_TAG_formal_parameter:
	.byte 0x14
//	DW_AT_decl_line:
	.2byte 0x0141
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.2byte 0x3270
	.byte 0x00
//	DW_TAG_formal_parameter:
	.byte 0x15
//	DW_AT_decl_line:
	.2byte 0x0141
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000418
//	DW_AT_name:
	.2byte 0x6d70
	.byte 0x00
//	DW_AT_location:
	.2byte 0x5c01
//	DW_TAG_variable:
	.byte 0x16
//	DW_AT_decl_line:
	.2byte 0x0143
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x3165
	.byte 0x00
//	DW_AT_type:
	.4byte 0x00000da0
//	DW_AT_location:
	.4byte 0x01f89103
//	DW_TAG_variable:
	.byte 0x16
//	DW_AT_decl_line:
	.2byte 0x0143
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x3265
	.byte 0x00
//	DW_AT_type:
	.4byte 0x00000da9
//	DW_AT_location:
	.4byte 0x02909103
//	DW_TAG_variable:
	.byte 0x16
//	DW_AT_decl_line:
	.2byte 0x0143
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x3365
	.byte 0x00
//	DW_AT_type:
	.4byte 0x00000db2
//	DW_AT_location:
	.4byte 0x02a89103
//	DW_TAG_inlined_subroutine:
	.byte 0x17
//	DW_AT_low_pc:
	.8byte ..LN10439
//	DW_AT_high_pc:
	.8byte ..LN10449
//	DW_AT_abstract_origin:
	.4byte 0x00000e69
//	DW_AT_call_line:
	.2byte 0x0147
//	DW_AT_call_column:
	.byte 0x03
//	DW_AT_call_file:
	.byte 0x01
//	DW_TAG_formal_parameter:
	.byte 0x14
//	DW_AT_decl_line:
	.2byte 0x014c
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.2byte 0x3170
	.byte 0x00
//	DW_TAG_formal_parameter:
	.byte 0x14
//	DW_AT_decl_line:
	.2byte 0x014c
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.2byte 0x3270
	.byte 0x00
//	DW_TAG_formal_parameter:
	.byte 0x14
//	DW_AT_decl_line:
	.2byte 0x014c
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000418
//	DW_AT_name:
	.2byte 0x0065
//	DW_TAG_variable:
	.byte 0x18
//	DW_AT_decl_line:
	.2byte 0x014e
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x6464
	.byte 0x00
//	DW_AT_type:
	.4byte 0x00000411
	.byte 0x00
	.byte 0x00
	.byte 0x00
	.byte 0x00
	.byte 0x00
//	DW_TAG_pointer_type:
	.byte 0x0c
//	DW_AT_type:
	.4byte 0x00000400
//	DW_TAG_subprogram:
	.byte 0x1c
//	DW_AT_decl_line:
	.2byte 0x0176
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_declaration:
	.byte 0x01
//	DW_AT_prototyped:
	.byte 0x01
//	DW_AT_name:
	.4byte .debug_str+0x604
	.4byte .debug_str+0x604
//	DW_AT_external:
	.byte 0x01
//	DW_AT_inline:
	.byte 0x01
//	DW_TAG_formal_parameter:
	.byte 0x11
//	DW_AT_type:
	.4byte 0x000015ec
//	DW_TAG_formal_parameter:
	.byte 0x11
//	DW_AT_type:
	.4byte 0x000015ec
//	DW_TAG_formal_parameter:
	.byte 0x11
//	DW_AT_type:
	.4byte 0x00000407
//	DW_TAG_formal_parameter:
	.byte 0x11
//	DW_AT_type:
	.4byte 0x00000407
//	DW_TAG_formal_parameter:
	.byte 0x11
//	DW_AT_type:
	.4byte 0x00000407
//	DW_TAG_formal_parameter:
	.byte 0x11
//	DW_AT_type:
	.4byte 0x00000407
//	DW_TAG_formal_parameter:
	.byte 0x11
//	DW_AT_type:
	.4byte 0x00000418
//	DW_TAG_formal_parameter:
	.byte 0x11
//	DW_AT_type:
	.4byte 0x00000418
//	DW_TAG_formal_parameter:
	.byte 0x11
//	DW_AT_type:
	.4byte 0x00000418
//	DW_TAG_formal_parameter:
	.byte 0x11
//	DW_AT_type:
	.4byte 0x00000418
//	DW_TAG_formal_parameter:
	.byte 0x11
//	DW_AT_type:
	.4byte 0x00000418
//	DW_TAG_formal_parameter:
	.byte 0x11
//	DW_AT_type:
	.4byte 0x00000418
//	DW_TAG_formal_parameter:
	.byte 0x11
//	DW_AT_type:
	.4byte 0x00000418
//	DW_TAG_formal_parameter:
	.byte 0x11
//	DW_AT_type:
	.4byte 0x00000418
//	DW_TAG_formal_parameter:
	.byte 0x11
//	DW_AT_type:
	.4byte 0x00000418
//	DW_TAG_formal_parameter:
	.byte 0x11
//	DW_AT_type:
	.4byte 0x00000418
//	DW_TAG_formal_parameter:
	.byte 0x11
//	DW_AT_type:
	.4byte 0x00000418
//	DW_TAG_formal_parameter:
	.byte 0x11
//	DW_AT_type:
	.4byte 0x000015ec
//	DW_TAG_formal_parameter:
	.byte 0x11
//	DW_AT_type:
	.4byte 0x000015ec
//	DW_TAG_formal_parameter:
	.byte 0x11
//	DW_AT_type:
	.4byte 0x000015ec
//	DW_TAG_formal_parameter:
	.byte 0x11
//	DW_AT_type:
	.4byte 0x000015ec
	.byte 0x00
//	DW_TAG_array_type:
	.byte 0x1a
//	DW_AT_type:
	.4byte 0x00000411
//	DW_AT_byte_size:
	.byte 0x18
//	DW_TAG_subrange_type:
	.byte 0x1b
//	DW_AT_upper_bound:
	.byte 0x02
	.byte 0x00
//	DW_TAG_array_type:
	.byte 0x1a
//	DW_AT_type:
	.4byte 0x00000411
//	DW_AT_byte_size:
	.byte 0x18
//	DW_TAG_subrange_type:
	.byte 0x1b
//	DW_AT_upper_bound:
	.byte 0x02
	.byte 0x00
//	DW_TAG_array_type:
	.byte 0x1a
//	DW_AT_type:
	.4byte 0x00000411
//	DW_AT_byte_size:
	.byte 0x18
//	DW_TAG_subrange_type:
	.byte 0x1b
//	DW_AT_upper_bound:
	.byte 0x02
	.byte 0x00
//	DW_TAG_array_type:
	.byte 0x1a
//	DW_AT_type:
	.4byte 0x00000411
//	DW_AT_byte_size:
	.byte 0x18
//	DW_TAG_subrange_type:
	.byte 0x1b
//	DW_AT_upper_bound:
	.byte 0x02
	.byte 0x00
//	DW_TAG_subprogram:
	.byte 0x1d
//	DW_AT_decl_line:
	.2byte 0x0176
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_abstract_origin:
	.4byte 0x000015f1
//	DW_AT_frame_base:
	.2byte 0x7702
	.byte 0x00
//	DW_AT_low_pc:
	.8byte ..L484
//	DW_AT_high_pc:
	.8byte ..LNcalc_c2l_grid_info.12336
//	DW_TAG_formal_parameter:
	.byte 0x20
//	DW_AT_decl_line:
	.2byte 0x0176
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x000015ec
//	DW_AT_name:
	.4byte .debug_str+0x5f8
//	DW_AT_location:
	.2byte 0x5501
//	DW_TAG_formal_parameter:
	.byte 0x20
//	DW_AT_decl_line:
	.2byte 0x0176
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x000015ec
//	DW_AT_name:
	.4byte .debug_str+0x5fe
//	DW_AT_location:
	.2byte 0x5401
//	DW_TAG_formal_parameter:
	.byte 0x15
//	DW_AT_decl_line:
	.2byte 0x0176
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.2byte 0x7478
	.byte 0x00
//	DW_AT_location:
	.2byte 0x5101
//	DW_TAG_formal_parameter:
	.byte 0x15
//	DW_AT_decl_line:
	.2byte 0x0176
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.2byte 0x7479
	.byte 0x00
//	DW_AT_location:
	.2byte 0x5201
//	DW_TAG_formal_parameter:
	.byte 0x15
//	DW_AT_decl_line:
	.2byte 0x0176
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.2byte 0x6378
	.byte 0x00
//	DW_AT_location:
	.2byte 0x5801
//	DW_TAG_formal_parameter:
	.byte 0x15
//	DW_AT_decl_line:
	.2byte 0x0176
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.2byte 0x6379
	.byte 0x00
//	DW_AT_location:
	.2byte 0x5901
//	DW_TAG_formal_parameter:
	.byte 0x15
//	DW_AT_decl_line:
	.2byte 0x0177
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000418
//	DW_AT_name:
	.2byte 0x7864
	.byte 0x00
//	DW_AT_location:
	.2byte 0x7602
	.byte 0x10
//	DW_TAG_formal_parameter:
	.byte 0x15
//	DW_AT_decl_line:
	.2byte 0x0177
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000418
//	DW_AT_name:
	.2byte 0x7964
	.byte 0x00
//	DW_AT_location:
	.2byte 0x7602
	.byte 0x18
//	DW_TAG_formal_parameter:
	.byte 0x20
//	DW_AT_decl_line:
	.2byte 0x0177
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000418
//	DW_AT_name:
	.4byte .debug_str+0x4eb
//	DW_AT_location:
	.2byte 0x7602
	.byte 0x20
//	DW_TAG_formal_parameter:
	.byte 0x20
//	DW_AT_decl_line:
	.2byte 0x0177
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000418
//	DW_AT_name:
	.4byte .debug_str+0x4f0
//	DW_AT_location:
	.2byte 0x7602
	.byte 0x28
//	DW_TAG_formal_parameter:
	.byte 0x20
//	DW_AT_decl_line:
	.2byte 0x0177
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000418
//	DW_AT_name:
	.4byte .debug_str+0x4f7
//	DW_AT_location:
	.2byte 0x7602
	.byte 0x30
//	DW_TAG_formal_parameter:
	.byte 0x20
//	DW_AT_decl_line:
	.2byte 0x0177
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000418
//	DW_AT_name:
	.4byte .debug_str+0x4fe
//	DW_AT_location:
	.2byte 0x7602
	.byte 0x38
//	DW_TAG_formal_parameter:
	.byte 0x20
//	DW_AT_decl_line:
	.2byte 0x0178
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000418
//	DW_AT_name:
	.4byte .debug_str+0x505
//	DW_AT_location:
	.4byte 0x00c07603
//	DW_TAG_formal_parameter:
	.byte 0x20
//	DW_AT_decl_line:
	.2byte 0x0178
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000418
//	DW_AT_name:
	.4byte .debug_str+0x50c
//	DW_AT_location:
	.4byte 0x00c87603
//	DW_TAG_formal_parameter:
	.byte 0x20
//	DW_AT_decl_line:
	.2byte 0x0178
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000418
//	DW_AT_name:
	.4byte .debug_str+0x511
//	DW_AT_location:
	.4byte 0x00d07603
//	DW_TAG_formal_parameter:
	.byte 0x20
//	DW_AT_decl_line:
	.2byte 0x0178
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000418
//	DW_AT_name:
	.4byte .debug_str+0x516
//	DW_AT_location:
	.4byte 0x00d87603
//	DW_TAG_formal_parameter:
	.byte 0x20
//	DW_AT_decl_line:
	.2byte 0x0178
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000418
//	DW_AT_name:
	.4byte .debug_str+0x51b
//	DW_AT_location:
	.4byte 0x00e07603
//	DW_TAG_formal_parameter:
	.byte 0x20
//	DW_AT_decl_line:
	.2byte 0x0179
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x000015ec
//	DW_AT_name:
	.4byte .debug_str+0x52e
//	DW_AT_location:
	.4byte 0x00e87603
//	DW_TAG_formal_parameter:
	.byte 0x20
//	DW_AT_decl_line:
	.2byte 0x0179
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x000015ec
//	DW_AT_name:
	.4byte .debug_str+0x53b
//	DW_AT_location:
	.4byte 0x00f07603
//	DW_TAG_formal_parameter:
	.byte 0x20
//	DW_AT_decl_line:
	.2byte 0x0179
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x000015ec
//	DW_AT_name:
	.4byte .debug_str+0x548
//	DW_AT_location:
	.4byte 0x00f87603
//	DW_TAG_formal_parameter:
	.byte 0x20
//	DW_AT_decl_line:
	.2byte 0x0179
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x000015ec
//	DW_AT_name:
	.4byte .debug_str+0x556
//	DW_AT_location:
	.4byte 0x01807603
//	DW_TAG_variable:
	.byte 0x18
//	DW_AT_decl_line:
	.2byte 0x017b
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x0078
//	DW_AT_type:
	.4byte 0x00000418
//	DW_TAG_variable:
	.byte 0x18
//	DW_AT_decl_line:
	.2byte 0x017b
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x0079
//	DW_AT_type:
	.4byte 0x00000418
//	DW_TAG_variable:
	.byte 0x18
//	DW_AT_decl_line:
	.2byte 0x017b
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x007a
//	DW_AT_type:
	.4byte 0x00000418
//	DW_TAG_variable:
	.byte 0x22
//	DW_AT_decl_line:
	.2byte 0x017b
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.4byte .debug_str+0x617
//	DW_AT_type:
	.4byte 0x00000418
//	DW_TAG_variable:
	.byte 0x22
//	DW_AT_decl_line:
	.2byte 0x017b
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.4byte .debug_str+0x61e
//	DW_AT_type:
	.4byte 0x00000418
//	DW_TAG_variable:
	.byte 0x18
//	DW_AT_decl_line:
	.2byte 0x017c
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x786e
	.byte 0x00
//	DW_AT_type:
	.4byte 0x00000400
//	DW_TAG_variable:
	.byte 0x16
//	DW_AT_decl_line:
	.2byte 0x017c
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x796e
	.byte 0x00
//	DW_AT_type:
	.4byte 0x00000400
//	DW_AT_location:
	.2byte 0x5f01
//	DW_TAG_variable:
	.byte 0x18
//	DW_AT_decl_line:
	.2byte 0x017c
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.4byte 0x0070786e
//	DW_AT_type:
	.4byte 0x00000400
//	DW_TAG_variable:
	.byte 0x18
//	DW_AT_decl_line:
	.2byte 0x017c
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.4byte 0x0070796e
//	DW_AT_type:
	.4byte 0x00000400
//	DW_TAG_variable:
	.byte 0x18
//	DW_AT_decl_line:
	.2byte 0x017c
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x0069
//	DW_AT_type:
	.4byte 0x00000400
//	DW_TAG_variable:
	.byte 0x18
//	DW_AT_decl_line:
	.2byte 0x017c
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x006a
//	DW_AT_type:
	.4byte 0x00000400
//	DW_TAG_variable:
	.byte 0x16
//	DW_AT_decl_line:
	.2byte 0x017d
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x3170
	.byte 0x00
//	DW_AT_type:
	.4byte 0x0000166b
//	DW_AT_location:
	.4byte 0x03d09103
//	DW_TAG_variable:
	.byte 0x16
//	DW_AT_decl_line:
	.2byte 0x017d
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x3270
	.byte 0x00
//	DW_AT_type:
	.4byte 0x00001674
//	DW_AT_location:
	.4byte 0x03e89103
//	DW_TAG_variable:
	.byte 0x16
//	DW_AT_decl_line:
	.2byte 0x017d
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x3370
	.byte 0x00
//	DW_AT_type:
	.4byte 0x0000167d
//	DW_AT_location:
	.4byte 0x04809103
//	DW_TAG_variable:
	.byte 0x16
//	DW_AT_decl_line:
	.2byte 0x017d
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x3470
	.byte 0x00
//	DW_AT_type:
	.4byte 0x00001686
//	DW_AT_location:
	.4byte 0x04989103
//	DW_TAG_inlined_subroutine:
	.byte 0x19
//	DW_AT_ranges:
	.4byte .debug_ranges_seg+0x670
//	DW_AT_entry_pc:
	.8byte ..LN10708
//	DW_AT_abstract_origin:
	.4byte 0x00000d2a
//	DW_AT_call_line:
	.2byte 0x01c3
//	DW_AT_call_column:
	.byte 0x03
//	DW_AT_call_file:
	.byte 0x01
//	DW_TAG_formal_parameter:
	.byte 0x07
//	DW_AT_decl_line:
	.byte 0xcc
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000400
//	DW_AT_name:
	.2byte 0x786e
	.byte 0x00
//	DW_TAG_formal_parameter:
	.byte 0x07
//	DW_AT_decl_line:
	.byte 0xcc
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000400
//	DW_AT_name:
	.2byte 0x796e
	.byte 0x00
//	DW_TAG_formal_parameter:
	.byte 0x06
//	DW_AT_decl_line:
	.byte 0xcc
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.4byte .debug_str+0x5b5
//	DW_TAG_formal_parameter:
	.byte 0x06
//	DW_AT_decl_line:
	.byte 0xcc
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.4byte .debug_str+0x5ba
//	DW_TAG_formal_parameter:
	.byte 0x06
//	DW_AT_decl_line:
	.byte 0xcd
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.4byte .debug_str+0x5bf
//	DW_TAG_formal_parameter:
	.byte 0x06
//	DW_AT_decl_line:
	.byte 0xcd
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.4byte .debug_str+0x5c4
//	DW_TAG_formal_parameter:
	.byte 0x06
//	DW_AT_decl_line:
	.byte 0xcd
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000418
//	DW_AT_name:
	.4byte .debug_str+0x4f0
//	DW_TAG_formal_parameter:
	.byte 0x06
//	DW_AT_decl_line:
	.byte 0xcd
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000418
//	DW_AT_name:
	.4byte .debug_str+0x4f7
//	DW_TAG_formal_parameter:
	.byte 0x06
//	DW_AT_decl_line:
	.byte 0xcd
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000418
//	DW_AT_name:
	.4byte .debug_str+0x4fe
//	DW_TAG_formal_parameter:
	.byte 0x06
//	DW_AT_decl_line:
	.byte 0xcd
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000418
//	DW_AT_name:
	.4byte .debug_str+0x505
//	DW_TAG_formal_parameter:
	.byte 0x03
//	DW_AT_decl_line:
	.byte 0xce
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000400
//	DW_AT_name:
	.4byte .debug_str+0x52e
//	DW_AT_location:
	.2byte 0x5101
//	DW_TAG_formal_parameter:
	.byte 0x03
//	DW_AT_decl_line:
	.byte 0xce
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000400
//	DW_AT_name:
	.4byte .debug_str+0x53b
//	DW_AT_location:
	.2byte 0x5401
//	DW_TAG_formal_parameter:
	.byte 0x03
//	DW_AT_decl_line:
	.byte 0xce
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000400
//	DW_AT_name:
	.4byte .debug_str+0x548
//	DW_AT_location:
	.2byte 0x5b01
//	DW_TAG_formal_parameter:
	.byte 0x03
//	DW_AT_decl_line:
	.byte 0xce
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000400
//	DW_AT_name:
	.4byte .debug_str+0x556
//	DW_AT_location:
	.2byte 0x5001
//	DW_TAG_variable:
	.byte 0x08
//	DW_AT_decl_line:
	.byte 0xd0
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x0069
//	DW_AT_type:
	.4byte 0x00000400
//	DW_TAG_variable:
	.byte 0x08
//	DW_AT_decl_line:
	.byte 0xd0
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x006a
//	DW_AT_type:
	.4byte 0x00000400
//	DW_TAG_variable:
	.byte 0x08
//	DW_AT_decl_line:
	.byte 0xd0
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.4byte 0x0070786e
//	DW_AT_type:
	.4byte 0x00000400
//	DW_TAG_variable:
	.byte 0x08
//	DW_AT_decl_line:
	.byte 0xd0
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.4byte 0x0070796e
//	DW_AT_type:
	.4byte 0x00000400
//	DW_TAG_variable:
	.byte 0x09
//	DW_AT_decl_line:
	.byte 0xd1
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.4byte .debug_str+0x594
//	DW_AT_type:
	.4byte 0x00000400
//	DW_TAG_variable:
	.byte 0x09
//	DW_AT_decl_line:
	.byte 0xd1
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.4byte .debug_str+0x59b
//	DW_AT_type:
	.4byte 0x00000400
//	DW_TAG_variable:
	.byte 0x09
//	DW_AT_decl_line:
	.byte 0xd1
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.4byte .debug_str+0x5a0
//	DW_AT_type:
	.4byte 0x00000400
//	DW_TAG_variable:
	.byte 0x0b
//	DW_AT_decl_line:
	.byte 0xd1
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.4byte .debug_str+0x5a7
//	DW_AT_type:
	.4byte 0x00000400
//	DW_AT_location:
	.2byte 0x5401
//	DW_TAG_variable:
	.byte 0x0a
//	DW_AT_decl_line:
	.byte 0xd2
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x3170
	.byte 0x00
//	DW_AT_type:
	.4byte 0x00000d18
//	DW_AT_location:
	.4byte 0x02d89103
//	DW_TAG_variable:
	.byte 0x0a
//	DW_AT_decl_line:
	.byte 0xd2
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x3270
	.byte 0x00
//	DW_AT_type:
	.4byte 0x00000d21
//	DW_AT_location:
	.4byte 0x02c89103
//	DW_TAG_variable:
	.byte 0x08
//	DW_AT_decl_line:
	.byte 0xd3
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x7970
	.byte 0x00
//	DW_AT_type:
	.4byte 0x00000418
//	DW_TAG_variable:
	.byte 0x08
//	DW_AT_decl_line:
	.byte 0xd3
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x7870
	.byte 0x00
//	DW_AT_type:
	.4byte 0x00000418
//	DW_TAG_variable:
	.byte 0x08
//	DW_AT_decl_line:
	.byte 0xd4
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x3164
	.byte 0x00
//	DW_AT_type:
	.4byte 0x00000411
//	DW_TAG_variable:
	.byte 0x0a
//	DW_AT_decl_line:
	.byte 0xd4
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x3264
	.byte 0x00
//	DW_AT_type:
	.4byte 0x00000411
//	DW_AT_location:
	.2byte 0x6201
//	DW_TAG_inlined_subroutine:
	.byte 0x05
//	DW_AT_ranges:
	.4byte .debug_ranges_seg+0x6d0
//	DW_AT_entry_pc:
	.8byte ..LN11579
//	DW_AT_abstract_origin:
	.4byte 0x00000d80
//	DW_AT_call_line:
	.byte 0xfd
//	DW_AT_call_column:
	.byte 0x07
//	DW_AT_call_file:
	.byte 0x01
//	DW_TAG_formal_parameter:
	.byte 0x14
//	DW_AT_decl_line:
	.2byte 0x0141
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.2byte 0x3170
	.byte 0x00
//	DW_TAG_formal_parameter:
	.byte 0x14
//	DW_AT_decl_line:
	.2byte 0x0141
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.2byte 0x3270
	.byte 0x00
//	DW_TAG_formal_parameter:
	.byte 0x15
//	DW_AT_decl_line:
	.2byte 0x0141
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000418
//	DW_AT_name:
	.2byte 0x6d70
	.byte 0x00
//	DW_AT_location:
	.2byte 0x5e01
//	DW_TAG_variable:
	.byte 0x16
//	DW_AT_decl_line:
	.2byte 0x0143
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x3165
	.byte 0x00
//	DW_AT_type:
	.4byte 0x00000da0
//	DW_AT_location:
	.2byte 0x9102
	.byte 0x20
//	DW_TAG_variable:
	.byte 0x16
//	DW_AT_decl_line:
	.2byte 0x0143
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x3265
	.byte 0x00
//	DW_AT_type:
	.4byte 0x00000da9
//	DW_AT_location:
	.2byte 0x9102
	.byte 0x38
//	DW_TAG_variable:
	.byte 0x16
//	DW_AT_decl_line:
	.2byte 0x0143
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x3365
	.byte 0x00
//	DW_AT_type:
	.4byte 0x00000db2
//	DW_AT_location:
	.4byte 0x00d09103
//	DW_TAG_inlined_subroutine:
	.byte 0x17
//	DW_AT_low_pc:
	.8byte ..LN11612
//	DW_AT_high_pc:
	.8byte ..LN11622
//	DW_AT_abstract_origin:
	.4byte 0x00000e69
//	DW_AT_call_line:
	.2byte 0x0147
//	DW_AT_call_column:
	.byte 0x03
//	DW_AT_call_file:
	.byte 0x01
//	DW_TAG_formal_parameter:
	.byte 0x14
//	DW_AT_decl_line:
	.2byte 0x014c
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.2byte 0x3170
	.byte 0x00
//	DW_TAG_formal_parameter:
	.byte 0x14
//	DW_AT_decl_line:
	.2byte 0x014c
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.2byte 0x3270
	.byte 0x00
//	DW_TAG_formal_parameter:
	.byte 0x14
//	DW_AT_decl_line:
	.2byte 0x014c
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000418
//	DW_AT_name:
	.2byte 0x0065
//	DW_TAG_variable:
	.byte 0x18
//	DW_AT_decl_line:
	.2byte 0x014e
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x6464
	.byte 0x00
//	DW_AT_type:
	.4byte 0x00000411
	.byte 0x00
	.byte 0x00
//	DW_TAG_inlined_subroutine:
	.byte 0x19
//	DW_AT_ranges:
	.4byte .debug_ranges_seg+0x750
//	DW_AT_entry_pc:
	.8byte ..LN11743
//	DW_AT_abstract_origin:
	.4byte 0x00000d80
//	DW_AT_call_line:
	.2byte 0x010f
//	DW_AT_call_column:
	.byte 0x07
//	DW_AT_call_file:
	.byte 0x01
//	DW_TAG_formal_parameter:
	.byte 0x14
//	DW_AT_decl_line:
	.2byte 0x0141
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.2byte 0x3170
	.byte 0x00
//	DW_TAG_formal_parameter:
	.byte 0x14
//	DW_AT_decl_line:
	.2byte 0x0141
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.2byte 0x3270
	.byte 0x00
//	DW_TAG_formal_parameter:
	.byte 0x15
//	DW_AT_decl_line:
	.2byte 0x0141
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000418
//	DW_AT_name:
	.2byte 0x6d70
	.byte 0x00
//	DW_AT_location:
	.2byte 0x5e01
//	DW_TAG_variable:
	.byte 0x16
//	DW_AT_decl_line:
	.2byte 0x0143
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x3165
	.byte 0x00
//	DW_AT_type:
	.4byte 0x00000da0
//	DW_AT_location:
	.4byte 0x00e89103
//	DW_TAG_variable:
	.byte 0x16
//	DW_AT_decl_line:
	.2byte 0x0143
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x3265
	.byte 0x00
//	DW_AT_type:
	.4byte 0x00000da9
//	DW_AT_location:
	.4byte 0x01809103
//	DW_TAG_variable:
	.byte 0x16
//	DW_AT_decl_line:
	.2byte 0x0143
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x3365
	.byte 0x00
//	DW_AT_type:
	.4byte 0x00000db2
//	DW_AT_location:
	.4byte 0x01989103
//	DW_TAG_inlined_subroutine:
	.byte 0x17
//	DW_AT_low_pc:
	.8byte ..LN11776
//	DW_AT_high_pc:
	.8byte ..LN11786
//	DW_AT_abstract_origin:
	.4byte 0x00000e69
//	DW_AT_call_line:
	.2byte 0x0147
//	DW_AT_call_column:
	.byte 0x03
//	DW_AT_call_file:
	.byte 0x01
//	DW_TAG_formal_parameter:
	.byte 0x14
//	DW_AT_decl_line:
	.2byte 0x014c
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.2byte 0x3170
	.byte 0x00
//	DW_TAG_formal_parameter:
	.byte 0x14
//	DW_AT_decl_line:
	.2byte 0x014c
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.2byte 0x3270
	.byte 0x00
//	DW_TAG_formal_parameter:
	.byte 0x14
//	DW_AT_decl_line:
	.2byte 0x014c
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000418
//	DW_AT_name:
	.2byte 0x0065
//	DW_TAG_variable:
	.byte 0x18
//	DW_AT_decl_line:
	.2byte 0x014e
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x6464
	.byte 0x00
//	DW_AT_type:
	.4byte 0x00000411
	.byte 0x00
	.byte 0x00
//	DW_TAG_inlined_subroutine:
	.byte 0x19
//	DW_AT_ranges:
	.4byte .debug_ranges_seg+0x7d0
//	DW_AT_entry_pc:
	.8byte ..LN11899
//	DW_AT_abstract_origin:
	.4byte 0x00000d80
//	DW_AT_call_line:
	.2byte 0x0121
//	DW_AT_call_column:
	.byte 0x07
//	DW_AT_call_file:
	.byte 0x01
//	DW_TAG_formal_parameter:
	.byte 0x14
//	DW_AT_decl_line:
	.2byte 0x0141
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.2byte 0x3170
	.byte 0x00
//	DW_TAG_formal_parameter:
	.byte 0x14
//	DW_AT_decl_line:
	.2byte 0x0141
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.2byte 0x3270
	.byte 0x00
//	DW_TAG_formal_parameter:
	.byte 0x15
//	DW_AT_decl_line:
	.2byte 0x0141
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000418
//	DW_AT_name:
	.2byte 0x6d70
	.byte 0x00
//	DW_AT_location:
	.2byte 0x5301
//	DW_TAG_variable:
	.byte 0x16
//	DW_AT_decl_line:
	.2byte 0x0143
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x3165
	.byte 0x00
//	DW_AT_type:
	.4byte 0x00000da0
//	DW_AT_location:
	.4byte 0x01b09103
//	DW_TAG_variable:
	.byte 0x16
//	DW_AT_decl_line:
	.2byte 0x0143
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x3265
	.byte 0x00
//	DW_AT_type:
	.4byte 0x00000da9
//	DW_AT_location:
	.4byte 0x01c89103
//	DW_TAG_variable:
	.byte 0x16
//	DW_AT_decl_line:
	.2byte 0x0143
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x3365
	.byte 0x00
//	DW_AT_type:
	.4byte 0x00000db2
//	DW_AT_location:
	.4byte 0x01e09103
//	DW_TAG_inlined_subroutine:
	.byte 0x17
//	DW_AT_low_pc:
	.8byte ..LN11939
//	DW_AT_high_pc:
	.8byte ..LN11949
//	DW_AT_abstract_origin:
	.4byte 0x00000e69
//	DW_AT_call_line:
	.2byte 0x0147
//	DW_AT_call_column:
	.byte 0x03
//	DW_AT_call_file:
	.byte 0x01
//	DW_TAG_formal_parameter:
	.byte 0x14
//	DW_AT_decl_line:
	.2byte 0x014c
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.2byte 0x3170
	.byte 0x00
//	DW_TAG_formal_parameter:
	.byte 0x14
//	DW_AT_decl_line:
	.2byte 0x014c
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.2byte 0x3270
	.byte 0x00
//	DW_TAG_formal_parameter:
	.byte 0x14
//	DW_AT_decl_line:
	.2byte 0x014c
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000418
//	DW_AT_name:
	.2byte 0x0065
//	DW_TAG_variable:
	.byte 0x18
//	DW_AT_decl_line:
	.2byte 0x014e
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x6464
	.byte 0x00
//	DW_AT_type:
	.4byte 0x00000411
	.byte 0x00
	.byte 0x00
//	DW_TAG_inlined_subroutine:
	.byte 0x19
//	DW_AT_ranges:
	.4byte .debug_ranges_seg+0x830
//	DW_AT_entry_pc:
	.8byte ..LN12047
//	DW_AT_abstract_origin:
	.4byte 0x00000d80
//	DW_AT_call_line:
	.2byte 0x0131
//	DW_AT_call_column:
	.byte 0x07
//	DW_AT_call_file:
	.byte 0x01
//	DW_TAG_formal_parameter:
	.byte 0x14
//	DW_AT_decl_line:
	.2byte 0x0141
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.2byte 0x3170
	.byte 0x00
//	DW_TAG_formal_parameter:
	.byte 0x14
//	DW_AT_decl_line:
	.2byte 0x0141
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.2byte 0x3270
	.byte 0x00
//	DW_TAG_formal_parameter:
	.byte 0x15
//	DW_AT_decl_line:
	.2byte 0x0141
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000418
//	DW_AT_name:
	.2byte 0x6d70
	.byte 0x00
//	DW_AT_location:
	.2byte 0x5c01
//	DW_TAG_variable:
	.byte 0x16
//	DW_AT_decl_line:
	.2byte 0x0143
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x3165
	.byte 0x00
//	DW_AT_type:
	.4byte 0x00000da0
//	DW_AT_location:
	.4byte 0x01f89103
//	DW_TAG_variable:
	.byte 0x16
//	DW_AT_decl_line:
	.2byte 0x0143
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x3265
	.byte 0x00
//	DW_AT_type:
	.4byte 0x00000da9
//	DW_AT_location:
	.4byte 0x02909103
//	DW_TAG_variable:
	.byte 0x16
//	DW_AT_decl_line:
	.2byte 0x0143
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x3365
	.byte 0x00
//	DW_AT_type:
	.4byte 0x00000db2
//	DW_AT_location:
	.4byte 0x02a89103
//	DW_TAG_inlined_subroutine:
	.byte 0x17
//	DW_AT_low_pc:
	.8byte ..LN12084
//	DW_AT_high_pc:
	.8byte ..LN12094
//	DW_AT_abstract_origin:
	.4byte 0x00000e69
//	DW_AT_call_line:
	.2byte 0x0147
//	DW_AT_call_column:
	.byte 0x03
//	DW_AT_call_file:
	.byte 0x01
//	DW_TAG_formal_parameter:
	.byte 0x14
//	DW_AT_decl_line:
	.2byte 0x014c
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.2byte 0x3170
	.byte 0x00
//	DW_TAG_formal_parameter:
	.byte 0x14
//	DW_AT_decl_line:
	.2byte 0x014c
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000407
//	DW_AT_name:
	.2byte 0x3270
	.byte 0x00
//	DW_TAG_formal_parameter:
	.byte 0x14
//	DW_AT_decl_line:
	.2byte 0x014c
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_type:
	.4byte 0x00000418
//	DW_AT_name:
	.2byte 0x0065
//	DW_TAG_variable:
	.byte 0x18
//	DW_AT_decl_line:
	.2byte 0x014e
//	DW_AT_decl_file:
	.byte 0x01
//	DW_AT_name:
	.2byte 0x6464
	.byte 0x00
//	DW_AT_type:
	.4byte 0x00000411
	.byte 0x00
	.byte 0x00
	.byte 0x00
	.byte 0x00
	.byte 0x00
// -- Begin DWARF2 SEGMENT .debug_line
	.section .debug_line
.debug_line_seg:
	.align 1
// -- Begin DWARF2 SEGMENT .debug_abbrev
	.section .debug_abbrev
.debug_abbrev_seg:
	.align 1
	.byte 0x01
	.byte 0x11
	.byte 0x01
	.byte 0x1b
	.byte 0x0e
	.byte 0x03
	.byte 0x0e
	.byte 0x25
	.byte 0x0e
	.2byte 0x7681
	.byte 0x0e
	.byte 0x13
	.byte 0x0b
	.byte 0x53
	.byte 0x0c
	.byte 0x11
	.byte 0x01
	.byte 0x55
	.byte 0x06
	.byte 0x10
	.byte 0x06
	.2byte 0x0000
	.byte 0x02
	.byte 0x2e
	.byte 0x01
	.byte 0x3b
	.byte 0x0b
	.byte 0x3a
	.byte 0x0b
	.byte 0x27
	.byte 0x0c
	.byte 0x03
	.byte 0x0e
	.2byte 0x4087
	.byte 0x0e
	.byte 0x11
	.byte 0x01
	.byte 0x12
	.byte 0x01
	.byte 0x3f
	.byte 0x0c
	.2byte 0x0000
	.byte 0x03
	.byte 0x05
	.byte 0x00
	.byte 0x3b
	.byte 0x0b
	.byte 0x3a
	.byte 0x0b
	.byte 0x49
	.byte 0x13
	.byte 0x03
	.byte 0x0e
	.byte 0x02
	.byte 0x0a
	.2byte 0x0000
	.byte 0x04
	.byte 0x05
	.byte 0x00
	.byte 0x3b
	.byte 0x0b
	.byte 0x3a
	.byte 0x0b
	.byte 0x49
	.byte 0x13
	.byte 0x03
	.byte 0x08
	.byte 0x02
	.byte 0x0a
	.2byte 0x0000
	.byte 0x05
	.byte 0x1d
	.byte 0x01
	.byte 0x55
	.byte 0x06
	.byte 0x52
	.byte 0x01
	.byte 0x31
	.byte 0x13
	.byte 0x59
	.byte 0x0b
	.byte 0x57
	.byte 0x0b
	.byte 0x58
	.byte 0x0b
	.2byte 0x0000
	.byte 0x06
	.byte 0x05
	.byte 0x00
	.byte 0x3b
	.byte 0x0b
	.byte 0x3a
	.byte 0x0b
	.byte 0x49
	.byte 0x13
	.byte 0x03
	.byte 0x0e
	.2byte 0x0000
	.byte 0x07
	.byte 0x05
	.byte 0x00
	.byte 0x3b
	.byte 0x0b
	.byte 0x3a
	.byte 0x0b
	.byte 0x49
	.byte 0x13
	.byte 0x03
	.byte 0x08
	.2byte 0x0000
	.byte 0x08
	.byte 0x34
	.byte 0x00
	.byte 0x3b
	.byte 0x0b
	.byte 0x3a
	.byte 0x0b
	.byte 0x03
	.byte 0x08
	.byte 0x49
	.byte 0x13
	.2byte 0x0000
	.byte 0x09
	.byte 0x34
	.byte 0x00
	.byte 0x3b
	.byte 0x0b
	.byte 0x3a
	.byte 0x0b
	.byte 0x03
	.byte 0x0e
	.byte 0x49
	.byte 0x13
	.2byte 0x0000
	.byte 0x0a
	.byte 0x34
	.byte 0x00
	.byte 0x3b
	.byte 0x0b
	.byte 0x3a
	.byte 0x0b
	.byte 0x03
	.byte 0x08
	.byte 0x49
	.byte 0x13
	.byte 0x02
	.byte 0x0a
	.2byte 0x0000
	.byte 0x0b
	.byte 0x34
	.byte 0x00
	.byte 0x3b
	.byte 0x0b
	.byte 0x3a
	.byte 0x0b
	.byte 0x03
	.byte 0x0e
	.byte 0x49
	.byte 0x13
	.byte 0x02
	.byte 0x0a
	.2byte 0x0000
	.byte 0x0c
	.byte 0x0f
	.byte 0x00
	.byte 0x49
	.byte 0x13
	.2byte 0x0000
	.byte 0x0d
	.byte 0x26
	.byte 0x00
	.byte 0x49
	.byte 0x13
	.2byte 0x0000
	.byte 0x0e
	.byte 0x24
	.byte 0x00
	.byte 0x0b
	.byte 0x0b
	.byte 0x3e
	.byte 0x0b
	.byte 0x03
	.byte 0x08
	.2byte 0x0000
	.byte 0x0f
	.byte 0x24
	.byte 0x00
	.byte 0x0b
	.byte 0x0b
	.byte 0x3e
	.byte 0x0b
	.byte 0x03
	.byte 0x0e
	.2byte 0x0000
	.byte 0x10
	.byte 0x2e
	.byte 0x01
	.byte 0x3b
	.byte 0x0b
	.byte 0x3a
	.byte 0x0b
	.byte 0x3c
	.byte 0x0c
	.byte 0x27
	.byte 0x0c
	.byte 0x03
	.byte 0x0e
	.2byte 0x4087
	.byte 0x0e
	.byte 0x3f
	.byte 0x0c
	.byte 0x20
	.byte 0x0b
	.2byte 0x0000
	.byte 0x11
	.byte 0x05
	.byte 0x00
	.byte 0x49
	.byte 0x13
	.2byte 0x0000
	.byte 0x12
	.byte 0x2e
	.byte 0x01
	.byte 0x3b
	.byte 0x0b
	.byte 0x3a
	.byte 0x0b
	.byte 0x31
	.byte 0x13
	.byte 0x11
	.byte 0x01
	.byte 0x12
	.byte 0x01
	.2byte 0x0000
	.byte 0x13
	.byte 0x2e
	.byte 0x01
	.byte 0x3b
	.byte 0x0b
	.byte 0x3a
	.byte 0x0b
	.byte 0x27
	.byte 0x0c
	.byte 0x03
	.byte 0x0e
	.2byte 0x4087
	.byte 0x0e
	.byte 0x40
	.byte 0x0a
	.byte 0x11
	.byte 0x01
	.byte 0x12
	.byte 0x01
	.byte 0x3f
	.byte 0x0c
	.2byte 0x0000
	.byte 0x14
	.byte 0x05
	.byte 0x00
	.byte 0x3b
	.byte 0x05
	.byte 0x3a
	.byte 0x0b
	.byte 0x49
	.byte 0x13
	.byte 0x03
	.byte 0x08
	.2byte 0x0000
	.byte 0x15
	.byte 0x05
	.byte 0x00
	.byte 0x3b
	.byte 0x05
	.byte 0x3a
	.byte 0x0b
	.byte 0x49
	.byte 0x13
	.byte 0x03
	.byte 0x08
	.byte 0x02
	.byte 0x0a
	.2byte 0x0000
	.byte 0x16
	.byte 0x34
	.byte 0x00
	.byte 0x3b
	.byte 0x05
	.byte 0x3a
	.byte 0x0b
	.byte 0x03
	.byte 0x08
	.byte 0x49
	.byte 0x13
	.byte 0x02
	.byte 0x0a
	.2byte 0x0000
	.byte 0x17
	.byte 0x1d
	.byte 0x01
	.byte 0x11
	.byte 0x01
	.byte 0x12
	.byte 0x01
	.byte 0x31
	.byte 0x13
	.byte 0x59
	.byte 0x05
	.byte 0x57
	.byte 0x0b
	.byte 0x58
	.byte 0x0b
	.2byte 0x0000
	.byte 0x18
	.byte 0x34
	.byte 0x00
	.byte 0x3b
	.byte 0x05
	.byte 0x3a
	.byte 0x0b
	.byte 0x03
	.byte 0x08
	.byte 0x49
	.byte 0x13
	.2byte 0x0000
	.byte 0x19
	.byte 0x1d
	.byte 0x01
	.byte 0x55
	.byte 0x06
	.byte 0x52
	.byte 0x01
	.byte 0x31
	.byte 0x13
	.byte 0x59
	.byte 0x05
	.byte 0x57
	.byte 0x0b
	.byte 0x58
	.byte 0x0b
	.2byte 0x0000
	.byte 0x1a
	.byte 0x01
	.byte 0x01
	.byte 0x49
	.byte 0x13
	.byte 0x0b
	.byte 0x0b
	.2byte 0x0000
	.byte 0x1b
	.byte 0x21
	.byte 0x00
	.byte 0x2f
	.byte 0x0b
	.2byte 0x0000
	.byte 0x1c
	.byte 0x2e
	.byte 0x01
	.byte 0x3b
	.byte 0x05
	.byte 0x3a
	.byte 0x0b
	.byte 0x3c
	.byte 0x0c
	.byte 0x27
	.byte 0x0c
	.byte 0x03
	.byte 0x0e
	.2byte 0x4087
	.byte 0x0e
	.byte 0x3f
	.byte 0x0c
	.byte 0x20
	.byte 0x0b
	.2byte 0x0000
	.byte 0x1d
	.byte 0x2e
	.byte 0x01
	.byte 0x3b
	.byte 0x05
	.byte 0x3a
	.byte 0x0b
	.byte 0x31
	.byte 0x13
	.byte 0x40
	.byte 0x0a
	.byte 0x11
	.byte 0x01
	.byte 0x12
	.byte 0x01
	.2byte 0x0000
	.byte 0x1e
	.byte 0x2e
	.byte 0x01
	.byte 0x3b
	.byte 0x05
	.byte 0x3a
	.byte 0x0b
	.byte 0x31
	.byte 0x13
	.byte 0x11
	.byte 0x01
	.byte 0x12
	.byte 0x01
	.2byte 0x0000
	.byte 0x1f
	.byte 0x2e
	.byte 0x01
	.byte 0x3b
	.byte 0x05
	.byte 0x3a
	.byte 0x0b
	.byte 0x27
	.byte 0x0c
	.byte 0x03
	.byte 0x0e
	.2byte 0x4087
	.byte 0x0e
	.byte 0x40
	.byte 0x0a
	.byte 0x11
	.byte 0x01
	.byte 0x12
	.byte 0x01
	.byte 0x3f
	.byte 0x0c
	.2byte 0x0000
	.byte 0x20
	.byte 0x05
	.byte 0x00
	.byte 0x3b
	.byte 0x05
	.byte 0x3a
	.byte 0x0b
	.byte 0x49
	.byte 0x13
	.byte 0x03
	.byte 0x0e
	.byte 0x02
	.byte 0x0a
	.2byte 0x0000
	.byte 0x21
	.byte 0x05
	.byte 0x00
	.byte 0x3b
	.byte 0x05
	.byte 0x3a
	.byte 0x0b
	.byte 0x49
	.byte 0x13
	.byte 0x03
	.byte 0x0e
	.2byte 0x0000
	.byte 0x22
	.byte 0x34
	.byte 0x00
	.byte 0x3b
	.byte 0x05
	.byte 0x3a
	.byte 0x0b
	.byte 0x03
	.byte 0x0e
	.byte 0x49
	.byte 0x13
	.2byte 0x0000
	.byte 0x00
// -- Begin DWARF2 SEGMENT .debug_frame
	.section .debug_frame
.debug_frame_seg:
	.align 1
// -- Begin DWARF2 SEGMENT .debug_str
	.section .debug_str,"MS",@progbits,1
.debug_str_seg:
	.align 1
	.8byte 0x4d432f656d6f682f
	.8byte 0x656a6172702f5049
	.8byte 0x4d5449492f687365
	.8byte 0x732f32764d53452d
	.8byte 0x70346d6f6d2f6372
	.8byte 0x695f636578652f31
	.8byte 0x6172705f6c65746e
	.8byte 0x6f6d2f6873757974
	.8byte 0x756f635f3170346d
	.4byte 0x64656c70
	.byte 0x00
	.8byte 0x4d432f656d6f682f
	.8byte 0x656a6172702f5049
	.8byte 0x4d5449492f687365
	.8byte 0x732f32764d53452d
	.8byte 0x70346d6f6d2f6372
	.8byte 0x68732f6372732f31
	.8byte 0x736f6d2f64657261
	.8byte 0x646172672f636961
	.8byte 0x6c32635f746e6569
	.2byte 0x632e
	.byte 0x00
	.8byte 0x2952286c65746e49
	.8byte 0x6c65746e49204320
	.8byte 0x4320343620295228
	.8byte 0x2072656c69706d6f
	.8byte 0x6c70706120726f66
	.8byte 0x736e6f6974616369
	.8byte 0x676e696e6e757220
	.8byte 0x65746e49206e6f20
	.8byte 0x2c3436202952286c
	.8byte 0x6e6f697372655620
	.8byte 0x2e332e302e363120
	.8byte 0x6c69754220303132
	.8byte 0x3430363130322064
	.4byte 0x000a3531
	.8byte 0x2f656d6f682f492d
	.8byte 0x6172702f50494d43
	.8byte 0x49492f687365656a
	.8byte 0x32764d53452d4d54
	.8byte 0x6d6f6d2f6372732f
	.8byte 0x2f6372732f317034
	.8byte 0x6d2f646572616873
	.8byte 0x492d20636961736f
	.8byte 0x6172632f74706f2f
	.8byte 0x62696c2f65702f79
	.8byte 0x302e37312f696373
	.8byte 0x45544e492f312e39
	.8byte 0x782f302e36312f4c
	.8byte 0x6e692f34365f3638
	.8byte 0x492d206564756c63
	.8byte 0x6172632f74706f2f
	.8byte 0x74656e2f65702f79
	.8byte 0x2e342e342f666463
	.8byte 0x4e492f332e312e31
	.8byte 0x302e36312f4c4554
	.8byte 0x6564756c636e692f
	.8byte 0x2f74706f2f492d20
	.8byte 0x2f65702f79617263
	.8byte 0x2e362e372f74706d
	.8byte 0x706d2f696e672f33
	.8byte 0x65746e692d686369
	.8byte 0x692f302e36312f6c
	.8byte 0x2d206564756c636e
	.8byte 0x72632f74706f2f49
	.8byte 0x64682f65702f7961
	.8byte 0x2e30312e312f3566
	.8byte 0x45544e492f332e30
	.8byte 0x692f302e36312f4c
	.8byte 0x2d206564756c636e
	.8byte 0x72632f74706f2f49
	.8byte 0x322f6163722f7961
	.8byte 0x2e362d31312e322e
	.8byte 0x33315f302e342e30
	.8byte 0x643438675f5f322e
	.8byte 0x6972612e61373665
	.8byte 0x6564756c636e692f
	.8byte 0x2f74706f2f492d20
	.8byte 0x706c612f79617263
	.8byte 0x2d332e342e362f73
	.8byte 0x5f312e342e302e36
	.8byte 0x3239675f5f312e32
	.8byte 0x72612e3063663261
	.8byte 0x64756c636e692f69
	.8byte 0x74706f2f492d2065
	.8byte 0x70782f796172632f
	.8byte 0x2e322e322f6d656d
	.8byte 0x2e342e302e362d32
	.8byte 0x5f5f312e38315f31
	.8byte 0x3533353062333467
	.8byte 0x636e692f6972612e
	.8byte 0x2f492d206564756c
	.8byte 0x796172632f74706f
	.8byte 0x6165682d696e672f
	.8byte 0x302e352f73726564
	.8byte 0x2e302e362d31312e
	.8byte 0x5f322e375f302e34
	.8byte 0x383936333137675f
	.8byte 0x6e692f6972612e38
	.8byte 0x492d206564756c63
	.8byte 0x6172632f74706f2f
	.8byte 0x696d702f65702f79
	.8byte 0x2f32312e302e352f
	.8byte 0x206564756c636e69
	.8byte 0x632f74706f2f492d
	.8byte 0x696e67752f796172
	.8byte 0x2d34312e302e362f
	.8byte 0x5f302e342e302e36
	.8byte 0x65675f5f312e3431
	.8byte 0x612e326134626437
	.8byte 0x756c636e692f6972
	.8byte 0x706f2f492d206564
	.8byte 0x752f796172632f74
	.8byte 0x332e322f67657264
	.8byte 0x342e302e362d322e
	.8byte 0x5f322e32315f302e
	.8byte 0x653363396632675f
	.8byte 0x6e692f6972612e65
	.8byte 0x492d206564756c63
	.8byte 0x6172632f74706f2f
	.8byte 0x65645f6d6c772f79
	.8byte 0x322e312f74636574
	.8byte 0x342e302e362d312e
	.8byte 0x5f312e32325f302e
	.8byte 0x643361363264675f
	.8byte 0x6e692f6972612e63
	.8byte 0x492d206564756c63
	.8byte 0x6172632f74706f2f
	.8byte 0x322f6163726b2f79
	.8byte 0x302e362d322e322e
	.8byte 0x2e38315f312e342e
	.8byte 0x34313634675f5f33
	.8byte 0x2f6972612e336663
	.8byte 0x206564756c636e69
	.8byte 0x632f74706f2f492d
	.8byte 0x2d7373682d796172
	.8byte 0x2e382f6c65766564
	.8byte 0x6c636e692f302e30
	.8byte 0x4f43782d20656475
	.8byte 0x20325856412d4552
	.8byte 0x594152435f5f442d
	.8byte 0x435f5f442d204358
	.8byte 0x414f52425f594152
	.8byte 0x442d204c4c455744
	.8byte 0x5458594152435f5f
	.8byte 0x455455504d4f435f
	.8byte 0x545f58554e494c5f
	.8byte 0x442d205445475241
	.8byte 0x4374656e5f657375
	.8byte 0x7375442d20344644
	.8byte 0x49504d62696c5f65
	.8byte 0x4c42414e45442d20
	.8byte 0x442d2041444f5f45
	.8byte 0x4145434f5f455355
	.8byte 0x672d204347425f4e
	.8byte 0x61732d20334f2d20
	.8byte 0x73706d65742d6576
	.4byte 0x00632d20
	.8byte 0x6c32635f64617267
	.2byte 0x005f
	.4byte 0x6e6f6c6e
	.byte 0x00
	.4byte 0x74616c6e
	.byte 0x00
	.4byte 0x62756f64
	.2byte 0x656c
	.byte 0x00
	.4byte 0x61657261
	.byte 0x00
	.4byte 0x65676465
	.2byte 0x775f
	.byte 0x00
	.4byte 0x65676465
	.2byte 0x655f
	.byte 0x00
	.4byte 0x65676465
	.2byte 0x735f
	.byte 0x00
	.4byte 0x65676465
	.2byte 0x6e5f
	.byte 0x00
	.4byte 0x6e5f6e65
	.byte 0x00
	.4byte 0x655f6e65
	.byte 0x00
	.4byte 0x6e6f6c76
	.byte 0x00
	.4byte 0x74616c76
	.byte 0x00
	.4byte 0x64617267
	.2byte 0x785f
	.byte 0x00
	.4byte 0x64617267
	.2byte 0x795f
	.byte 0x00
	.8byte 0x5f747365775f6e6f
	.4byte 0x65676465
	.byte 0x00
	.8byte 0x5f747361655f6e6f
	.4byte 0x65676465
	.byte 0x00
	.8byte 0x6874756f735f6e6f
	.4byte 0x6764655f
	.2byte 0x0065
	.8byte 0x6874726f6e5f6e6f
	.4byte 0x6764655f
	.2byte 0x0065
	.8byte 0x6c32635f64617267
	.byte 0x00
	.8byte 0x64656e6769736e75
	.4byte 0x6e6f6c20
	.2byte 0x0067
	.4byte 0x64696f76
	.byte 0x00
	.4byte 0x64617267
	.2byte 0x0033
	.8byte 0x3264726f5f623261
	.byte 0x00
	.4byte 0x74756f71
	.byte 0x00
	.4byte 0x61747369
	.2byte 0x7472
	.byte 0x00
	.4byte 0x646e6569
	.byte 0x00
	.4byte 0x6174736a
	.2byte 0x7472
	.byte 0x00
	.4byte 0x646e656a
	.byte 0x00
	.8byte 0x656764655f746567
	.byte 0x00
	.4byte 0x746e6f6c
	.byte 0x00
	.4byte 0x7474616c
	.byte 0x00
	.4byte 0x636e6f6c
	.byte 0x00
	.4byte 0x6374616c
	.byte 0x00
	.8byte 0x735f74705f64696d
	.4byte 0x72656870
	.2byte 0x0065
	.8byte 0x5f3374705f64696d
	.4byte 0x74726163
	.byte 0x00
	.8byte 0x6c32635f636c6163
	.8byte 0x6e695f646972675f
	.4byte 0x005f6f66
	.4byte 0x705f786e
	.2byte 0x0074
	.4byte 0x705f796e
	.2byte 0x0074
	.8byte 0x6c32635f636c6163
	.8byte 0x6e695f646972675f
	.2byte 0x6f66
	.byte 0x00
	.4byte 0x745f7478
	.2byte 0x706d
	.byte 0x00
	.4byte 0x745f7479
	.2byte 0x706d
	.byte 0x00
// -- Begin DWARF2 SEGMENT .eh_frame
	.section .eh_frame,"a",@progbits
.eh_frame_seg:
	.align 8
// -- Begin DWARF2 SEGMENT .debug_ranges
	.section .debug_ranges
.debug_ranges_seg:
	.align 1
	.8byte ..LN10
	.8byte ..LN13
	.8byte ..LN14
	.8byte ..LN22
	.8byte ..LN24
	.8byte ..LN58
	.8byte ..LN60
	.8byte ..LN61
	.8byte ..LN63
	.8byte ..LN1830
	.8byte ..LN1831
	.8byte ..LN2158
	.8byte ..LN2159
	.8byte ..LN2341
	.8byte ..LN2344
	.8byte ..LNgrad_c2l_.2743
	.8byte 0x0000000000000000
	.8byte 0x0000000000000000
	.8byte ..LN60
	.8byte ..LN61
	.8byte ..LN64
	.8byte ..LN65
	.8byte ..LN66
	.8byte ..LN67
	.8byte ..LN71
	.8byte ..LN1830
	.8byte ..LN1831
	.8byte ..LN1967
	.8byte ..LN2611
	.8byte ..LNgrad_c2l_.2743
	.8byte 0x0000000000000000
	.8byte 0x0000000000000000
	.8byte ..LN2804
	.8byte ..LN2805
	.8byte ..LN2808
	.8byte ..LN2809
	.8byte ..LN2810
	.8byte ..LN2811
	.8byte ..LN2815
	.8byte ..LN4574
	.8byte ..LN4575
	.8byte ..LN4711
	.8byte ..LN5355
	.8byte ..LNgrad_c2l.5487
	.8byte 0x0000000000000000
	.8byte 0x0000000000000000
	.8byte ..LN8360
	.8byte ..LN8361
	.8byte ..LN8362
	.8byte ..LN8363
	.8byte ..LN8364
	.8byte ..LN8365
	.8byte ..LN8366
	.8byte ..LN8367
	.8byte ..LN8368
	.8byte ..LN8369
	.8byte ..LN8370
	.8byte ..LN8371
	.8byte ..LN8374
	.8byte ..LN8408
	.8byte 0x0000000000000000
	.8byte 0x0000000000000000
	.8byte ..LN8524
	.8byte ..LN8525
	.8byte ..LN8526
	.8byte ..LN8527
	.8byte ..LN8528
	.8byte ..LN8529
	.8byte ..LN8530
	.8byte ..LN8531
	.8byte ..LN8532
	.8byte ..LN8533
	.8byte ..LN8534
	.8byte ..LN8535
	.8byte ..LN8538
	.8byte ..LN8572
	.8byte 0x0000000000000000
	.8byte 0x0000000000000000
	.8byte ..LN8681
	.8byte ..LN8682
	.8byte ..LN8683
	.8byte ..LN8684
	.8byte ..LN8685
	.8byte ..LN8686
	.8byte ..LN8687
	.8byte ..LN8688
	.8byte ..LN8699
	.8byte ..LN8735
	.8byte 0x0000000000000000
	.8byte 0x0000000000000000
	.8byte ..LN8828
	.8byte ..LN8829
	.8byte ..LN8830
	.8byte ..LN8831
	.8byte ..LN8832
	.8byte ..LN8833
	.8byte ..LN8834
	.8byte ..LN8835
	.8byte ..LN8836
	.8byte ..LN8837
	.8byte ..LN8847
	.8byte ..LN8882
	.8byte 0x0000000000000000
	.8byte 0x0000000000000000
	.8byte ..LN8994
	.8byte ..LN8995
	.8byte ..LN9000
	.8byte ..LN9010
	.8byte 0x0000000000000000
	.8byte 0x0000000000000000
	.8byte ..LN9056
	.8byte ..LN9059
	.8byte ..LN9060
	.8byte ..LN9061
	.8byte ..LN9062
	.8byte ..LN9065
	.8byte ..LN9067
	.8byte ..LN9073
	.8byte ..LN9081
	.8byte ..LN9144
	.8byte ..LN9145
	.8byte ..LN9219
	.8byte ..LN9220
	.8byte ..LN9412
	.8byte ..LN9413
	.8byte ..LN9534
	.8byte ..LN9537
	.8byte ..LN9538
	.8byte ..LN9539
	.8byte ..LN10532
	.8byte ..LN10542
	.8byte ..LNcalc_c2l_grid_info_.10691
	.8byte 0x0000000000000000
	.8byte 0x0000000000000000
	.8byte ..LN9063
	.8byte ..LN9064
	.8byte ..LN9069
	.8byte ..LN9070
	.8byte ..LN9546
	.8byte ..LN10517
	.8byte ..LN10648
	.8byte ..LN10657
	.8byte ..LN10679
	.8byte ..LN10682
	.8byte 0x0000000000000000
	.8byte 0x0000000000000000
	.8byte ..LN9934
	.8byte ..LN9935
	.8byte ..LN9936
	.8byte ..LN9937
	.8byte ..LN9938
	.8byte ..LN9939
	.8byte ..LN9940
	.8byte ..LN9941
	.8byte ..LN9942
	.8byte ..LN9943
	.8byte ..LN9944
	.8byte ..LN9945
	.8byte ..LN9948
	.8byte ..LN9982
	.8byte 0x0000000000000000
	.8byte 0x0000000000000000
	.8byte ..LN10098
	.8byte ..LN10099
	.8byte ..LN10100
	.8byte ..LN10101
	.8byte ..LN10102
	.8byte ..LN10103
	.8byte ..LN10104
	.8byte ..LN10105
	.8byte ..LN10106
	.8byte ..LN10107
	.8byte ..LN10108
	.8byte ..LN10109
	.8byte ..LN10112
	.8byte ..LN10146
	.8byte 0x0000000000000000
	.8byte 0x0000000000000000
	.8byte ..LN10254
	.8byte ..LN10255
	.8byte ..LN10256
	.8byte ..LN10257
	.8byte ..LN10258
	.8byte ..LN10259
	.8byte ..LN10260
	.8byte ..LN10261
	.8byte ..LN10273
	.8byte ..LN10309
	.8byte 0x0000000000000000
	.8byte 0x0000000000000000
	.8byte ..LN10402
	.8byte ..LN10403
	.8byte ..LN10404
	.8byte ..LN10405
	.8byte ..LN10406
	.8byte ..LN10407
	.8byte ..LN10408
	.8byte ..LN10409
	.8byte ..LN10416
	.8byte ..LN10417
	.8byte ..LN10418
	.8byte ..LN10419
	.8byte ..LN10420
	.8byte ..LN10454
	.8byte 0x0000000000000000
	.8byte 0x0000000000000000
	.8byte ..LN10708
	.8byte ..LN10709
	.8byte ..LN10714
	.8byte ..LN10715
	.8byte ..LN11191
	.8byte ..LN12162
	.8byte ..LN12293
	.8byte ..LN12302
	.8byte ..LN12324
	.8byte ..LN12327
	.8byte 0x0000000000000000
	.8byte 0x0000000000000000
	.8byte ..LN11579
	.8byte ..LN11580
	.8byte ..LN11581
	.8byte ..LN11582
	.8byte ..LN11583
	.8byte ..LN11584
	.8byte ..LN11585
	.8byte ..LN11586
	.8byte ..LN11587
	.8byte ..LN11588
	.8byte ..LN11589
	.8byte ..LN11590
	.8byte ..LN11593
	.8byte ..LN11627
	.8byte 0x0000000000000000
	.8byte 0x0000000000000000
	.8byte ..LN11743
	.8byte ..LN11744
	.8byte ..LN11745
	.8byte ..LN11746
	.8byte ..LN11747
	.8byte ..LN11748
	.8byte ..LN11749
	.8byte ..LN11750
	.8byte ..LN11751
	.8byte ..LN11752
	.8byte ..LN11753
	.8byte ..LN11754
	.8byte ..LN11757
	.8byte ..LN11791
	.8byte 0x0000000000000000
	.8byte 0x0000000000000000
	.8byte ..LN11899
	.8byte ..LN11900
	.8byte ..LN11901
	.8byte ..LN11902
	.8byte ..LN11903
	.8byte ..LN11904
	.8byte ..LN11905
	.8byte ..LN11906
	.8byte ..LN11918
	.8byte ..LN11954
	.8byte 0x0000000000000000
	.8byte 0x0000000000000000
	.8byte ..LN12047
	.8byte ..LN12048
	.8byte ..LN12049
	.8byte ..LN12050
	.8byte ..LN12051
	.8byte ..LN12052
	.8byte ..LN12053
	.8byte ..LN12054
	.8byte ..LN12061
	.8byte ..LN12062
	.8byte ..LN12063
	.8byte ..LN12064
	.8byte ..LN12065
	.8byte ..LN12099
	.8byte 0x0000000000000000
	.8byte 0x0000000000000000
	.8byte ..LN0
	.8byte ..LNcalc_c2l_grid_info.12336
	.8byte 0x0000000000000000
	.8byte 0x0000000000000000
	.section .text
.LNDBG_TXe:
# End
